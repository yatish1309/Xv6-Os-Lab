Binary files g44/bio.o and xv6-public/bio.o differ
Binary files g44/bootasm.o and xv6-public/bootasm.o differ
Binary files g44/bootblock.o and xv6-public/bootblock.o differ
Binary files g44/bootblockother.o and xv6-public/bootblockother.o differ
Binary files g44/bootmain.o and xv6-public/bootmain.o differ
Binary files g44/_cat and xv6-public/_cat differ
diff -ruN g44/cat.asm xv6-public/cat.asm
--- g44/cat.asm	2021-09-15 23:29:31.151059589 +0530
+++ xv6-public/cat.asm	2021-08-30 22:38:24.060762716 +0530
@@ -672,13 +672,10 @@
  40b:	b8 0e 00 00 00       	mov    $0xe,%eax
  410:	cd 40                	int    $0x40
  412:	c3                   	ret    
-
-00000413 <history>:
-//marco
-SYSCALL(history)
- 413:	b8 16 00 00 00       	mov    $0x16,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret    
+ 413:	66 90                	xchg   %ax,%ax
+ 415:	66 90                	xchg   %ax,%ax
+ 417:	66 90                	xchg   %ax,%ax
+ 419:	66 90                	xchg   %ax,%ax
  41b:	66 90                	xchg   %ax,%ax
  41d:	66 90                	xchg   %ax,%ax
  41f:	90                   	nop
Binary files g44/cat.o and xv6-public/cat.o differ
diff -ruN g44/cat.sym xv6-public/cat.sym
--- g44/cat.sym	2021-09-15 23:29:31.159059602 +0530
+++ xv6-public/cat.sym	2021-08-30 22:38:24.064762725 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000420 printint
-00000878 digits.1088
+00000878 digits.1085
 00000000 umalloc.c
 00000b60 freep
 00000b64 base
@@ -29,7 +29,6 @@
 00000403 sleep
 00000383 pipe
 00000393 write
-00000413 history
 000003cb fstat
 000003a3 kill
 000003e3 chdir
diff -ruN g44/console.c xv6-public/console.c
--- g44/console.c	2021-09-15 22:23:59.000000000 +0530
+++ xv6-public/console.c	2021-08-20 21:48:44.747471291 +0530
@@ -1,4 +1,3 @@
-
 // Console input and output.
 // Input is from the keyboard or serial port.
 // Output is written to the screen and serial port.
@@ -126,10 +125,6 @@
 
 //PAGEBREAK: 50
 #define BACKSPACE 0x100
-#define UPARROW 226
-#define DOWNARROW 227
-#define LEFTARROW 228
-#define RIGHTARROW 229
 #define CRTPORT 0x3d4
 static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memory
 
@@ -148,37 +143,25 @@
     pos += 80 - pos%80;
   else if(c == BACKSPACE){
     if(pos > 0) --pos;
-  }
-  // right arrow
-  else if (c == LEFTARROW)
-  {
-    if(pos>0)
-    --pos;
-  }
-  else 
-  {
-    crt[pos++] = (c & 0xff) | 0x0f00; // black on white
-  }
-  if (pos < 0 || pos > 25 * 80)
+  } else
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+
+  if(pos < 0 || pos > 25*80)
     panic("pos under/overflow");
 
-  if ((pos / 80) >= 24)
-  { // Scroll up.
-    memmove(crt, crt+80, sizeof(crt[0]) * 23 * 80);
+  if((pos/80) >= 24){  // Scroll up.
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
     pos -= 80;
-    memset(crt+pos, 0, sizeof(crt[0]) * (24 * 80 - pos));
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
   }
 
   outb(CRTPORT, 14);
   outb(CRTPORT+1, pos>>8);
   outb(CRTPORT, 15);
   outb(CRTPORT+1, pos);
-  if (c == BACKSPACE)
   crt[pos] = ' ' | 0x0700;
-  // done:;
 }
 
-
 void
 consputc(int c)
 {
@@ -189,194 +172,27 @@
   }
 
   if(c == BACKSPACE){
-    // uartputc prints to Linux's terminal
     uartputc('\b'); uartputc(' '); uartputc('\b');
-  }
-  else if( c== LEFTARROW){
-    uartputc('\b');
-  }
-  else
+  } else
     uartputc(c);
-  // cgaputc prints to QEMU's terminal
   cgaputc(c);
 }
 
 #define INPUT_BUF 128
 struct {
   char buf[INPUT_BUF];
-  uint r;  // Read index, exec will start reading the command from here
-  uint w;  // Write index, exec will finish reading the command here
-  uint e;  // Edit index, current caret position
-  uint rightmost; // the first empty char in the line
+  uint r;  // Read index
+  uint w;  // Write index
+  uint e;  // Edit index
 } input;
 
-char charsToBeMoved[INPUT_BUF];  // temporary storage for input.buf in a certain context
-
-/*
-  this struct will hold the history buffer array
-*/
-#define MAX_HISTORY 16
-struct {
-  char bufferArr[MAX_HISTORY][INPUT_BUF]; //holds the actual command strings -
-  uint lengthsArr[MAX_HISTORY]; // this will hold the length of each command string
-  uint lastCommandIndex;  //the index of the last command entered to history
-  int numOfCommmandsInMem; //number of history commands in mem
-  int currentHistory;//this will hold the current history view (the oldest will be MAX_HISTORY-1)
-} historyBufferArray;
-
-char oldBuf[INPUT_BUF];// this will hold the details of the command that was written before accessing the history
-uint lengthOfOldBuf;
-
-char buf2[INPUT_BUF];
-
 #define C(x)  ((x)-'@')  // Control-x
 
-/*
-Copy input.buf to a safe location. Used only when punching in new keys and the
-caret isn't at the end of the line.
-*/
-void copyCharsToBeMoved() {
-  uint n = input.rightmost - input.r;
-  uint i;
-  for (i = 0; i < n; i++)
-    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
-}
-
-/*
-Shift input.buf one byte to the right, and repaint the chars on-screen. Used
-Used only when punching in new keys and the caret isn't at the end of the line.
-*/
-void shiftbufright() {
-  uint n = input.rightmost - input.e;
-  int i;
-  for (i = 0; i < n; i++) {
-
-    char c = charsToBeMoved[i];
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-    consputc(c);
-  }
-  // reset charsToBeMoved for future use
-  memset(charsToBeMoved, '\0', INPUT_BUF);
-  // return the caret to its correct position
-  for (i = 0; i < n; i++) {
-    consputc(LEFTARROW);
-  }
-}
-
-/*
-Shift input.buf one byte to the left, and repaint the chars on-screen. Used
-Used only when punching in BACKSPACE and the caret isn't at the end of the line.
-*/
-void shiftbufleft() {
-  uint n = input.rightmost - input.e;
-  uint i;
-  consputc(LEFTARROW);
-  input.e--;
-  for (i = 0; i < n; i++) {
-    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-    consputc(c);
-  }
-  input.rightmost--;
-  consputc(' '); // delete the last char in line
-  for (i = 0; i <= n; i++) {
-    consputc(LEFTARROW); // shift the caret back to the left
-  }
-}
-void
-earaseCurrentLineOnScreen(void){
-    uint numToEarase = input.rightmost - input.r;
-    uint i;
-    for (i = 0; i < numToEarase; i++) {
-      consputc(BACKSPACE);
-    }
-}
-
-/*
-  this method copies the chars currently on display (and on Input.buf) to oldBuf and save its length on current_history_viewed.lengthOld
-*/
-void
-copyCharsToBeMovedToOldBuf(void){
-    lengthOfOldBuf = input.rightmost - input.r;
-    uint i;
-    for (i = 0; i < lengthOfOldBuf; i++) {
-        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
-    }
-
-}
-
-/*
-  this method earase all the content of the current command on the inputbuf
-*/
-void
-earaseContentOnInputBuf(){
-  input.rightmost = input.r;
-  input.e = input.r;
-}
-
-/*
-  this method will print the given buf on the screen
-*/
-void
-copyBufferToScreen(char * bufToPrintOnScreen, uint length){
-  uint i;
-  for (i = 0; i < length; i++) {
-    consputc(bufToPrintOnScreen[i]);
-  }
-}
-
-/*
-  this method will copy the given buf to Input.buf
-  will set the input.e and input.rightmost
-  assumes input.r=input.w=input.rightmost=input.e
-*/
-void
-copyBufferToInputBuf(char * bufToSaveInInput, uint length){
-  uint i;
-  for (i = 0; i < length; i++) {
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-  }
-  input.e = input.r+length;
-  input.rightmost = input.e;
-}
-/*
-  this method copies the current command in the input.buf to the saved history
-  @param length - length of command to be saved
-*/
-void
-saveCommandInHistory(){
-  historyBufferArray.currentHistory= -1;//reseting the users history current viewed
-  uint l = input.rightmost-input.r -1;
-  uint j;
-  if(historyBufferArray.numOfCommmandsInMem > 0)
-  {
-    int prev=(historyBufferArray.lastCommandIndex) % MAX_HISTORY;
-    if(historyBufferArray.lengthsArr[prev]==l)
-    {
-      uint i;
-      for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
-        if( historyBufferArray.bufferArr[prev][i] !=  input.buf[(input.r+i)%INPUT_BUF])
-          break;
-      }
-      if(i==l)
-        goto done;
-    }
-  }
-  if (historyBufferArray.numOfCommmandsInMem < MAX_HISTORY)
-    historyBufferArray.numOfCommmandsInMem++; //when we get to MAX_HISTORY commands in memory we keep on inserting to the array in a circular mution
-  historyBufferArray.lastCommandIndex = (historyBufferArray.lastCommandIndex - 1)%MAX_HISTORY;
-  historyBufferArray.lengthsArr[historyBufferArray.lastCommandIndex] = l;
-  
-  for (j = 0; j < l; j++) { //do not want to save in memory the last char '/n'
-    historyBufferArray.bufferArr[historyBufferArray.lastCommandIndex][j] =  input.buf[(input.r+j)%INPUT_BUF];
-  }
-  done:;
-}
 void
 consoleintr(int (*getc)(void))
 {
   int c, doprocdump = 0;
-  uint tempIndex;
+
   acquire(&cons.lock);
   while((c = getc()) >= 0){
     switch(c){
@@ -385,123 +201,28 @@
       doprocdump = 1;
       break;
     case C('U'):  // Kill line.
-      if (input.rightmost > input.e) { // caret isn't at the end of the line
-          uint numtoshift = input.rightmost - input.e;
-          uint placestoshift = input.e - input.w;
-          uint i;
-          for (i = 0; i < placestoshift; i++) {
-            consputc(LEFTARROW);
-          }
-          memset(buf2, '\0', INPUT_BUF);
-          for (i = 0; i < numtoshift; i++) {
-            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
-          }
-          for (i = 0; i < numtoshift; i++) {
-            input.buf[(input.w + i) % INPUT_BUF] = buf2[i];
-          }
-          input.e -= placestoshift;
-          input.rightmost -= placestoshift;
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-            consputc(input.buf[(input.e + i) % INPUT_BUF]);
-          }
-          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
-            consputc(' ');
-          }
-          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
-            consputc(LEFTARROW);
-          }
-        }
-        else {
-          while(input.e != input.w &&
-                input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-            input.e--;
-            consputc(BACKSPACE);
-          }
-        }
+      while(input.e != input.w &&
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+        input.e--;
+        consputc(BACKSPACE);
+      }
       break;
     case C('H'): case '\x7f':  // Backspace
-      if (input.rightmost != input.e && input.e != input.w) { // caret isn't at the end of the line
-          shiftbufleft();
-          break;
-        }
-        if(input.e != input.w){ // caret is at the end of the line - deleting last char
-          input.e--;
-          input.rightmost--;
-          consputc(BACKSPACE);
-        }
-      break;
-    case LEFTARROW:
-        if (input.e != input.r) {
-          input.e--;
-          consputc(c);
-        }
-        break;
-      case RIGHTARROW:
-        if (input.e < input.rightmost) {
-          consputc(input.buf[input.e % INPUT_BUF]);
-          input.e++;
-        }
-        else if (input.e == input.rightmost){
-          consputc(' ');
-          consputc(LEFTARROW);
-        }
-        break;
-    case UPARROW:
-       if (historyBufferArray.currentHistory < historyBufferArray.numOfCommmandsInMem-1 ){ // current history means the oldest possible will be MAX_HISTORY-1
-          earaseCurrentLineOnScreen();
-          if (historyBufferArray.currentHistory == -1)
-              copyCharsToBeMovedToOldBuf();
-          earaseContentOnInputBuf();
-          historyBufferArray.currentHistory++;
-          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory) %MAX_HISTORY;
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-          copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-        }
-        break;
-    case DOWNARROW:
-      switch(historyBufferArray.currentHistory){
-        case -1:
-          //does nothing
-          break;
-        case 0: //get string from old buf
-          earaseCurrentLineOnScreen();
-          copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
-          copyBufferToScreen(oldBuf, lengthOfOldBuf);
-          historyBufferArray.currentHistory--;
-          break;
-        default:
-          earaseCurrentLineOnScreen();
-          historyBufferArray.currentHistory--;
-          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory)%MAX_HISTORY;
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-          copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-          break;
+      if(input.e != input.w){
+        input.e--;
+        consputc(BACKSPACE);
       }
       break;
-    case '\n':
-      case '\r':
-          input.e = input.rightmost;
     default:
       if(c != 0 && input.e-input.r < INPUT_BUF){
-          c = (c == '\r') ? '\n' : c;
-          if (input.rightmost > input.e) { // caret isn't at the end of the line
-            copyCharsToBeMoved();
-            input.buf[input.e++ % INPUT_BUF] = c;
-            input.rightmost++;
-            consputc(c);
-            shiftbufright();
-          }
-          else {
-            input.buf[input.e++ % INPUT_BUF] = c;
-            input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
-            consputc(c);
-          }
-          if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
-            saveCommandInHistory();
-            input.w = input.rightmost;
-            wakeup(&input.r);
-          }
+        c = (c == '\r') ? '\n' : c;
+        input.buf[input.e++ % INPUT_BUF] = c;
+        consputc(c);
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+          input.w = input.e;
+          wakeup(&input.r);
         }
+      }
       break;
     }
   }
@@ -511,21 +232,6 @@
   }
 }
 
-
-
-/*
-  this is the function that gets called by the sys_history and writes the requested command history in the buffer
-*/
-int history(char *buffer, int historyId) {
-  if (historyId < 0 || historyId > MAX_HISTORY - 1)
-    return 2;
-  if (historyId >= historyBufferArray.numOfCommmandsInMem )
-    return 1;
-  memset(buffer, '\0', INPUT_BUF);
-  int tempIndex = (historyBufferArray.lastCommandIndex + historyId) % MAX_HISTORY;
-  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
-  return 0;
-}
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -587,11 +293,7 @@
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
   cons.locking = 1;
+
   ioapicenable(IRQ_KBD, 0);
-  //initializing historyBuffer
-  historyBufferArray.numOfCommmandsInMem=0;
-  historyBufferArray.lastCommandIndex=0;
 }
 
-
-
diff -ruN g44/console.h xv6-public/console.h
--- g44/console.h	2021-09-15 23:01:23.000000000 +0530
+++ xv6-public/console.h	1970-01-01 05:30:00.000000000 +0530
@@ -1,3 +0,0 @@
-#include "types.h"
-
-int history(char* buffer,int history_id);
\ No newline at end of file
Binary files g44/console.o and xv6-public/console.o differ
Binary files g44/_Drawtest and xv6-public/_Drawtest differ
Binary files g44/_echo and xv6-public/_echo differ
diff -ruN g44/echo.asm xv6-public/echo.asm
--- g44/echo.asm	2021-09-15 23:29:31.231059715 +0530
+++ xv6-public/echo.asm	2021-08-30 22:38:24.124762859 +0530
@@ -591,13 +591,10 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
-
-00000383 <history>:
-//marco
-SYSCALL(history)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
+ 383:	66 90                	xchg   %ax,%ax
+ 385:	66 90                	xchg   %ax,%ax
+ 387:	66 90                	xchg   %ax,%ax
+ 389:	66 90                	xchg   %ax,%ax
  38b:	66 90                	xchg   %ax,%ax
  38d:	66 90                	xchg   %ax,%ax
  38f:	90                   	nop
Binary files g44/echo.o and xv6-public/echo.o differ
diff -ruN g44/echo.sym xv6-public/echo.sym
--- g44/echo.sym	2021-09-15 23:29:31.239059728 +0530
+++ xv6-public/echo.sym	2021-08-30 22:38:24.128762868 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007b8 digits.1088
+000007b8 digits.1085
 00000000 umalloc.c
 00000a68 freep
 00000a6c base
@@ -28,7 +28,6 @@
 00000373 sleep
 000002f3 pipe
 00000303 write
-00000383 history
 0000033b fstat
 00000313 kill
 00000353 chdir
Binary files g44/entry.o and xv6-public/entry.o differ
Binary files g44/entryother.o and xv6-public/entryother.o differ
Binary files g44/exec.o and xv6-public/exec.o differ
Binary files g44/file.o and xv6-public/file.o differ
Binary files g44/_forktest and xv6-public/_forktest differ
diff -ruN g44/forktest.asm xv6-public/forktest.asm
--- g44/forktest.asm	2021-09-15 23:29:31.295059817 +0530
+++ xv6-public/forktest.asm	2021-08-30 22:38:24.184762992 +0530
@@ -60,11 +60,11 @@
 {
   5a:	83 ec 10             	sub    $0x10,%esp
   write(fd, s, strlen(s));
-  5d:	68 5c 04 00 00       	push   $0x45c
+  5d:	68 54 04 00 00       	push   $0x454
   62:	e8 69 01 00 00       	call   1d0 <strlen>
   67:	83 c4 0c             	add    $0xc,%esp
   6a:	50                   	push   %eax
-  6b:	68 5c 04 00 00       	push   $0x45c
+  6b:	68 54 04 00 00       	push   $0x454
   70:	6a 01                	push   $0x1
   72:	e8 5c 03 00 00       	call   3d3 <write>
   77:	83 c4 10             	add    $0x10,%esp
@@ -98,11 +98,11 @@
   b6:	75 49                	jne    101 <forktest+0xb1>
   write(fd, s, strlen(s));
   b8:	83 ec 0c             	sub    $0xc,%esp
-  bb:	68 8e 04 00 00       	push   $0x48e
+  bb:	68 86 04 00 00       	push   $0x486
   c0:	e8 0b 01 00 00       	call   1d0 <strlen>
   c5:	83 c4 0c             	add    $0xc,%esp
   c8:	50                   	push   %eax
-  c9:	68 8e 04 00 00       	push   $0x48e
+  c9:	68 86 04 00 00       	push   $0x486
   ce:	6a 01                	push   $0x1
   d0:	e8 fe 02 00 00       	call   3d3 <write>
 }
@@ -113,33 +113,33 @@
   da:	e8 d4 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
   df:	83 ec 0c             	sub    $0xc,%esp
-  e2:	68 67 04 00 00       	push   $0x467
+  e2:	68 5f 04 00 00       	push   $0x45f
   e7:	e8 e4 00 00 00       	call   1d0 <strlen>
   ec:	83 c4 0c             	add    $0xc,%esp
   ef:	50                   	push   %eax
-  f0:	68 67 04 00 00       	push   $0x467
+  f0:	68 5f 04 00 00       	push   $0x45f
   f5:	6a 01                	push   $0x1
   f7:	e8 d7 02 00 00       	call   3d3 <write>
       exit();
   fc:	e8 b2 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  101:	83 ec 0c             	sub    $0xc,%esp
- 104:	68 7b 04 00 00       	push   $0x47b
+ 104:	68 73 04 00 00       	push   $0x473
  109:	e8 c2 00 00 00       	call   1d0 <strlen>
  10e:	83 c4 0c             	add    $0xc,%esp
  111:	50                   	push   %eax
- 112:	68 7b 04 00 00       	push   $0x47b
+ 112:	68 73 04 00 00       	push   $0x473
  117:	6a 01                	push   $0x1
  119:	e8 b5 02 00 00       	call   3d3 <write>
     exit();
  11e:	e8 90 02 00 00       	call   3b3 <exit>
   write(fd, s, strlen(s));
  123:	83 ec 0c             	sub    $0xc,%esp
- 126:	68 9c 04 00 00       	push   $0x49c
+ 126:	68 94 04 00 00       	push   $0x494
  12b:	e8 a0 00 00 00       	call   1d0 <strlen>
  130:	83 c4 0c             	add    $0xc,%esp
  133:	50                   	push   %eax
- 134:	68 9c 04 00 00       	push   $0x49c
+ 134:	68 94 04 00 00       	push   $0x494
  139:	6a 01                	push   $0x1
  13b:	e8 93 02 00 00       	call   3d3 <write>
     exit();
@@ -677,10 +677,3 @@
  44b:	b8 0e 00 00 00       	mov    $0xe,%eax
  450:	cd 40                	int    $0x40
  452:	c3                   	ret    
-
-00000453 <history>:
-//marco
-SYSCALL(history)
- 453:	b8 16 00 00 00       	mov    $0x16,%eax
- 458:	cd 40                	int    $0x40
- 45a:	c3                   	ret    
Binary files g44/forktest.o and xv6-public/forktest.o differ
Binary files g44/fs.img and xv6-public/fs.img differ
Binary files g44/fs.o and xv6-public/fs.o differ
diff -ruN g44/.git/hooks/fsmonitor-watchman.sample xv6-public/.git/hooks/fsmonitor-watchman.sample
--- g44/.git/hooks/fsmonitor-watchman.sample	2021-08-20 21:12:24.000000000 +0530
+++ xv6-public/.git/hooks/fsmonitor-watchman.sample	2021-08-20 21:48:41.179466952 +0530
@@ -22,7 +22,8 @@
 
 if ($version == 1) {
 	# convert nanoseconds to seconds
-	$time = int $time / 1000000000;
+	# subtract one second to make sure watchman will return all changes
+	$time = int ($time / 1000000000) - 1;
 } else {
 	die "Unsupported query-fsmonitor hook version '$version'.\n" .
 	    "Falling back to scanning...\n";
@@ -53,18 +54,12 @@
 	#
 	# To accomplish this, we're using the "since" generator to use the
 	# recency index to select candidate nodes and "fields" to limit the
-	# output to file names only. Then we're using the "expression" term to
-	# further constrain the results.
-	#
-	# The category of transient files that we want to ignore will have a
-	# creation clock (cclock) newer than $time_t value and will also not
-	# currently exist.
+	# output to file names only.
 
 	my $query = <<"	END";
 		["query", "$git_work_tree", {
 			"since": $time,
-			"fields": ["name"],
-			"expression": ["not", ["allof", ["since", $time, "cclock"], ["not", "exists"]]]
+			"fields": ["name"]
 		}]
 	END
 
diff -ruN g44/.git/hooks/pre-commit.sample xv6-public/.git/hooks/pre-commit.sample
--- g44/.git/hooks/pre-commit.sample	2021-08-20 21:12:24.000000000 +0530
+++ xv6-public/.git/hooks/pre-commit.sample	2021-08-20 21:48:41.179466952 +0530
@@ -12,7 +12,7 @@
 	against=HEAD
 else
 	# Initial commit: diff against an empty tree object
-	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
+	against=$(git hash-object -t tree /dev/null)
 fi
 
 # If you want to allow non-ASCII filenames set this variable to true.
diff -ruN g44/.git/hooks/pre-merge-commit.sample xv6-public/.git/hooks/pre-merge-commit.sample
--- g44/.git/hooks/pre-merge-commit.sample	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public/.git/hooks/pre-merge-commit.sample	2021-08-20 21:48:41.179466952 +0530
@@ -0,0 +1,13 @@
+#!/bin/sh
+#
+# An example hook script to verify what is about to be committed.
+# Called by "git merge" with no arguments.  The hook should
+# exit with non-zero status after issuing an appropriate message to
+# stderr if it wants to stop the merge commit.
+#
+# To enable this hook, rename this file to "pre-merge-commit".
+
+. git-sh-setup
+test -x "$GIT_DIR/hooks/pre-commit" &&
+        exec "$GIT_DIR/hooks/pre-commit"
+:
Binary files g44/.git/index and xv6-public/.git/index differ
diff -ruN g44/.git/logs/HEAD xv6-public/.git/logs/HEAD
--- g44/.git/logs/HEAD	2021-08-20 21:14:52.000000000 +0530
+++ xv6-public/.git/logs/HEAD	2021-08-20 21:48:44.743471286 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 skarthik21 <karthiksankranthi2156@gmail.com> 1629474292 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 yatish ram kumar <ram@ram-VirtualBox.(none)> 1629476324 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN g44/.git/logs/refs/heads/master xv6-public/.git/logs/refs/heads/master
--- g44/.git/logs/refs/heads/master	2021-08-20 21:14:52.000000000 +0530
+++ xv6-public/.git/logs/refs/heads/master	2021-08-20 21:48:44.743471286 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 skarthik21 <karthiksankranthi2156@gmail.com> 1629474292 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 yatish ram kumar <ram@ram-VirtualBox.(none)> 1629476324 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
diff -ruN g44/.git/logs/refs/remotes/origin/HEAD xv6-public/.git/logs/refs/remotes/origin/HEAD
--- g44/.git/logs/refs/remotes/origin/HEAD	2021-08-20 21:14:52.000000000 +0530
+++ xv6-public/.git/logs/refs/remotes/origin/HEAD	2021-08-20 21:48:44.743471286 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 skarthik21 <karthiksankranthi2156@gmail.com> 1629474292 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 yatish ram kumar <ram@ram-VirtualBox.(none)> 1629476324 +0530	clone: from git://github.com/mit-pdos/xv6-public.git
Binary files g44/_grep and xv6-public/_grep differ
diff -ruN g44/grep.asm xv6-public/grep.asm
--- g44/grep.asm	2021-09-15 23:29:31.411060001 +0530
+++ xv6-public/grep.asm	2021-08-30 22:38:24.264763169 +0530
@@ -957,13 +957,10 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
-
-00000643 <history>:
-//marco
-SYSCALL(history)
- 643:	b8 16 00 00 00       	mov    $0x16,%eax
- 648:	cd 40                	int    $0x40
- 64a:	c3                   	ret    
+ 643:	66 90                	xchg   %ax,%ax
+ 645:	66 90                	xchg   %ax,%ax
+ 647:	66 90                	xchg   %ax,%ax
+ 649:	66 90                	xchg   %ax,%ax
  64b:	66 90                	xchg   %ax,%ax
  64d:	66 90                	xchg   %ax,%ax
  64f:	90                   	nop
Binary files g44/grep.o and xv6-public/grep.o differ
diff -ruN g44/grep.sym xv6-public/grep.sym
--- g44/grep.sym	2021-09-15 23:29:31.411060001 +0530
+++ xv6-public/grep.sym	2021-08-30 22:38:24.268763179 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000650 printint
-00000aa8 digits.1088
+00000aa8 digits.1085
 00000000 umalloc.c
 00000e60 freep
 00000e64 base
@@ -30,7 +30,6 @@
 00000633 sleep
 000005b3 pipe
 000005c3 write
-00000643 history
 000005fb fstat
 000005d3 kill
 00000613 chdir
Binary files g44/_history and xv6-public/_history differ
diff -ruN g44/history.asm xv6-public/history.asm
--- g44/history.asm	2021-09-15 23:29:32.839062262 +0530
+++ xv6-public/history.asm	1970-01-01 05:30:00.000000000 +0530
@@ -1,1240 +0,0 @@
-
-_history:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-
-int size=128;
-
-int main(void)
-{  
-   0:	f3 0f 1e fb          	endbr32 
-   4:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   8:	83 e4 f0             	and    $0xfffffff0,%esp
-   b:	ff 71 fc             	pushl  -0x4(%ecx)
-   e:	55                   	push   %ebp
-   f:	89 e5                	mov    %esp,%ebp
-  11:	56                   	push   %esi
-  12:	53                   	push   %ebx
- 
-  
-  for(int i=15;i>=0;i--){
-  13:	bb 0f 00 00 00       	mov    $0xf,%ebx
-{  
-  18:	51                   	push   %ecx
-  19:	83 ec 0c             	sub    $0xc,%esp
-  1c:	eb 14                	jmp    32 <main+0x32>
-  1e:	66 90                	xchg   %ax,%ax
-   if(val==0)
-   {  
-   printf(1,"%s \n",buffer);
-   }
-   
-   else if(val==1)
-  20:	83 f8 01             	cmp    $0x1,%eax
-  23:	74 53                	je     78 <main+0x78>
-   {
-       printf(1,"No history found for given HistoryId \n");
-   }
-   else if(val==2)
-  25:	83 f8 02             	cmp    $0x2,%eax
-  28:	74 66                	je     90 <main+0x90>
-  for(int i=15;i>=0;i--){
-  2a:	83 eb 01             	sub    $0x1,%ebx
-  2d:	83 fb ff             	cmp    $0xffffffff,%ebx
-  30:	74 3b                	je     6d <main+0x6d>
-   char*  buffer=(char*)malloc(size);
-  32:	83 ec 0c             	sub    $0xc,%esp
-  35:	ff 35 d4 0a 00 00    	pushl  0xad4
-  3b:	e8 90 06 00 00       	call   6d0 <malloc>
-  40:	89 c6                	mov    %eax,%esi
-   int val=history(buffer,i) ;
-  42:	58                   	pop    %eax
-  43:	5a                   	pop    %edx
-  44:	53                   	push   %ebx
-  45:	56                   	push   %esi
-  46:	e8 68 03 00 00       	call   3b3 <history>
-   if(val==0)
-  4b:	83 c4 10             	add    $0x10,%esp
-  4e:	85 c0                	test   %eax,%eax
-  50:	75 ce                	jne    20 <main+0x20>
-   printf(1,"%s \n",buffer);
-  52:	83 ec 04             	sub    $0x4,%esp
-  for(int i=15;i>=0;i--){
-  55:	83 eb 01             	sub    $0x1,%ebx
-   printf(1,"%s \n",buffer);
-  58:	56                   	push   %esi
-  59:	68 d8 07 00 00       	push   $0x7d8
-  5e:	6a 01                	push   $0x1
-  60:	e8 0b 04 00 00       	call   470 <printf>
-  65:	83 c4 10             	add    $0x10,%esp
-  for(int i=15;i>=0;i--){
-  68:	83 fb ff             	cmp    $0xffffffff,%ebx
-  6b:	75 c5                	jne    32 <main+0x32>
-   {
-      printf(2,"Illegal HistoryId \n");
-   }
-   }
-   exit();
-  6d:	e8 a1 02 00 00       	call   313 <exit>
-  72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-       printf(1,"No history found for given HistoryId \n");
-  78:	83 ec 08             	sub    $0x8,%esp
-  7b:	68 f4 07 00 00       	push   $0x7f4
-  80:	6a 01                	push   $0x1
-  82:	e8 e9 03 00 00       	call   470 <printf>
-  87:	83 c4 10             	add    $0x10,%esp
-  8a:	eb 9e                	jmp    2a <main+0x2a>
-  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      printf(2,"Illegal HistoryId \n");
-  90:	83 ec 08             	sub    $0x8,%esp
-  93:	68 dd 07 00 00       	push   $0x7dd
-  98:	6a 02                	push   $0x2
-  9a:	e8 d1 03 00 00       	call   470 <printf>
-  9f:	83 c4 10             	add    $0x10,%esp
-  a2:	eb 86                	jmp    2a <main+0x2a>
-  a4:	66 90                	xchg   %ax,%ax
-  a6:	66 90                	xchg   %ax,%ax
-  a8:	66 90                	xchg   %ax,%ax
-  aa:	66 90                	xchg   %ax,%ax
-  ac:	66 90                	xchg   %ax,%ax
-  ae:	66 90                	xchg   %ax,%ax
-
-000000b0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  b0:	f3 0f 1e fb          	endbr32 
-  b4:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  b5:	31 c0                	xor    %eax,%eax
-{
-  b7:	89 e5                	mov    %esp,%ebp
-  b9:	53                   	push   %ebx
-  ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  bd:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  while((*s++ = *t++) != 0)
-  c0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  c4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  c7:	83 c0 01             	add    $0x1,%eax
-  ca:	84 d2                	test   %dl,%dl
-  cc:	75 f2                	jne    c0 <strcpy+0x10>
-    ;
-  return os;
-}
-  ce:	89 c8                	mov    %ecx,%eax
-  d0:	5b                   	pop    %ebx
-  d1:	5d                   	pop    %ebp
-  d2:	c3                   	ret    
-  d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000000e0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  e0:	f3 0f 1e fb          	endbr32 
-  e4:	55                   	push   %ebp
-  e5:	89 e5                	mov    %esp,%ebp
-  e7:	53                   	push   %ebx
-  e8:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  eb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  while(*p && *p == *q)
-  ee:	0f b6 01             	movzbl (%ecx),%eax
-  f1:	0f b6 1a             	movzbl (%edx),%ebx
-  f4:	84 c0                	test   %al,%al
-  f6:	75 19                	jne    111 <strcmp+0x31>
-  f8:	eb 26                	jmp    120 <strcmp+0x40>
-  fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 100:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
-    p++, q++;
- 104:	83 c1 01             	add    $0x1,%ecx
- 107:	83 c2 01             	add    $0x1,%edx
-  while(*p && *p == *q)
- 10a:	0f b6 1a             	movzbl (%edx),%ebx
- 10d:	84 c0                	test   %al,%al
- 10f:	74 0f                	je     120 <strcmp+0x40>
- 111:	38 d8                	cmp    %bl,%al
- 113:	74 eb                	je     100 <strcmp+0x20>
-  return (uchar)*p - (uchar)*q;
- 115:	29 d8                	sub    %ebx,%eax
-}
- 117:	5b                   	pop    %ebx
- 118:	5d                   	pop    %ebp
- 119:	c3                   	ret    
- 11a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
- 120:	31 c0                	xor    %eax,%eax
-  return (uchar)*p - (uchar)*q;
- 122:	29 d8                	sub    %ebx,%eax
-}
- 124:	5b                   	pop    %ebx
- 125:	5d                   	pop    %ebp
- 126:	c3                   	ret    
- 127:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 12e:	66 90                	xchg   %ax,%ax
-
-00000130 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 130:	f3 0f 1e fb          	endbr32 
- 134:	55                   	push   %ebp
- 135:	89 e5                	mov    %esp,%ebp
- 137:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 13a:	80 3a 00             	cmpb   $0x0,(%edx)
- 13d:	74 21                	je     160 <strlen+0x30>
- 13f:	31 c0                	xor    %eax,%eax
- 141:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 148:	83 c0 01             	add    $0x1,%eax
- 14b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 14f:	89 c1                	mov    %eax,%ecx
- 151:	75 f5                	jne    148 <strlen+0x18>
-    ;
-  return n;
-}
- 153:	89 c8                	mov    %ecx,%eax
- 155:	5d                   	pop    %ebp
- 156:	c3                   	ret    
- 157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 15e:	66 90                	xchg   %ax,%ax
-  for(n = 0; s[n]; n++)
- 160:	31 c9                	xor    %ecx,%ecx
-}
- 162:	5d                   	pop    %ebp
- 163:	89 c8                	mov    %ecx,%eax
- 165:	c3                   	ret    
- 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 16d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000170 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 170:	f3 0f 1e fb          	endbr32 
- 174:	55                   	push   %ebp
- 175:	89 e5                	mov    %esp,%ebp
- 177:	57                   	push   %edi
- 178:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 17b:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 17e:	8b 45 0c             	mov    0xc(%ebp),%eax
- 181:	89 d7                	mov    %edx,%edi
- 183:	fc                   	cld    
- 184:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 186:	89 d0                	mov    %edx,%eax
- 188:	5f                   	pop    %edi
- 189:	5d                   	pop    %ebp
- 18a:	c3                   	ret    
- 18b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 18f:	90                   	nop
-
-00000190 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 190:	f3 0f 1e fb          	endbr32 
- 194:	55                   	push   %ebp
- 195:	89 e5                	mov    %esp,%ebp
- 197:	8b 45 08             	mov    0x8(%ebp),%eax
- 19a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 19e:	0f b6 10             	movzbl (%eax),%edx
- 1a1:	84 d2                	test   %dl,%dl
- 1a3:	75 16                	jne    1bb <strchr+0x2b>
- 1a5:	eb 21                	jmp    1c8 <strchr+0x38>
- 1a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ae:	66 90                	xchg   %ax,%ax
- 1b0:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 1b4:	83 c0 01             	add    $0x1,%eax
- 1b7:	84 d2                	test   %dl,%dl
- 1b9:	74 0d                	je     1c8 <strchr+0x38>
-    if(*s == c)
- 1bb:	38 d1                	cmp    %dl,%cl
- 1bd:	75 f1                	jne    1b0 <strchr+0x20>
-      return (char*)s;
-  return 0;
-}
- 1bf:	5d                   	pop    %ebp
- 1c0:	c3                   	ret    
- 1c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 1c8:	31 c0                	xor    %eax,%eax
-}
- 1ca:	5d                   	pop    %ebp
- 1cb:	c3                   	ret    
- 1cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001d0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1d0:	f3 0f 1e fb          	endbr32 
- 1d4:	55                   	push   %ebp
- 1d5:	89 e5                	mov    %esp,%ebp
- 1d7:	57                   	push   %edi
- 1d8:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
- 1d9:	31 f6                	xor    %esi,%esi
-{
- 1db:	53                   	push   %ebx
- 1dc:	89 f3                	mov    %esi,%ebx
- 1de:	83 ec 1c             	sub    $0x1c,%esp
- 1e1:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i=0; i+1 < max; ){
- 1e4:	eb 33                	jmp    219 <gets+0x49>
- 1e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1ed:	8d 76 00             	lea    0x0(%esi),%esi
-    cc = read(0, &c, 1);
- 1f0:	83 ec 04             	sub    $0x4,%esp
- 1f3:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 1f6:	6a 01                	push   $0x1
- 1f8:	50                   	push   %eax
- 1f9:	6a 00                	push   $0x0
- 1fb:	e8 2b 01 00 00       	call   32b <read>
-    if(cc < 1)
- 200:	83 c4 10             	add    $0x10,%esp
- 203:	85 c0                	test   %eax,%eax
- 205:	7e 1c                	jle    223 <gets+0x53>
-      break;
-    buf[i++] = c;
- 207:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 20b:	83 c7 01             	add    $0x1,%edi
- 20e:	88 47 ff             	mov    %al,-0x1(%edi)
-    if(c == '\n' || c == '\r')
- 211:	3c 0a                	cmp    $0xa,%al
- 213:	74 23                	je     238 <gets+0x68>
- 215:	3c 0d                	cmp    $0xd,%al
- 217:	74 1f                	je     238 <gets+0x68>
-  for(i=0; i+1 < max; ){
- 219:	83 c3 01             	add    $0x1,%ebx
- 21c:	89 fe                	mov    %edi,%esi
- 21e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 221:	7c cd                	jl     1f0 <gets+0x20>
- 223:	89 f3                	mov    %esi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-  return buf;
-}
- 225:	8b 45 08             	mov    0x8(%ebp),%eax
-  buf[i] = '\0';
- 228:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 22b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 22e:	5b                   	pop    %ebx
- 22f:	5e                   	pop    %esi
- 230:	5f                   	pop    %edi
- 231:	5d                   	pop    %ebp
- 232:	c3                   	ret    
- 233:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 237:	90                   	nop
- 238:	8b 75 08             	mov    0x8(%ebp),%esi
- 23b:	8b 45 08             	mov    0x8(%ebp),%eax
- 23e:	01 de                	add    %ebx,%esi
- 240:	89 f3                	mov    %esi,%ebx
-  buf[i] = '\0';
- 242:	c6 03 00             	movb   $0x0,(%ebx)
-}
- 245:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 248:	5b                   	pop    %ebx
- 249:	5e                   	pop    %esi
- 24a:	5f                   	pop    %edi
- 24b:	5d                   	pop    %ebp
- 24c:	c3                   	ret    
- 24d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000250 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 250:	f3 0f 1e fb          	endbr32 
- 254:	55                   	push   %ebp
- 255:	89 e5                	mov    %esp,%ebp
- 257:	56                   	push   %esi
- 258:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 259:	83 ec 08             	sub    $0x8,%esp
- 25c:	6a 00                	push   $0x0
- 25e:	ff 75 08             	pushl  0x8(%ebp)
- 261:	e8 ed 00 00 00       	call   353 <open>
-  if(fd < 0)
- 266:	83 c4 10             	add    $0x10,%esp
- 269:	85 c0                	test   %eax,%eax
- 26b:	78 2b                	js     298 <stat+0x48>
-    return -1;
-  r = fstat(fd, st);
- 26d:	83 ec 08             	sub    $0x8,%esp
- 270:	ff 75 0c             	pushl  0xc(%ebp)
- 273:	89 c3                	mov    %eax,%ebx
- 275:	50                   	push   %eax
- 276:	e8 f0 00 00 00       	call   36b <fstat>
-  close(fd);
- 27b:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 27e:	89 c6                	mov    %eax,%esi
-  close(fd);
- 280:	e8 b6 00 00 00       	call   33b <close>
-  return r;
- 285:	83 c4 10             	add    $0x10,%esp
-}
- 288:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 28b:	89 f0                	mov    %esi,%eax
- 28d:	5b                   	pop    %ebx
- 28e:	5e                   	pop    %esi
- 28f:	5d                   	pop    %ebp
- 290:	c3                   	ret    
- 291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
- 298:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 29d:	eb e9                	jmp    288 <stat+0x38>
- 29f:	90                   	nop
-
-000002a0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2a0:	f3 0f 1e fb          	endbr32 
- 2a4:	55                   	push   %ebp
- 2a5:	89 e5                	mov    %esp,%ebp
- 2a7:	53                   	push   %ebx
- 2a8:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2ab:	0f be 02             	movsbl (%edx),%eax
- 2ae:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2b1:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 2b4:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 2b9:	77 1a                	ja     2d5 <atoi+0x35>
- 2bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2bf:	90                   	nop
-    n = n*10 + *s++ - '0';
- 2c0:	83 c2 01             	add    $0x1,%edx
- 2c3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 2c6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 2ca:	0f be 02             	movsbl (%edx),%eax
- 2cd:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2d0:	80 fb 09             	cmp    $0x9,%bl
- 2d3:	76 eb                	jbe    2c0 <atoi+0x20>
-  return n;
-}
- 2d5:	89 c8                	mov    %ecx,%eax
- 2d7:	5b                   	pop    %ebx
- 2d8:	5d                   	pop    %ebp
- 2d9:	c3                   	ret    
- 2da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002e0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 2e0:	f3 0f 1e fb          	endbr32 
- 2e4:	55                   	push   %ebp
- 2e5:	89 e5                	mov    %esp,%ebp
- 2e7:	57                   	push   %edi
- 2e8:	8b 45 10             	mov    0x10(%ebp),%eax
- 2eb:	8b 55 08             	mov    0x8(%ebp),%edx
- 2ee:	56                   	push   %esi
- 2ef:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 2f2:	85 c0                	test   %eax,%eax
- 2f4:	7e 0f                	jle    305 <memmove+0x25>
- 2f6:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2f8:	89 d7                	mov    %edx,%edi
- 2fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *dst++ = *src++;
- 300:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 301:	39 f8                	cmp    %edi,%eax
- 303:	75 fb                	jne    300 <memmove+0x20>
-  return vdst;
-}
- 305:	5e                   	pop    %esi
- 306:	89 d0                	mov    %edx,%eax
- 308:	5f                   	pop    %edi
- 309:	5d                   	pop    %ebp
- 30a:	c3                   	ret    
-
-0000030b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 30b:	b8 01 00 00 00       	mov    $0x1,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret    
-
-00000313 <exit>:
-SYSCALL(exit)
- 313:	b8 02 00 00 00       	mov    $0x2,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret    
-
-0000031b <wait>:
-SYSCALL(wait)
- 31b:	b8 03 00 00 00       	mov    $0x3,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret    
-
-00000323 <pipe>:
-SYSCALL(pipe)
- 323:	b8 04 00 00 00       	mov    $0x4,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret    
-
-0000032b <read>:
-SYSCALL(read)
- 32b:	b8 05 00 00 00       	mov    $0x5,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret    
-
-00000333 <write>:
-SYSCALL(write)
- 333:	b8 10 00 00 00       	mov    $0x10,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
-
-0000033b <close>:
-SYSCALL(close)
- 33b:	b8 15 00 00 00       	mov    $0x15,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret    
-
-00000343 <kill>:
-SYSCALL(kill)
- 343:	b8 06 00 00 00       	mov    $0x6,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret    
-
-0000034b <exec>:
-SYSCALL(exec)
- 34b:	b8 07 00 00 00       	mov    $0x7,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret    
-
-00000353 <open>:
-SYSCALL(open)
- 353:	b8 0f 00 00 00       	mov    $0xf,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret    
-
-0000035b <mknod>:
-SYSCALL(mknod)
- 35b:	b8 11 00 00 00       	mov    $0x11,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret    
-
-00000363 <unlink>:
-SYSCALL(unlink)
- 363:	b8 12 00 00 00       	mov    $0x12,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
-
-0000036b <fstat>:
-SYSCALL(fstat)
- 36b:	b8 08 00 00 00       	mov    $0x8,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret    
-
-00000373 <link>:
-SYSCALL(link)
- 373:	b8 13 00 00 00       	mov    $0x13,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
-
-0000037b <mkdir>:
-SYSCALL(mkdir)
- 37b:	b8 14 00 00 00       	mov    $0x14,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret    
-
-00000383 <chdir>:
-SYSCALL(chdir)
- 383:	b8 09 00 00 00       	mov    $0x9,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
-
-0000038b <dup>:
-SYSCALL(dup)
- 38b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret    
-
-00000393 <getpid>:
-SYSCALL(getpid)
- 393:	b8 0b 00 00 00       	mov    $0xb,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret    
-
-0000039b <sbrk>:
-SYSCALL(sbrk)
- 39b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret    
-
-000003a3 <sleep>:
-SYSCALL(sleep)
- 3a3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret    
-
-000003ab <uptime>:
-SYSCALL(uptime)
- 3ab:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret    
-
-000003b3 <history>:
-//marco
-SYSCALL(history)
- 3b3:	b8 16 00 00 00       	mov    $0x16,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret    
- 3bb:	66 90                	xchg   %ax,%ax
- 3bd:	66 90                	xchg   %ax,%ax
- 3bf:	90                   	nop
-
-000003c0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3c0:	55                   	push   %ebp
- 3c1:	89 e5                	mov    %esp,%ebp
- 3c3:	57                   	push   %edi
- 3c4:	56                   	push   %esi
- 3c5:	53                   	push   %ebx
- 3c6:	83 ec 3c             	sub    $0x3c,%esp
- 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3cc:	89 d1                	mov    %edx,%ecx
-{
- 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
-  if(sgn && xx < 0){
- 3d1:	85 d2                	test   %edx,%edx
- 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
- 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3dd:	74 79                	je     458 <printint+0x98>
-    neg = 1;
- 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
-    x = -xx;
- 3e6:	f7 d9                	neg    %ecx
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 3e8:	31 db                	xor    %ebx,%ebx
- 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
- 3ed:	8d 76 00             	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3f0:	89 c8                	mov    %ecx,%eax
- 3f2:	31 d2                	xor    %edx,%edx
- 3f4:	89 cf                	mov    %ecx,%edi
- 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
- 3f9:	0f b6 92 24 08 00 00 	movzbl 0x824(%edx),%edx
- 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
- 403:	89 d8                	mov    %ebx,%eax
- 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
-  }while((x /= base) != 0);
- 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
-    buf[i++] = digits[x % base];
- 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
-  }while((x /= base) != 0);
- 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
- 411:	76 dd                	jbe    3f0 <printint+0x30>
-  if(neg)
- 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
- 416:	85 c9                	test   %ecx,%ecx
- 418:	74 0c                	je     426 <printint+0x66>
-    buf[i++] = '-';
- 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
-    buf[i++] = digits[x % base];
- 41f:	89 d8                	mov    %ebx,%eax
-    buf[i++] = '-';
- 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
-
-  while(--i >= 0)
- 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
- 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
- 42d:	eb 07                	jmp    436 <printint+0x76>
- 42f:	90                   	nop
- 430:	0f b6 13             	movzbl (%ebx),%edx
- 433:	83 eb 01             	sub    $0x1,%ebx
-  write(fd, &c, 1);
- 436:	83 ec 04             	sub    $0x4,%esp
- 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
- 43c:	6a 01                	push   $0x1
- 43e:	56                   	push   %esi
- 43f:	57                   	push   %edi
- 440:	e8 ee fe ff ff       	call   333 <write>
-  while(--i >= 0)
- 445:	83 c4 10             	add    $0x10,%esp
- 448:	39 de                	cmp    %ebx,%esi
- 44a:	75 e4                	jne    430 <printint+0x70>
-    putc(fd, buf[i]);
-}
- 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 44f:	5b                   	pop    %ebx
- 450:	5e                   	pop    %esi
- 451:	5f                   	pop    %edi
- 452:	5d                   	pop    %ebp
- 453:	c3                   	ret    
- 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
- 45f:	eb 87                	jmp    3e8 <printint+0x28>
- 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 46f:	90                   	nop
-
-00000470 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 470:	f3 0f 1e fb          	endbr32 
- 474:	55                   	push   %ebp
- 475:	89 e5                	mov    %esp,%ebp
- 477:	57                   	push   %edi
- 478:	56                   	push   %esi
- 479:	53                   	push   %ebx
- 47a:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 47d:	8b 75 0c             	mov    0xc(%ebp),%esi
- 480:	0f b6 1e             	movzbl (%esi),%ebx
- 483:	84 db                	test   %bl,%bl
- 485:	0f 84 b4 00 00 00    	je     53f <printf+0xcf>
-  ap = (uint*)(void*)&fmt + 1;
- 48b:	8d 45 10             	lea    0x10(%ebp),%eax
- 48e:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 491:	8d 7d e7             	lea    -0x19(%ebp),%edi
-  state = 0;
- 494:	31 d2                	xor    %edx,%edx
-  ap = (uint*)(void*)&fmt + 1;
- 496:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 499:	eb 33                	jmp    4ce <printf+0x5e>
- 49b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 49f:	90                   	nop
- 4a0:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 4a3:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 4a8:	83 f8 25             	cmp    $0x25,%eax
- 4ab:	74 17                	je     4c4 <printf+0x54>
-  write(fd, &c, 1);
- 4ad:	83 ec 04             	sub    $0x4,%esp
- 4b0:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4b3:	6a 01                	push   $0x1
- 4b5:	57                   	push   %edi
- 4b6:	ff 75 08             	pushl  0x8(%ebp)
- 4b9:	e8 75 fe ff ff       	call   333 <write>
- 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4c1:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4c4:	0f b6 1e             	movzbl (%esi),%ebx
- 4c7:	83 c6 01             	add    $0x1,%esi
- 4ca:	84 db                	test   %bl,%bl
- 4cc:	74 71                	je     53f <printf+0xcf>
-    c = fmt[i] & 0xff;
- 4ce:	0f be cb             	movsbl %bl,%ecx
- 4d1:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4d4:	85 d2                	test   %edx,%edx
- 4d6:	74 c8                	je     4a0 <printf+0x30>
-      }
-    } else if(state == '%'){
- 4d8:	83 fa 25             	cmp    $0x25,%edx
- 4db:	75 e7                	jne    4c4 <printf+0x54>
-      if(c == 'd'){
- 4dd:	83 f8 64             	cmp    $0x64,%eax
- 4e0:	0f 84 9a 00 00 00    	je     580 <printf+0x110>
-        printint(fd, *ap, 10, 1);
-        ap++;
-      } else if(c == 'x' || c == 'p'){
- 4e6:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
- 4ec:	83 f9 70             	cmp    $0x70,%ecx
- 4ef:	74 5f                	je     550 <printf+0xe0>
-        printint(fd, *ap, 16, 0);
-        ap++;
-      } else if(c == 's'){
- 4f1:	83 f8 73             	cmp    $0x73,%eax
- 4f4:	0f 84 d6 00 00 00    	je     5d0 <printf+0x160>
-          s = "(null)";
-        while(*s != 0){
-          putc(fd, *s);
-          s++;
-        }
-      } else if(c == 'c'){
- 4fa:	83 f8 63             	cmp    $0x63,%eax
- 4fd:	0f 84 8d 00 00 00    	je     590 <printf+0x120>
-        putc(fd, *ap);
-        ap++;
-      } else if(c == '%'){
- 503:	83 f8 25             	cmp    $0x25,%eax
- 506:	0f 84 b4 00 00 00    	je     5c0 <printf+0x150>
-  write(fd, &c, 1);
- 50c:	83 ec 04             	sub    $0x4,%esp
- 50f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 513:	6a 01                	push   $0x1
- 515:	57                   	push   %edi
- 516:	ff 75 08             	pushl  0x8(%ebp)
- 519:	e8 15 fe ff ff       	call   333 <write>
-        putc(fd, c);
-      } else {
-        // Unknown % sequence.  Print it to draw attention.
-        putc(fd, '%');
-        putc(fd, c);
- 51e:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 521:	83 c4 0c             	add    $0xc,%esp
- 524:	6a 01                	push   $0x1
- 526:	83 c6 01             	add    $0x1,%esi
- 529:	57                   	push   %edi
- 52a:	ff 75 08             	pushl  0x8(%ebp)
- 52d:	e8 01 fe ff ff       	call   333 <write>
-  for(i = 0; fmt[i]; i++){
- 532:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
-        putc(fd, c);
- 536:	83 c4 10             	add    $0x10,%esp
-      }
-      state = 0;
- 539:	31 d2                	xor    %edx,%edx
-  for(i = 0; fmt[i]; i++){
- 53b:	84 db                	test   %bl,%bl
- 53d:	75 8f                	jne    4ce <printf+0x5e>
-    }
-  }
-}
- 53f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 542:	5b                   	pop    %ebx
- 543:	5e                   	pop    %esi
- 544:	5f                   	pop    %edi
- 545:	5d                   	pop    %ebp
- 546:	c3                   	ret    
- 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 54e:	66 90                	xchg   %ax,%ax
-        printint(fd, *ap, 16, 0);
- 550:	83 ec 0c             	sub    $0xc,%esp
- 553:	b9 10 00 00 00       	mov    $0x10,%ecx
- 558:	6a 00                	push   $0x0
- 55a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 55d:	8b 45 08             	mov    0x8(%ebp),%eax
- 560:	8b 13                	mov    (%ebx),%edx
- 562:	e8 59 fe ff ff       	call   3c0 <printint>
-        ap++;
- 567:	89 d8                	mov    %ebx,%eax
- 569:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 56c:	31 d2                	xor    %edx,%edx
-        ap++;
- 56e:	83 c0 04             	add    $0x4,%eax
- 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
- 574:	e9 4b ff ff ff       	jmp    4c4 <printf+0x54>
- 579:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        printint(fd, *ap, 10, 1);
- 580:	83 ec 0c             	sub    $0xc,%esp
- 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 588:	6a 01                	push   $0x1
- 58a:	eb ce                	jmp    55a <printf+0xea>
- 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        putc(fd, *ap);
- 590:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 593:	83 ec 04             	sub    $0x4,%esp
-        putc(fd, *ap);
- 596:	8b 03                	mov    (%ebx),%eax
-  write(fd, &c, 1);
- 598:	6a 01                	push   $0x1
-        ap++;
- 59a:	83 c3 04             	add    $0x4,%ebx
-  write(fd, &c, 1);
- 59d:	57                   	push   %edi
- 59e:	ff 75 08             	pushl  0x8(%ebp)
-        putc(fd, *ap);
- 5a1:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5a4:	e8 8a fd ff ff       	call   333 <write>
-        ap++;
- 5a9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5ac:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 0e ff ff ff       	jmp    4c4 <printf+0x54>
- 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 5bd:	8d 76 00             	lea    0x0(%esi),%esi
-        putc(fd, c);
- 5c0:	88 5d e7             	mov    %bl,-0x19(%ebp)
-  write(fd, &c, 1);
- 5c3:	83 ec 04             	sub    $0x4,%esp
- 5c6:	e9 59 ff ff ff       	jmp    524 <printf+0xb4>
- 5cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 5cf:	90                   	nop
-        s = (char*)*ap;
- 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5d3:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5d5:	83 c0 04             	add    $0x4,%eax
- 5d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5db:	85 db                	test   %ebx,%ebx
- 5dd:	74 17                	je     5f6 <printf+0x186>
-        while(*s != 0){
- 5df:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5e2:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5e4:	84 c0                	test   %al,%al
- 5e6:	0f 84 d8 fe ff ff    	je     4c4 <printf+0x54>
- 5ec:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ef:	89 de                	mov    %ebx,%esi
- 5f1:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 5f4:	eb 1a                	jmp    610 <printf+0x1a0>
-          s = "(null)";
- 5f6:	bb 1b 08 00 00       	mov    $0x81b,%ebx
-        while(*s != 0){
- 5fb:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5fe:	b8 28 00 00 00       	mov    $0x28,%eax
- 603:	89 de                	mov    %ebx,%esi
- 605:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 608:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 60f:	90                   	nop
-  write(fd, &c, 1);
- 610:	83 ec 04             	sub    $0x4,%esp
-          s++;
- 613:	83 c6 01             	add    $0x1,%esi
- 616:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 619:	6a 01                	push   $0x1
- 61b:	57                   	push   %edi
- 61c:	53                   	push   %ebx
- 61d:	e8 11 fd ff ff       	call   333 <write>
-        while(*s != 0){
- 622:	0f b6 06             	movzbl (%esi),%eax
- 625:	83 c4 10             	add    $0x10,%esp
- 628:	84 c0                	test   %al,%al
- 62a:	75 e4                	jne    610 <printf+0x1a0>
- 62c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-      state = 0;
- 62f:	31 d2                	xor    %edx,%edx
- 631:	e9 8e fe ff ff       	jmp    4c4 <printf+0x54>
- 636:	66 90                	xchg   %ax,%ax
- 638:	66 90                	xchg   %ax,%ax
- 63a:	66 90                	xchg   %ax,%ax
- 63c:	66 90                	xchg   %ax,%ax
- 63e:	66 90                	xchg   %ax,%ax
-
-00000640 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 640:	f3 0f 1e fb          	endbr32 
- 644:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 645:	a1 d8 0a 00 00       	mov    0xad8,%eax
-{
- 64a:	89 e5                	mov    %esp,%ebp
- 64c:	57                   	push   %edi
- 64d:	56                   	push   %esi
- 64e:	53                   	push   %ebx
- 64f:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 652:	8b 10                	mov    (%eax),%edx
-  bp = (Header*)ap - 1;
- 654:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 657:	39 c8                	cmp    %ecx,%eax
- 659:	73 15                	jae    670 <free+0x30>
- 65b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 65f:	90                   	nop
- 660:	39 d1                	cmp    %edx,%ecx
- 662:	72 14                	jb     678 <free+0x38>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 664:	39 d0                	cmp    %edx,%eax
- 666:	73 10                	jae    678 <free+0x38>
-{
- 668:	89 d0                	mov    %edx,%eax
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 66a:	8b 10                	mov    (%eax),%edx
- 66c:	39 c8                	cmp    %ecx,%eax
- 66e:	72 f0                	jb     660 <free+0x20>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 670:	39 d0                	cmp    %edx,%eax
- 672:	72 f4                	jb     668 <free+0x28>
- 674:	39 d1                	cmp    %edx,%ecx
- 676:	73 f0                	jae    668 <free+0x28>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 67e:	39 fa                	cmp    %edi,%edx
- 680:	74 1e                	je     6a0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-  } else
-    bp->s.ptr = p->s.ptr;
- 682:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 685:	8b 50 04             	mov    0x4(%eax),%edx
- 688:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 68b:	39 f1                	cmp    %esi,%ecx
- 68d:	74 28                	je     6b7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-  } else
-    p->s.ptr = bp;
- 68f:	89 08                	mov    %ecx,(%eax)
-  freep = p;
-}
- 691:	5b                   	pop    %ebx
-  freep = p;
- 692:	a3 d8 0a 00 00       	mov    %eax,0xad8
-}
- 697:	5e                   	pop    %esi
- 698:	5f                   	pop    %edi
- 699:	5d                   	pop    %ebp
- 69a:	c3                   	ret    
- 69b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 69f:	90                   	nop
-    bp->s.size += p->s.ptr->s.size;
- 6a0:	03 72 04             	add    0x4(%edx),%esi
- 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6a6:	8b 10                	mov    (%eax),%edx
- 6a8:	8b 12                	mov    (%edx),%edx
- 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 6ad:	8b 50 04             	mov    0x4(%eax),%edx
- 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6b3:	39 f1                	cmp    %esi,%ecx
- 6b5:	75 d8                	jne    68f <free+0x4f>
-    p->s.size += bp->s.size;
- 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6ba:	a3 d8 0a 00 00       	mov    %eax,0xad8
-    p->s.size += bp->s.size;
- 6bf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6c2:	8b 53 f8             	mov    -0x8(%ebx),%edx
- 6c5:	89 10                	mov    %edx,(%eax)
-}
- 6c7:	5b                   	pop    %ebx
- 6c8:	5e                   	pop    %esi
- 6c9:	5f                   	pop    %edi
- 6ca:	5d                   	pop    %ebp
- 6cb:	c3                   	ret    
- 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006d0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6d0:	f3 0f 1e fb          	endbr32 
- 6d4:	55                   	push   %ebp
- 6d5:	89 e5                	mov    %esp,%ebp
- 6d7:	57                   	push   %edi
- 6d8:	56                   	push   %esi
- 6d9:	53                   	push   %ebx
- 6da:	83 ec 1c             	sub    $0x1c,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6dd:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6e0:	8b 3d d8 0a 00 00    	mov    0xad8,%edi
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6e6:	8d 70 07             	lea    0x7(%eax),%esi
- 6e9:	c1 ee 03             	shr    $0x3,%esi
- 6ec:	83 c6 01             	add    $0x1,%esi
-  if((prevp = freep) == 0){
- 6ef:	85 ff                	test   %edi,%edi
- 6f1:	0f 84 a9 00 00 00    	je     7a0 <malloc+0xd0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f7:	8b 07                	mov    (%edi),%eax
-    if(p->s.size >= nunits){
- 6f9:	8b 48 04             	mov    0x4(%eax),%ecx
- 6fc:	39 f1                	cmp    %esi,%ecx
- 6fe:	73 6d                	jae    76d <malloc+0x9d>
- 700:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
- 706:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 70b:	0f 43 de             	cmovae %esi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 70e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
- 715:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
- 718:	eb 17                	jmp    731 <malloc+0x61>
- 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 720:	8b 10                	mov    (%eax),%edx
-    if(p->s.size >= nunits){
- 722:	8b 4a 04             	mov    0x4(%edx),%ecx
- 725:	39 f1                	cmp    %esi,%ecx
- 727:	73 4f                	jae    778 <malloc+0xa8>
- 729:	8b 3d d8 0a 00 00    	mov    0xad8,%edi
- 72f:	89 d0                	mov    %edx,%eax
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 731:	39 c7                	cmp    %eax,%edi
- 733:	75 eb                	jne    720 <malloc+0x50>
-  p = sbrk(nu * sizeof(Header));
- 735:	83 ec 0c             	sub    $0xc,%esp
- 738:	ff 75 e4             	pushl  -0x1c(%ebp)
- 73b:	e8 5b fc ff ff       	call   39b <sbrk>
-  if(p == (char*)-1)
- 740:	83 c4 10             	add    $0x10,%esp
- 743:	83 f8 ff             	cmp    $0xffffffff,%eax
- 746:	74 1b                	je     763 <malloc+0x93>
-  hp->s.size = nu;
- 748:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 74b:	83 ec 0c             	sub    $0xc,%esp
- 74e:	83 c0 08             	add    $0x8,%eax
- 751:	50                   	push   %eax
- 752:	e8 e9 fe ff ff       	call   640 <free>
-  return freep;
- 757:	a1 d8 0a 00 00       	mov    0xad8,%eax
-      if((p = morecore(nunits)) == 0)
- 75c:	83 c4 10             	add    $0x10,%esp
- 75f:	85 c0                	test   %eax,%eax
- 761:	75 bd                	jne    720 <malloc+0x50>
-        return 0;
-  }
-}
- 763:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 766:	31 c0                	xor    %eax,%eax
-}
- 768:	5b                   	pop    %ebx
- 769:	5e                   	pop    %esi
- 76a:	5f                   	pop    %edi
- 76b:	5d                   	pop    %ebp
- 76c:	c3                   	ret    
-    if(p->s.size >= nunits){
- 76d:	89 c2                	mov    %eax,%edx
- 76f:	89 f8                	mov    %edi,%eax
- 771:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(p->s.size == nunits)
- 778:	39 ce                	cmp    %ecx,%esi
- 77a:	74 54                	je     7d0 <malloc+0x100>
-        p->s.size -= nunits;
- 77c:	29 f1                	sub    %esi,%ecx
- 77e:	89 4a 04             	mov    %ecx,0x4(%edx)
-        p += p->s.size;
- 781:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
-        p->s.size = nunits;
- 784:	89 72 04             	mov    %esi,0x4(%edx)
-      freep = prevp;
- 787:	a3 d8 0a 00 00       	mov    %eax,0xad8
-}
- 78c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 78f:	8d 42 08             	lea    0x8(%edx),%eax
-}
- 792:	5b                   	pop    %ebx
- 793:	5e                   	pop    %esi
- 794:	5f                   	pop    %edi
- 795:	5d                   	pop    %ebp
- 796:	c3                   	ret    
- 797:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 79e:	66 90                	xchg   %ax,%ax
-    base.s.ptr = freep = prevp = &base;
- 7a0:	c7 05 d8 0a 00 00 dc 	movl   $0xadc,0xad8
- 7a7:	0a 00 00 
-    base.s.size = 0;
- 7aa:	bf dc 0a 00 00       	mov    $0xadc,%edi
-    base.s.ptr = freep = prevp = &base;
- 7af:	c7 05 dc 0a 00 00 dc 	movl   $0xadc,0xadc
- 7b6:	0a 00 00 
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 7b9:	89 f8                	mov    %edi,%eax
-    base.s.size = 0;
- 7bb:	c7 05 e0 0a 00 00 00 	movl   $0x0,0xae0
- 7c2:	00 00 00 
-    if(p->s.size >= nunits){
- 7c5:	e9 36 ff ff ff       	jmp    700 <malloc+0x30>
- 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        prevp->s.ptr = p->s.ptr;
- 7d0:	8b 0a                	mov    (%edx),%ecx
- 7d2:	89 08                	mov    %ecx,(%eax)
- 7d4:	eb b1                	jmp    787 <malloc+0xb7>
diff -ruN g44/history.c xv6-public/history.c
--- g44/history.c	2021-09-15 22:56:41.000000000 +0530
+++ xv6-public/history.c	1970-01-01 05:30:00.000000000 +0530
@@ -1,34 +0,0 @@
-#include "types.h"
-#include  "stat.h"
-#include "user.h"
-
-
-int size=128;
-
-int main(void)
-{  
- 
-  
-  for(int i=15;i>=0;i--){
-   char*  buffer=(char*)malloc(size);
-   
- 
-   int val=history(buffer,i) ;
-   
-   if(val==0)
-   {  
-   printf(1,"%s \n",buffer);
-   }
-   
-   else if(val==1)
-   {
-       printf(1,"No history found for given HistoryId \n");
-   }
-   else if(val==2)
-   {
-      printf(2,"Illegal HistoryId \n");
-   }
-   }
-   exit();
-  return 0;
-}
\ No newline at end of file
diff -ruN g44/history.d xv6-public/history.d
--- g44/history.d	2021-09-15 23:29:32.803062204 +0530
+++ xv6-public/history.d	1970-01-01 05:30:00.000000000 +0530
@@ -1 +0,0 @@
-history.o: history.c /usr/include/stdc-predef.h types.h stat.h user.h
Binary files g44/history.o and xv6-public/history.o differ
diff -ruN g44/history.sym xv6-public/history.sym
--- g44/history.sym	2021-09-15 23:29:32.847062274 +0530
+++ xv6-public/history.sym	1970-01-01 05:30:00.000000000 +0530
@@ -1,60 +0,0 @@
-00000000 .text
-000007d8 .rodata
-00000838 .eh_frame
-00000ad4 .data
-00000ad8 .bss
-00000000 .comment
-00000000 .debug_aranges
-00000000 .debug_info
-00000000 .debug_abbrev
-00000000 .debug_line
-00000000 .debug_str
-00000000 .debug_loc
-00000000 .debug_ranges
-00000000 history.c
-00000000 ulib.c
-00000000 printf.c
-000003c0 printint
-00000824 digits.1088
-00000000 umalloc.c
-00000ad8 freep
-00000adc base
-000000b0 strcpy
-00000470 printf
-000002e0 memmove
-0000035b mknod
-000001d0 gets
-00000393 getpid
-000006d0 malloc
-000003a3 sleep
-00000323 pipe
-00000333 write
-000003b3 history
-0000036b fstat
-00000343 kill
-00000383 chdir
-0000034b exec
-0000031b wait
-0000032b read
-00000363 unlink
-0000030b fork
-0000039b sbrk
-000003ab uptime
-00000ad8 __bss_start
-00000170 memset
-00000000 main
-00000ad4 size
-000000e0 strcmp
-0000038b dup
-00000250 stat
-00000ad8 _edata
-00000ae4 _end
-00000373 link
-00000313 exit
-000002a0 atoi
-00000130 strlen
-00000353 open
-00000190 strchr
-0000037b mkdir
-0000033b close
-00000640 free
Binary files g44/ide.o and xv6-public/ide.o differ
Binary files g44/_init and xv6-public/_init differ
diff -ruN g44/init.asm xv6-public/init.asm
--- g44/init.asm	2021-09-15 23:29:31.475060102 +0530
+++ xv6-public/init.asm	2021-08-30 22:38:24.328763312 +0530
@@ -646,13 +646,10 @@
  3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
  3f0:	cd 40                	int    $0x40
  3f2:	c3                   	ret    
-
-000003f3 <history>:
-//marco
-SYSCALL(history)
- 3f3:	b8 16 00 00 00       	mov    $0x16,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret    
+ 3f3:	66 90                	xchg   %ax,%ax
+ 3f5:	66 90                	xchg   %ax,%ax
+ 3f7:	66 90                	xchg   %ax,%ax
+ 3f9:	66 90                	xchg   %ax,%ax
  3fb:	66 90                	xchg   %ax,%ax
  3fd:	66 90                	xchg   %ax,%ax
  3ff:	90                   	nop
Binary files g44/initcode.o and xv6-public/initcode.o differ
Binary files g44/initcode.out and xv6-public/initcode.out differ
Binary files g44/init.o and xv6-public/init.o differ
diff -ruN g44/init.sym xv6-public/init.sym
--- g44/init.sym	2021-09-15 23:29:31.483060114 +0530
+++ xv6-public/init.sym	2021-08-30 22:38:24.332763321 +0530
@@ -15,7 +15,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000400 printint
-00000870 digits.1088
+00000870 digits.1085
 00000000 umalloc.c
 00000b24 freep
 00000b28 base
@@ -30,7 +30,6 @@
 000003e3 sleep
 00000363 pipe
 00000373 write
-000003f3 history
 000003ab fstat
 00000383 kill
 000003c3 chdir
Binary files g44/ioapic.o and xv6-public/ioapic.o differ
Binary files g44/kalloc.o and xv6-public/kalloc.o differ
Binary files g44/kbd.o and xv6-public/kbd.o differ
Binary files g44/kernel and xv6-public/kernel differ
diff -ruN g44/kernel.asm xv6-public/kernel.asm
--- g44/kernel.asm	2021-09-15 23:29:26.239051762 +0530
+++ xv6-public/kernel.asm	2021-08-30 22:38:16.108748254 +0530
@@ -24,7 +24,7 @@
 80100012:	0f 22 e0             	mov    %eax,%cr4
   # Set page directory
   movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 a0 10 00       	mov    $0x10a000,%eax
+80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
   movl    %eax, %cr3
 8010001a:	0f 22 d8             	mov    %eax,%cr3
   # Turn on paging.
@@ -37,14 +37,14 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc c0 c5 10 80       	mov    $0x8010c5c0,%esp
+80100028:	bc c0 b5 10 80       	mov    $0x8010b5c0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
   # the assembler produces a PC-relative instruction
   # for a direct jump.
   mov $main, %eax
-8010002d:	b8 90 3a 10 80       	mov    $0x80103a90,%eax
+8010002d:	b8 40 30 10 80       	mov    $0x80103040,%eax
   jmp *%eax
 80100032:	ff e0                	jmp    *%eax
 80100034:	66 90                	xchg   %ax,%ax
@@ -71,22 +71,22 @@
   bcache.head.prev = &bcache.head;
   bcache.head.next = &bcache.head;
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100048:	bb f4 c5 10 80       	mov    $0x8010c5f4,%ebx
+80100048:	bb f4 b5 10 80       	mov    $0x8010b5f4,%ebx
 {
 8010004d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-80100050:	68 80 7b 10 80       	push   $0x80107b80
-80100055:	68 c0 c5 10 80       	push   $0x8010c5c0
-8010005a:	e8 d1 4d 00 00       	call   80104e30 <initlock>
+80100050:	68 e0 70 10 80       	push   $0x801070e0
+80100055:	68 c0 b5 10 80       	push   $0x8010b5c0
+8010005a:	e8 81 43 00 00       	call   801043e0 <initlock>
   bcache.head.next = &bcache.head;
 8010005f:	83 c4 10             	add    $0x10,%esp
-80100062:	b8 bc 0c 11 80       	mov    $0x80110cbc,%eax
+80100062:	b8 bc fc 10 80       	mov    $0x8010fcbc,%eax
   bcache.head.prev = &bcache.head;
-80100067:	c7 05 0c 0d 11 80 bc 	movl   $0x80110cbc,0x80110d0c
-8010006e:	0c 11 80 
+80100067:	c7 05 0c fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd0c
+8010006e:	fc 10 80 
   bcache.head.next = &bcache.head;
-80100071:	c7 05 10 0d 11 80 bc 	movl   $0x80110cbc,0x80110d10
-80100078:	0c 11 80 
+80100071:	c7 05 10 fd 10 80 bc 	movl   $0x8010fcbc,0x8010fd10
+80100078:	fc 10 80 
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 8010007b:	eb 05                	jmp    80100082 <binit+0x42>
 8010007d:	8d 76 00             	lea    0x0(%esi),%esi
@@ -98,13 +98,13 @@
 80100085:	83 ec 08             	sub    $0x8,%esp
 80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
     b->prev = &bcache.head;
-8010008b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+8010008b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 87 7b 10 80       	push   $0x80107b87
+80100092:	68 e7 70 10 80       	push   $0x801070e7
 80100097:	50                   	push   %eax
-80100098:	e8 53 4c 00 00       	call   80104cf0 <initsleeplock>
+80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
     bcache.head.next->prev = b;
-8010009d:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+8010009d:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
 801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
 801000a8:	83 c4 10             	add    $0x10,%esp
@@ -112,9 +112,9 @@
 801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
 801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+801000b0:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb 60 0a 11 80    	cmp    $0x80110a60,%ebx
+801000b6:	81 fb 60 fa 10 80    	cmp    $0x8010fa60,%ebx
 801000bc:	75 c2                	jne    80100080 <binit+0x40>
   }
 }
@@ -141,16 +141,16 @@
 801000dd:	8b 7d 08             	mov    0x8(%ebp),%edi
 801000e0:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&bcache.lock);
-801000e3:	68 c0 c5 10 80       	push   $0x8010c5c0
-801000e8:	e8 c3 4e 00 00       	call   80104fb0 <acquire>
+801000e3:	68 c0 b5 10 80       	push   $0x8010b5c0
+801000e8:	e8 73 44 00 00       	call   80104560 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000ed:	8b 1d 10 0d 11 80    	mov    0x80110d10,%ebx
+801000ed:	8b 1d 10 fd 10 80    	mov    0x8010fd10,%ebx
 801000f3:	83 c4 10             	add    $0x10,%esp
-801000f6:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+801000f6:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
 801000fc:	75 0d                	jne    8010010b <bread+0x3b>
 801000fe:	eb 20                	jmp    80100120 <bread+0x50>
 80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100103:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
 80100109:	74 15                	je     80100120 <bread+0x50>
     if(b->dev == dev && b->blockno == blockno){
 8010010b:	3b 7b 04             	cmp    0x4(%ebx),%edi
@@ -164,12 +164,12 @@
 8010011b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010011f:	90                   	nop
   for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 0c 0d 11 80    	mov    0x80110d0c,%ebx
-80100126:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100120:	8b 1d 0c fd 10 80    	mov    0x8010fd0c,%ebx
+80100126:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
 8010012c:	75 0d                	jne    8010013b <bread+0x6b>
 8010012e:	eb 70                	jmp    801001a0 <bread+0xd0>
 80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb bc 0c 11 80    	cmp    $0x80110cbc,%ebx
+80100133:	81 fb bc fc 10 80    	cmp    $0x8010fcbc,%ebx
 80100139:	74 65                	je     801001a0 <bread+0xd0>
     if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
 8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
@@ -187,12 +187,12 @@
 80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 c0 c5 10 80       	push   $0x8010c5c0
-80100162:	e8 09 4f 00 00       	call   80105070 <release>
+8010015d:	68 c0 b5 10 80       	push   $0x8010b5c0
+80100162:	e8 b9 44 00 00       	call   80104620 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 be 4b 00 00       	call   80104d30 <acquiresleep>
+8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -216,7 +216,7 @@
     iderw(b);
 80100188:	83 ec 0c             	sub    $0xc,%esp
 8010018b:	53                   	push   %ebx
-8010018c:	e8 3f 2b 00 00       	call   80102cd0 <iderw>
+8010018c:	e8 ef 20 00 00       	call   80102280 <iderw>
 80100191:	83 c4 10             	add    $0x10,%esp
 }
 80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -229,7 +229,7 @@
 8010019e:	66 90                	xchg   %ax,%ax
   panic("bget: no buffers");
 801001a0:	83 ec 0c             	sub    $0xc,%esp
-801001a3:	68 8e 7b 10 80       	push   $0x80107b8e
+801001a3:	68 ee 70 10 80       	push   $0x801070ee
 801001a8:	e8 e3 01 00 00       	call   80100390 <panic>
 801001ad:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -248,7 +248,7 @@
   if(!holdingsleep(&b->lock))
 801001be:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001c1:	50                   	push   %eax
-801001c2:	e8 09 4c 00 00       	call   80104dd0 <holdingsleep>
+801001c2:	e8 b9 41 00 00       	call   80104380 <holdingsleep>
 801001c7:	83 c4 10             	add    $0x10,%esp
 801001ca:	85 c0                	test   %eax,%eax
 801001cc:	74 0f                	je     801001dd <bwrite+0x2d>
@@ -261,10 +261,10 @@
 801001d4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 801001d7:	c9                   	leave  
   iderw(b);
-801001d8:	e9 f3 2a 00 00       	jmp    80102cd0 <iderw>
+801001d8:	e9 a3 20 00 00       	jmp    80102280 <iderw>
     panic("bwrite");
 801001dd:	83 ec 0c             	sub    $0xc,%esp
-801001e0:	68 9f 7b 10 80       	push   $0x80107b9f
+801001e0:	68 ff 70 10 80       	push   $0x801070ff
 801001e5:	e8 a6 01 00 00       	call   80100390 <panic>
 801001ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
@@ -285,7 +285,7 @@
 801001fc:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001ff:	83 ec 0c             	sub    $0xc,%esp
 80100202:	56                   	push   %esi
-80100203:	e8 c8 4b 00 00       	call   80104dd0 <holdingsleep>
+80100203:	e8 78 41 00 00       	call   80104380 <holdingsleep>
 80100208:	83 c4 10             	add    $0x10,%esp
 8010020b:	85 c0                	test   %eax,%eax
 8010020d:	74 66                	je     80100275 <brelse+0x85>
@@ -294,11 +294,11 @@
   releasesleep(&b->lock);
 8010020f:	83 ec 0c             	sub    $0xc,%esp
 80100212:	56                   	push   %esi
-80100213:	e8 78 4b 00 00       	call   80104d90 <releasesleep>
+80100213:	e8 28 41 00 00       	call   80104340 <releasesleep>
 
   acquire(&bcache.lock);
-80100218:	c7 04 24 c0 c5 10 80 	movl   $0x8010c5c0,(%esp)
-8010021f:	e8 8c 4d 00 00       	call   80104fb0 <acquire>
+80100218:	c7 04 24 c0 b5 10 80 	movl   $0x8010b5c0,(%esp)
+8010021f:	e8 3c 43 00 00       	call   80104560 <acquire>
   b->refcnt--;
 80100224:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -319,30 +319,30 @@
 80100240:	8b 53 54             	mov    0x54(%ebx),%edx
 80100243:	89 50 54             	mov    %edx,0x54(%eax)
     b->next = bcache.head.next;
-80100246:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+80100246:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
     b->prev = &bcache.head;
-8010024b:	c7 43 50 bc 0c 11 80 	movl   $0x80110cbc,0x50(%ebx)
+8010024b:	c7 43 50 bc fc 10 80 	movl   $0x8010fcbc,0x50(%ebx)
     b->next = bcache.head.next;
 80100252:	89 43 54             	mov    %eax,0x54(%ebx)
     bcache.head.next->prev = b;
-80100255:	a1 10 0d 11 80       	mov    0x80110d10,%eax
+80100255:	a1 10 fd 10 80       	mov    0x8010fd10,%eax
 8010025a:	89 58 50             	mov    %ebx,0x50(%eax)
     bcache.head.next = b;
-8010025d:	89 1d 10 0d 11 80    	mov    %ebx,0x80110d10
+8010025d:	89 1d 10 fd 10 80    	mov    %ebx,0x8010fd10
   }
   
   release(&bcache.lock);
-80100263:	c7 45 08 c0 c5 10 80 	movl   $0x8010c5c0,0x8(%ebp)
+80100263:	c7 45 08 c0 b5 10 80 	movl   $0x8010b5c0,0x8(%ebp)
 }
 8010026a:	8d 65 f8             	lea    -0x8(%ebp),%esp
 8010026d:	5b                   	pop    %ebx
 8010026e:	5e                   	pop    %esi
 8010026f:	5d                   	pop    %ebp
   release(&bcache.lock);
-80100270:	e9 fb 4d 00 00       	jmp    80105070 <release>
+80100270:	e9 ab 43 00 00       	jmp    80104620 <release>
     panic("brelse");
 80100275:	83 ec 0c             	sub    $0xc,%esp
-80100278:	68 a6 7b 10 80       	push   $0x80107ba6
+80100278:	68 06 71 10 80       	push   $0x80107106
 8010027d:	e8 0e 01 00 00       	call   80100390 <panic>
 80100282:	66 90                	xchg   %ax,%ax
 80100284:	66 90                	xchg   %ax,%ax
@@ -353,9 +353,9 @@
 8010028e:	66 90                	xchg   %ax,%ax
 
 80100290 <consoleread>:
-  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
-  return 0;
+  }
 }
+
 int
 consoleread(struct inode *ip, char *dst, int n)
 {
@@ -376,10 +376,10 @@
   target = n;
 801002a3:	89 de                	mov    %ebx,%esi
   iunlock(ip);
-801002a5:	e8 e6 1f 00 00       	call   80102290 <iunlock>
+801002a5:	e8 96 15 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-801002aa:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
-801002b1:	e8 fa 4c 00 00       	call   80104fb0 <acquire>
+801002aa:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+801002b1:	e8 aa 42 00 00       	call   80104560 <acquire>
         // caller gets a 0-byte result.
         input.r--;
       }
@@ -395,34 +395,34 @@
 801002be:	85 db                	test   %ebx,%ebx
 801002c0:	0f 8e 97 00 00 00    	jle    8010035d <consoleread+0xcd>
     while(input.r == input.w){
-801002c6:	a1 20 10 11 80       	mov    0x80111020,%eax
-801002cb:	3b 05 24 10 11 80    	cmp    0x80111024,%eax
+801002c6:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+801002cb:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
 801002d1:	74 27                	je     801002fa <consoleread+0x6a>
 801002d3:	eb 5b                	jmp    80100330 <consoleread+0xa0>
 801002d5:	8d 76 00             	lea    0x0(%esi),%esi
       sleep(&input.r, &cons.lock);
 801002d8:	83 ec 08             	sub    $0x8,%esp
-801002db:	68 20 b5 10 80       	push   $0x8010b520
-801002e0:	68 20 10 11 80       	push   $0x80111020
-801002e5:	e8 86 46 00 00       	call   80104970 <sleep>
+801002db:	68 20 a5 10 80       	push   $0x8010a520
+801002e0:	68 a0 ff 10 80       	push   $0x8010ffa0
+801002e5:	e8 36 3c 00 00       	call   80103f20 <sleep>
     while(input.r == input.w){
-801002ea:	a1 20 10 11 80       	mov    0x80111020,%eax
+801002ea:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
 801002ef:	83 c4 10             	add    $0x10,%esp
-801002f2:	3b 05 24 10 11 80    	cmp    0x80111024,%eax
+801002f2:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
 801002f8:	75 36                	jne    80100330 <consoleread+0xa0>
       if(myproc()->killed){
-801002fa:	e8 b1 40 00 00       	call   801043b0 <myproc>
+801002fa:	e8 61 36 00 00       	call   80103960 <myproc>
 801002ff:	8b 48 24             	mov    0x24(%eax),%ecx
 80100302:	85 c9                	test   %ecx,%ecx
 80100304:	74 d2                	je     801002d8 <consoleread+0x48>
         release(&cons.lock);
 80100306:	83 ec 0c             	sub    $0xc,%esp
-80100309:	68 20 b5 10 80       	push   $0x8010b520
-8010030e:	e8 5d 4d 00 00       	call   80105070 <release>
+80100309:	68 20 a5 10 80       	push   $0x8010a520
+8010030e:	e8 0d 43 00 00       	call   80104620 <release>
         ilock(ip);
 80100313:	5a                   	pop    %edx
 80100314:	ff 75 08             	pushl  0x8(%ebp)
-80100317:	e8 94 1e 00 00       	call   801021b0 <ilock>
+80100317:	e8 44 14 00 00       	call   80101760 <ilock>
         return -1;
 8010031c:	83 c4 10             	add    $0x10,%esp
   }
@@ -443,10 +443,10 @@
 8010032c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     c = input.buf[input.r++ % INPUT_BUF];
 80100330:	8d 50 01             	lea    0x1(%eax),%edx
-80100333:	89 15 20 10 11 80    	mov    %edx,0x80111020
+80100333:	89 15 a0 ff 10 80    	mov    %edx,0x8010ffa0
 80100339:	89 c2                	mov    %eax,%edx
 8010033b:	83 e2 7f             	and    $0x7f,%edx
-8010033e:	0f be 8a a0 0f 11 80 	movsbl -0x7feef060(%edx),%ecx
+8010033e:	0f be 8a 20 ff 10 80 	movsbl -0x7fef00e0(%edx),%ecx
     if(c == C('D')){  // EOF
 80100345:	80 f9 04             	cmp    $0x4,%cl
 80100348:	74 38                	je     80100382 <consoleread+0xf2>
@@ -462,12 +462,12 @@
 80100357:	0f 85 61 ff ff ff    	jne    801002be <consoleread+0x2e>
   release(&cons.lock);
 8010035d:	83 ec 0c             	sub    $0xc,%esp
-80100360:	68 20 b5 10 80       	push   $0x8010b520
-80100365:	e8 06 4d 00 00       	call   80105070 <release>
+80100360:	68 20 a5 10 80       	push   $0x8010a520
+80100365:	e8 b6 42 00 00       	call   80104620 <release>
   ilock(ip);
 8010036a:	58                   	pop    %eax
 8010036b:	ff 75 08             	pushl  0x8(%ebp)
-8010036e:	e8 3d 1e 00 00       	call   801021b0 <ilock>
+8010036e:	e8 ed 13 00 00       	call   80101760 <ilock>
   return target - n;
 80100373:	89 f0                	mov    %esi,%eax
 80100375:	83 c4 10             	add    $0x10,%esp
@@ -485,7 +485,7 @@
 80100382:	39 f3                	cmp    %esi,%ebx
 80100384:	73 d7                	jae    8010035d <consoleread+0xcd>
         input.r--;
-80100386:	a3 20 10 11 80       	mov    %eax,0x80111020
+80100386:	a3 a0 ff 10 80       	mov    %eax,0x8010ffa0
 8010038b:	eb d0                	jmp    8010035d <consoleread+0xcd>
 8010038d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -505,45 +505,45 @@
   asm volatile("cli");
 8010039c:	fa                   	cli    
   cons.locking = 0;
-8010039d:	c7 05 54 b5 10 80 00 	movl   $0x0,0x8010b554
+8010039d:	c7 05 54 a5 10 80 00 	movl   $0x0,0x8010a554
 801003a4:	00 00 00 
   getcallerpcs(&s, pcs);
 801003a7:	8d 5d d0             	lea    -0x30(%ebp),%ebx
 801003aa:	8d 75 f8             	lea    -0x8(%ebp),%esi
   cprintf("lapicid %d: panic: ", lapicid());
-801003ad:	e8 3e 2f 00 00       	call   801032f0 <lapicid>
+801003ad:	e8 ee 24 00 00       	call   801028a0 <lapicid>
 801003b2:	83 ec 08             	sub    $0x8,%esp
 801003b5:	50                   	push   %eax
-801003b6:	68 ad 7b 10 80       	push   $0x80107bad
-801003bb:	e8 30 03 00 00       	call   801006f0 <cprintf>
+801003b6:	68 0d 71 10 80       	push   $0x8010710d
+801003bb:	e8 f0 02 00 00       	call   801006b0 <cprintf>
   cprintf(s);
 801003c0:	58                   	pop    %eax
 801003c1:	ff 75 08             	pushl  0x8(%ebp)
-801003c4:	e8 27 03 00 00       	call   801006f0 <cprintf>
+801003c4:	e8 e7 02 00 00       	call   801006b0 <cprintf>
   cprintf("\n");
-801003c9:	c7 04 24 1b 85 10 80 	movl   $0x8010851b,(%esp)
-801003d0:	e8 1b 03 00 00       	call   801006f0 <cprintf>
+801003c9:	c7 04 24 37 7a 10 80 	movl   $0x80107a37,(%esp)
+801003d0:	e8 db 02 00 00       	call   801006b0 <cprintf>
   getcallerpcs(&s, pcs);
 801003d5:	8d 45 08             	lea    0x8(%ebp),%eax
 801003d8:	5a                   	pop    %edx
 801003d9:	59                   	pop    %ecx
 801003da:	53                   	push   %ebx
 801003db:	50                   	push   %eax
-801003dc:	e8 6f 4a 00 00       	call   80104e50 <getcallerpcs>
+801003dc:	e8 1f 40 00 00       	call   80104400 <getcallerpcs>
   for(i=0; i<10; i++)
 801003e1:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
 801003e4:	83 ec 08             	sub    $0x8,%esp
 801003e7:	ff 33                	pushl  (%ebx)
 801003e9:	83 c3 04             	add    $0x4,%ebx
-801003ec:	68 c1 7b 10 80       	push   $0x80107bc1
-801003f1:	e8 fa 02 00 00       	call   801006f0 <cprintf>
+801003ec:	68 21 71 10 80       	push   $0x80107121
+801003f1:	e8 ba 02 00 00       	call   801006b0 <cprintf>
   for(i=0; i<10; i++)
 801003f6:	83 c4 10             	add    $0x10,%esp
 801003f9:	39 f3                	cmp    %esi,%ebx
 801003fb:	75 e7                	jne    801003e4 <panic+0x54>
   panicked = 1; // freeze other CPU
-801003fd:	c7 05 58 b5 10 80 01 	movl   $0x1,0x8010b558
+801003fd:	c7 05 58 a5 10 80 01 	movl   $0x1,0x8010a558
 80100404:	00 00 00 
   for(;;)
 80100407:	eb fe                	jmp    80100407 <panic+0x77>
@@ -555,16131 +555,15031 @@
 80100411:	89 e5                	mov    %esp,%ebp
 80100413:	57                   	push   %edi
 80100414:	56                   	push   %esi
-80100415:	89 c6                	mov    %eax,%esi
-80100417:	53                   	push   %ebx
+80100415:	53                   	push   %ebx
+80100416:	89 c3                	mov    %eax,%ebx
 80100418:	83 ec 1c             	sub    $0x1c,%esp
   if(c == BACKSPACE){
 8010041b:	3d 00 01 00 00       	cmp    $0x100,%eax
-80100420:	0f 84 6a 01 00 00    	je     80100590 <consputc.part.0+0x180>
-  else if( c== LEFTARROW){
-80100426:	3d e4 00 00 00       	cmp    $0xe4,%eax
-8010042b:	0f 84 47 01 00 00    	je     80100578 <consputc.part.0+0x168>
+80100420:	0f 84 ea 00 00 00    	je     80100510 <consputc.part.0+0x100>
     uartputc(c);
-80100431:	83 ec 0c             	sub    $0xc,%esp
-80100434:	50                   	push   %eax
-80100435:	e8 46 63 00 00       	call   80106780 <uartputc>
-8010043a:	83 c4 10             	add    $0x10,%esp
+80100426:	83 ec 0c             	sub    $0xc,%esp
+80100429:	50                   	push   %eax
+8010042a:	e8 b1 58 00 00       	call   80105ce0 <uartputc>
+8010042f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010043d:	bb d4 03 00 00       	mov    $0x3d4,%ebx
-80100442:	b8 0e 00 00 00       	mov    $0xe,%eax
-80100447:	89 da                	mov    %ebx,%edx
-80100449:	ee                   	out    %al,(%dx)
+80100432:	bf d4 03 00 00       	mov    $0x3d4,%edi
+80100437:	b8 0e 00 00 00       	mov    $0xe,%eax
+8010043c:	89 fa                	mov    %edi,%edx
+8010043e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010044a:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
-8010044f:	89 ca                	mov    %ecx,%edx
-80100451:	ec                   	in     (%dx),%al
+8010043f:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+80100444:	89 ca                	mov    %ecx,%edx
+80100446:	ec                   	in     (%dx),%al
   pos = inb(CRTPORT+1) << 8;
-80100452:	0f b6 f8             	movzbl %al,%edi
+80100447:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80100455:	89 da                	mov    %ebx,%edx
-80100457:	b8 0f 00 00 00       	mov    $0xf,%eax
-8010045c:	c1 e7 08             	shl    $0x8,%edi
-8010045f:	ee                   	out    %al,(%dx)
+8010044a:	89 fa                	mov    %edi,%edx
+8010044c:	c1 e0 08             	shl    $0x8,%eax
+8010044f:	89 c6                	mov    %eax,%esi
+80100451:	b8 0f 00 00 00       	mov    $0xf,%eax
+80100456:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80100460:	89 ca                	mov    %ecx,%edx
-80100462:	ec                   	in     (%dx),%al
+80100457:	89 ca                	mov    %ecx,%edx
+80100459:	ec                   	in     (%dx),%al
   pos |= inb(CRTPORT+1);
-80100463:	0f b6 d8             	movzbl %al,%ebx
-80100466:	09 fb                	or     %edi,%ebx
+8010045a:	0f b6 c0             	movzbl %al,%eax
+8010045d:	09 f0                	or     %esi,%eax
   if(c == '\n')
-80100468:	83 fe 0a             	cmp    $0xa,%esi
-8010046b:	0f 84 9f 00 00 00    	je     80100510 <consputc.part.0+0x100>
+8010045f:	83 fb 0a             	cmp    $0xa,%ebx
+80100462:	0f 84 90 00 00 00    	je     801004f8 <consputc.part.0+0xe8>
   else if(c == BACKSPACE){
-80100471:	81 fe 00 01 00 00    	cmp    $0x100,%esi
-80100477:	0f 84 83 00 00 00    	je     80100500 <consputc.part.0+0xf0>
-  else if (c == LEFTARROW)
-8010047d:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
-80100483:	74 7b                	je     80100500 <consputc.part.0+0xf0>
-    crt[pos++] = (c & 0xff) | 0x0f00; // black on white
-80100485:	89 f0                	mov    %esi,%eax
-80100487:	0f b6 c0             	movzbl %al,%eax
-8010048a:	80 cc 0f             	or     $0xf,%ah
-8010048d:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
-80100494:	80 
-80100495:	83 c3 01             	add    $0x1,%ebx
-  if (pos < 0 || pos > 25 * 80)
-80100498:	81 fb d0 07 00 00    	cmp    $0x7d0,%ebx
-8010049e:	0f 8f 29 01 00 00    	jg     801005cd <consputc.part.0+0x1bd>
-  if ((pos / 80) >= 24)
-801004a4:	81 fb 7f 07 00 00    	cmp    $0x77f,%ebx
-801004aa:	0f 8f 80 00 00 00    	jg     80100530 <consputc.part.0+0x120>
-801004b0:	0f b6 c7             	movzbl %bh,%eax
-801004b3:	88 5d e7             	mov    %bl,-0x19(%ebp)
-801004b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100468:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
+8010046e:	74 70                	je     801004e0 <consputc.part.0+0xd0>
+    crt[pos++] = (c&0xff) | 0x0700;  // black on white
+80100470:	0f b6 db             	movzbl %bl,%ebx
+80100473:	8d 70 01             	lea    0x1(%eax),%esi
+80100476:	80 cf 07             	or     $0x7,%bh
+80100479:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
+80100480:	80 
+  if(pos < 0 || pos > 25*80)
+80100481:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
+80100487:	0f 8f f9 00 00 00    	jg     80100586 <consputc.part.0+0x176>
+  if((pos/80) >= 24){  // Scroll up.
+8010048d:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
+80100493:	0f 8f a7 00 00 00    	jg     80100540 <consputc.part.0+0x130>
+80100499:	89 f0                	mov    %esi,%eax
+8010049b:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
+801004a2:	88 45 e7             	mov    %al,-0x19(%ebp)
+801004a5:	0f b6 fc             	movzbl %ah,%edi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801004b9:	bf d4 03 00 00       	mov    $0x3d4,%edi
-801004be:	b8 0e 00 00 00       	mov    $0xe,%eax
-801004c3:	89 fa                	mov    %edi,%edx
-801004c5:	ee                   	out    %al,(%dx)
-801004c6:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
-801004cb:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
-801004cf:	89 ca                	mov    %ecx,%edx
-801004d1:	ee                   	out    %al,(%dx)
-801004d2:	b8 0f 00 00 00       	mov    $0xf,%eax
-801004d7:	89 fa                	mov    %edi,%edx
-801004d9:	ee                   	out    %al,(%dx)
-801004da:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-801004de:	89 ca                	mov    %ecx,%edx
-801004e0:	ee                   	out    %al,(%dx)
-  if (c == BACKSPACE)
-801004e1:	81 fe 00 01 00 00    	cmp    $0x100,%esi
-801004e7:	75 0d                	jne    801004f6 <consputc.part.0+0xe6>
+801004a8:	bb d4 03 00 00       	mov    $0x3d4,%ebx
+801004ad:	b8 0e 00 00 00       	mov    $0xe,%eax
+801004b2:	89 da                	mov    %ebx,%edx
+801004b4:	ee                   	out    %al,(%dx)
+801004b5:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
+801004ba:	89 f8                	mov    %edi,%eax
+801004bc:	89 ca                	mov    %ecx,%edx
+801004be:	ee                   	out    %al,(%dx)
+801004bf:	b8 0f 00 00 00       	mov    $0xf,%eax
+801004c4:	89 da                	mov    %ebx,%edx
+801004c6:	ee                   	out    %al,(%dx)
+801004c7:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+801004cb:	89 ca                	mov    %ecx,%edx
+801004cd:	ee                   	out    %al,(%dx)
   crt[pos] = ' ' | 0x0700;
-801004e9:	b8 20 07 00 00       	mov    $0x720,%eax
-801004ee:	66 89 84 1b 00 80 0b 	mov    %ax,-0x7ff48000(%ebx,%ebx,1)
-801004f5:	80 
-}
-801004f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801004f9:	5b                   	pop    %ebx
-801004fa:	5e                   	pop    %esi
-801004fb:	5f                   	pop    %edi
-801004fc:	5d                   	pop    %ebp
-801004fd:	c3                   	ret    
-801004fe:	66 90                	xchg   %ax,%ax
-    if(pos>0)
-80100500:	85 db                	test   %ebx,%ebx
-80100502:	0f 84 b8 00 00 00    	je     801005c0 <consputc.part.0+0x1b0>
-    --pos;
-80100508:	83 eb 01             	sub    $0x1,%ebx
-8010050b:	eb 8b                	jmp    80100498 <consputc.part.0+0x88>
-8010050d:	8d 76 00             	lea    0x0(%esi),%esi
+801004ce:	b8 20 07 00 00       	mov    $0x720,%eax
+801004d3:	66 89 06             	mov    %ax,(%esi)
+}
+801004d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801004d9:	5b                   	pop    %ebx
+801004da:	5e                   	pop    %esi
+801004db:	5f                   	pop    %edi
+801004dc:	5d                   	pop    %ebp
+801004dd:	c3                   	ret    
+801004de:	66 90                	xchg   %ax,%ax
+    if(pos > 0) --pos;
+801004e0:	8d 70 ff             	lea    -0x1(%eax),%esi
+801004e3:	85 c0                	test   %eax,%eax
+801004e5:	75 9a                	jne    80100481 <consputc.part.0+0x71>
+801004e7:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
+801004eb:	be 00 80 0b 80       	mov    $0x800b8000,%esi
+801004f0:	31 ff                	xor    %edi,%edi
+801004f2:	eb b4                	jmp    801004a8 <consputc.part.0+0x98>
+801004f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     pos += 80 - pos%80;
-80100510:	89 d8                	mov    %ebx,%eax
-80100512:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
-80100517:	f7 e2                	mul    %edx
-80100519:	c1 ea 06             	shr    $0x6,%edx
-8010051c:	8d 04 92             	lea    (%edx,%edx,4),%eax
-8010051f:	c1 e0 04             	shl    $0x4,%eax
-80100522:	8d 58 50             	lea    0x50(%eax),%ebx
-80100525:	e9 6e ff ff ff       	jmp    80100498 <consputc.part.0+0x88>
-8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    memmove(crt, crt+80, sizeof(crt[0]) * 23 * 80);
-80100530:	83 ec 04             	sub    $0x4,%esp
-    pos -= 80;
-80100533:	83 eb 50             	sub    $0x50,%ebx
-    memmove(crt, crt+80, sizeof(crt[0]) * 23 * 80);
-80100536:	68 60 0e 00 00       	push   $0xe60
-8010053b:	68 a0 80 0b 80       	push   $0x800b80a0
-80100540:	68 00 80 0b 80       	push   $0x800b8000
-80100545:	e8 16 4c 00 00       	call   80105160 <memmove>
-    memset(crt+pos, 0, sizeof(crt[0]) * (24 * 80 - pos));
-8010054a:	b8 80 07 00 00       	mov    $0x780,%eax
-8010054f:	83 c4 0c             	add    $0xc,%esp
-80100552:	29 d8                	sub    %ebx,%eax
-80100554:	01 c0                	add    %eax,%eax
-80100556:	50                   	push   %eax
-80100557:	8d 84 1b 00 80 0b 80 	lea    -0x7ff48000(%ebx,%ebx,1),%eax
-8010055e:	6a 00                	push   $0x0
-80100560:	50                   	push   %eax
-80100561:	e8 5a 4b 00 00       	call   801050c0 <memset>
-80100566:	88 5d e7             	mov    %bl,-0x19(%ebp)
-80100569:	83 c4 10             	add    $0x10,%esp
-8010056c:	c6 45 e0 07          	movb   $0x7,-0x20(%ebp)
-80100570:	e9 44 ff ff ff       	jmp    801004b9 <consputc.part.0+0xa9>
-80100575:	8d 76 00             	lea    0x0(%esi),%esi
-    uartputc('\b');
-80100578:	83 ec 0c             	sub    $0xc,%esp
-8010057b:	6a 08                	push   $0x8
-8010057d:	e8 fe 61 00 00       	call   80106780 <uartputc>
-80100582:	83 c4 10             	add    $0x10,%esp
-80100585:	e9 b3 fe ff ff       	jmp    8010043d <consputc.part.0+0x2d>
-8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801004f8:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
+801004fd:	f7 e2                	mul    %edx
+801004ff:	c1 ea 06             	shr    $0x6,%edx
+80100502:	8d 04 92             	lea    (%edx,%edx,4),%eax
+80100505:	c1 e0 04             	shl    $0x4,%eax
+80100508:	8d 70 50             	lea    0x50(%eax),%esi
+8010050b:	e9 71 ff ff ff       	jmp    80100481 <consputc.part.0+0x71>
     uartputc('\b'); uartputc(' '); uartputc('\b');
-80100590:	83 ec 0c             	sub    $0xc,%esp
-80100593:	6a 08                	push   $0x8
-80100595:	e8 e6 61 00 00       	call   80106780 <uartputc>
-8010059a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-801005a1:	e8 da 61 00 00       	call   80106780 <uartputc>
-801005a6:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-801005ad:	e8 ce 61 00 00       	call   80106780 <uartputc>
-801005b2:	83 c4 10             	add    $0x10,%esp
-801005b5:	e9 83 fe ff ff       	jmp    8010043d <consputc.part.0+0x2d>
-801005ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801005c0:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
-801005c4:	c6 45 e0 00          	movb   $0x0,-0x20(%ebp)
-801005c8:	e9 ec fe ff ff       	jmp    801004b9 <consputc.part.0+0xa9>
+80100510:	83 ec 0c             	sub    $0xc,%esp
+80100513:	6a 08                	push   $0x8
+80100515:	e8 c6 57 00 00       	call   80105ce0 <uartputc>
+8010051a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
+80100521:	e8 ba 57 00 00       	call   80105ce0 <uartputc>
+80100526:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+8010052d:	e8 ae 57 00 00       	call   80105ce0 <uartputc>
+80100532:	83 c4 10             	add    $0x10,%esp
+80100535:	e9 f8 fe ff ff       	jmp    80100432 <consputc.part.0+0x22>
+8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100540:	83 ec 04             	sub    $0x4,%esp
+    pos -= 80;
+80100543:	8d 5e b0             	lea    -0x50(%esi),%ebx
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100546:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
+8010054d:	bf 07 00 00 00       	mov    $0x7,%edi
+    memmove(crt, crt+80, sizeof(crt[0])*23*80);
+80100552:	68 60 0e 00 00       	push   $0xe60
+80100557:	68 a0 80 0b 80       	push   $0x800b80a0
+8010055c:	68 00 80 0b 80       	push   $0x800b8000
+80100561:	e8 aa 41 00 00       	call   80104710 <memmove>
+    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
+80100566:	b8 80 07 00 00       	mov    $0x780,%eax
+8010056b:	83 c4 0c             	add    $0xc,%esp
+8010056e:	29 d8                	sub    %ebx,%eax
+80100570:	01 c0                	add    %eax,%eax
+80100572:	50                   	push   %eax
+80100573:	6a 00                	push   $0x0
+80100575:	56                   	push   %esi
+80100576:	e8 f5 40 00 00       	call   80104670 <memset>
+8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
+8010057e:	83 c4 10             	add    $0x10,%esp
+80100581:	e9 22 ff ff ff       	jmp    801004a8 <consputc.part.0+0x98>
     panic("pos under/overflow");
-801005cd:	83 ec 0c             	sub    $0xc,%esp
-801005d0:	68 c5 7b 10 80       	push   $0x80107bc5
-801005d5:	e8 b6 fd ff ff       	call   80100390 <panic>
-801005da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801005e0 <printint>:
-{
-801005e0:	55                   	push   %ebp
-801005e1:	89 e5                	mov    %esp,%ebp
-801005e3:	57                   	push   %edi
-801005e4:	56                   	push   %esi
-801005e5:	53                   	push   %ebx
-801005e6:	83 ec 2c             	sub    $0x2c,%esp
-801005e9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80100586:	83 ec 0c             	sub    $0xc,%esp
+80100589:	68 25 71 10 80       	push   $0x80107125
+8010058e:	e8 fd fd ff ff       	call   80100390 <panic>
+80100593:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010059a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801005a0 <printint>:
+{
+801005a0:	55                   	push   %ebp
+801005a1:	89 e5                	mov    %esp,%ebp
+801005a3:	57                   	push   %edi
+801005a4:	56                   	push   %esi
+801005a5:	53                   	push   %ebx
+801005a6:	83 ec 2c             	sub    $0x2c,%esp
+801005a9:	89 55 d4             	mov    %edx,-0x2c(%ebp)
   if(sign && (sign = xx < 0))
-801005ec:	85 c9                	test   %ecx,%ecx
-801005ee:	74 04                	je     801005f4 <printint+0x14>
-801005f0:	85 c0                	test   %eax,%eax
-801005f2:	78 6d                	js     80100661 <printint+0x81>
+801005ac:	85 c9                	test   %ecx,%ecx
+801005ae:	74 04                	je     801005b4 <printint+0x14>
+801005b0:	85 c0                	test   %eax,%eax
+801005b2:	78 6d                	js     80100621 <printint+0x81>
     x = xx;
-801005f4:	89 c1                	mov    %eax,%ecx
-801005f6:	31 f6                	xor    %esi,%esi
+801005b4:	89 c1                	mov    %eax,%ecx
+801005b6:	31 f6                	xor    %esi,%esi
   i = 0;
-801005f8:	89 75 cc             	mov    %esi,-0x34(%ebp)
-801005fb:	31 db                	xor    %ebx,%ebx
-801005fd:	8d 7d d7             	lea    -0x29(%ebp),%edi
+801005b8:	89 75 cc             	mov    %esi,-0x34(%ebp)
+801005bb:	31 db                	xor    %ebx,%ebx
+801005bd:	8d 7d d7             	lea    -0x29(%ebp),%edi
     buf[i++] = digits[x % base];
-80100600:	89 c8                	mov    %ecx,%eax
-80100602:	31 d2                	xor    %edx,%edx
-80100604:	89 ce                	mov    %ecx,%esi
-80100606:	f7 75 d4             	divl   -0x2c(%ebp)
-80100609:	0f b6 92 28 7c 10 80 	movzbl -0x7fef83d8(%edx),%edx
-80100610:	89 45 d0             	mov    %eax,-0x30(%ebp)
-80100613:	89 d8                	mov    %ebx,%eax
-80100615:	8d 5b 01             	lea    0x1(%ebx),%ebx
+801005c0:	89 c8                	mov    %ecx,%eax
+801005c2:	31 d2                	xor    %edx,%edx
+801005c4:	89 ce                	mov    %ecx,%esi
+801005c6:	f7 75 d4             	divl   -0x2c(%ebp)
+801005c9:	0f b6 92 50 71 10 80 	movzbl -0x7fef8eb0(%edx),%edx
+801005d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+801005d3:	89 d8                	mov    %ebx,%eax
+801005d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-80100618:	8b 4d d0             	mov    -0x30(%ebp),%ecx
-8010061b:	89 75 d0             	mov    %esi,-0x30(%ebp)
+801005d8:	8b 4d d0             	mov    -0x30(%ebp),%ecx
+801005db:	89 75 d0             	mov    %esi,-0x30(%ebp)
     buf[i++] = digits[x % base];
-8010061e:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
+801005de:	88 14 1f             	mov    %dl,(%edi,%ebx,1)
   }while((x /= base) != 0);
-80100621:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-80100624:	39 75 d0             	cmp    %esi,-0x30(%ebp)
-80100627:	73 d7                	jae    80100600 <printint+0x20>
-80100629:	8b 75 cc             	mov    -0x34(%ebp),%esi
+801005e1:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+801005e4:	39 75 d0             	cmp    %esi,-0x30(%ebp)
+801005e7:	73 d7                	jae    801005c0 <printint+0x20>
+801005e9:	8b 75 cc             	mov    -0x34(%ebp),%esi
   if(sign)
-8010062c:	85 f6                	test   %esi,%esi
-8010062e:	74 0c                	je     8010063c <printint+0x5c>
+801005ec:	85 f6                	test   %esi,%esi
+801005ee:	74 0c                	je     801005fc <printint+0x5c>
     buf[i++] = '-';
-80100630:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+801005f0:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-80100635:	89 d8                	mov    %ebx,%eax
+801005f5:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-80100637:	ba 2d 00 00 00       	mov    $0x2d,%edx
+801005f7:	ba 2d 00 00 00       	mov    $0x2d,%edx
   while(--i >= 0)
-8010063c:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-80100640:	0f be c2             	movsbl %dl,%eax
+801005fc:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+80100600:	0f be c2             	movsbl %dl,%eax
   if(panicked){
-80100643:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-80100649:	85 d2                	test   %edx,%edx
-8010064b:	74 03                	je     80100650 <printint+0x70>
+80100603:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100609:	85 d2                	test   %edx,%edx
+8010060b:	74 03                	je     80100610 <printint+0x70>
   asm volatile("cli");
-8010064d:	fa                   	cli    
+8010060d:	fa                   	cli    
     for(;;)
-8010064e:	eb fe                	jmp    8010064e <printint+0x6e>
-80100650:	e8 bb fd ff ff       	call   80100410 <consputc.part.0>
+8010060e:	eb fe                	jmp    8010060e <printint+0x6e>
+80100610:	e8 fb fd ff ff       	call   80100410 <consputc.part.0>
   while(--i >= 0)
-80100655:	39 fb                	cmp    %edi,%ebx
-80100657:	74 10                	je     80100669 <printint+0x89>
-80100659:	0f be 03             	movsbl (%ebx),%eax
-8010065c:	83 eb 01             	sub    $0x1,%ebx
-8010065f:	eb e2                	jmp    80100643 <printint+0x63>
+80100615:	39 fb                	cmp    %edi,%ebx
+80100617:	74 10                	je     80100629 <printint+0x89>
+80100619:	0f be 03             	movsbl (%ebx),%eax
+8010061c:	83 eb 01             	sub    $0x1,%ebx
+8010061f:	eb e2                	jmp    80100603 <printint+0x63>
     x = -xx;
-80100661:	f7 d8                	neg    %eax
-80100663:	89 ce                	mov    %ecx,%esi
-80100665:	89 c1                	mov    %eax,%ecx
-80100667:	eb 8f                	jmp    801005f8 <printint+0x18>
-}
-80100669:	83 c4 2c             	add    $0x2c,%esp
-8010066c:	5b                   	pop    %ebx
-8010066d:	5e                   	pop    %esi
-8010066e:	5f                   	pop    %edi
-8010066f:	5d                   	pop    %ebp
-80100670:	c3                   	ret    
-80100671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100678:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010067f:	90                   	nop
+80100621:	f7 d8                	neg    %eax
+80100623:	89 ce                	mov    %ecx,%esi
+80100625:	89 c1                	mov    %eax,%ecx
+80100627:	eb 8f                	jmp    801005b8 <printint+0x18>
+}
+80100629:	83 c4 2c             	add    $0x2c,%esp
+8010062c:	5b                   	pop    %ebx
+8010062d:	5e                   	pop    %esi
+8010062e:	5f                   	pop    %edi
+8010062f:	5d                   	pop    %ebp
+80100630:	c3                   	ret    
+80100631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100638:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010063f:	90                   	nop
 
-80100680 <consolewrite>:
+80100640 <consolewrite>:
 
 int
 consolewrite(struct inode *ip, char *buf, int n)
 {
-80100680:	f3 0f 1e fb          	endbr32 
-80100684:	55                   	push   %ebp
-80100685:	89 e5                	mov    %esp,%ebp
-80100687:	57                   	push   %edi
-80100688:	56                   	push   %esi
-80100689:	53                   	push   %ebx
-8010068a:	83 ec 18             	sub    $0x18,%esp
+80100640:	f3 0f 1e fb          	endbr32 
+80100644:	55                   	push   %ebp
+80100645:	89 e5                	mov    %esp,%ebp
+80100647:	57                   	push   %edi
+80100648:	56                   	push   %esi
+80100649:	53                   	push   %ebx
+8010064a:	83 ec 18             	sub    $0x18,%esp
   int i;
 
   iunlock(ip);
-8010068d:	ff 75 08             	pushl  0x8(%ebp)
+8010064d:	ff 75 08             	pushl  0x8(%ebp)
 {
-80100690:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80100650:	8b 5d 10             	mov    0x10(%ebp),%ebx
   iunlock(ip);
-80100693:	e8 f8 1b 00 00       	call   80102290 <iunlock>
+80100653:	e8 e8 11 00 00       	call   80101840 <iunlock>
   acquire(&cons.lock);
-80100698:	c7 04 24 20 b5 10 80 	movl   $0x8010b520,(%esp)
-8010069f:	e8 0c 49 00 00       	call   80104fb0 <acquire>
+80100658:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
+8010065f:	e8 fc 3e 00 00       	call   80104560 <acquire>
   for(i = 0; i < n; i++)
-801006a4:	83 c4 10             	add    $0x10,%esp
-801006a7:	85 db                	test   %ebx,%ebx
-801006a9:	7e 24                	jle    801006cf <consolewrite+0x4f>
-801006ab:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801006ae:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
+80100664:	83 c4 10             	add    $0x10,%esp
+80100667:	85 db                	test   %ebx,%ebx
+80100669:	7e 24                	jle    8010068f <consolewrite+0x4f>
+8010066b:	8b 7d 0c             	mov    0xc(%ebp),%edi
+8010066e:	8d 34 1f             	lea    (%edi,%ebx,1),%esi
   if(panicked){
-801006b1:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-801006b7:	85 d2                	test   %edx,%edx
-801006b9:	74 05                	je     801006c0 <consolewrite+0x40>
-801006bb:	fa                   	cli    
+80100671:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100677:	85 d2                	test   %edx,%edx
+80100679:	74 05                	je     80100680 <consolewrite+0x40>
+8010067b:	fa                   	cli    
     for(;;)
-801006bc:	eb fe                	jmp    801006bc <consolewrite+0x3c>
-801006be:	66 90                	xchg   %ax,%ax
+8010067c:	eb fe                	jmp    8010067c <consolewrite+0x3c>
+8010067e:	66 90                	xchg   %ax,%ax
     consputc(buf[i] & 0xff);
-801006c0:	0f b6 07             	movzbl (%edi),%eax
-801006c3:	83 c7 01             	add    $0x1,%edi
-801006c6:	e8 45 fd ff ff       	call   80100410 <consputc.part.0>
+80100680:	0f b6 07             	movzbl (%edi),%eax
+80100683:	83 c7 01             	add    $0x1,%edi
+80100686:	e8 85 fd ff ff       	call   80100410 <consputc.part.0>
   for(i = 0; i < n; i++)
-801006cb:	39 fe                	cmp    %edi,%esi
-801006cd:	75 e2                	jne    801006b1 <consolewrite+0x31>
+8010068b:	39 fe                	cmp    %edi,%esi
+8010068d:	75 e2                	jne    80100671 <consolewrite+0x31>
   release(&cons.lock);
-801006cf:	83 ec 0c             	sub    $0xc,%esp
-801006d2:	68 20 b5 10 80       	push   $0x8010b520
-801006d7:	e8 94 49 00 00       	call   80105070 <release>
+8010068f:	83 ec 0c             	sub    $0xc,%esp
+80100692:	68 20 a5 10 80       	push   $0x8010a520
+80100697:	e8 84 3f 00 00       	call   80104620 <release>
   ilock(ip);
-801006dc:	58                   	pop    %eax
-801006dd:	ff 75 08             	pushl  0x8(%ebp)
-801006e0:	e8 cb 1a 00 00       	call   801021b0 <ilock>
+8010069c:	58                   	pop    %eax
+8010069d:	ff 75 08             	pushl  0x8(%ebp)
+801006a0:	e8 bb 10 00 00       	call   80101760 <ilock>
 
   return n;
 }
-801006e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801006e8:	89 d8                	mov    %ebx,%eax
-801006ea:	5b                   	pop    %ebx
-801006eb:	5e                   	pop    %esi
-801006ec:	5f                   	pop    %edi
-801006ed:	5d                   	pop    %ebp
-801006ee:	c3                   	ret    
-801006ef:	90                   	nop
-
-801006f0 <cprintf>:
-{
-801006f0:	f3 0f 1e fb          	endbr32 
-801006f4:	55                   	push   %ebp
-801006f5:	89 e5                	mov    %esp,%ebp
-801006f7:	57                   	push   %edi
-801006f8:	56                   	push   %esi
-801006f9:	53                   	push   %ebx
-801006fa:	83 ec 1c             	sub    $0x1c,%esp
+801006a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801006a8:	89 d8                	mov    %ebx,%eax
+801006aa:	5b                   	pop    %ebx
+801006ab:	5e                   	pop    %esi
+801006ac:	5f                   	pop    %edi
+801006ad:	5d                   	pop    %ebp
+801006ae:	c3                   	ret    
+801006af:	90                   	nop
+
+801006b0 <cprintf>:
+{
+801006b0:	f3 0f 1e fb          	endbr32 
+801006b4:	55                   	push   %ebp
+801006b5:	89 e5                	mov    %esp,%ebp
+801006b7:	57                   	push   %edi
+801006b8:	56                   	push   %esi
+801006b9:	53                   	push   %ebx
+801006ba:	83 ec 1c             	sub    $0x1c,%esp
   locking = cons.locking;
-801006fd:	a1 54 b5 10 80       	mov    0x8010b554,%eax
-80100702:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801006bd:	a1 54 a5 10 80       	mov    0x8010a554,%eax
+801006c2:	89 45 e0             	mov    %eax,-0x20(%ebp)
   if(locking)
-80100705:	85 c0                	test   %eax,%eax
-80100707:	0f 85 e8 00 00 00    	jne    801007f5 <cprintf+0x105>
+801006c5:	85 c0                	test   %eax,%eax
+801006c7:	0f 85 e8 00 00 00    	jne    801007b5 <cprintf+0x105>
   if (fmt == 0)
-8010070d:	8b 45 08             	mov    0x8(%ebp),%eax
-80100710:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80100713:	85 c0                	test   %eax,%eax
-80100715:	0f 84 5a 01 00 00    	je     80100875 <cprintf+0x185>
+801006cd:	8b 45 08             	mov    0x8(%ebp),%eax
+801006d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801006d3:	85 c0                	test   %eax,%eax
+801006d5:	0f 84 5a 01 00 00    	je     80100835 <cprintf+0x185>
   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-8010071b:	0f b6 00             	movzbl (%eax),%eax
-8010071e:	85 c0                	test   %eax,%eax
-80100720:	74 36                	je     80100758 <cprintf+0x68>
+801006db:	0f b6 00             	movzbl (%eax),%eax
+801006de:	85 c0                	test   %eax,%eax
+801006e0:	74 36                	je     80100718 <cprintf+0x68>
   argp = (uint*)(void*)(&fmt + 1);
-80100722:	8d 5d 0c             	lea    0xc(%ebp),%ebx
+801006e2:	8d 5d 0c             	lea    0xc(%ebp),%ebx
   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-80100725:	31 f6                	xor    %esi,%esi
+801006e5:	31 f6                	xor    %esi,%esi
     if(c != '%'){
-80100727:	83 f8 25             	cmp    $0x25,%eax
-8010072a:	74 44                	je     80100770 <cprintf+0x80>
+801006e7:	83 f8 25             	cmp    $0x25,%eax
+801006ea:	74 44                	je     80100730 <cprintf+0x80>
   if(panicked){
-8010072c:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
-80100732:	85 c9                	test   %ecx,%ecx
-80100734:	74 0f                	je     80100745 <cprintf+0x55>
-80100736:	fa                   	cli    
+801006ec:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801006f2:	85 c9                	test   %ecx,%ecx
+801006f4:	74 0f                	je     80100705 <cprintf+0x55>
+801006f6:	fa                   	cli    
     for(;;)
-80100737:	eb fe                	jmp    80100737 <cprintf+0x47>
-80100739:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100740:	b8 25 00 00 00       	mov    $0x25,%eax
-80100745:	e8 c6 fc ff ff       	call   80100410 <consputc.part.0>
+801006f7:	eb fe                	jmp    801006f7 <cprintf+0x47>
+801006f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100700:	b8 25 00 00 00       	mov    $0x25,%eax
+80100705:	e8 06 fd ff ff       	call   80100410 <consputc.part.0>
   for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-8010074a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010074d:	83 c6 01             	add    $0x1,%esi
-80100750:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
-80100754:	85 c0                	test   %eax,%eax
-80100756:	75 cf                	jne    80100727 <cprintf+0x37>
+8010070a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+8010070d:	83 c6 01             	add    $0x1,%esi
+80100710:	0f b6 04 30          	movzbl (%eax,%esi,1),%eax
+80100714:	85 c0                	test   %eax,%eax
+80100716:	75 cf                	jne    801006e7 <cprintf+0x37>
   if(locking)
-80100758:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010075b:	85 c0                	test   %eax,%eax
-8010075d:	0f 85 fd 00 00 00    	jne    80100860 <cprintf+0x170>
-}
-80100763:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100766:	5b                   	pop    %ebx
-80100767:	5e                   	pop    %esi
-80100768:	5f                   	pop    %edi
-80100769:	5d                   	pop    %ebp
-8010076a:	c3                   	ret    
-8010076b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010076f:	90                   	nop
+80100718:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010071b:	85 c0                	test   %eax,%eax
+8010071d:	0f 85 fd 00 00 00    	jne    80100820 <cprintf+0x170>
+}
+80100723:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100726:	5b                   	pop    %ebx
+80100727:	5e                   	pop    %esi
+80100728:	5f                   	pop    %edi
+80100729:	5d                   	pop    %ebp
+8010072a:	c3                   	ret    
+8010072b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010072f:	90                   	nop
     c = fmt[++i] & 0xff;
-80100770:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80100773:	83 c6 01             	add    $0x1,%esi
-80100776:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
+80100730:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80100733:	83 c6 01             	add    $0x1,%esi
+80100736:	0f b6 3c 30          	movzbl (%eax,%esi,1),%edi
     if(c == 0)
-8010077a:	85 ff                	test   %edi,%edi
-8010077c:	74 da                	je     80100758 <cprintf+0x68>
+8010073a:	85 ff                	test   %edi,%edi
+8010073c:	74 da                	je     80100718 <cprintf+0x68>
     switch(c){
-8010077e:	83 ff 70             	cmp    $0x70,%edi
-80100781:	74 5a                	je     801007dd <cprintf+0xed>
-80100783:	7f 2a                	jg     801007af <cprintf+0xbf>
-80100785:	83 ff 25             	cmp    $0x25,%edi
-80100788:	0f 84 92 00 00 00    	je     80100820 <cprintf+0x130>
-8010078e:	83 ff 64             	cmp    $0x64,%edi
-80100791:	0f 85 a1 00 00 00    	jne    80100838 <cprintf+0x148>
+8010073e:	83 ff 70             	cmp    $0x70,%edi
+80100741:	74 5a                	je     8010079d <cprintf+0xed>
+80100743:	7f 2a                	jg     8010076f <cprintf+0xbf>
+80100745:	83 ff 25             	cmp    $0x25,%edi
+80100748:	0f 84 92 00 00 00    	je     801007e0 <cprintf+0x130>
+8010074e:	83 ff 64             	cmp    $0x64,%edi
+80100751:	0f 85 a1 00 00 00    	jne    801007f8 <cprintf+0x148>
       printint(*argp++, 10, 1);
-80100797:	8b 03                	mov    (%ebx),%eax
-80100799:	8d 7b 04             	lea    0x4(%ebx),%edi
-8010079c:	b9 01 00 00 00       	mov    $0x1,%ecx
-801007a1:	ba 0a 00 00 00       	mov    $0xa,%edx
-801007a6:	89 fb                	mov    %edi,%ebx
-801007a8:	e8 33 fe ff ff       	call   801005e0 <printint>
+80100757:	8b 03                	mov    (%ebx),%eax
+80100759:	8d 7b 04             	lea    0x4(%ebx),%edi
+8010075c:	b9 01 00 00 00       	mov    $0x1,%ecx
+80100761:	ba 0a 00 00 00       	mov    $0xa,%edx
+80100766:	89 fb                	mov    %edi,%ebx
+80100768:	e8 33 fe ff ff       	call   801005a0 <printint>
       break;
-801007ad:	eb 9b                	jmp    8010074a <cprintf+0x5a>
+8010076d:	eb 9b                	jmp    8010070a <cprintf+0x5a>
     switch(c){
-801007af:	83 ff 73             	cmp    $0x73,%edi
-801007b2:	75 24                	jne    801007d8 <cprintf+0xe8>
+8010076f:	83 ff 73             	cmp    $0x73,%edi
+80100772:	75 24                	jne    80100798 <cprintf+0xe8>
       if((s = (char*)*argp++) == 0)
-801007b4:	8d 7b 04             	lea    0x4(%ebx),%edi
-801007b7:	8b 1b                	mov    (%ebx),%ebx
-801007b9:	85 db                	test   %ebx,%ebx
-801007bb:	75 55                	jne    80100812 <cprintf+0x122>
+80100774:	8d 7b 04             	lea    0x4(%ebx),%edi
+80100777:	8b 1b                	mov    (%ebx),%ebx
+80100779:	85 db                	test   %ebx,%ebx
+8010077b:	75 55                	jne    801007d2 <cprintf+0x122>
         s = "(null)";
-801007bd:	bb d8 7b 10 80       	mov    $0x80107bd8,%ebx
+8010077d:	bb 38 71 10 80       	mov    $0x80107138,%ebx
       for(; *s; s++)
-801007c2:	b8 28 00 00 00       	mov    $0x28,%eax
+80100782:	b8 28 00 00 00       	mov    $0x28,%eax
   if(panicked){
-801007c7:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-801007cd:	85 d2                	test   %edx,%edx
-801007cf:	74 39                	je     8010080a <cprintf+0x11a>
-801007d1:	fa                   	cli    
+80100787:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+8010078d:	85 d2                	test   %edx,%edx
+8010078f:	74 39                	je     801007ca <cprintf+0x11a>
+80100791:	fa                   	cli    
     for(;;)
-801007d2:	eb fe                	jmp    801007d2 <cprintf+0xe2>
-801007d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100792:	eb fe                	jmp    80100792 <cprintf+0xe2>
+80100794:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     switch(c){
-801007d8:	83 ff 78             	cmp    $0x78,%edi
-801007db:	75 5b                	jne    80100838 <cprintf+0x148>
+80100798:	83 ff 78             	cmp    $0x78,%edi
+8010079b:	75 5b                	jne    801007f8 <cprintf+0x148>
       printint(*argp++, 16, 0);
-801007dd:	8b 03                	mov    (%ebx),%eax
-801007df:	8d 7b 04             	lea    0x4(%ebx),%edi
-801007e2:	31 c9                	xor    %ecx,%ecx
-801007e4:	ba 10 00 00 00       	mov    $0x10,%edx
-801007e9:	89 fb                	mov    %edi,%ebx
-801007eb:	e8 f0 fd ff ff       	call   801005e0 <printint>
+8010079d:	8b 03                	mov    (%ebx),%eax
+8010079f:	8d 7b 04             	lea    0x4(%ebx),%edi
+801007a2:	31 c9                	xor    %ecx,%ecx
+801007a4:	ba 10 00 00 00       	mov    $0x10,%edx
+801007a9:	89 fb                	mov    %edi,%ebx
+801007ab:	e8 f0 fd ff ff       	call   801005a0 <printint>
       break;
-801007f0:	e9 55 ff ff ff       	jmp    8010074a <cprintf+0x5a>
+801007b0:	e9 55 ff ff ff       	jmp    8010070a <cprintf+0x5a>
     acquire(&cons.lock);
-801007f5:	83 ec 0c             	sub    $0xc,%esp
-801007f8:	68 20 b5 10 80       	push   $0x8010b520
-801007fd:	e8 ae 47 00 00       	call   80104fb0 <acquire>
-80100802:	83 c4 10             	add    $0x10,%esp
-80100805:	e9 03 ff ff ff       	jmp    8010070d <cprintf+0x1d>
-8010080a:	e8 01 fc ff ff       	call   80100410 <consputc.part.0>
+801007b5:	83 ec 0c             	sub    $0xc,%esp
+801007b8:	68 20 a5 10 80       	push   $0x8010a520
+801007bd:	e8 9e 3d 00 00       	call   80104560 <acquire>
+801007c2:	83 c4 10             	add    $0x10,%esp
+801007c5:	e9 03 ff ff ff       	jmp    801006cd <cprintf+0x1d>
+801007ca:	e8 41 fc ff ff       	call   80100410 <consputc.part.0>
       for(; *s; s++)
-8010080f:	83 c3 01             	add    $0x1,%ebx
-80100812:	0f be 03             	movsbl (%ebx),%eax
-80100815:	84 c0                	test   %al,%al
-80100817:	75 ae                	jne    801007c7 <cprintf+0xd7>
+801007cf:	83 c3 01             	add    $0x1,%ebx
+801007d2:	0f be 03             	movsbl (%ebx),%eax
+801007d5:	84 c0                	test   %al,%al
+801007d7:	75 ae                	jne    80100787 <cprintf+0xd7>
       if((s = (char*)*argp++) == 0)
-80100819:	89 fb                	mov    %edi,%ebx
-8010081b:	e9 2a ff ff ff       	jmp    8010074a <cprintf+0x5a>
+801007d9:	89 fb                	mov    %edi,%ebx
+801007db:	e9 2a ff ff ff       	jmp    8010070a <cprintf+0x5a>
   if(panicked){
-80100820:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
-80100826:	85 ff                	test   %edi,%edi
-80100828:	0f 84 12 ff ff ff    	je     80100740 <cprintf+0x50>
-8010082e:	fa                   	cli    
+801007e0:	8b 3d 58 a5 10 80    	mov    0x8010a558,%edi
+801007e6:	85 ff                	test   %edi,%edi
+801007e8:	0f 84 12 ff ff ff    	je     80100700 <cprintf+0x50>
+801007ee:	fa                   	cli    
     for(;;)
-8010082f:	eb fe                	jmp    8010082f <cprintf+0x13f>
-80100831:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801007ef:	eb fe                	jmp    801007ef <cprintf+0x13f>
+801007f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(panicked){
-80100838:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
-8010083e:	85 c9                	test   %ecx,%ecx
-80100840:	74 06                	je     80100848 <cprintf+0x158>
-80100842:	fa                   	cli    
+801007f8:	8b 0d 58 a5 10 80    	mov    0x8010a558,%ecx
+801007fe:	85 c9                	test   %ecx,%ecx
+80100800:	74 06                	je     80100808 <cprintf+0x158>
+80100802:	fa                   	cli    
     for(;;)
-80100843:	eb fe                	jmp    80100843 <cprintf+0x153>
-80100845:	8d 76 00             	lea    0x0(%esi),%esi
-80100848:	b8 25 00 00 00       	mov    $0x25,%eax
-8010084d:	e8 be fb ff ff       	call   80100410 <consputc.part.0>
+80100803:	eb fe                	jmp    80100803 <cprintf+0x153>
+80100805:	8d 76 00             	lea    0x0(%esi),%esi
+80100808:	b8 25 00 00 00       	mov    $0x25,%eax
+8010080d:	e8 fe fb ff ff       	call   80100410 <consputc.part.0>
   if(panicked){
-80100852:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-80100858:	85 d2                	test   %edx,%edx
-8010085a:	74 2c                	je     80100888 <cprintf+0x198>
-8010085c:	fa                   	cli    
+80100812:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+80100818:	85 d2                	test   %edx,%edx
+8010081a:	74 2c                	je     80100848 <cprintf+0x198>
+8010081c:	fa                   	cli    
     for(;;)
-8010085d:	eb fe                	jmp    8010085d <cprintf+0x16d>
-8010085f:	90                   	nop
+8010081d:	eb fe                	jmp    8010081d <cprintf+0x16d>
+8010081f:	90                   	nop
     release(&cons.lock);
-80100860:	83 ec 0c             	sub    $0xc,%esp
-80100863:	68 20 b5 10 80       	push   $0x8010b520
-80100868:	e8 03 48 00 00       	call   80105070 <release>
-8010086d:	83 c4 10             	add    $0x10,%esp
+80100820:	83 ec 0c             	sub    $0xc,%esp
+80100823:	68 20 a5 10 80       	push   $0x8010a520
+80100828:	e8 f3 3d 00 00       	call   80104620 <release>
+8010082d:	83 c4 10             	add    $0x10,%esp
 }
-80100870:	e9 ee fe ff ff       	jmp    80100763 <cprintf+0x73>
+80100830:	e9 ee fe ff ff       	jmp    80100723 <cprintf+0x73>
     panic("null fmt");
-80100875:	83 ec 0c             	sub    $0xc,%esp
-80100878:	68 df 7b 10 80       	push   $0x80107bdf
-8010087d:	e8 0e fb ff ff       	call   80100390 <panic>
-80100882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80100888:	89 f8                	mov    %edi,%eax
-8010088a:	e8 81 fb ff ff       	call   80100410 <consputc.part.0>
-8010088f:	e9 b6 fe ff ff       	jmp    8010074a <cprintf+0x5a>
-80100894:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010089b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010089f:	90                   	nop
-
-801008a0 <copyCharsToBeMoved>:
-void copyCharsToBeMoved() {
-801008a0:	f3 0f 1e fb          	endbr32 
-  uint n = input.rightmost - input.r;
-801008a4:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
-  for (i = 0; i < n; i++)
-801008aa:	2b 0d 20 10 11 80    	sub    0x80111020,%ecx
-801008b0:	74 2e                	je     801008e0 <copyCharsToBeMoved+0x40>
-void copyCharsToBeMoved() {
-801008b2:	55                   	push   %ebp
-  for (i = 0; i < n; i++)
-801008b3:	31 c0                	xor    %eax,%eax
-void copyCharsToBeMoved() {
-801008b5:	89 e5                	mov    %esp,%ebp
-801008b7:	53                   	push   %ebx
-    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
-801008b8:	8b 1d 28 10 11 80    	mov    0x80111028,%ebx
-801008be:	66 90                	xchg   %ax,%ax
-801008c0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
-  for (i = 0; i < n; i++)
-801008c3:	83 c0 01             	add    $0x1,%eax
-    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
-801008c6:	83 e2 7f             	and    $0x7f,%edx
-801008c9:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
-801008d0:	88 90 df 10 11 80    	mov    %dl,-0x7feeef21(%eax)
-  for (i = 0; i < n; i++)
-801008d6:	39 c1                	cmp    %eax,%ecx
-801008d8:	75 e6                	jne    801008c0 <copyCharsToBeMoved+0x20>
-}
-801008da:	5b                   	pop    %ebx
-801008db:	5d                   	pop    %ebp
-801008dc:	c3                   	ret    
-801008dd:	8d 76 00             	lea    0x0(%esi),%esi
-801008e0:	c3                   	ret    
-801008e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801008e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801008ef:	90                   	nop
-
-801008f0 <shiftbufright>:
-void shiftbufright() {
-801008f0:	f3 0f 1e fb          	endbr32 
-801008f4:	55                   	push   %ebp
-801008f5:	89 e5                	mov    %esp,%ebp
-801008f7:	57                   	push   %edi
-801008f8:	56                   	push   %esi
-801008f9:	53                   	push   %ebx
-801008fa:	83 ec 0c             	sub    $0xc,%esp
-  uint n = input.rightmost - input.e;
-801008fd:	a1 28 10 11 80       	mov    0x80111028,%eax
-  for (i = 0; i < n; i++) {
-80100902:	8b 3d 2c 10 11 80    	mov    0x8011102c,%edi
-80100908:	29 c7                	sub    %eax,%edi
-8010090a:	74 79                	je     80100985 <shiftbufright+0x95>
-8010090c:	31 db                	xor    %ebx,%ebx
-    char c = charsToBeMoved[i];
-8010090e:	0f b6 93 e0 10 11 80 	movzbl -0x7feeef20(%ebx),%edx
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-80100915:	01 d8                	add    %ebx,%eax
-  if(panicked){
-80100917:	8b 35 58 b5 10 80    	mov    0x8010b558,%esi
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-8010091d:	83 e0 7f             	and    $0x7f,%eax
-80100920:	88 90 a0 0f 11 80    	mov    %dl,-0x7feef060(%eax)
-  if(panicked){
-80100926:	85 f6                	test   %esi,%esi
-80100928:	74 06                	je     80100930 <shiftbufright+0x40>
-8010092a:	fa                   	cli    
-    for(;;)
-8010092b:	eb fe                	jmp    8010092b <shiftbufright+0x3b>
-8010092d:	8d 76 00             	lea    0x0(%esi),%esi
-    consputc(c);
-80100930:	0f be c2             	movsbl %dl,%eax
-80100933:	e8 d8 fa ff ff       	call   80100410 <consputc.part.0>
-  for (i = 0; i < n; i++) {
-80100938:	8d 53 01             	lea    0x1(%ebx),%edx
-8010093b:	39 d7                	cmp    %edx,%edi
-8010093d:	74 09                	je     80100948 <shiftbufright+0x58>
-8010093f:	a1 28 10 11 80       	mov    0x80111028,%eax
-80100944:	89 d3                	mov    %edx,%ebx
-80100946:	eb c6                	jmp    8010090e <shiftbufright+0x1e>
-  memset(charsToBeMoved, '\0', INPUT_BUF);
-80100948:	83 ec 04             	sub    $0x4,%esp
-8010094b:	68 80 00 00 00       	push   $0x80
-80100950:	6a 00                	push   $0x0
-80100952:	68 e0 10 11 80       	push   $0x801110e0
-80100957:	e8 64 47 00 00       	call   801050c0 <memset>
-8010095c:	83 c4 10             	add    $0x10,%esp
-  if(panicked){
-8010095f:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100964:	85 c0                	test   %eax,%eax
-80100966:	74 08                	je     80100970 <shiftbufright+0x80>
-80100968:	fa                   	cli    
-    for(;;)
-80100969:	eb fe                	jmp    80100969 <shiftbufright+0x79>
-8010096b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010096f:	90                   	nop
-80100970:	b8 e4 00 00 00       	mov    $0xe4,%eax
-80100975:	e8 96 fa ff ff       	call   80100410 <consputc.part.0>
-  for (i = 0; i < n; i++) {
-8010097a:	8d 46 01             	lea    0x1(%esi),%eax
-8010097d:	39 f3                	cmp    %esi,%ebx
-8010097f:	74 1b                	je     8010099c <shiftbufright+0xac>
-80100981:	89 c6                	mov    %eax,%esi
-80100983:	eb da                	jmp    8010095f <shiftbufright+0x6f>
-  memset(charsToBeMoved, '\0', INPUT_BUF);
-80100985:	83 ec 04             	sub    $0x4,%esp
-80100988:	68 80 00 00 00       	push   $0x80
-8010098d:	6a 00                	push   $0x0
-8010098f:	68 e0 10 11 80       	push   $0x801110e0
-80100994:	e8 27 47 00 00       	call   801050c0 <memset>
-80100999:	83 c4 10             	add    $0x10,%esp
-}
-8010099c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010099f:	5b                   	pop    %ebx
-801009a0:	5e                   	pop    %esi
-801009a1:	5f                   	pop    %edi
-801009a2:	5d                   	pop    %ebp
-801009a3:	c3                   	ret    
-801009a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801009ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801009af:	90                   	nop
-
-801009b0 <shiftbufleft>:
-void shiftbufleft() {
-801009b0:	f3 0f 1e fb          	endbr32 
-  if(panicked){
-801009b4:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-801009b9:	85 c0                	test   %eax,%eax
-801009bb:	74 03                	je     801009c0 <shiftbufleft+0x10>
-801009bd:	fa                   	cli    
-    for(;;)
-801009be:	eb fe                	jmp    801009be <shiftbufleft+0xe>
-void shiftbufleft() {
-801009c0:	55                   	push   %ebp
-801009c1:	b8 e4 00 00 00       	mov    $0xe4,%eax
-801009c6:	89 e5                	mov    %esp,%ebp
-801009c8:	56                   	push   %esi
-801009c9:	53                   	push   %ebx
-  uint n = input.rightmost - input.e;
-801009ca:	8b 1d 2c 10 11 80    	mov    0x8011102c,%ebx
-801009d0:	2b 1d 28 10 11 80    	sub    0x80111028,%ebx
-801009d6:	e8 35 fa ff ff       	call   80100410 <consputc.part.0>
-  input.e--;
-801009db:	a1 28 10 11 80       	mov    0x80111028,%eax
-801009e0:	83 e8 01             	sub    $0x1,%eax
-801009e3:	a3 28 10 11 80       	mov    %eax,0x80111028
-  for (i = 0; i < n; i++) {
-801009e8:	85 db                	test   %ebx,%ebx
-801009ea:	74 42                	je     80100a2e <shiftbufleft+0x7e>
-801009ec:	31 f6                	xor    %esi,%esi
-    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
-801009ee:	01 f0                	add    %esi,%eax
-  if(panicked){
-801009f0:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
-    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
-801009f6:	8d 50 01             	lea    0x1(%eax),%edx
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-801009f9:	83 e0 7f             	and    $0x7f,%eax
-    char c = input.buf[(input.e + i + 1) % INPUT_BUF];
-801009fc:	83 e2 7f             	and    $0x7f,%edx
-801009ff:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
-    input.buf[(input.e + i) % INPUT_BUF] = c;
-80100a06:	88 90 a0 0f 11 80    	mov    %dl,-0x7feef060(%eax)
-  if(panicked){
-80100a0c:	85 c9                	test   %ecx,%ecx
-80100a0e:	74 08                	je     80100a18 <shiftbufleft+0x68>
-80100a10:	fa                   	cli    
-    for(;;)
-80100a11:	eb fe                	jmp    80100a11 <shiftbufleft+0x61>
-80100a13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100a17:	90                   	nop
-    consputc(c);
-80100a18:	0f be c2             	movsbl %dl,%eax
-  for (i = 0; i < n; i++) {
-80100a1b:	83 c6 01             	add    $0x1,%esi
-80100a1e:	e8 ed f9 ff ff       	call   80100410 <consputc.part.0>
-80100a23:	39 f3                	cmp    %esi,%ebx
-80100a25:	74 07                	je     80100a2e <shiftbufleft+0x7e>
-80100a27:	a1 28 10 11 80       	mov    0x80111028,%eax
-80100a2c:	eb c0                	jmp    801009ee <shiftbufleft+0x3e>
-  if(panicked){
-80100a2e:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-  input.rightmost--;
-80100a34:	83 2d 2c 10 11 80 01 	subl   $0x1,0x8011102c
-  if(panicked){
-80100a3b:	85 d2                	test   %edx,%edx
-80100a3d:	75 21                	jne    80100a60 <shiftbufleft+0xb0>
-80100a3f:	b8 20 00 00 00       	mov    $0x20,%eax
-  for (i = 0; i <= n; i++) {
-80100a44:	31 f6                	xor    %esi,%esi
-80100a46:	e8 c5 f9 ff ff       	call   80100410 <consputc.part.0>
-  if(panicked){
-80100a4b:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100a50:	85 c0                	test   %eax,%eax
-80100a52:	74 14                	je     80100a68 <shiftbufleft+0xb8>
-80100a54:	fa                   	cli    
-    for(;;)
-80100a55:	eb fe                	jmp    80100a55 <shiftbufleft+0xa5>
-80100a57:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100a5e:	66 90                	xchg   %ax,%ax
-80100a60:	fa                   	cli    
-80100a61:	eb fe                	jmp    80100a61 <shiftbufleft+0xb1>
-80100a63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100a67:	90                   	nop
-80100a68:	b8 e4 00 00 00       	mov    $0xe4,%eax
-  for (i = 0; i <= n; i++) {
-80100a6d:	83 c6 01             	add    $0x1,%esi
-80100a70:	e8 9b f9 ff ff       	call   80100410 <consputc.part.0>
-80100a75:	39 f3                	cmp    %esi,%ebx
-80100a77:	73 d2                	jae    80100a4b <shiftbufleft+0x9b>
-}
-80100a79:	5b                   	pop    %ebx
-80100a7a:	5e                   	pop    %esi
-80100a7b:	5d                   	pop    %ebp
-80100a7c:	c3                   	ret    
-80100a7d:	8d 76 00             	lea    0x0(%esi),%esi
+80100835:	83 ec 0c             	sub    $0xc,%esp
+80100838:	68 3f 71 10 80       	push   $0x8010713f
+8010083d:	e8 4e fb ff ff       	call   80100390 <panic>
+80100842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100848:	89 f8                	mov    %edi,%eax
+8010084a:	e8 c1 fb ff ff       	call   80100410 <consputc.part.0>
+8010084f:	e9 b6 fe ff ff       	jmp    8010070a <cprintf+0x5a>
+80100854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010085b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010085f:	90                   	nop
 
-80100a80 <earaseCurrentLineOnScreen>:
-earaseCurrentLineOnScreen(void){
-80100a80:	f3 0f 1e fb          	endbr32 
-    uint numToEarase = input.rightmost - input.r;
-80100a84:	a1 2c 10 11 80       	mov    0x8011102c,%eax
-    for (i = 0; i < numToEarase; i++) {
-80100a89:	2b 05 20 10 11 80    	sub    0x80111020,%eax
-80100a8f:	74 34                	je     80100ac5 <earaseCurrentLineOnScreen+0x45>
-earaseCurrentLineOnScreen(void){
-80100a91:	55                   	push   %ebp
-80100a92:	89 e5                	mov    %esp,%ebp
-80100a94:	56                   	push   %esi
-    for (i = 0; i < numToEarase; i++) {
-80100a95:	31 f6                	xor    %esi,%esi
-earaseCurrentLineOnScreen(void){
-80100a97:	53                   	push   %ebx
-80100a98:	89 c3                	mov    %eax,%ebx
-  if(panicked){
-80100a9a:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100a9f:	85 c0                	test   %eax,%eax
-80100aa1:	74 0d                	je     80100ab0 <earaseCurrentLineOnScreen+0x30>
-80100aa3:	fa                   	cli    
-    for(;;)
-80100aa4:	eb fe                	jmp    80100aa4 <earaseCurrentLineOnScreen+0x24>
-80100aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100aad:	8d 76 00             	lea    0x0(%esi),%esi
-80100ab0:	b8 00 01 00 00       	mov    $0x100,%eax
-    for (i = 0; i < numToEarase; i++) {
-80100ab5:	83 c6 01             	add    $0x1,%esi
-80100ab8:	e8 53 f9 ff ff       	call   80100410 <consputc.part.0>
-80100abd:	39 f3                	cmp    %esi,%ebx
-80100abf:	75 d9                	jne    80100a9a <earaseCurrentLineOnScreen+0x1a>
-}
-80100ac1:	5b                   	pop    %ebx
-80100ac2:	5e                   	pop    %esi
-80100ac3:	5d                   	pop    %ebp
-80100ac4:	c3                   	ret    
-80100ac5:	c3                   	ret    
-80100ac6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100acd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100ad0 <copyCharsToBeMovedToOldBuf>:
-copyCharsToBeMovedToOldBuf(void){
-80100ad0:	f3 0f 1e fb          	endbr32 
-80100ad4:	55                   	push   %ebp
-    lengthOfOldBuf = input.rightmost - input.r;
-80100ad5:	8b 0d 2c 10 11 80    	mov    0x8011102c,%ecx
-copyCharsToBeMovedToOldBuf(void){
-80100adb:	89 e5                	mov    %esp,%ebp
-80100add:	53                   	push   %ebx
-    lengthOfOldBuf = input.rightmost - input.r;
-80100ade:	8b 1d 20 10 11 80    	mov    0x80111020,%ebx
-80100ae4:	29 d9                	sub    %ebx,%ecx
-80100ae6:	89 0d c0 10 11 80    	mov    %ecx,0x801110c0
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80100aec:	74 1c                	je     80100b0a <copyCharsToBeMovedToOldBuf+0x3a>
-80100aee:	31 c0                	xor    %eax,%eax
-        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
-80100af0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80100af3:	83 c0 01             	add    $0x1,%eax
-        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
-80100af6:	83 e2 7f             	and    $0x7f,%edx
-80100af9:	0f b6 92 a0 0f 11 80 	movzbl -0x7feef060(%edx),%edx
-80100b00:	88 90 1f 0f 11 80    	mov    %dl,-0x7feef0e1(%eax)
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80100b06:	39 c1                	cmp    %eax,%ecx
-80100b08:	75 e6                	jne    80100af0 <copyCharsToBeMovedToOldBuf+0x20>
-}
-80100b0a:	5b                   	pop    %ebx
-80100b0b:	5d                   	pop    %ebp
-80100b0c:	c3                   	ret    
-80100b0d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100b10 <earaseContentOnInputBuf>:
-earaseContentOnInputBuf(){
-80100b10:	f3 0f 1e fb          	endbr32 
-  input.rightmost = input.r;
-80100b14:	a1 20 10 11 80       	mov    0x80111020,%eax
-80100b19:	a3 2c 10 11 80       	mov    %eax,0x8011102c
-  input.e = input.r;
-80100b1e:	a3 28 10 11 80       	mov    %eax,0x80111028
-}
-80100b23:	c3                   	ret    
-80100b24:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100b2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100b2f:	90                   	nop
-
-80100b30 <copyBufferToScreen>:
-copyBufferToScreen(char * bufToPrintOnScreen, uint length){
-80100b30:	f3 0f 1e fb          	endbr32 
-80100b34:	55                   	push   %ebp
-80100b35:	89 e5                	mov    %esp,%ebp
-80100b37:	56                   	push   %esi
-80100b38:	8b 45 0c             	mov    0xc(%ebp),%eax
-80100b3b:	53                   	push   %ebx
-  for (i = 0; i < length; i++) {
-80100b3c:	85 c0                	test   %eax,%eax
-80100b3e:	74 27                	je     80100b67 <copyBufferToScreen+0x37>
-80100b40:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80100b43:	8d 34 03             	lea    (%ebx,%eax,1),%esi
-  if(panicked){
-80100b46:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100b4b:	85 c0                	test   %eax,%eax
-80100b4d:	74 09                	je     80100b58 <copyBufferToScreen+0x28>
-80100b4f:	fa                   	cli    
-    for(;;)
-80100b50:	eb fe                	jmp    80100b50 <copyBufferToScreen+0x20>
-80100b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    consputc(bufToPrintOnScreen[i]);
-80100b58:	0f be 03             	movsbl (%ebx),%eax
-80100b5b:	83 c3 01             	add    $0x1,%ebx
-80100b5e:	e8 ad f8 ff ff       	call   80100410 <consputc.part.0>
-  for (i = 0; i < length; i++) {
-80100b63:	39 f3                	cmp    %esi,%ebx
-80100b65:	75 df                	jne    80100b46 <copyBufferToScreen+0x16>
-}
-80100b67:	5b                   	pop    %ebx
-80100b68:	5e                   	pop    %esi
-80100b69:	5d                   	pop    %ebp
-80100b6a:	c3                   	ret    
-80100b6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100b6f:	90                   	nop
-
-80100b70 <copyBufferToInputBuf>:
-copyBufferToInputBuf(char * bufToSaveInInput, uint length){
-80100b70:	f3 0f 1e fb          	endbr32 
-80100b74:	55                   	push   %ebp
-80100b75:	8b 15 20 10 11 80    	mov    0x80111020,%edx
-80100b7b:	89 d0                	mov    %edx,%eax
-80100b7d:	89 e5                	mov    %esp,%ebp
-80100b7f:	56                   	push   %esi
-80100b80:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100b83:	8b 75 08             	mov    0x8(%ebp),%esi
-copyBufferToInputBuf(char * bufToSaveInInput, uint length){
-80100b86:	53                   	push   %ebx
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100b87:	29 d6                	sub    %edx,%esi
-80100b89:	8d 1c 11             	lea    (%ecx,%edx,1),%ebx
-  for (i = 0; i < length; i++) {
-80100b8c:	85 c9                	test   %ecx,%ecx
-80100b8e:	74 30                	je     80100bc0 <copyBufferToInputBuf+0x50>
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100b90:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80100b94:	89 c2                	mov    %eax,%edx
-80100b96:	83 c0 01             	add    $0x1,%eax
-80100b99:	83 e2 7f             	and    $0x7f,%edx
-80100b9c:	88 8a a0 0f 11 80    	mov    %cl,-0x7feef060(%edx)
-  for (i = 0; i < length; i++) {
-80100ba2:	39 d8                	cmp    %ebx,%eax
-80100ba4:	75 ea                	jne    80100b90 <copyBufferToInputBuf+0x20>
-  input.e = input.r+length;
-80100ba6:	89 1d 28 10 11 80    	mov    %ebx,0x80111028
-  input.rightmost = input.e;
-80100bac:	89 1d 2c 10 11 80    	mov    %ebx,0x8011102c
-}
-80100bb2:	5b                   	pop    %ebx
-80100bb3:	5e                   	pop    %esi
-80100bb4:	5d                   	pop    %ebp
-80100bb5:	c3                   	ret    
-80100bb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100bbd:	8d 76 00             	lea    0x0(%esi),%esi
-80100bc0:	89 d3                	mov    %edx,%ebx
-80100bc2:	eb e2                	jmp    80100ba6 <copyBufferToInputBuf+0x36>
-80100bc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100bcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100bcf:	90                   	nop
-
-80100bd0 <saveCommandInHistory>:
-saveCommandInHistory(){
-80100bd0:	f3 0f 1e fb          	endbr32 
-80100bd4:	55                   	push   %ebp
-80100bd5:	89 e5                	mov    %esp,%ebp
-80100bd7:	57                   	push   %edi
-80100bd8:	56                   	push   %esi
-80100bd9:	53                   	push   %ebx
-80100bda:	83 ec 08             	sub    $0x8,%esp
-80100bdd:	8b 3d 2c 10 11 80    	mov    0x8011102c,%edi
-  uint l = input.rightmost-input.r -1;
-80100be3:	a1 20 10 11 80       	mov    0x80111020,%eax
-  historyBufferArray.currentHistory= -1;//reseting the users history current viewed
-80100be8:	c7 05 a8 19 11 80 ff 	movl   $0xffffffff,0x801119a8
-80100bef:	ff ff ff 
-  uint l = input.rightmost-input.r -1;
-80100bf2:	8b 0d a0 19 11 80    	mov    0x801119a0,%ecx
-80100bf8:	8d 57 ff             	lea    -0x1(%edi),%edx
-  if(historyBufferArray.numOfCommmandsInMem > 0)
-80100bfb:	8b 3d a4 19 11 80    	mov    0x801119a4,%edi
-  uint l = input.rightmost-input.r -1;
-80100c01:	89 d6                	mov    %edx,%esi
-80100c03:	89 4d f0             	mov    %ecx,-0x10(%ebp)
-80100c06:	29 c6                	sub    %eax,%esi
-  if(historyBufferArray.numOfCommmandsInMem > 0)
-80100c08:	85 ff                	test   %edi,%edi
-80100c0a:	0f 8e c0 00 00 00    	jle    80100cd0 <saveCommandInHistory+0x100>
-    int prev=(historyBufferArray.lastCommandIndex) % MAX_HISTORY;
-80100c10:	83 e1 0f             	and    $0xf,%ecx
-    if(historyBufferArray.lengthsArr[prev]==l)
-80100c13:	39 34 8d 60 19 11 80 	cmp    %esi,-0x7feee6a0(,%ecx,4)
-80100c1a:	74 54                	je     80100c70 <saveCommandInHistory+0xa0>
-  if (historyBufferArray.numOfCommmandsInMem < MAX_HISTORY)
-80100c1c:	83 ff 0f             	cmp    $0xf,%edi
-80100c1f:	0f 8e ab 00 00 00    	jle    80100cd0 <saveCommandInHistory+0x100>
-  historyBufferArray.lastCommandIndex = (historyBufferArray.lastCommandIndex - 1)%MAX_HISTORY;
-80100c25:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-80100c28:	83 e9 01             	sub    $0x1,%ecx
-80100c2b:	83 e1 0f             	and    $0xf,%ecx
-80100c2e:	89 0d a0 19 11 80    	mov    %ecx,0x801119a0
-  historyBufferArray.lengthsArr[historyBufferArray.lastCommandIndex] = l;
-80100c34:	89 34 8d 60 19 11 80 	mov    %esi,-0x7feee6a0(,%ecx,4)
-  for (j = 0; j < l; j++) { //do not want to save in memory the last char '/n'
-80100c3b:	85 f6                	test   %esi,%esi
-80100c3d:	74 23                	je     80100c62 <saveCommandInHistory+0x92>
-80100c3f:	c1 e1 07             	shl    $0x7,%ecx
-80100c42:	29 c1                	sub    %eax,%ecx
-80100c44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    historyBufferArray.bufferArr[historyBufferArray.lastCommandIndex][j] =  input.buf[(input.r+j)%INPUT_BUF];
-80100c48:	89 c3                	mov    %eax,%ebx
-80100c4a:	83 e3 7f             	and    $0x7f,%ebx
-80100c4d:	0f b6 9b a0 0f 11 80 	movzbl -0x7feef060(%ebx),%ebx
-80100c54:	88 9c 01 60 11 11 80 	mov    %bl,-0x7feeeea0(%ecx,%eax,1)
-  for (j = 0; j < l; j++) { //do not want to save in memory the last char '/n'
-80100c5b:	83 c0 01             	add    $0x1,%eax
-80100c5e:	39 c2                	cmp    %eax,%edx
-80100c60:	75 e6                	jne    80100c48 <saveCommandInHistory+0x78>
-}
-80100c62:	83 c4 08             	add    $0x8,%esp
-80100c65:	5b                   	pop    %ebx
-80100c66:	5e                   	pop    %esi
-80100c67:	5f                   	pop    %edi
-80100c68:	5d                   	pop    %ebp
-80100c69:	c3                   	ret    
-80100c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      for (i = 0; i < l; i++) { //do not want to save in memory the last char '/n'
-80100c70:	c1 e1 07             	shl    $0x7,%ecx
-80100c73:	89 cb                	mov    %ecx,%ebx
-80100c75:	31 c9                	xor    %ecx,%ecx
-80100c77:	85 f6                	test   %esi,%esi
-80100c79:	74 e7                	je     80100c62 <saveCommandInHistory+0x92>
-80100c7b:	89 7d ec             	mov    %edi,-0x14(%ebp)
-80100c7e:	89 df                	mov    %ebx,%edi
-80100c80:	eb 0d                	jmp    80100c8f <saveCommandInHistory+0xbf>
-80100c82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80100c88:	83 c1 01             	add    $0x1,%ecx
-80100c8b:	39 ce                	cmp    %ecx,%esi
-80100c8d:	74 d3                	je     80100c62 <saveCommandInHistory+0x92>
-        if( historyBufferArray.bufferArr[prev][i] !=  input.buf[(input.r+i)%INPUT_BUF])
-80100c8f:	8d 1c 08             	lea    (%eax,%ecx,1),%ebx
-80100c92:	83 e3 7f             	and    $0x7f,%ebx
-80100c95:	0f b6 9b a0 0f 11 80 	movzbl -0x7feef060(%ebx),%ebx
-80100c9c:	38 9c 39 60 11 11 80 	cmp    %bl,-0x7feeeea0(%ecx,%edi,1)
-80100ca3:	74 e3                	je     80100c88 <saveCommandInHistory+0xb8>
-80100ca5:	8b 7d ec             	mov    -0x14(%ebp),%edi
-      if(i==l)
-80100ca8:	39 ce                	cmp    %ecx,%esi
-80100caa:	74 b6                	je     80100c62 <saveCommandInHistory+0x92>
-  if (historyBufferArray.numOfCommmandsInMem < MAX_HISTORY)
-80100cac:	83 ff 0f             	cmp    $0xf,%edi
-80100caf:	7e 1f                	jle    80100cd0 <saveCommandInHistory+0x100>
-  historyBufferArray.lastCommandIndex = (historyBufferArray.lastCommandIndex - 1)%MAX_HISTORY;
-80100cb1:	8b 4d f0             	mov    -0x10(%ebp),%ecx
-80100cb4:	83 e9 01             	sub    $0x1,%ecx
-80100cb7:	83 e1 0f             	and    $0xf,%ecx
-80100cba:	89 0d a0 19 11 80    	mov    %ecx,0x801119a0
-  historyBufferArray.lengthsArr[historyBufferArray.lastCommandIndex] = l;
-80100cc0:	89 34 8d 60 19 11 80 	mov    %esi,-0x7feee6a0(,%ecx,4)
-  for (j = 0; j < l; j++) { //do not want to save in memory the last char '/n'
-80100cc7:	e9 73 ff ff ff       	jmp    80100c3f <saveCommandInHistory+0x6f>
-80100ccc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    historyBufferArray.numOfCommmandsInMem++; //when we get to MAX_HISTORY commands in memory we keep on inserting to the array in a circular mution
-80100cd0:	83 c7 01             	add    $0x1,%edi
-80100cd3:	89 3d a4 19 11 80    	mov    %edi,0x801119a4
-80100cd9:	e9 47 ff ff ff       	jmp    80100c25 <saveCommandInHistory+0x55>
-80100cde:	66 90                	xchg   %ax,%ax
-
-80100ce0 <consoleintr>:
-{
-80100ce0:	f3 0f 1e fb          	endbr32 
-80100ce4:	55                   	push   %ebp
-80100ce5:	89 e5                	mov    %esp,%ebp
-80100ce7:	57                   	push   %edi
-80100ce8:	56                   	push   %esi
-80100ce9:	53                   	push   %ebx
-  int c, doprocdump = 0;
-80100cea:	31 db                	xor    %ebx,%ebx
+80100860 <consoleintr>:
 {
-80100cec:	83 ec 38             	sub    $0x38,%esp
-80100cef:	8b 45 08             	mov    0x8(%ebp),%eax
-  acquire(&cons.lock);
-80100cf2:	68 20 b5 10 80       	push   $0x8010b520
+80100860:	f3 0f 1e fb          	endbr32 
+80100864:	55                   	push   %ebp
+80100865:	89 e5                	mov    %esp,%ebp
+80100867:	57                   	push   %edi
+80100868:	56                   	push   %esi
+  int c, doprocdump = 0;
+80100869:	31 f6                	xor    %esi,%esi
 {
-80100cf7:	89 45 d8             	mov    %eax,-0x28(%ebp)
+8010086b:	53                   	push   %ebx
+8010086c:	83 ec 18             	sub    $0x18,%esp
+8010086f:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
-80100cfa:	e8 b1 42 00 00       	call   80104fb0 <acquire>
+80100872:	68 20 a5 10 80       	push   $0x8010a520
+80100877:	e8 e4 3c 00 00       	call   80104560 <acquire>
   while((c = getc()) >= 0){
-80100cff:	83 c4 10             	add    $0x10,%esp
-80100d02:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80100d05:	ff d0                	call   *%eax
-80100d07:	89 c6                	mov    %eax,%esi
-80100d09:	85 c0                	test   %eax,%eax
-80100d0b:	0f 88 0c 05 00 00    	js     8010121d <consoleintr+0x53d>
+8010087c:	83 c4 10             	add    $0x10,%esp
+8010087f:	eb 17                	jmp    80100898 <consoleintr+0x38>
     switch(c){
-80100d11:	83 fe 7f             	cmp    $0x7f,%esi
-80100d14:	0f 84 cd 01 00 00    	je     80100ee7 <consoleintr+0x207>
-80100d1a:	0f 8e a0 00 00 00    	jle    80100dc0 <consoleintr+0xe0>
-80100d20:	81 fe e4 00 00 00    	cmp    $0xe4,%esi
-80100d26:	0f 84 1c 02 00 00    	je     80100f48 <consoleintr+0x268>
-80100d2c:	0f 8f ac 00 00 00    	jg     80100dde <consoleintr+0xfe>
-80100d32:	81 fe e2 00 00 00    	cmp    $0xe2,%esi
-80100d38:	0f 84 3a 02 00 00    	je     80100f78 <consoleintr+0x298>
-80100d3e:	81 fe e3 00 00 00    	cmp    $0xe3,%esi
-80100d44:	0f 85 23 01 00 00    	jne    80100e6d <consoleintr+0x18d>
-      switch(historyBufferArray.currentHistory){
-80100d4a:	a1 a8 19 11 80       	mov    0x801119a8,%eax
-80100d4f:	83 f8 ff             	cmp    $0xffffffff,%eax
-80100d52:	74 ae                	je     80100d02 <consoleintr+0x22>
-80100d54:	85 c0                	test   %eax,%eax
-80100d56:	0f 85 2c 04 00 00    	jne    80101188 <consoleintr+0x4a8>
-          earaseCurrentLineOnScreen();
-80100d5c:	e8 1f fd ff ff       	call   80100a80 <earaseCurrentLineOnScreen>
-          copyBufferToInputBuf(oldBuf, lengthOfOldBuf);
-80100d61:	8b 35 c0 10 11 80    	mov    0x801110c0,%esi
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100d67:	a1 20 10 11 80       	mov    0x80111020,%eax
-  for (i = 0; i < length; i++) {
-80100d6c:	85 f6                	test   %esi,%esi
-80100d6e:	74 20                	je     80100d90 <consoleintr+0xb0>
-80100d70:	31 d2                	xor    %edx,%edx
-80100d72:	89 df                	mov    %ebx,%edi
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100d74:	0f b6 9a 20 0f 11 80 	movzbl -0x7feef0e0(%edx),%ebx
-80100d7b:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
-  for (i = 0; i < length; i++) {
-80100d7e:	83 c2 01             	add    $0x1,%edx
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100d81:	83 e1 7f             	and    $0x7f,%ecx
-80100d84:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
-  for (i = 0; i < length; i++) {
-80100d8a:	39 d6                	cmp    %edx,%esi
-80100d8c:	75 e6                	jne    80100d74 <consoleintr+0x94>
-80100d8e:	89 fb                	mov    %edi,%ebx
-          copyBufferToScreen(oldBuf, lengthOfOldBuf);
-80100d90:	83 ec 08             	sub    $0x8,%esp
-  input.e = input.r+length;
-80100d93:	01 f0                	add    %esi,%eax
-          copyBufferToScreen(oldBuf, lengthOfOldBuf);
-80100d95:	56                   	push   %esi
-80100d96:	68 20 0f 11 80       	push   $0x80110f20
-  input.e = input.r+length;
-80100d9b:	a3 28 10 11 80       	mov    %eax,0x80111028
-  input.rightmost = input.e;
-80100da0:	a3 2c 10 11 80       	mov    %eax,0x8011102c
-          copyBufferToScreen(oldBuf, lengthOfOldBuf);
-80100da5:	e8 86 fd ff ff       	call   80100b30 <copyBufferToScreen>
-          historyBufferArray.currentHistory--;
-80100daa:	83 2d a8 19 11 80 01 	subl   $0x1,0x801119a8
-          break;
-80100db1:	83 c4 10             	add    $0x10,%esp
-80100db4:	e9 49 ff ff ff       	jmp    80100d02 <consoleintr+0x22>
-80100db9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100881:	83 fb 08             	cmp    $0x8,%ebx
+80100884:	0f 84 f6 00 00 00    	je     80100980 <consoleintr+0x120>
+8010088a:	83 fb 10             	cmp    $0x10,%ebx
+8010088d:	0f 85 15 01 00 00    	jne    801009a8 <consoleintr+0x148>
+80100893:	be 01 00 00 00       	mov    $0x1,%esi
+  while((c = getc()) >= 0){
+80100898:	ff d7                	call   *%edi
+8010089a:	89 c3                	mov    %eax,%ebx
+8010089c:	85 c0                	test   %eax,%eax
+8010089e:	0f 88 23 01 00 00    	js     801009c7 <consoleintr+0x167>
     switch(c){
-80100dc0:	8d 46 f8             	lea    -0x8(%esi),%eax
-80100dc3:	83 f8 0d             	cmp    $0xd,%eax
-80100dc6:	0f 87 99 00 00 00    	ja     80100e65 <consoleintr+0x185>
-80100dcc:	3e ff 24 85 f0 7b 10 	notrack jmp *-0x7fef8410(,%eax,4)
-80100dd3:	80 
-80100dd4:	bb 01 00 00 00       	mov    $0x1,%ebx
-80100dd9:	e9 24 ff ff ff       	jmp    80100d02 <consoleintr+0x22>
-80100dde:	81 fe e5 00 00 00    	cmp    $0xe5,%esi
-80100de4:	0f 85 83 00 00 00    	jne    80100e6d <consoleintr+0x18d>
-        if (input.e < input.rightmost) {
-80100dea:	a1 28 10 11 80       	mov    0x80111028,%eax
-80100def:	3b 05 2c 10 11 80    	cmp    0x8011102c,%eax
-80100df5:	0f 83 17 01 00 00    	jae    80100f12 <consoleintr+0x232>
-  if(panicked){
-80100dfb:	8b 3d 58 b5 10 80    	mov    0x8010b558,%edi
-80100e01:	85 ff                	test   %edi,%edi
-80100e03:	0f 84 16 03 00 00    	je     8010111f <consoleintr+0x43f>
-80100e09:	fa                   	cli    
-    for(;;)
-80100e0a:	eb fe                	jmp    80100e0a <consoleintr+0x12a>
-      if (input.rightmost > input.e) { // caret isn't at the end of the line
-80100e0c:	a1 2c 10 11 80       	mov    0x8011102c,%eax
-80100e11:	8b 15 28 10 11 80    	mov    0x80111028,%edx
-80100e17:	8b 35 24 10 11 80    	mov    0x80111024,%esi
-80100e1d:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80100e20:	39 d0                	cmp    %edx,%eax
-80100e22:	0f 87 05 02 00 00    	ja     8010102d <consoleintr+0x34d>
-          while(input.e != input.w &&
-80100e28:	39 f2                	cmp    %esi,%edx
-80100e2a:	0f 84 d2 fe ff ff    	je     80100d02 <consoleintr+0x22>
-                input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-80100e30:	83 ea 01             	sub    $0x1,%edx
-80100e33:	89 d0                	mov    %edx,%eax
-80100e35:	83 e0 7f             	and    $0x7f,%eax
-          while(input.e != input.w &&
-80100e38:	80 b8 a0 0f 11 80 0a 	cmpb   $0xa,-0x7feef060(%eax)
-80100e3f:	0f 84 bd fe ff ff    	je     80100d02 <consoleintr+0x22>
-  if(panicked){
-80100e45:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-            input.e--;
-80100e4a:	89 15 28 10 11 80    	mov    %edx,0x80111028
-  if(panicked){
-80100e50:	85 c0                	test   %eax,%eax
-80100e52:	0f 84 e2 02 00 00    	je     8010113a <consoleintr+0x45a>
-80100e58:	fa                   	cli    
-    for(;;)
-80100e59:	eb fe                	jmp    80100e59 <consoleintr+0x179>
-          input.e = input.rightmost;
-80100e5b:	a1 2c 10 11 80       	mov    0x8011102c,%eax
-80100e60:	a3 28 10 11 80       	mov    %eax,0x80111028
+801008a4:	83 fb 15             	cmp    $0x15,%ebx
+801008a7:	74 77                	je     80100920 <consoleintr+0xc0>
+801008a9:	7e d6                	jle    80100881 <consoleintr+0x21>
+801008ab:	83 fb 7f             	cmp    $0x7f,%ebx
+801008ae:	0f 84 cc 00 00 00    	je     80100980 <consoleintr+0x120>
       if(c != 0 && input.e-input.r < INPUT_BUF){
-80100e65:	85 f6                	test   %esi,%esi
-80100e67:	0f 84 95 fe ff ff    	je     80100d02 <consoleintr+0x22>
-80100e6d:	8b 0d 28 10 11 80    	mov    0x80111028,%ecx
-80100e73:	8b 3d 20 10 11 80    	mov    0x80111020,%edi
-80100e79:	89 c8                	mov    %ecx,%eax
-80100e7b:	89 7d d4             	mov    %edi,-0x2c(%ebp)
-80100e7e:	29 f8                	sub    %edi,%eax
-80100e80:	83 f8 7f             	cmp    $0x7f,%eax
-80100e83:	0f 87 79 fe ff ff    	ja     80100d02 <consoleintr+0x22>
-          c = (c == '\r') ? '\n' : c;
-80100e89:	83 fe 0d             	cmp    $0xd,%esi
-80100e8c:	0f 84 4e 04 00 00    	je     801012e0 <consoleintr+0x600>
-80100e92:	89 f0                	mov    %esi,%eax
-80100e94:	88 45 e0             	mov    %al,-0x20(%ebp)
-          if (input.rightmost > input.e) { // caret isn't at the end of the line
-80100e97:	8b 15 2c 10 11 80    	mov    0x8011102c,%edx
-80100e9d:	89 cf                	mov    %ecx,%edi
-80100e9f:	8d 41 01             	lea    0x1(%ecx),%eax
-80100ea2:	83 e7 7f             	and    $0x7f,%edi
-80100ea5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80100ea8:	89 7d dc             	mov    %edi,-0x24(%ebp)
-80100eab:	39 d1                	cmp    %edx,%ecx
-80100ead:	0f 82 d3 03 00 00    	jb     80101286 <consoleintr+0x5a6>
-            input.buf[input.e++ % INPUT_BUF] = c;
-80100eb3:	0f b6 4d e0          	movzbl -0x20(%ebp),%ecx
-80100eb7:	8b 7d dc             	mov    -0x24(%ebp),%edi
-            input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
-80100eba:	89 c2                	mov    %eax,%edx
-            input.buf[input.e++ % INPUT_BUF] = c;
-80100ebc:	a3 28 10 11 80       	mov    %eax,0x80111028
-80100ec1:	88 8f a0 0f 11 80    	mov    %cl,-0x7feef060(%edi)
-            input.rightmost = input.e - input.rightmost == 1 ? input.e : input.rightmost;
-80100ec7:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80100eca:	29 ca                	sub    %ecx,%edx
-80100ecc:	83 fa 01             	cmp    $0x1,%edx
-80100ecf:	0f 45 c1             	cmovne %ecx,%eax
-80100ed2:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+801008b4:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+801008b9:	89 c2                	mov    %eax,%edx
+801008bb:	2b 15 a0 ff 10 80    	sub    0x8010ffa0,%edx
+801008c1:	83 fa 7f             	cmp    $0x7f,%edx
+801008c4:	77 d2                	ja     80100898 <consoleintr+0x38>
+        c = (c == '\r') ? '\n' : c;
+801008c6:	8d 48 01             	lea    0x1(%eax),%ecx
+801008c9:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+801008cf:	83 e0 7f             	and    $0x7f,%eax
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008d2:	89 0d a8 ff 10 80    	mov    %ecx,0x8010ffa8
+        c = (c == '\r') ? '\n' : c;
+801008d8:	83 fb 0d             	cmp    $0xd,%ebx
+801008db:	0f 84 02 01 00 00    	je     801009e3 <consoleintr+0x183>
+        input.buf[input.e++ % INPUT_BUF] = c;
+801008e1:	88 98 20 ff 10 80    	mov    %bl,-0x7fef00e0(%eax)
   if(panicked){
-80100ed7:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100edc:	85 c0                	test   %eax,%eax
-80100ede:	0f 84 59 03 00 00    	je     8010123d <consoleintr+0x55d>
-80100ee4:	fa                   	cli    
-    for(;;)
-80100ee5:	eb fe                	jmp    80100ee5 <consoleintr+0x205>
-      if (input.rightmost != input.e && input.e != input.w) { // caret isn't at the end of the line
-80100ee7:	a1 2c 10 11 80       	mov    0x8011102c,%eax
-80100eec:	8b 0d 28 10 11 80    	mov    0x80111028,%ecx
-80100ef2:	8b 15 24 10 11 80    	mov    0x80111024,%edx
-80100ef8:	39 c8                	cmp    %ecx,%eax
-80100efa:	0f 84 60 02 00 00    	je     80101160 <consoleintr+0x480>
-80100f00:	39 d1                	cmp    %edx,%ecx
-80100f02:	0f 84 fa fd ff ff    	je     80100d02 <consoleintr+0x22>
-          shiftbufleft();
-80100f08:	e8 a3 fa ff ff       	call   801009b0 <shiftbufleft>
-          break;
-80100f0d:	e9 f0 fd ff ff       	jmp    80100d02 <consoleintr+0x22>
-        else if (input.e == input.rightmost){
-80100f12:	0f 85 ea fd ff ff    	jne    80100d02 <consoleintr+0x22>
-  if(panicked){
-80100f18:	8b 35 58 b5 10 80    	mov    0x8010b558,%esi
-80100f1e:	85 f6                	test   %esi,%esi
-80100f20:	0f 85 08 04 00 00    	jne    8010132e <consoleintr+0x64e>
-80100f26:	b8 20 00 00 00       	mov    $0x20,%eax
-80100f2b:	e8 e0 f4 ff ff       	call   80100410 <consputc.part.0>
-80100f30:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
-80100f36:	85 c9                	test   %ecx,%ecx
-80100f38:	0f 84 d2 01 00 00    	je     80101110 <consoleintr+0x430>
-80100f3e:	fa                   	cli    
-    for(;;)
-80100f3f:	eb fe                	jmp    80100f3f <consoleintr+0x25f>
-80100f41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-        if (input.e != input.r) {
-80100f48:	a1 28 10 11 80       	mov    0x80111028,%eax
-80100f4d:	3b 05 20 10 11 80    	cmp    0x80111020,%eax
-80100f53:	0f 84 a9 fd ff ff    	je     80100d02 <consoleintr+0x22>
-          input.e--;
-80100f59:	83 e8 01             	sub    $0x1,%eax
-80100f5c:	a3 28 10 11 80       	mov    %eax,0x80111028
+801008e7:	85 d2                	test   %edx,%edx
+801008e9:	0f 85 ff 00 00 00    	jne    801009ee <consoleintr+0x18e>
+801008ef:	89 d8                	mov    %ebx,%eax
+801008f1:	e8 1a fb ff ff       	call   80100410 <consputc.part.0>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+801008f6:	83 fb 0a             	cmp    $0xa,%ebx
+801008f9:	0f 84 0f 01 00 00    	je     80100a0e <consoleintr+0x1ae>
+801008ff:	83 fb 04             	cmp    $0x4,%ebx
+80100902:	0f 84 06 01 00 00    	je     80100a0e <consoleintr+0x1ae>
+80100908:	a1 a0 ff 10 80       	mov    0x8010ffa0,%eax
+8010090d:	83 e8 80             	sub    $0xffffff80,%eax
+80100910:	39 05 a8 ff 10 80    	cmp    %eax,0x8010ffa8
+80100916:	75 80                	jne    80100898 <consoleintr+0x38>
+80100918:	e9 f6 00 00 00       	jmp    80100a13 <consoleintr+0x1b3>
+8010091d:	8d 76 00             	lea    0x0(%esi),%esi
+      while(input.e != input.w &&
+80100920:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100925:	39 05 a4 ff 10 80    	cmp    %eax,0x8010ffa4
+8010092b:	0f 84 67 ff ff ff    	je     80100898 <consoleintr+0x38>
+            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
+80100931:	83 e8 01             	sub    $0x1,%eax
+80100934:	89 c2                	mov    %eax,%edx
+80100936:	83 e2 7f             	and    $0x7f,%edx
+      while(input.e != input.w &&
+80100939:	80 ba 20 ff 10 80 0a 	cmpb   $0xa,-0x7fef00e0(%edx)
+80100940:	0f 84 52 ff ff ff    	je     80100898 <consoleintr+0x38>
   if(panicked){
-80100f61:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-80100f66:	85 c0                	test   %eax,%eax
-80100f68:	0f 84 a2 01 00 00    	je     80101110 <consoleintr+0x430>
-80100f6e:	fa                   	cli    
-    for(;;)
-80100f6f:	eb fe                	jmp    80100f6f <consoleintr+0x28f>
-80100f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-       if (historyBufferArray.currentHistory < historyBufferArray.numOfCommmandsInMem-1 ){ // current history means the oldest possible will be MAX_HISTORY-1
-80100f78:	a1 a4 19 11 80       	mov    0x801119a4,%eax
-80100f7d:	83 e8 01             	sub    $0x1,%eax
-80100f80:	39 05 a8 19 11 80    	cmp    %eax,0x801119a8
-80100f86:	0f 8d 76 fd ff ff    	jge    80100d02 <consoleintr+0x22>
-          earaseCurrentLineOnScreen();
-80100f8c:	e8 ef fa ff ff       	call   80100a80 <earaseCurrentLineOnScreen>
-          if (historyBufferArray.currentHistory == -1)
-80100f91:	a1 a8 19 11 80       	mov    0x801119a8,%eax
-80100f96:	8b 3d 20 10 11 80    	mov    0x80111020,%edi
-80100f9c:	83 f8 ff             	cmp    $0xffffffff,%eax
-80100f9f:	0f 84 54 03 00 00    	je     801012f9 <consoleintr+0x619>
-          historyBufferArray.currentHistory++;
-80100fa5:	83 c0 01             	add    $0x1,%eax
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-80100fa8:	83 ec 08             	sub    $0x8,%esp
-  input.rightmost = input.r;
-80100fab:	89 3d 2c 10 11 80    	mov    %edi,0x8011102c
-          historyBufferArray.currentHistory++;
-80100fb1:	a3 a8 19 11 80       	mov    %eax,0x801119a8
-          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory) %MAX_HISTORY;
-80100fb6:	03 05 a0 19 11 80    	add    0x801119a0,%eax
-80100fbc:	89 c6                	mov    %eax,%esi
-  input.e = input.r;
-80100fbe:	89 3d 28 10 11 80    	mov    %edi,0x80111028
-          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory) %MAX_HISTORY;
-80100fc4:	83 e6 0f             	and    $0xf,%esi
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-80100fc7:	89 f2                	mov    %esi,%edx
-80100fc9:	81 c6 00 02 00 00    	add    $0x200,%esi
-80100fcf:	c1 e2 07             	shl    $0x7,%edx
-80100fd2:	ff 34 b5 60 11 11 80 	pushl  -0x7feeeea0(,%esi,4)
-80100fd9:	8d ba 60 11 11 80    	lea    -0x7feeeea0(%edx),%edi
-80100fdf:	57                   	push   %edi
-80100fe0:	e8 4b fb ff ff       	call   80100b30 <copyBufferToScreen>
-          copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-80100fe5:	8b 34 b5 60 11 11 80 	mov    -0x7feeeea0(,%esi,4),%esi
-  for (i = 0; i < length; i++) {
-80100fec:	83 c4 10             	add    $0x10,%esp
-80100fef:	85 f6                	test   %esi,%esi
-80100ff1:	0f 84 f7 02 00 00    	je     801012ee <consoleintr+0x60e>
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-80100ff7:	a1 20 10 11 80       	mov    0x80111020,%eax
-80100ffc:	29 c7                	sub    %eax,%edi
-80100ffe:	01 c6                	add    %eax,%esi
-80101000:	89 fa                	mov    %edi,%edx
-80101002:	89 df                	mov    %ebx,%edi
-80101004:	0f b6 1c 02          	movzbl (%edx,%eax,1),%ebx
-80101008:	89 c1                	mov    %eax,%ecx
-8010100a:	83 c0 01             	add    $0x1,%eax
-8010100d:	83 e1 7f             	and    $0x7f,%ecx
-80101010:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
-  for (i = 0; i < length; i++) {
-80101016:	39 c6                	cmp    %eax,%esi
-80101018:	75 ea                	jne    80101004 <consoleintr+0x324>
-8010101a:	89 fb                	mov    %edi,%ebx
-  input.e = input.r+length;
-8010101c:	89 35 28 10 11 80    	mov    %esi,0x80111028
-  input.rightmost = input.e;
-80101022:	89 35 2c 10 11 80    	mov    %esi,0x8011102c
-}
-80101028:	e9 d5 fc ff ff       	jmp    80100d02 <consoleintr+0x22>
-          for (i = 0; i < placestoshift; i++) {
-8010102d:	89 d7                	mov    %edx,%edi
-8010102f:	31 c9                	xor    %ecx,%ecx
-80101031:	29 f7                	sub    %esi,%edi
-80101033:	74 34                	je     80101069 <consoleintr+0x389>
-80101035:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-80101038:	89 cb                	mov    %ecx,%ebx
-8010103a:	89 75 dc             	mov    %esi,-0x24(%ebp)
-8010103d:	89 d6                	mov    %edx,%esi
-  if(panicked){
-8010103f:	8b 0d 58 b5 10 80    	mov    0x8010b558,%ecx
-80101045:	85 c9                	test   %ecx,%ecx
-80101047:	74 07                	je     80101050 <consoleintr+0x370>
-80101049:	fa                   	cli    
-    for(;;)
-8010104a:	eb fe                	jmp    8010104a <consoleintr+0x36a>
-8010104c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101050:	b8 e4 00 00 00       	mov    $0xe4,%eax
-          for (i = 0; i < placestoshift; i++) {
-80101055:	83 c3 01             	add    $0x1,%ebx
-80101058:	e8 b3 f3 ff ff       	call   80100410 <consputc.part.0>
-8010105d:	39 df                	cmp    %ebx,%edi
-8010105f:	75 de                	jne    8010103f <consoleintr+0x35f>
-80101061:	89 f2                	mov    %esi,%edx
-80101063:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101066:	8b 75 dc             	mov    -0x24(%ebp),%esi
-          memset(buf2, '\0', INPUT_BUF);
-80101069:	83 ec 04             	sub    $0x4,%esp
-          uint numtoshift = input.rightmost - input.e;
-8010106c:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010106f:	89 55 d0             	mov    %edx,-0x30(%ebp)
-          memset(buf2, '\0', INPUT_BUF);
-80101072:	68 80 00 00 00       	push   $0x80
-80101077:	6a 00                	push   $0x0
-          uint numtoshift = input.rightmost - input.e;
-80101079:	29 d0                	sub    %edx,%eax
-          memset(buf2, '\0', INPUT_BUF);
-8010107b:	68 40 10 11 80       	push   $0x80111040
-          uint numtoshift = input.rightmost - input.e;
-80101080:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-          memset(buf2, '\0', INPUT_BUF);
-80101083:	e8 38 40 00 00       	call   801050c0 <memset>
-            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
-80101088:	a1 24 10 11 80       	mov    0x80111024,%eax
-8010108d:	8b 55 d0             	mov    -0x30(%ebp),%edx
-80101090:	83 c4 10             	add    $0x10,%esp
-80101093:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80101096:	01 f8                	add    %edi,%eax
-80101098:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-          for (i = 0; i < numtoshift; i++) {
-8010109b:	31 c0                	xor    %eax,%eax
-            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
-8010109d:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-801010a0:	01 c1                	add    %eax,%ecx
-          for (i = 0; i < numtoshift; i++) {
-801010a2:	83 c0 01             	add    $0x1,%eax
-            buf2[i] = input.buf[(input.w + i + placestoshift) % INPUT_BUF];
-801010a5:	83 e1 7f             	and    $0x7f,%ecx
-801010a8:	0f b6 89 a0 0f 11 80 	movzbl -0x7feef060(%ecx),%ecx
-801010af:	88 88 3f 10 11 80    	mov    %cl,-0x7feeefc1(%eax)
-          for (i = 0; i < numtoshift; i++) {
-801010b5:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
-801010b8:	75 e3                	jne    8010109d <consoleintr+0x3bd>
-          for (i = 0; i < numtoshift; i++) {
-801010ba:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-801010bd:	31 c0                	xor    %eax,%eax
-            input.buf[(input.w + i) % INPUT_BUF] = buf2[i];
-801010bf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
-801010c2:	0f b6 90 40 10 11 80 	movzbl -0x7feeefc0(%eax),%edx
-801010c9:	01 c1                	add    %eax,%ecx
-          for (i = 0; i < numtoshift; i++) {
-801010cb:	83 c0 01             	add    $0x1,%eax
-            input.buf[(input.w + i) % INPUT_BUF] = buf2[i];
-801010ce:	83 e1 7f             	and    $0x7f,%ecx
-801010d1:	88 91 a0 0f 11 80    	mov    %dl,-0x7feef060(%ecx)
-          for (i = 0; i < numtoshift; i++) {
-801010d7:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
-801010da:	75 e3                	jne    801010bf <consoleintr+0x3df>
-801010dc:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-          input.e -= placestoshift;
-801010df:	89 f0                	mov    %esi,%eax
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-801010e1:	89 75 dc             	mov    %esi,-0x24(%ebp)
-801010e4:	89 de                	mov    %ebx,%esi
-801010e6:	29 d0                	sub    %edx,%eax
-801010e8:	89 c2                	mov    %eax,%edx
-          input.e -= placestoshift;
-801010ea:	03 05 28 10 11 80    	add    0x80111028,%eax
-          input.rightmost -= placestoshift;
-801010f0:	01 15 2c 10 11 80    	add    %edx,0x8011102c
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-801010f6:	31 d2                	xor    %edx,%edx
-          input.e -= placestoshift;
-801010f8:	a3 28 10 11 80       	mov    %eax,0x80111028
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-801010fd:	89 d3                	mov    %edx,%ebx
+80100946:	8b 15 58 a5 10 80    	mov    0x8010a558,%edx
+        input.e--;
+8010094c:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
   if(panicked){
-801010ff:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-80101105:	85 d2                	test   %edx,%edx
-80101107:	0f 84 53 02 00 00    	je     80101360 <consoleintr+0x680>
-8010110d:	fa                   	cli    
+80100951:	85 d2                	test   %edx,%edx
+80100953:	74 0b                	je     80100960 <consoleintr+0x100>
+80100955:	fa                   	cli    
     for(;;)
-8010110e:	eb fe                	jmp    8010110e <consoleintr+0x42e>
-80101110:	b8 e4 00 00 00       	mov    $0xe4,%eax
-80101115:	e8 f6 f2 ff ff       	call   80100410 <consputc.part.0>
-8010111a:	e9 e3 fb ff ff       	jmp    80100d02 <consoleintr+0x22>
-          consputc(input.buf[input.e % INPUT_BUF]);
-8010111f:	83 e0 7f             	and    $0x7f,%eax
-80101122:	0f be 80 a0 0f 11 80 	movsbl -0x7feef060(%eax),%eax
-80101129:	e8 e2 f2 ff ff       	call   80100410 <consputc.part.0>
-          input.e++;
-8010112e:	83 05 28 10 11 80 01 	addl   $0x1,0x80111028
-80101135:	e9 c8 fb ff ff       	jmp    80100d02 <consoleintr+0x22>
-8010113a:	b8 00 01 00 00       	mov    $0x100,%eax
-8010113f:	e8 cc f2 ff ff       	call   80100410 <consputc.part.0>
-          while(input.e != input.w &&
-80101144:	8b 15 28 10 11 80    	mov    0x80111028,%edx
-8010114a:	3b 15 24 10 11 80    	cmp    0x80111024,%edx
-80101150:	0f 85 da fc ff ff    	jne    80100e30 <consoleintr+0x150>
-80101156:	e9 a7 fb ff ff       	jmp    80100d02 <consoleintr+0x22>
-8010115b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010115f:	90                   	nop
-        if(input.e != input.w){ // caret is at the end of the line - deleting last char
-80101160:	39 d0                	cmp    %edx,%eax
-80101162:	0f 84 9a fb ff ff    	je     80100d02 <consoleintr+0x22>
-          input.e--;
-80101168:	83 e8 01             	sub    $0x1,%eax
-8010116b:	a3 28 10 11 80       	mov    %eax,0x80111028
-          input.rightmost--;
-80101170:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+80100956:	eb fe                	jmp    80100956 <consoleintr+0xf6>
+80100958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010095f:	90                   	nop
+80100960:	b8 00 01 00 00       	mov    $0x100,%eax
+80100965:	e8 a6 fa ff ff       	call   80100410 <consputc.part.0>
+      while(input.e != input.w &&
+8010096a:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+8010096f:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+80100975:	75 ba                	jne    80100931 <consoleintr+0xd1>
+80100977:	e9 1c ff ff ff       	jmp    80100898 <consoleintr+0x38>
+8010097c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      if(input.e != input.w){
+80100980:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+80100985:	3b 05 a4 ff 10 80    	cmp    0x8010ffa4,%eax
+8010098b:	0f 84 07 ff ff ff    	je     80100898 <consoleintr+0x38>
+        input.e--;
+80100991:	83 e8 01             	sub    $0x1,%eax
+80100994:	a3 a8 ff 10 80       	mov    %eax,0x8010ffa8
   if(panicked){
-80101175:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-8010117a:	85 c0                	test   %eax,%eax
-8010117c:	0f 84 8c 00 00 00    	je     8010120e <consoleintr+0x52e>
-80101182:	fa                   	cli    
+80100999:	a1 58 a5 10 80       	mov    0x8010a558,%eax
+8010099e:	85 c0                	test   %eax,%eax
+801009a0:	74 16                	je     801009b8 <consoleintr+0x158>
+801009a2:	fa                   	cli    
     for(;;)
-80101183:	eb fe                	jmp    80101183 <consoleintr+0x4a3>
-80101185:	8d 76 00             	lea    0x0(%esi),%esi
-          earaseCurrentLineOnScreen();
-80101188:	e8 f3 f8 ff ff       	call   80100a80 <earaseCurrentLineOnScreen>
-          historyBufferArray.currentHistory--;
-8010118d:	a1 a8 19 11 80       	mov    0x801119a8,%eax
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-80101192:	83 ec 08             	sub    $0x8,%esp
-          historyBufferArray.currentHistory--;
-80101195:	83 e8 01             	sub    $0x1,%eax
-80101198:	a3 a8 19 11 80       	mov    %eax,0x801119a8
-          tempIndex = (historyBufferArray.lastCommandIndex + historyBufferArray.currentHistory)%MAX_HISTORY;
-8010119d:	03 05 a0 19 11 80    	add    0x801119a0,%eax
-801011a3:	89 c6                	mov    %eax,%esi
-801011a5:	83 e6 0f             	and    $0xf,%esi
-          copyBufferToScreen(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-801011a8:	89 f7                	mov    %esi,%edi
-801011aa:	81 c6 00 02 00 00    	add    $0x200,%esi
-801011b0:	c1 e7 07             	shl    $0x7,%edi
-801011b3:	ff 34 b5 60 11 11 80 	pushl  -0x7feeeea0(,%esi,4)
-801011ba:	81 c7 60 11 11 80    	add    $0x80111160,%edi
-801011c0:	57                   	push   %edi
-801011c1:	e8 6a f9 ff ff       	call   80100b30 <copyBufferToScreen>
-          copyBufferToInputBuf(historyBufferArray.bufferArr[ tempIndex]  , historyBufferArray.lengthsArr[tempIndex]);
-801011c6:	8b 14 b5 60 11 11 80 	mov    -0x7feeeea0(,%esi,4),%edx
-  for (i = 0; i < length; i++) {
-801011cd:	83 c4 10             	add    $0x10,%esp
-801011d0:	85 d2                	test   %edx,%edx
-801011d2:	0f 84 6c 01 00 00    	je     80101344 <consoleintr+0x664>
-    input.buf[(input.r+i)%INPUT_BUF] = bufToSaveInInput[i];
-801011d8:	a1 20 10 11 80       	mov    0x80111020,%eax
-801011dd:	29 c7                	sub    %eax,%edi
-801011df:	01 c2                	add    %eax,%edx
-801011e1:	89 fe                	mov    %edi,%esi
-801011e3:	89 df                	mov    %ebx,%edi
-801011e5:	0f b6 1c 06          	movzbl (%esi,%eax,1),%ebx
-801011e9:	89 c1                	mov    %eax,%ecx
-801011eb:	83 c0 01             	add    $0x1,%eax
-801011ee:	83 e1 7f             	and    $0x7f,%ecx
-801011f1:	88 99 a0 0f 11 80    	mov    %bl,-0x7feef060(%ecx)
-  for (i = 0; i < length; i++) {
-801011f7:	39 c2                	cmp    %eax,%edx
-801011f9:	75 ea                	jne    801011e5 <consoleintr+0x505>
-801011fb:	89 fb                	mov    %edi,%ebx
-  input.e = input.r+length;
-801011fd:	89 15 28 10 11 80    	mov    %edx,0x80111028
-  input.rightmost = input.e;
-80101203:	89 15 2c 10 11 80    	mov    %edx,0x8011102c
-}
-80101209:	e9 f4 fa ff ff       	jmp    80100d02 <consoleintr+0x22>
-8010120e:	b8 00 01 00 00       	mov    $0x100,%eax
-80101213:	e8 f8 f1 ff ff       	call   80100410 <consputc.part.0>
-80101218:	e9 e5 fa ff ff       	jmp    80100d02 <consoleintr+0x22>
+801009a3:	eb fe                	jmp    801009a3 <consoleintr+0x143>
+801009a5:	8d 76 00             	lea    0x0(%esi),%esi
+      if(c != 0 && input.e-input.r < INPUT_BUF){
+801009a8:	85 db                	test   %ebx,%ebx
+801009aa:	0f 84 e8 fe ff ff    	je     80100898 <consoleintr+0x38>
+801009b0:	e9 ff fe ff ff       	jmp    801008b4 <consoleintr+0x54>
+801009b5:	8d 76 00             	lea    0x0(%esi),%esi
+801009b8:	b8 00 01 00 00       	mov    $0x100,%eax
+801009bd:	e8 4e fa ff ff       	call   80100410 <consputc.part.0>
+801009c2:	e9 d1 fe ff ff       	jmp    80100898 <consoleintr+0x38>
   release(&cons.lock);
-8010121d:	83 ec 0c             	sub    $0xc,%esp
-80101220:	68 20 b5 10 80       	push   $0x8010b520
-80101225:	e8 46 3e 00 00       	call   80105070 <release>
+801009c7:	83 ec 0c             	sub    $0xc,%esp
+801009ca:	68 20 a5 10 80       	push   $0x8010a520
+801009cf:	e8 4c 3c 00 00       	call   80104620 <release>
   if(doprocdump) {
-8010122a:	83 c4 10             	add    $0x10,%esp
-8010122d:	85 db                	test   %ebx,%ebx
-8010122f:	0f 85 03 01 00 00    	jne    80101338 <consoleintr+0x658>
-}
-80101235:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101238:	5b                   	pop    %ebx
-80101239:	5e                   	pop    %esi
-8010123a:	5f                   	pop    %edi
-8010123b:	5d                   	pop    %ebp
-8010123c:	c3                   	ret    
-8010123d:	89 f0                	mov    %esi,%eax
-8010123f:	e8 cc f1 ff ff       	call   80100410 <consputc.part.0>
-          if(c == '\n' || c == C('D') || input.rightmost == input.r + INPUT_BUF){
-80101244:	83 fe 0a             	cmp    $0xa,%esi
-80101247:	74 19                	je     80101262 <consoleintr+0x582>
-80101249:	83 fe 04             	cmp    $0x4,%esi
-8010124c:	74 14                	je     80101262 <consoleintr+0x582>
-8010124e:	a1 20 10 11 80       	mov    0x80111020,%eax
-80101253:	83 e8 80             	sub    $0xffffff80,%eax
-80101256:	39 05 2c 10 11 80    	cmp    %eax,0x8011102c
-8010125c:	0f 85 a0 fa ff ff    	jne    80100d02 <consoleintr+0x22>
-            saveCommandInHistory();
-80101262:	e8 69 f9 ff ff       	call   80100bd0 <saveCommandInHistory>
-            wakeup(&input.r);
-80101267:	83 ec 0c             	sub    $0xc,%esp
-            input.w = input.rightmost;
-8010126a:	a1 2c 10 11 80       	mov    0x8011102c,%eax
-            wakeup(&input.r);
-8010126f:	68 20 10 11 80       	push   $0x80111020
-            input.w = input.rightmost;
-80101274:	a3 24 10 11 80       	mov    %eax,0x80111024
-            wakeup(&input.r);
-80101279:	e8 b2 38 00 00       	call   80104b30 <wakeup>
-8010127e:	83 c4 10             	add    $0x10,%esp
-80101281:	e9 7c fa ff ff       	jmp    80100d02 <consoleintr+0x22>
-  for (i = 0; i < n; i++)
-80101286:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80101289:	31 d2                	xor    %edx,%edx
-8010128b:	2b 7d d4             	sub    -0x2c(%ebp),%edi
-8010128e:	89 7d d4             	mov    %edi,-0x2c(%ebp)
-80101291:	74 21                	je     801012b4 <consoleintr+0x5d4>
-80101293:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
-80101296:	8d 3c 11             	lea    (%ecx,%edx,1),%edi
-  for (i = 0; i < n; i++)
-80101299:	83 c2 01             	add    $0x1,%edx
-    charsToBeMoved[i] = input.buf[(input.e + i) % INPUT_BUF];
-8010129c:	83 e7 7f             	and    $0x7f,%edi
-8010129f:	0f b6 87 a0 0f 11 80 	movzbl -0x7feef060(%edi),%eax
-801012a6:	88 82 df 10 11 80    	mov    %al,-0x7feeef21(%edx)
-  for (i = 0; i < n; i++)
-801012ac:	39 55 d4             	cmp    %edx,-0x2c(%ebp)
-801012af:	75 e5                	jne    80101296 <consoleintr+0x5b6>
-801012b1:	8b 45 d0             	mov    -0x30(%ebp),%eax
-            input.buf[input.e++ % INPUT_BUF] = c;
-801012b4:	8b 4d dc             	mov    -0x24(%ebp),%ecx
-  if(panicked){
-801012b7:	8b 15 58 b5 10 80    	mov    0x8010b558,%edx
-            input.buf[input.e++ % INPUT_BUF] = c;
-801012bd:	a3 28 10 11 80       	mov    %eax,0x80111028
-801012c2:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
-801012c6:	88 81 a0 0f 11 80    	mov    %al,-0x7feef060(%ecx)
-            input.rightmost++;
-801012cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801012cf:	83 c0 01             	add    $0x1,%eax
-801012d2:	a3 2c 10 11 80       	mov    %eax,0x8011102c
+801009d4:	83 c4 10             	add    $0x10,%esp
+801009d7:	85 f6                	test   %esi,%esi
+801009d9:	75 1d                	jne    801009f8 <consoleintr+0x198>
+}
+801009db:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009de:	5b                   	pop    %ebx
+801009df:	5e                   	pop    %esi
+801009e0:	5f                   	pop    %edi
+801009e1:	5d                   	pop    %ebp
+801009e2:	c3                   	ret    
+        input.buf[input.e++ % INPUT_BUF] = c;
+801009e3:	c6 80 20 ff 10 80 0a 	movb   $0xa,-0x7fef00e0(%eax)
   if(panicked){
-801012d7:	85 d2                	test   %edx,%edx
-801012d9:	74 74                	je     8010134f <consoleintr+0x66f>
-801012db:	fa                   	cli    
-    for(;;)
-801012dc:	eb fe                	jmp    801012dc <consoleintr+0x5fc>
-801012de:	66 90                	xchg   %ax,%ax
-801012e0:	c6 45 e0 0a          	movb   $0xa,-0x20(%ebp)
-          c = (c == '\r') ? '\n' : c;
-801012e4:	be 0a 00 00 00       	mov    $0xa,%esi
-801012e9:	e9 a9 fb ff ff       	jmp    80100e97 <consoleintr+0x1b7>
-801012ee:	8b 35 20 10 11 80    	mov    0x80111020,%esi
-801012f4:	e9 23 fd ff ff       	jmp    8010101c <consoleintr+0x33c>
-    lengthOfOldBuf = input.rightmost - input.r;
-801012f9:	8b 35 2c 10 11 80    	mov    0x8011102c,%esi
-801012ff:	29 fe                	sub    %edi,%esi
-80101301:	89 35 c0 10 11 80    	mov    %esi,0x801110c0
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80101307:	0f 84 98 fc ff ff    	je     80100fa5 <consoleintr+0x2c5>
-8010130d:	31 d2                	xor    %edx,%edx
-        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
-8010130f:	8d 0c 17             	lea    (%edi,%edx,1),%ecx
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80101312:	83 c2 01             	add    $0x1,%edx
-        oldBuf[i] = input.buf[(input.r+i)%INPUT_BUF];
-80101315:	83 e1 7f             	and    $0x7f,%ecx
-80101318:	0f b6 89 a0 0f 11 80 	movzbl -0x7feef060(%ecx),%ecx
-8010131f:	88 8a 1f 0f 11 80    	mov    %cl,-0x7feef0e1(%edx)
-    for (i = 0; i < lengthOfOldBuf; i++) {
-80101325:	39 d6                	cmp    %edx,%esi
-80101327:	75 e6                	jne    8010130f <consoleintr+0x62f>
-80101329:	e9 77 fc ff ff       	jmp    80100fa5 <consoleintr+0x2c5>
-8010132e:	fa                   	cli    
+801009ea:	85 d2                	test   %edx,%edx
+801009ec:	74 16                	je     80100a04 <consoleintr+0x1a4>
+801009ee:	fa                   	cli    
     for(;;)
-8010132f:	eb fe                	jmp    8010132f <consoleintr+0x64f>
-80101331:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801009ef:	eb fe                	jmp    801009ef <consoleintr+0x18f>
+801009f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 }
-80101338:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010133b:	5b                   	pop    %ebx
-8010133c:	5e                   	pop    %esi
-8010133d:	5f                   	pop    %edi
-8010133e:	5d                   	pop    %ebp
+801009f8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801009fb:	5b                   	pop    %ebx
+801009fc:	5e                   	pop    %esi
+801009fd:	5f                   	pop    %edi
+801009fe:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-8010133f:	e9 dc 38 00 00       	jmp    80104c20 <procdump>
-80101344:	8b 15 20 10 11 80    	mov    0x80111020,%edx
-8010134a:	e9 ae fe ff ff       	jmp    801011fd <consoleintr+0x51d>
-8010134f:	89 f0                	mov    %esi,%eax
-80101351:	e8 ba f0 ff ff       	call   80100410 <consputc.part.0>
-            shiftbufright();
-80101356:	e8 95 f5 ff ff       	call   801008f0 <shiftbufright>
-8010135b:	e9 e4 fe ff ff       	jmp    80101244 <consoleintr+0x564>
-            consputc(input.buf[(input.e + i) % INPUT_BUF]);
-80101360:	01 d8                	add    %ebx,%eax
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-80101362:	83 c3 01             	add    $0x1,%ebx
-            consputc(input.buf[(input.e + i) % INPUT_BUF]);
-80101365:	83 e0 7f             	and    $0x7f,%eax
-80101368:	0f be 80 a0 0f 11 80 	movsbl -0x7feef060(%eax),%eax
-8010136f:	e8 9c f0 ff ff       	call   80100410 <consputc.part.0>
-          for (i = 0; i < numtoshift; i++) { // repaint the chars
-80101374:	39 5d e4             	cmp    %ebx,-0x1c(%ebp)
-80101377:	74 0a                	je     80101383 <consoleintr+0x6a3>
-80101379:	a1 28 10 11 80       	mov    0x80111028,%eax
-8010137e:	e9 7c fd ff ff       	jmp    801010ff <consoleintr+0x41f>
-80101383:	89 f3                	mov    %esi,%ebx
-          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
-80101385:	31 d2                	xor    %edx,%edx
-80101387:	8b 75 dc             	mov    -0x24(%ebp),%esi
-8010138a:	85 ff                	test   %edi,%edi
-8010138c:	74 30                	je     801013be <consoleintr+0x6de>
-8010138e:	89 75 e4             	mov    %esi,-0x1c(%ebp)
-80101391:	89 de                	mov    %ebx,%esi
-80101393:	89 d3                	mov    %edx,%ebx
-  if(panicked){
-80101395:	a1 58 b5 10 80       	mov    0x8010b558,%eax
-8010139a:	85 c0                	test   %eax,%eax
-8010139c:	74 0a                	je     801013a8 <consoleintr+0x6c8>
-8010139e:	fa                   	cli    
-    for(;;)
-8010139f:	eb fe                	jmp    8010139f <consoleintr+0x6bf>
-801013a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801013a8:	b8 20 00 00 00       	mov    $0x20,%eax
-          for (i = 0; i < placestoshift; i++) { // erase the leftover chars
-801013ad:	83 c3 01             	add    $0x1,%ebx
-801013b0:	e8 5b f0 ff ff       	call   80100410 <consputc.part.0>
-801013b5:	39 df                	cmp    %ebx,%edi
-801013b7:	75 dc                	jne    80101395 <consoleintr+0x6b5>
-801013b9:	89 f3                	mov    %esi,%ebx
-801013bb:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
-801013be:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801013c1:	31 ff                	xor    %edi,%edi
-801013c3:	29 f0                	sub    %esi,%eax
-801013c5:	89 c6                	mov    %eax,%esi
-801013c7:	39 fe                	cmp    %edi,%esi
-801013c9:	0f 86 33 f9 ff ff    	jbe    80100d02 <consoleintr+0x22>
-  if(panicked){
-801013cf:	83 3d 58 b5 10 80 00 	cmpl   $0x0,0x8010b558
-801013d6:	74 03                	je     801013db <consoleintr+0x6fb>
-801013d8:	fa                   	cli    
-    for(;;)
-801013d9:	eb fe                	jmp    801013d9 <consoleintr+0x6f9>
-801013db:	b8 e4 00 00 00       	mov    $0xe4,%eax
-          for (i = 0; i < placestoshift + numtoshift; i++) { // move the caret back to the left
-801013e0:	83 c7 01             	add    $0x1,%edi
-801013e3:	e8 28 f0 ff ff       	call   80100410 <consputc.part.0>
-801013e8:	eb dd                	jmp    801013c7 <consoleintr+0x6e7>
-801013ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801013f0 <history>:
-int history(char *buffer, int historyId) {
-801013f0:	f3 0f 1e fb          	endbr32 
-801013f4:	55                   	push   %ebp
-    return 2;
-801013f5:	b8 02 00 00 00       	mov    $0x2,%eax
-int history(char *buffer, int historyId) {
-801013fa:	89 e5                	mov    %esp,%ebp
-801013fc:	53                   	push   %ebx
-801013fd:	83 ec 04             	sub    $0x4,%esp
-80101400:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  if (historyId < 0 || historyId > MAX_HISTORY - 1)
-80101403:	83 fb 0f             	cmp    $0xf,%ebx
-80101406:	77 0d                	ja     80101415 <history+0x25>
-    return 1;
-80101408:	b8 01 00 00 00       	mov    $0x1,%eax
-  if (historyId >= historyBufferArray.numOfCommmandsInMem )
-8010140d:	39 1d a4 19 11 80    	cmp    %ebx,0x801119a4
-80101413:	7f 0b                	jg     80101420 <history+0x30>
-}
-80101415:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80101418:	c9                   	leave  
-80101419:	c3                   	ret    
-8010141a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  memset(buffer, '\0', INPUT_BUF);
-80101420:	83 ec 04             	sub    $0x4,%esp
-80101423:	68 80 00 00 00       	push   $0x80
-80101428:	6a 00                	push   $0x0
-8010142a:	ff 75 08             	pushl  0x8(%ebp)
-8010142d:	e8 8e 3c 00 00       	call   801050c0 <memset>
-  int tempIndex = (historyBufferArray.lastCommandIndex + historyId) % MAX_HISTORY;
-80101432:	03 1d a0 19 11 80    	add    0x801119a0,%ebx
-  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
-80101438:	83 c4 0c             	add    $0xc,%esp
-  int tempIndex = (historyBufferArray.lastCommandIndex + historyId) % MAX_HISTORY;
-8010143b:	83 e3 0f             	and    $0xf,%ebx
-  memmove(buffer, historyBufferArray.bufferArr[tempIndex], historyBufferArray.lengthsArr[tempIndex]);
-8010143e:	ff 34 9d 60 19 11 80 	pushl  -0x7feee6a0(,%ebx,4)
-80101445:	c1 e3 07             	shl    $0x7,%ebx
-80101448:	81 c3 60 11 11 80    	add    $0x80111160,%ebx
-8010144e:	53                   	push   %ebx
-8010144f:	ff 75 08             	pushl  0x8(%ebp)
-80101452:	e8 09 3d 00 00       	call   80105160 <memmove>
-}
-80101457:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return 0;
-8010145a:	83 c4 10             	add    $0x10,%esp
-8010145d:	31 c0                	xor    %eax,%eax
-}
-8010145f:	c9                   	leave  
-80101460:	c3                   	ret    
-80101461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010146f:	90                   	nop
+801009ff:	e9 cc 37 00 00       	jmp    801041d0 <procdump>
+80100a04:	b8 0a 00 00 00       	mov    $0xa,%eax
+80100a09:	e8 02 fa ff ff       	call   80100410 <consputc.part.0>
+        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
+80100a0e:	a1 a8 ff 10 80       	mov    0x8010ffa8,%eax
+          wakeup(&input.r);
+80100a13:	83 ec 0c             	sub    $0xc,%esp
+          input.w = input.e;
+80100a16:	a3 a4 ff 10 80       	mov    %eax,0x8010ffa4
+          wakeup(&input.r);
+80100a1b:	68 a0 ff 10 80       	push   $0x8010ffa0
+80100a20:	e8 bb 36 00 00       	call   801040e0 <wakeup>
+80100a25:	83 c4 10             	add    $0x10,%esp
+80100a28:	e9 6b fe ff ff       	jmp    80100898 <consoleintr+0x38>
+80100a2d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80101470 <consoleinit>:
+80100a30 <consoleinit>:
 
 void
 consoleinit(void)
 {
-80101470:	f3 0f 1e fb          	endbr32 
-80101474:	55                   	push   %ebp
-80101475:	89 e5                	mov    %esp,%ebp
-80101477:	83 ec 10             	sub    $0x10,%esp
+80100a30:	f3 0f 1e fb          	endbr32 
+80100a34:	55                   	push   %ebp
+80100a35:	89 e5                	mov    %esp,%ebp
+80100a37:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-8010147a:	68 e8 7b 10 80       	push   $0x80107be8
-8010147f:	68 20 b5 10 80       	push   $0x8010b520
-80101484:	e8 a7 39 00 00       	call   80104e30 <initlock>
+80100a3a:	68 48 71 10 80       	push   $0x80107148
+80100a3f:	68 20 a5 10 80       	push   $0x8010a520
+80100a44:	e8 97 39 00 00       	call   801043e0 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
   cons.locking = 1;
+
   ioapicenable(IRQ_KBD, 0);
-80101489:	58                   	pop    %eax
-8010148a:	5a                   	pop    %edx
-8010148b:	6a 00                	push   $0x0
-8010148d:	6a 01                	push   $0x1
+80100a49:	58                   	pop    %eax
+80100a4a:	5a                   	pop    %edx
+80100a4b:	6a 00                	push   $0x0
+80100a4d:	6a 01                	push   $0x1
   devsw[CONSOLE].write = consolewrite;
-8010148f:	c7 05 6c 23 11 80 80 	movl   $0x80100680,0x8011236c
-80101496:	06 10 80 
+80100a4f:	c7 05 6c 09 11 80 40 	movl   $0x80100640,0x8011096c
+80100a56:	06 10 80 
   devsw[CONSOLE].read = consoleread;
-80101499:	c7 05 68 23 11 80 90 	movl   $0x80100290,0x80112368
-801014a0:	02 10 80 
+80100a59:	c7 05 68 09 11 80 90 	movl   $0x80100290,0x80110968
+80100a60:	02 10 80 
   cons.locking = 1;
-801014a3:	c7 05 54 b5 10 80 01 	movl   $0x1,0x8010b554
-801014aa:	00 00 00 
+80100a63:	c7 05 54 a5 10 80 01 	movl   $0x1,0x8010a554
+80100a6a:	00 00 00 
   ioapicenable(IRQ_KBD, 0);
-801014ad:	e8 ce 19 00 00       	call   80102e80 <ioapicenable>
-  //initializing historyBuffer
-  historyBufferArray.numOfCommmandsInMem=0;
-  historyBufferArray.lastCommandIndex=0;
-}
-801014b2:	83 c4 10             	add    $0x10,%esp
-  historyBufferArray.numOfCommmandsInMem=0;
-801014b5:	c7 05 a4 19 11 80 00 	movl   $0x0,0x801119a4
-801014bc:	00 00 00 
-  historyBufferArray.lastCommandIndex=0;
-801014bf:	c7 05 a0 19 11 80 00 	movl   $0x0,0x801119a0
-801014c6:	00 00 00 
-}
-801014c9:	c9                   	leave  
-801014ca:	c3                   	ret    
-801014cb:	66 90                	xchg   %ax,%ax
-801014cd:	66 90                	xchg   %ax,%ax
-801014cf:	90                   	nop
+80100a6d:	e8 be 19 00 00       	call   80102430 <ioapicenable>
+}
+80100a72:	83 c4 10             	add    $0x10,%esp
+80100a75:	c9                   	leave  
+80100a76:	c3                   	ret    
+80100a77:	66 90                	xchg   %ax,%ax
+80100a79:	66 90                	xchg   %ax,%ax
+80100a7b:	66 90                	xchg   %ax,%ax
+80100a7d:	66 90                	xchg   %ax,%ax
+80100a7f:	90                   	nop
 
-801014d0 <exec>:
+80100a80 <exec>:
 #include "x86.h"
 #include "elf.h"
 
 int
 exec(char *path, char **argv)
 {
-801014d0:	f3 0f 1e fb          	endbr32 
-801014d4:	55                   	push   %ebp
-801014d5:	89 e5                	mov    %esp,%ebp
-801014d7:	57                   	push   %edi
-801014d8:	56                   	push   %esi
-801014d9:	53                   	push   %ebx
-801014da:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
+80100a80:	f3 0f 1e fb          	endbr32 
+80100a84:	55                   	push   %ebp
+80100a85:	89 e5                	mov    %esp,%ebp
+80100a87:	57                   	push   %edi
+80100a88:	56                   	push   %esi
+80100a89:	53                   	push   %ebx
+80100a8a:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
   uint argc, sz, sp, ustack[3+MAXARG+1];
   struct elfhdr elf;
   struct inode *ip;
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-801014e0:	e8 cb 2e 00 00       	call   801043b0 <myproc>
-801014e5:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
+80100a90:	e8 cb 2e 00 00       	call   80103960 <myproc>
+80100a95:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
-801014eb:	e8 90 22 00 00       	call   80103780 <begin_op>
+80100a9b:	e8 90 22 00 00       	call   80102d30 <begin_op>
 
   if((ip = namei(path)) == 0){
-801014f0:	83 ec 0c             	sub    $0xc,%esp
-801014f3:	ff 75 08             	pushl  0x8(%ebp)
-801014f6:	e8 85 15 00 00       	call   80102a80 <namei>
-801014fb:	83 c4 10             	add    $0x10,%esp
-801014fe:	85 c0                	test   %eax,%eax
-80101500:	0f 84 fe 02 00 00    	je     80101804 <exec+0x334>
+80100aa0:	83 ec 0c             	sub    $0xc,%esp
+80100aa3:	ff 75 08             	pushl  0x8(%ebp)
+80100aa6:	e8 85 15 00 00       	call   80102030 <namei>
+80100aab:	83 c4 10             	add    $0x10,%esp
+80100aae:	85 c0                	test   %eax,%eax
+80100ab0:	0f 84 fe 02 00 00    	je     80100db4 <exec+0x334>
     end_op();
     cprintf("exec: fail\n");
     return -1;
   }
   ilock(ip);
-80101506:	83 ec 0c             	sub    $0xc,%esp
-80101509:	89 c3                	mov    %eax,%ebx
-8010150b:	50                   	push   %eax
-8010150c:	e8 9f 0c 00 00       	call   801021b0 <ilock>
+80100ab6:	83 ec 0c             	sub    $0xc,%esp
+80100ab9:	89 c3                	mov    %eax,%ebx
+80100abb:	50                   	push   %eax
+80100abc:	e8 9f 0c 00 00       	call   80101760 <ilock>
   pgdir = 0;
 
   // Check ELF header
   if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
-80101511:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
-80101517:	6a 34                	push   $0x34
-80101519:	6a 00                	push   $0x0
-8010151b:	50                   	push   %eax
-8010151c:	53                   	push   %ebx
-8010151d:	e8 8e 0f 00 00       	call   801024b0 <readi>
-80101522:	83 c4 20             	add    $0x20,%esp
-80101525:	83 f8 34             	cmp    $0x34,%eax
-80101528:	74 26                	je     80101550 <exec+0x80>
+80100ac1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
+80100ac7:	6a 34                	push   $0x34
+80100ac9:	6a 00                	push   $0x0
+80100acb:	50                   	push   %eax
+80100acc:	53                   	push   %ebx
+80100acd:	e8 8e 0f 00 00       	call   80101a60 <readi>
+80100ad2:	83 c4 20             	add    $0x20,%esp
+80100ad5:	83 f8 34             	cmp    $0x34,%eax
+80100ad8:	74 26                	je     80100b00 <exec+0x80>
 
  bad:
   if(pgdir)
     freevm(pgdir);
   if(ip){
     iunlockput(ip);
-8010152a:	83 ec 0c             	sub    $0xc,%esp
-8010152d:	53                   	push   %ebx
-8010152e:	e8 1d 0f 00 00       	call   80102450 <iunlockput>
+80100ada:	83 ec 0c             	sub    $0xc,%esp
+80100add:	53                   	push   %ebx
+80100ade:	e8 1d 0f 00 00       	call   80101a00 <iunlockput>
     end_op();
-80101533:	e8 b8 22 00 00       	call   801037f0 <end_op>
-80101538:	83 c4 10             	add    $0x10,%esp
+80100ae3:	e8 b8 22 00 00       	call   80102da0 <end_op>
+80100ae8:	83 c4 10             	add    $0x10,%esp
   }
   return -1;
-8010153b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100aeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80101540:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101543:	5b                   	pop    %ebx
-80101544:	5e                   	pop    %esi
-80101545:	5f                   	pop    %edi
-80101546:	5d                   	pop    %ebp
-80101547:	c3                   	ret    
-80101548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010154f:	90                   	nop
+80100af0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100af3:	5b                   	pop    %ebx
+80100af4:	5e                   	pop    %esi
+80100af5:	5f                   	pop    %edi
+80100af6:	5d                   	pop    %ebp
+80100af7:	c3                   	ret    
+80100af8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100aff:	90                   	nop
   if(elf.magic != ELF_MAGIC)
-80101550:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
-80101557:	45 4c 46 
-8010155a:	75 ce                	jne    8010152a <exec+0x5a>
+80100b00:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
+80100b07:	45 4c 46 
+80100b0a:	75 ce                	jne    80100ada <exec+0x5a>
   if((pgdir = setupkvm()) == 0)
-8010155c:	e8 8f 63 00 00       	call   801078f0 <setupkvm>
-80101561:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
-80101567:	85 c0                	test   %eax,%eax
-80101569:	74 bf                	je     8010152a <exec+0x5a>
+80100b0c:	e8 3f 63 00 00       	call   80106e50 <setupkvm>
+80100b11:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
+80100b17:	85 c0                	test   %eax,%eax
+80100b19:	74 bf                	je     80100ada <exec+0x5a>
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-8010156b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
-80101572:	00 
-80101573:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
-80101579:	0f 84 a4 02 00 00    	je     80101823 <exec+0x353>
+80100b1b:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
+80100b22:	00 
+80100b23:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
+80100b29:	0f 84 a4 02 00 00    	je     80100dd3 <exec+0x353>
   sz = 0;
-8010157f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
-80101586:	00 00 00 
+80100b2f:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
+80100b36:	00 00 00 
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80101589:	31 ff                	xor    %edi,%edi
-8010158b:	e9 86 00 00 00       	jmp    80101616 <exec+0x146>
+80100b39:	31 ff                	xor    %edi,%edi
+80100b3b:	e9 86 00 00 00       	jmp    80100bc6 <exec+0x146>
     if(ph.type != ELF_PROG_LOAD)
-80101590:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
-80101597:	75 6c                	jne    80101605 <exec+0x135>
+80100b40:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
+80100b47:	75 6c                	jne    80100bb5 <exec+0x135>
     if(ph.memsz < ph.filesz)
-80101599:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
-8010159f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
-801015a5:	0f 82 87 00 00 00    	jb     80101632 <exec+0x162>
+80100b49:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
+80100b4f:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
+80100b55:	0f 82 87 00 00 00    	jb     80100be2 <exec+0x162>
     if(ph.vaddr + ph.memsz < ph.vaddr)
-801015ab:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
-801015b1:	72 7f                	jb     80101632 <exec+0x162>
+80100b5b:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
+80100b61:	72 7f                	jb     80100be2 <exec+0x162>
     if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-801015b3:	83 ec 04             	sub    $0x4,%esp
-801015b6:	50                   	push   %eax
-801015b7:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
-801015bd:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-801015c3:	e8 48 61 00 00       	call   80107710 <allocuvm>
-801015c8:	83 c4 10             	add    $0x10,%esp
-801015cb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
-801015d1:	85 c0                	test   %eax,%eax
-801015d3:	74 5d                	je     80101632 <exec+0x162>
+80100b63:	83 ec 04             	sub    $0x4,%esp
+80100b66:	50                   	push   %eax
+80100b67:	ff b5 f0 fe ff ff    	pushl  -0x110(%ebp)
+80100b6d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100b73:	e8 f8 60 00 00       	call   80106c70 <allocuvm>
+80100b78:	83 c4 10             	add    $0x10,%esp
+80100b7b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
+80100b81:	85 c0                	test   %eax,%eax
+80100b83:	74 5d                	je     80100be2 <exec+0x162>
     if(ph.vaddr % PGSIZE != 0)
-801015d5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
-801015db:	a9 ff 0f 00 00       	test   $0xfff,%eax
-801015e0:	75 50                	jne    80101632 <exec+0x162>
+80100b85:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
+80100b8b:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80100b90:	75 50                	jne    80100be2 <exec+0x162>
     if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-801015e2:	83 ec 0c             	sub    $0xc,%esp
-801015e5:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
-801015eb:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
-801015f1:	53                   	push   %ebx
-801015f2:	50                   	push   %eax
-801015f3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-801015f9:	e8 42 60 00 00       	call   80107640 <loaduvm>
-801015fe:	83 c4 20             	add    $0x20,%esp
-80101601:	85 c0                	test   %eax,%eax
-80101603:	78 2d                	js     80101632 <exec+0x162>
+80100b92:	83 ec 0c             	sub    $0xc,%esp
+80100b95:	ff b5 14 ff ff ff    	pushl  -0xec(%ebp)
+80100b9b:	ff b5 08 ff ff ff    	pushl  -0xf8(%ebp)
+80100ba1:	53                   	push   %ebx
+80100ba2:	50                   	push   %eax
+80100ba3:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ba9:	e8 f2 5f 00 00       	call   80106ba0 <loaduvm>
+80100bae:	83 c4 20             	add    $0x20,%esp
+80100bb1:	85 c0                	test   %eax,%eax
+80100bb3:	78 2d                	js     80100be2 <exec+0x162>
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80101605:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
-8010160c:	83 c7 01             	add    $0x1,%edi
-8010160f:	83 c6 20             	add    $0x20,%esi
-80101612:	39 f8                	cmp    %edi,%eax
-80101614:	7e 3a                	jle    80101650 <exec+0x180>
+80100bb5:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
+80100bbc:	83 c7 01             	add    $0x1,%edi
+80100bbf:	83 c6 20             	add    $0x20,%esi
+80100bc2:	39 f8                	cmp    %edi,%eax
+80100bc4:	7e 3a                	jle    80100c00 <exec+0x180>
     if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-80101616:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
-8010161c:	6a 20                	push   $0x20
-8010161e:	56                   	push   %esi
-8010161f:	50                   	push   %eax
-80101620:	53                   	push   %ebx
-80101621:	e8 8a 0e 00 00       	call   801024b0 <readi>
-80101626:	83 c4 10             	add    $0x10,%esp
-80101629:	83 f8 20             	cmp    $0x20,%eax
-8010162c:	0f 84 5e ff ff ff    	je     80101590 <exec+0xc0>
+80100bc6:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
+80100bcc:	6a 20                	push   $0x20
+80100bce:	56                   	push   %esi
+80100bcf:	50                   	push   %eax
+80100bd0:	53                   	push   %ebx
+80100bd1:	e8 8a 0e 00 00       	call   80101a60 <readi>
+80100bd6:	83 c4 10             	add    $0x10,%esp
+80100bd9:	83 f8 20             	cmp    $0x20,%eax
+80100bdc:	0f 84 5e ff ff ff    	je     80100b40 <exec+0xc0>
     freevm(pgdir);
-80101632:	83 ec 0c             	sub    $0xc,%esp
-80101635:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-8010163b:	e8 30 62 00 00       	call   80107870 <freevm>
+80100be2:	83 ec 0c             	sub    $0xc,%esp
+80100be5:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100beb:	e8 e0 61 00 00       	call   80106dd0 <freevm>
   if(ip){
-80101640:	83 c4 10             	add    $0x10,%esp
-80101643:	e9 e2 fe ff ff       	jmp    8010152a <exec+0x5a>
-80101648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010164f:	90                   	nop
-80101650:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
-80101656:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
-8010165c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-80101662:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
+80100bf0:	83 c4 10             	add    $0x10,%esp
+80100bf3:	e9 e2 fe ff ff       	jmp    80100ada <exec+0x5a>
+80100bf8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100bff:	90                   	nop
+80100c00:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
+80100c06:	81 c7 ff 0f 00 00    	add    $0xfff,%edi
+80100c0c:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80100c12:	8d b7 00 20 00 00    	lea    0x2000(%edi),%esi
   iunlockput(ip);
-80101668:	83 ec 0c             	sub    $0xc,%esp
-8010166b:	53                   	push   %ebx
-8010166c:	e8 df 0d 00 00       	call   80102450 <iunlockput>
+80100c18:	83 ec 0c             	sub    $0xc,%esp
+80100c1b:	53                   	push   %ebx
+80100c1c:	e8 df 0d 00 00       	call   80101a00 <iunlockput>
   end_op();
-80101671:	e8 7a 21 00 00       	call   801037f0 <end_op>
+80100c21:	e8 7a 21 00 00       	call   80102da0 <end_op>
   if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-80101676:	83 c4 0c             	add    $0xc,%esp
-80101679:	56                   	push   %esi
-8010167a:	57                   	push   %edi
-8010167b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
-80101681:	57                   	push   %edi
-80101682:	e8 89 60 00 00       	call   80107710 <allocuvm>
-80101687:	83 c4 10             	add    $0x10,%esp
-8010168a:	89 c6                	mov    %eax,%esi
-8010168c:	85 c0                	test   %eax,%eax
-8010168e:	0f 84 94 00 00 00    	je     80101728 <exec+0x258>
+80100c26:	83 c4 0c             	add    $0xc,%esp
+80100c29:	56                   	push   %esi
+80100c2a:	57                   	push   %edi
+80100c2b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
+80100c31:	57                   	push   %edi
+80100c32:	e8 39 60 00 00       	call   80106c70 <allocuvm>
+80100c37:	83 c4 10             	add    $0x10,%esp
+80100c3a:	89 c6                	mov    %eax,%esi
+80100c3c:	85 c0                	test   %eax,%eax
+80100c3e:	0f 84 94 00 00 00    	je     80100cd8 <exec+0x258>
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80101694:	83 ec 08             	sub    $0x8,%esp
-80101697:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
+80100c44:	83 ec 08             	sub    $0x8,%esp
+80100c47:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
   for(argc = 0; argv[argc]; argc++) {
-8010169d:	89 f3                	mov    %esi,%ebx
+80100c4d:	89 f3                	mov    %esi,%ebx
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-8010169f:	50                   	push   %eax
-801016a0:	57                   	push   %edi
+80100c4f:	50                   	push   %eax
+80100c50:	57                   	push   %edi
   for(argc = 0; argv[argc]; argc++) {
-801016a1:	31 ff                	xor    %edi,%edi
+80100c51:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-801016a3:	e8 e8 62 00 00       	call   80107990 <clearpteu>
+80100c53:	e8 98 62 00 00       	call   80106ef0 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
-801016a8:	8b 45 0c             	mov    0xc(%ebp),%eax
-801016ab:	83 c4 10             	add    $0x10,%esp
-801016ae:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
-801016b4:	8b 00                	mov    (%eax),%eax
-801016b6:	85 c0                	test   %eax,%eax
-801016b8:	0f 84 8b 00 00 00    	je     80101749 <exec+0x279>
-801016be:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
-801016c4:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
-801016ca:	eb 23                	jmp    801016ef <exec+0x21f>
-801016cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801016d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c58:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100c5b:	83 c4 10             	add    $0x10,%esp
+80100c5e:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c64:	8b 00                	mov    (%eax),%eax
+80100c66:	85 c0                	test   %eax,%eax
+80100c68:	0f 84 8b 00 00 00    	je     80100cf9 <exec+0x279>
+80100c6e:	89 b5 f0 fe ff ff    	mov    %esi,-0x110(%ebp)
+80100c74:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
+80100c7a:	eb 23                	jmp    80100c9f <exec+0x21f>
+80100c7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100c80:	8b 45 0c             	mov    0xc(%ebp),%eax
     ustack[3+argc] = sp;
-801016d3:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
+80100c83:	89 9c bd 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%edi,4)
   for(argc = 0; argv[argc]; argc++) {
-801016da:	83 c7 01             	add    $0x1,%edi
+80100c8a:	83 c7 01             	add    $0x1,%edi
     ustack[3+argc] = sp;
-801016dd:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
+80100c8d:	8d 95 58 ff ff ff    	lea    -0xa8(%ebp),%edx
   for(argc = 0; argv[argc]; argc++) {
-801016e3:	8b 04 b8             	mov    (%eax,%edi,4),%eax
-801016e6:	85 c0                	test   %eax,%eax
-801016e8:	74 59                	je     80101743 <exec+0x273>
+80100c93:	8b 04 b8             	mov    (%eax,%edi,4),%eax
+80100c96:	85 c0                	test   %eax,%eax
+80100c98:	74 59                	je     80100cf3 <exec+0x273>
     if(argc >= MAXARG)
-801016ea:	83 ff 20             	cmp    $0x20,%edi
-801016ed:	74 39                	je     80101728 <exec+0x258>
+80100c9a:	83 ff 20             	cmp    $0x20,%edi
+80100c9d:	74 39                	je     80100cd8 <exec+0x258>
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-801016ef:	83 ec 0c             	sub    $0xc,%esp
-801016f2:	50                   	push   %eax
-801016f3:	e8 c8 3b 00 00       	call   801052c0 <strlen>
-801016f8:	f7 d0                	not    %eax
-801016fa:	01 c3                	add    %eax,%ebx
+80100c9f:	83 ec 0c             	sub    $0xc,%esp
+80100ca2:	50                   	push   %eax
+80100ca3:	e8 c8 3b 00 00       	call   80104870 <strlen>
+80100ca8:	f7 d0                	not    %eax
+80100caa:	01 c3                	add    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-801016fc:	58                   	pop    %eax
-801016fd:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cac:	58                   	pop    %eax
+80100cad:	8b 45 0c             	mov    0xc(%ebp),%eax
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80101700:	83 e3 fc             	and    $0xfffffffc,%ebx
+80100cb0:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80101703:	ff 34 b8             	pushl  (%eax,%edi,4)
-80101706:	e8 b5 3b 00 00       	call   801052c0 <strlen>
-8010170b:	83 c0 01             	add    $0x1,%eax
-8010170e:	50                   	push   %eax
-8010170f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101712:	ff 34 b8             	pushl  (%eax,%edi,4)
-80101715:	53                   	push   %ebx
-80101716:	56                   	push   %esi
-80101717:	e8 d4 63 00 00       	call   80107af0 <copyout>
-8010171c:	83 c4 20             	add    $0x20,%esp
-8010171f:	85 c0                	test   %eax,%eax
-80101721:	79 ad                	jns    801016d0 <exec+0x200>
-80101723:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101727:	90                   	nop
+80100cb3:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cb6:	e8 b5 3b 00 00       	call   80104870 <strlen>
+80100cbb:	83 c0 01             	add    $0x1,%eax
+80100cbe:	50                   	push   %eax
+80100cbf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80100cc2:	ff 34 b8             	pushl  (%eax,%edi,4)
+80100cc5:	53                   	push   %ebx
+80100cc6:	56                   	push   %esi
+80100cc7:	e8 84 63 00 00       	call   80107050 <copyout>
+80100ccc:	83 c4 20             	add    $0x20,%esp
+80100ccf:	85 c0                	test   %eax,%eax
+80100cd1:	79 ad                	jns    80100c80 <exec+0x200>
+80100cd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100cd7:	90                   	nop
     freevm(pgdir);
-80101728:	83 ec 0c             	sub    $0xc,%esp
-8010172b:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
-80101731:	e8 3a 61 00 00       	call   80107870 <freevm>
-80101736:	83 c4 10             	add    $0x10,%esp
+80100cd8:	83 ec 0c             	sub    $0xc,%esp
+80100cdb:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100ce1:	e8 ea 60 00 00       	call   80106dd0 <freevm>
+80100ce6:	83 c4 10             	add    $0x10,%esp
   return -1;
-80101739:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010173e:	e9 fd fd ff ff       	jmp    80101540 <exec+0x70>
-80101743:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
+80100ce9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100cee:	e9 fd fd ff ff       	jmp    80100af0 <exec+0x70>
+80100cf3:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
   ustack[2] = sp - (argc+1)*4;  // argv pointer
-80101749:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
-80101750:	89 d9                	mov    %ebx,%ecx
+80100cf9:	8d 04 bd 04 00 00 00 	lea    0x4(,%edi,4),%eax
+80100d00:	89 d9                	mov    %ebx,%ecx
   ustack[3+argc] = 0;
-80101752:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
-80101759:	00 00 00 00 
+80100d02:	c7 84 bd 64 ff ff ff 	movl   $0x0,-0x9c(%ebp,%edi,4)
+80100d09:	00 00 00 00 
   ustack[2] = sp - (argc+1)*4;  // argv pointer
-8010175d:	29 c1                	sub    %eax,%ecx
+80100d0d:	29 c1                	sub    %eax,%ecx
   sp -= (3+argc+1) * 4;
-8010175f:	83 c0 0c             	add    $0xc,%eax
+80100d0f:	83 c0 0c             	add    $0xc,%eax
   ustack[1] = argc;
-80101762:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
+80100d12:	89 bd 5c ff ff ff    	mov    %edi,-0xa4(%ebp)
   sp -= (3+argc+1) * 4;
-80101768:	29 c3                	sub    %eax,%ebx
+80100d18:	29 c3                	sub    %eax,%ebx
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-8010176a:	50                   	push   %eax
-8010176b:	52                   	push   %edx
-8010176c:	53                   	push   %ebx
-8010176d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
+80100d1a:	50                   	push   %eax
+80100d1b:	52                   	push   %edx
+80100d1c:	53                   	push   %ebx
+80100d1d:	ff b5 f4 fe ff ff    	pushl  -0x10c(%ebp)
   ustack[0] = 0xffffffff;  // fake return PC
-80101773:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
-8010177a:	ff ff ff 
+80100d23:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
+80100d2a:	ff ff ff 
   ustack[2] = sp - (argc+1)*4;  // argv pointer
-8010177d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
+80100d2d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80101783:	e8 68 63 00 00       	call   80107af0 <copyout>
-80101788:	83 c4 10             	add    $0x10,%esp
-8010178b:	85 c0                	test   %eax,%eax
-8010178d:	78 99                	js     80101728 <exec+0x258>
+80100d33:	e8 18 63 00 00       	call   80107050 <copyout>
+80100d38:	83 c4 10             	add    $0x10,%esp
+80100d3b:	85 c0                	test   %eax,%eax
+80100d3d:	78 99                	js     80100cd8 <exec+0x258>
   for(last=s=path; *s; s++)
-8010178f:	8b 45 08             	mov    0x8(%ebp),%eax
-80101792:	8b 55 08             	mov    0x8(%ebp),%edx
-80101795:	0f b6 00             	movzbl (%eax),%eax
-80101798:	84 c0                	test   %al,%al
-8010179a:	74 13                	je     801017af <exec+0x2df>
-8010179c:	89 d1                	mov    %edx,%ecx
-8010179e:	66 90                	xchg   %ax,%ax
+80100d3f:	8b 45 08             	mov    0x8(%ebp),%eax
+80100d42:	8b 55 08             	mov    0x8(%ebp),%edx
+80100d45:	0f b6 00             	movzbl (%eax),%eax
+80100d48:	84 c0                	test   %al,%al
+80100d4a:	74 13                	je     80100d5f <exec+0x2df>
+80100d4c:	89 d1                	mov    %edx,%ecx
+80100d4e:	66 90                	xchg   %ax,%ax
     if(*s == '/')
-801017a0:	83 c1 01             	add    $0x1,%ecx
-801017a3:	3c 2f                	cmp    $0x2f,%al
+80100d50:	83 c1 01             	add    $0x1,%ecx
+80100d53:	3c 2f                	cmp    $0x2f,%al
   for(last=s=path; *s; s++)
-801017a5:	0f b6 01             	movzbl (%ecx),%eax
+80100d55:	0f b6 01             	movzbl (%ecx),%eax
     if(*s == '/')
-801017a8:	0f 44 d1             	cmove  %ecx,%edx
+80100d58:	0f 44 d1             	cmove  %ecx,%edx
   for(last=s=path; *s; s++)
-801017ab:	84 c0                	test   %al,%al
-801017ad:	75 f1                	jne    801017a0 <exec+0x2d0>
+80100d5b:	84 c0                	test   %al,%al
+80100d5d:	75 f1                	jne    80100d50 <exec+0x2d0>
   safestrcpy(curproc->name, last, sizeof(curproc->name));
-801017af:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
-801017b5:	83 ec 04             	sub    $0x4,%esp
-801017b8:	6a 10                	push   $0x10
-801017ba:	89 f8                	mov    %edi,%eax
-801017bc:	52                   	push   %edx
-801017bd:	83 c0 6c             	add    $0x6c,%eax
-801017c0:	50                   	push   %eax
-801017c1:	e8 ba 3a 00 00       	call   80105280 <safestrcpy>
+80100d5f:	8b bd ec fe ff ff    	mov    -0x114(%ebp),%edi
+80100d65:	83 ec 04             	sub    $0x4,%esp
+80100d68:	6a 10                	push   $0x10
+80100d6a:	89 f8                	mov    %edi,%eax
+80100d6c:	52                   	push   %edx
+80100d6d:	83 c0 6c             	add    $0x6c,%eax
+80100d70:	50                   	push   %eax
+80100d71:	e8 ba 3a 00 00       	call   80104830 <safestrcpy>
   curproc->pgdir = pgdir;
-801017c6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
+80100d76:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
-801017cc:	89 f8                	mov    %edi,%eax
-801017ce:	8b 7f 04             	mov    0x4(%edi),%edi
+80100d7c:	89 f8                	mov    %edi,%eax
+80100d7e:	8b 7f 04             	mov    0x4(%edi),%edi
   curproc->sz = sz;
-801017d1:	89 30                	mov    %esi,(%eax)
+80100d81:	89 30                	mov    %esi,(%eax)
   curproc->pgdir = pgdir;
-801017d3:	89 48 04             	mov    %ecx,0x4(%eax)
+80100d83:	89 48 04             	mov    %ecx,0x4(%eax)
   curproc->tf->eip = elf.entry;  // main
-801017d6:	89 c1                	mov    %eax,%ecx
-801017d8:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
-801017de:	8b 40 18             	mov    0x18(%eax),%eax
-801017e1:	89 50 38             	mov    %edx,0x38(%eax)
+80100d86:	89 c1                	mov    %eax,%ecx
+80100d88:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
+80100d8e:	8b 40 18             	mov    0x18(%eax),%eax
+80100d91:	89 50 38             	mov    %edx,0x38(%eax)
   curproc->tf->esp = sp;
-801017e4:	8b 41 18             	mov    0x18(%ecx),%eax
-801017e7:	89 58 44             	mov    %ebx,0x44(%eax)
+80100d94:	8b 41 18             	mov    0x18(%ecx),%eax
+80100d97:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
-801017ea:	89 0c 24             	mov    %ecx,(%esp)
-801017ed:	e8 be 5c 00 00       	call   801074b0 <switchuvm>
+80100d9a:	89 0c 24             	mov    %ecx,(%esp)
+80100d9d:	e8 6e 5c 00 00       	call   80106a10 <switchuvm>
   freevm(oldpgdir);
-801017f2:	89 3c 24             	mov    %edi,(%esp)
-801017f5:	e8 76 60 00 00       	call   80107870 <freevm>
+80100da2:	89 3c 24             	mov    %edi,(%esp)
+80100da5:	e8 26 60 00 00       	call   80106dd0 <freevm>
   return 0;
-801017fa:	83 c4 10             	add    $0x10,%esp
-801017fd:	31 c0                	xor    %eax,%eax
-801017ff:	e9 3c fd ff ff       	jmp    80101540 <exec+0x70>
+80100daa:	83 c4 10             	add    $0x10,%esp
+80100dad:	31 c0                	xor    %eax,%eax
+80100daf:	e9 3c fd ff ff       	jmp    80100af0 <exec+0x70>
     end_op();
-80101804:	e8 e7 1f 00 00       	call   801037f0 <end_op>
+80100db4:	e8 e7 1f 00 00       	call   80102da0 <end_op>
     cprintf("exec: fail\n");
-80101809:	83 ec 0c             	sub    $0xc,%esp
-8010180c:	68 39 7c 10 80       	push   $0x80107c39
-80101811:	e8 da ee ff ff       	call   801006f0 <cprintf>
-    return -1;
-80101816:	83 c4 10             	add    $0x10,%esp
-80101819:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010181e:	e9 1d fd ff ff       	jmp    80101540 <exec+0x70>
+80100db9:	83 ec 0c             	sub    $0xc,%esp
+80100dbc:	68 61 71 10 80       	push   $0x80107161
+80100dc1:	e8 ea f8 ff ff       	call   801006b0 <cprintf>
+    return -1;
+80100dc6:	83 c4 10             	add    $0x10,%esp
+80100dc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100dce:	e9 1d fd ff ff       	jmp    80100af0 <exec+0x70>
   for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80101823:	31 ff                	xor    %edi,%edi
-80101825:	be 00 20 00 00       	mov    $0x2000,%esi
-8010182a:	e9 39 fe ff ff       	jmp    80101668 <exec+0x198>
-8010182f:	90                   	nop
+80100dd3:	31 ff                	xor    %edi,%edi
+80100dd5:	be 00 20 00 00       	mov    $0x2000,%esi
+80100dda:	e9 39 fe ff ff       	jmp    80100c18 <exec+0x198>
+80100ddf:	90                   	nop
 
-80101830 <fileinit>:
+80100de0 <fileinit>:
   struct file file[NFILE];
 } ftable;
 
 void
 fileinit(void)
 {
-80101830:	f3 0f 1e fb          	endbr32 
-80101834:	55                   	push   %ebp
-80101835:	89 e5                	mov    %esp,%ebp
-80101837:	83 ec 10             	sub    $0x10,%esp
+80100de0:	f3 0f 1e fb          	endbr32 
+80100de4:	55                   	push   %ebp
+80100de5:	89 e5                	mov    %esp,%ebp
+80100de7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-8010183a:	68 45 7c 10 80       	push   $0x80107c45
-8010183f:	68 c0 19 11 80       	push   $0x801119c0
-80101844:	e8 e7 35 00 00       	call   80104e30 <initlock>
-}
-80101849:	83 c4 10             	add    $0x10,%esp
-8010184c:	c9                   	leave  
-8010184d:	c3                   	ret    
-8010184e:	66 90                	xchg   %ax,%ax
+80100dea:	68 6d 71 10 80       	push   $0x8010716d
+80100def:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100df4:	e8 e7 35 00 00       	call   801043e0 <initlock>
+}
+80100df9:	83 c4 10             	add    $0x10,%esp
+80100dfc:	c9                   	leave  
+80100dfd:	c3                   	ret    
+80100dfe:	66 90                	xchg   %ax,%ax
 
-80101850 <filealloc>:
+80100e00 <filealloc>:
 
 // Allocate a file structure.
 struct file*
 filealloc(void)
 {
-80101850:	f3 0f 1e fb          	endbr32 
-80101854:	55                   	push   %ebp
-80101855:	89 e5                	mov    %esp,%ebp
-80101857:	53                   	push   %ebx
+80100e00:	f3 0f 1e fb          	endbr32 
+80100e04:	55                   	push   %ebp
+80100e05:	89 e5                	mov    %esp,%ebp
+80100e07:	53                   	push   %ebx
   struct file *f;
 
   acquire(&ftable.lock);
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80101858:	bb f4 19 11 80       	mov    $0x801119f4,%ebx
+80100e08:	bb f4 ff 10 80       	mov    $0x8010fff4,%ebx
 {
-8010185d:	83 ec 10             	sub    $0x10,%esp
+80100e0d:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
-80101860:	68 c0 19 11 80       	push   $0x801119c0
-80101865:	e8 46 37 00 00       	call   80104fb0 <acquire>
-8010186a:	83 c4 10             	add    $0x10,%esp
-8010186d:	eb 0c                	jmp    8010187b <filealloc+0x2b>
-8010186f:	90                   	nop
+80100e10:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e15:	e8 46 37 00 00       	call   80104560 <acquire>
+80100e1a:	83 c4 10             	add    $0x10,%esp
+80100e1d:	eb 0c                	jmp    80100e2b <filealloc+0x2b>
+80100e1f:	90                   	nop
   for(f = ftable.file; f < ftable.file + NFILE; f++){
-80101870:	83 c3 18             	add    $0x18,%ebx
-80101873:	81 fb 54 23 11 80    	cmp    $0x80112354,%ebx
-80101879:	74 25                	je     801018a0 <filealloc+0x50>
+80100e20:	83 c3 18             	add    $0x18,%ebx
+80100e23:	81 fb 54 09 11 80    	cmp    $0x80110954,%ebx
+80100e29:	74 25                	je     80100e50 <filealloc+0x50>
     if(f->ref == 0){
-8010187b:	8b 43 04             	mov    0x4(%ebx),%eax
-8010187e:	85 c0                	test   %eax,%eax
-80101880:	75 ee                	jne    80101870 <filealloc+0x20>
+80100e2b:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e2e:	85 c0                	test   %eax,%eax
+80100e30:	75 ee                	jne    80100e20 <filealloc+0x20>
       f->ref = 1;
       release(&ftable.lock);
-80101882:	83 ec 0c             	sub    $0xc,%esp
+80100e32:	83 ec 0c             	sub    $0xc,%esp
       f->ref = 1;
-80101885:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
+80100e35:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
-8010188c:	68 c0 19 11 80       	push   $0x801119c0
-80101891:	e8 da 37 00 00       	call   80105070 <release>
+80100e3c:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e41:	e8 da 37 00 00       	call   80104620 <release>
       return f;
     }
   }
   release(&ftable.lock);
   return 0;
 }
-80101896:	89 d8                	mov    %ebx,%eax
+80100e46:	89 d8                	mov    %ebx,%eax
       return f;
-80101898:	83 c4 10             	add    $0x10,%esp
+80100e48:	83 c4 10             	add    $0x10,%esp
 }
-8010189b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010189e:	c9                   	leave  
-8010189f:	c3                   	ret    
+80100e4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e4e:	c9                   	leave  
+80100e4f:	c3                   	ret    
   release(&ftable.lock);
-801018a0:	83 ec 0c             	sub    $0xc,%esp
+80100e50:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-801018a3:	31 db                	xor    %ebx,%ebx
+80100e53:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
-801018a5:	68 c0 19 11 80       	push   $0x801119c0
-801018aa:	e8 c1 37 00 00       	call   80105070 <release>
+80100e55:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e5a:	e8 c1 37 00 00       	call   80104620 <release>
 }
-801018af:	89 d8                	mov    %ebx,%eax
+80100e5f:	89 d8                	mov    %ebx,%eax
   return 0;
-801018b1:	83 c4 10             	add    $0x10,%esp
+80100e61:	83 c4 10             	add    $0x10,%esp
 }
-801018b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801018b7:	c9                   	leave  
-801018b8:	c3                   	ret    
-801018b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100e64:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100e67:	c9                   	leave  
+80100e68:	c3                   	ret    
+80100e69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801018c0 <filedup>:
+80100e70 <filedup>:
 
 // Increment ref count for file f.
 struct file*
 filedup(struct file *f)
 {
-801018c0:	f3 0f 1e fb          	endbr32 
-801018c4:	55                   	push   %ebp
-801018c5:	89 e5                	mov    %esp,%ebp
-801018c7:	53                   	push   %ebx
-801018c8:	83 ec 10             	sub    $0x10,%esp
-801018cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100e70:	f3 0f 1e fb          	endbr32 
+80100e74:	55                   	push   %ebp
+80100e75:	89 e5                	mov    %esp,%ebp
+80100e77:	53                   	push   %ebx
+80100e78:	83 ec 10             	sub    $0x10,%esp
+80100e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
-801018ce:	68 c0 19 11 80       	push   $0x801119c0
-801018d3:	e8 d8 36 00 00       	call   80104fb0 <acquire>
+80100e7e:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100e83:	e8 d8 36 00 00       	call   80104560 <acquire>
   if(f->ref < 1)
-801018d8:	8b 43 04             	mov    0x4(%ebx),%eax
-801018db:	83 c4 10             	add    $0x10,%esp
-801018de:	85 c0                	test   %eax,%eax
-801018e0:	7e 1a                	jle    801018fc <filedup+0x3c>
+80100e88:	8b 43 04             	mov    0x4(%ebx),%eax
+80100e8b:	83 c4 10             	add    $0x10,%esp
+80100e8e:	85 c0                	test   %eax,%eax
+80100e90:	7e 1a                	jle    80100eac <filedup+0x3c>
     panic("filedup");
   f->ref++;
-801018e2:	83 c0 01             	add    $0x1,%eax
+80100e92:	83 c0 01             	add    $0x1,%eax
   release(&ftable.lock);
-801018e5:	83 ec 0c             	sub    $0xc,%esp
+80100e95:	83 ec 0c             	sub    $0xc,%esp
   f->ref++;
-801018e8:	89 43 04             	mov    %eax,0x4(%ebx)
+80100e98:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
-801018eb:	68 c0 19 11 80       	push   $0x801119c0
-801018f0:	e8 7b 37 00 00       	call   80105070 <release>
+80100e9b:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100ea0:	e8 7b 37 00 00       	call   80104620 <release>
   return f;
 }
-801018f5:	89 d8                	mov    %ebx,%eax
-801018f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801018fa:	c9                   	leave  
-801018fb:	c3                   	ret    
+80100ea5:	89 d8                	mov    %ebx,%eax
+80100ea7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100eaa:	c9                   	leave  
+80100eab:	c3                   	ret    
     panic("filedup");
-801018fc:	83 ec 0c             	sub    $0xc,%esp
-801018ff:	68 4c 7c 10 80       	push   $0x80107c4c
-80101904:	e8 87 ea ff ff       	call   80100390 <panic>
-80101909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100eac:	83 ec 0c             	sub    $0xc,%esp
+80100eaf:	68 74 71 10 80       	push   $0x80107174
+80100eb4:	e8 d7 f4 ff ff       	call   80100390 <panic>
+80100eb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80101910 <fileclose>:
+80100ec0 <fileclose>:
 
 // Close file f.  (Decrement ref count, close when reaches 0.)
 void
 fileclose(struct file *f)
 {
-80101910:	f3 0f 1e fb          	endbr32 
-80101914:	55                   	push   %ebp
-80101915:	89 e5                	mov    %esp,%ebp
-80101917:	57                   	push   %edi
-80101918:	56                   	push   %esi
-80101919:	53                   	push   %ebx
-8010191a:	83 ec 28             	sub    $0x28,%esp
-8010191d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100ec0:	f3 0f 1e fb          	endbr32 
+80100ec4:	55                   	push   %ebp
+80100ec5:	89 e5                	mov    %esp,%ebp
+80100ec7:	57                   	push   %edi
+80100ec8:	56                   	push   %esi
+80100ec9:	53                   	push   %ebx
+80100eca:	83 ec 28             	sub    $0x28,%esp
+80100ecd:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct file ff;
 
   acquire(&ftable.lock);
-80101920:	68 c0 19 11 80       	push   $0x801119c0
-80101925:	e8 86 36 00 00       	call   80104fb0 <acquire>
+80100ed0:	68 c0 ff 10 80       	push   $0x8010ffc0
+80100ed5:	e8 86 36 00 00       	call   80104560 <acquire>
   if(f->ref < 1)
-8010192a:	8b 53 04             	mov    0x4(%ebx),%edx
-8010192d:	83 c4 10             	add    $0x10,%esp
-80101930:	85 d2                	test   %edx,%edx
-80101932:	0f 8e a1 00 00 00    	jle    801019d9 <fileclose+0xc9>
+80100eda:	8b 53 04             	mov    0x4(%ebx),%edx
+80100edd:	83 c4 10             	add    $0x10,%esp
+80100ee0:	85 d2                	test   %edx,%edx
+80100ee2:	0f 8e a1 00 00 00    	jle    80100f89 <fileclose+0xc9>
     panic("fileclose");
   if(--f->ref > 0){
-80101938:	83 ea 01             	sub    $0x1,%edx
-8010193b:	89 53 04             	mov    %edx,0x4(%ebx)
-8010193e:	75 40                	jne    80101980 <fileclose+0x70>
+80100ee8:	83 ea 01             	sub    $0x1,%edx
+80100eeb:	89 53 04             	mov    %edx,0x4(%ebx)
+80100eee:	75 40                	jne    80100f30 <fileclose+0x70>
     release(&ftable.lock);
     return;
   }
   ff = *f;
-80101940:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
+80100ef0:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
   f->ref = 0;
   f->type = FD_NONE;
   release(&ftable.lock);
-80101944:	83 ec 0c             	sub    $0xc,%esp
+80100ef4:	83 ec 0c             	sub    $0xc,%esp
   ff = *f;
-80101947:	8b 3b                	mov    (%ebx),%edi
+80100ef7:	8b 3b                	mov    (%ebx),%edi
   f->type = FD_NONE;
-80101949:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80100ef9:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   ff = *f;
-8010194f:	8b 73 0c             	mov    0xc(%ebx),%esi
-80101952:	88 45 e7             	mov    %al,-0x19(%ebp)
-80101955:	8b 43 10             	mov    0x10(%ebx),%eax
+80100eff:	8b 73 0c             	mov    0xc(%ebx),%esi
+80100f02:	88 45 e7             	mov    %al,-0x19(%ebp)
+80100f05:	8b 43 10             	mov    0x10(%ebx),%eax
   release(&ftable.lock);
-80101958:	68 c0 19 11 80       	push   $0x801119c0
+80100f08:	68 c0 ff 10 80       	push   $0x8010ffc0
   ff = *f;
-8010195d:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80100f0d:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80101960:	e8 0b 37 00 00       	call   80105070 <release>
+80100f10:	e8 0b 37 00 00       	call   80104620 <release>
 
   if(ff.type == FD_PIPE)
-80101965:	83 c4 10             	add    $0x10,%esp
-80101968:	83 ff 01             	cmp    $0x1,%edi
-8010196b:	74 53                	je     801019c0 <fileclose+0xb0>
+80100f15:	83 c4 10             	add    $0x10,%esp
+80100f18:	83 ff 01             	cmp    $0x1,%edi
+80100f1b:	74 53                	je     80100f70 <fileclose+0xb0>
     pipeclose(ff.pipe, ff.writable);
   else if(ff.type == FD_INODE){
-8010196d:	83 ff 02             	cmp    $0x2,%edi
-80101970:	74 26                	je     80101998 <fileclose+0x88>
+80100f1d:	83 ff 02             	cmp    $0x2,%edi
+80100f20:	74 26                	je     80100f48 <fileclose+0x88>
     begin_op();
     iput(ff.ip);
     end_op();
   }
 }
-80101972:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101975:	5b                   	pop    %ebx
-80101976:	5e                   	pop    %esi
-80101977:	5f                   	pop    %edi
-80101978:	5d                   	pop    %ebp
-80101979:	c3                   	ret    
-8010197a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100f22:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f25:	5b                   	pop    %ebx
+80100f26:	5e                   	pop    %esi
+80100f27:	5f                   	pop    %edi
+80100f28:	5d                   	pop    %ebp
+80100f29:	c3                   	ret    
+80100f2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&ftable.lock);
-80101980:	c7 45 08 c0 19 11 80 	movl   $0x801119c0,0x8(%ebp)
+80100f30:	c7 45 08 c0 ff 10 80 	movl   $0x8010ffc0,0x8(%ebp)
 }
-80101987:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010198a:	5b                   	pop    %ebx
-8010198b:	5e                   	pop    %esi
-8010198c:	5f                   	pop    %edi
-8010198d:	5d                   	pop    %ebp
+80100f37:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f3a:	5b                   	pop    %ebx
+80100f3b:	5e                   	pop    %esi
+80100f3c:	5f                   	pop    %edi
+80100f3d:	5d                   	pop    %ebp
     release(&ftable.lock);
-8010198e:	e9 dd 36 00 00       	jmp    80105070 <release>
-80101993:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101997:	90                   	nop
+80100f3e:	e9 dd 36 00 00       	jmp    80104620 <release>
+80100f43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80100f47:	90                   	nop
     begin_op();
-80101998:	e8 e3 1d 00 00       	call   80103780 <begin_op>
+80100f48:	e8 e3 1d 00 00       	call   80102d30 <begin_op>
     iput(ff.ip);
-8010199d:	83 ec 0c             	sub    $0xc,%esp
-801019a0:	ff 75 e0             	pushl  -0x20(%ebp)
-801019a3:	e8 38 09 00 00       	call   801022e0 <iput>
+80100f4d:	83 ec 0c             	sub    $0xc,%esp
+80100f50:	ff 75 e0             	pushl  -0x20(%ebp)
+80100f53:	e8 38 09 00 00       	call   80101890 <iput>
     end_op();
-801019a8:	83 c4 10             	add    $0x10,%esp
+80100f58:	83 c4 10             	add    $0x10,%esp
 }
-801019ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801019ae:	5b                   	pop    %ebx
-801019af:	5e                   	pop    %esi
-801019b0:	5f                   	pop    %edi
-801019b1:	5d                   	pop    %ebp
+80100f5b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f5e:	5b                   	pop    %ebx
+80100f5f:	5e                   	pop    %esi
+80100f60:	5f                   	pop    %edi
+80100f61:	5d                   	pop    %ebp
     end_op();
-801019b2:	e9 39 1e 00 00       	jmp    801037f0 <end_op>
-801019b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801019be:	66 90                	xchg   %ax,%ax
+80100f62:	e9 39 1e 00 00       	jmp    80102da0 <end_op>
+80100f67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f6e:	66 90                	xchg   %ax,%ax
     pipeclose(ff.pipe, ff.writable);
-801019c0:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
-801019c4:	83 ec 08             	sub    $0x8,%esp
-801019c7:	53                   	push   %ebx
-801019c8:	56                   	push   %esi
-801019c9:	e8 82 25 00 00       	call   80103f50 <pipeclose>
-801019ce:	83 c4 10             	add    $0x10,%esp
-}
-801019d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801019d4:	5b                   	pop    %ebx
-801019d5:	5e                   	pop    %esi
-801019d6:	5f                   	pop    %edi
-801019d7:	5d                   	pop    %ebp
-801019d8:	c3                   	ret    
+80100f70:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
+80100f74:	83 ec 08             	sub    $0x8,%esp
+80100f77:	53                   	push   %ebx
+80100f78:	56                   	push   %esi
+80100f79:	e8 82 25 00 00       	call   80103500 <pipeclose>
+80100f7e:	83 c4 10             	add    $0x10,%esp
+}
+80100f81:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80100f84:	5b                   	pop    %ebx
+80100f85:	5e                   	pop    %esi
+80100f86:	5f                   	pop    %edi
+80100f87:	5d                   	pop    %ebp
+80100f88:	c3                   	ret    
     panic("fileclose");
-801019d9:	83 ec 0c             	sub    $0xc,%esp
-801019dc:	68 54 7c 10 80       	push   $0x80107c54
-801019e1:	e8 aa e9 ff ff       	call   80100390 <panic>
-801019e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801019ed:	8d 76 00             	lea    0x0(%esi),%esi
+80100f89:	83 ec 0c             	sub    $0xc,%esp
+80100f8c:	68 7c 71 10 80       	push   $0x8010717c
+80100f91:	e8 fa f3 ff ff       	call   80100390 <panic>
+80100f96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80100f9d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801019f0 <filestat>:
+80100fa0 <filestat>:
 
 // Get metadata about file f.
 int
 filestat(struct file *f, struct stat *st)
 {
-801019f0:	f3 0f 1e fb          	endbr32 
-801019f4:	55                   	push   %ebp
-801019f5:	89 e5                	mov    %esp,%ebp
-801019f7:	53                   	push   %ebx
-801019f8:	83 ec 04             	sub    $0x4,%esp
-801019fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80100fa0:	f3 0f 1e fb          	endbr32 
+80100fa4:	55                   	push   %ebp
+80100fa5:	89 e5                	mov    %esp,%ebp
+80100fa7:	53                   	push   %ebx
+80100fa8:	83 ec 04             	sub    $0x4,%esp
+80100fab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(f->type == FD_INODE){
-801019fe:	83 3b 02             	cmpl   $0x2,(%ebx)
-80101a01:	75 2d                	jne    80101a30 <filestat+0x40>
+80100fae:	83 3b 02             	cmpl   $0x2,(%ebx)
+80100fb1:	75 2d                	jne    80100fe0 <filestat+0x40>
     ilock(f->ip);
-80101a03:	83 ec 0c             	sub    $0xc,%esp
-80101a06:	ff 73 10             	pushl  0x10(%ebx)
-80101a09:	e8 a2 07 00 00       	call   801021b0 <ilock>
+80100fb3:	83 ec 0c             	sub    $0xc,%esp
+80100fb6:	ff 73 10             	pushl  0x10(%ebx)
+80100fb9:	e8 a2 07 00 00       	call   80101760 <ilock>
     stati(f->ip, st);
-80101a0e:	58                   	pop    %eax
-80101a0f:	5a                   	pop    %edx
-80101a10:	ff 75 0c             	pushl  0xc(%ebp)
-80101a13:	ff 73 10             	pushl  0x10(%ebx)
-80101a16:	e8 65 0a 00 00       	call   80102480 <stati>
+80100fbe:	58                   	pop    %eax
+80100fbf:	5a                   	pop    %edx
+80100fc0:	ff 75 0c             	pushl  0xc(%ebp)
+80100fc3:	ff 73 10             	pushl  0x10(%ebx)
+80100fc6:	e8 65 0a 00 00       	call   80101a30 <stati>
     iunlock(f->ip);
-80101a1b:	59                   	pop    %ecx
-80101a1c:	ff 73 10             	pushl  0x10(%ebx)
-80101a1f:	e8 6c 08 00 00       	call   80102290 <iunlock>
+80100fcb:	59                   	pop    %ecx
+80100fcc:	ff 73 10             	pushl  0x10(%ebx)
+80100fcf:	e8 6c 08 00 00       	call   80101840 <iunlock>
     return 0;
   }
   return -1;
 }
-80101a24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fd4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
     return 0;
-80101a27:	83 c4 10             	add    $0x10,%esp
-80101a2a:	31 c0                	xor    %eax,%eax
+80100fd7:	83 c4 10             	add    $0x10,%esp
+80100fda:	31 c0                	xor    %eax,%eax
 }
-80101a2c:	c9                   	leave  
-80101a2d:	c3                   	ret    
-80101a2e:	66 90                	xchg   %ax,%ax
-80101a30:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80100fdc:	c9                   	leave  
+80100fdd:	c3                   	ret    
+80100fde:	66 90                	xchg   %ax,%ax
+80100fe0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-80101a33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80100fe3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80101a38:	c9                   	leave  
-80101a39:	c3                   	ret    
-80101a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80100fe8:	c9                   	leave  
+80100fe9:	c3                   	ret    
+80100fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80101a40 <fileread>:
+80100ff0 <fileread>:
 
 // Read from file f.
 int
 fileread(struct file *f, char *addr, int n)
 {
-80101a40:	f3 0f 1e fb          	endbr32 
-80101a44:	55                   	push   %ebp
-80101a45:	89 e5                	mov    %esp,%ebp
-80101a47:	57                   	push   %edi
-80101a48:	56                   	push   %esi
-80101a49:	53                   	push   %ebx
-80101a4a:	83 ec 0c             	sub    $0xc,%esp
-80101a4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80101a50:	8b 75 0c             	mov    0xc(%ebp),%esi
-80101a53:	8b 7d 10             	mov    0x10(%ebp),%edi
+80100ff0:	f3 0f 1e fb          	endbr32 
+80100ff4:	55                   	push   %ebp
+80100ff5:	89 e5                	mov    %esp,%ebp
+80100ff7:	57                   	push   %edi
+80100ff8:	56                   	push   %esi
+80100ff9:	53                   	push   %ebx
+80100ffa:	83 ec 0c             	sub    $0xc,%esp
+80100ffd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101000:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101003:	8b 7d 10             	mov    0x10(%ebp),%edi
   int r;
 
   if(f->readable == 0)
-80101a56:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
-80101a5a:	74 64                	je     80101ac0 <fileread+0x80>
+80101006:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
+8010100a:	74 64                	je     80101070 <fileread+0x80>
     return -1;
   if(f->type == FD_PIPE)
-80101a5c:	8b 03                	mov    (%ebx),%eax
-80101a5e:	83 f8 01             	cmp    $0x1,%eax
-80101a61:	74 45                	je     80101aa8 <fileread+0x68>
+8010100c:	8b 03                	mov    (%ebx),%eax
+8010100e:	83 f8 01             	cmp    $0x1,%eax
+80101011:	74 45                	je     80101058 <fileread+0x68>
     return piperead(f->pipe, addr, n);
   if(f->type == FD_INODE){
-80101a63:	83 f8 02             	cmp    $0x2,%eax
-80101a66:	75 5f                	jne    80101ac7 <fileread+0x87>
+80101013:	83 f8 02             	cmp    $0x2,%eax
+80101016:	75 5f                	jne    80101077 <fileread+0x87>
     ilock(f->ip);
-80101a68:	83 ec 0c             	sub    $0xc,%esp
-80101a6b:	ff 73 10             	pushl  0x10(%ebx)
-80101a6e:	e8 3d 07 00 00       	call   801021b0 <ilock>
+80101018:	83 ec 0c             	sub    $0xc,%esp
+8010101b:	ff 73 10             	pushl  0x10(%ebx)
+8010101e:	e8 3d 07 00 00       	call   80101760 <ilock>
     if((r = readi(f->ip, addr, f->off, n)) > 0)
-80101a73:	57                   	push   %edi
-80101a74:	ff 73 14             	pushl  0x14(%ebx)
-80101a77:	56                   	push   %esi
-80101a78:	ff 73 10             	pushl  0x10(%ebx)
-80101a7b:	e8 30 0a 00 00       	call   801024b0 <readi>
-80101a80:	83 c4 20             	add    $0x20,%esp
-80101a83:	89 c6                	mov    %eax,%esi
-80101a85:	85 c0                	test   %eax,%eax
-80101a87:	7e 03                	jle    80101a8c <fileread+0x4c>
+80101023:	57                   	push   %edi
+80101024:	ff 73 14             	pushl  0x14(%ebx)
+80101027:	56                   	push   %esi
+80101028:	ff 73 10             	pushl  0x10(%ebx)
+8010102b:	e8 30 0a 00 00       	call   80101a60 <readi>
+80101030:	83 c4 20             	add    $0x20,%esp
+80101033:	89 c6                	mov    %eax,%esi
+80101035:	85 c0                	test   %eax,%eax
+80101037:	7e 03                	jle    8010103c <fileread+0x4c>
       f->off += r;
-80101a89:	01 43 14             	add    %eax,0x14(%ebx)
+80101039:	01 43 14             	add    %eax,0x14(%ebx)
     iunlock(f->ip);
-80101a8c:	83 ec 0c             	sub    $0xc,%esp
-80101a8f:	ff 73 10             	pushl  0x10(%ebx)
-80101a92:	e8 f9 07 00 00       	call   80102290 <iunlock>
+8010103c:	83 ec 0c             	sub    $0xc,%esp
+8010103f:	ff 73 10             	pushl  0x10(%ebx)
+80101042:	e8 f9 07 00 00       	call   80101840 <iunlock>
     return r;
-80101a97:	83 c4 10             	add    $0x10,%esp
+80101047:	83 c4 10             	add    $0x10,%esp
   }
   panic("fileread");
 }
-80101a9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101a9d:	89 f0                	mov    %esi,%eax
-80101a9f:	5b                   	pop    %ebx
-80101aa0:	5e                   	pop    %esi
-80101aa1:	5f                   	pop    %edi
-80101aa2:	5d                   	pop    %ebp
-80101aa3:	c3                   	ret    
-80101aa4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010104a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010104d:	89 f0                	mov    %esi,%eax
+8010104f:	5b                   	pop    %ebx
+80101050:	5e                   	pop    %esi
+80101051:	5f                   	pop    %edi
+80101052:	5d                   	pop    %ebp
+80101053:	c3                   	ret    
+80101054:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return piperead(f->pipe, addr, n);
-80101aa8:	8b 43 0c             	mov    0xc(%ebx),%eax
-80101aab:	89 45 08             	mov    %eax,0x8(%ebp)
+80101058:	8b 43 0c             	mov    0xc(%ebx),%eax
+8010105b:	89 45 08             	mov    %eax,0x8(%ebp)
 }
-80101aae:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101ab1:	5b                   	pop    %ebx
-80101ab2:	5e                   	pop    %esi
-80101ab3:	5f                   	pop    %edi
-80101ab4:	5d                   	pop    %ebp
+8010105e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101061:	5b                   	pop    %ebx
+80101062:	5e                   	pop    %esi
+80101063:	5f                   	pop    %edi
+80101064:	5d                   	pop    %ebp
     return piperead(f->pipe, addr, n);
-80101ab5:	e9 36 26 00 00       	jmp    801040f0 <piperead>
-80101aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101065:	e9 36 26 00 00       	jmp    801036a0 <piperead>
+8010106a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return -1;
-80101ac0:	be ff ff ff ff       	mov    $0xffffffff,%esi
-80101ac5:	eb d3                	jmp    80101a9a <fileread+0x5a>
+80101070:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80101075:	eb d3                	jmp    8010104a <fileread+0x5a>
   panic("fileread");
-80101ac7:	83 ec 0c             	sub    $0xc,%esp
-80101aca:	68 5e 7c 10 80       	push   $0x80107c5e
-80101acf:	e8 bc e8 ff ff       	call   80100390 <panic>
-80101ad4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101adb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101adf:	90                   	nop
+80101077:	83 ec 0c             	sub    $0xc,%esp
+8010107a:	68 86 71 10 80       	push   $0x80107186
+8010107f:	e8 0c f3 ff ff       	call   80100390 <panic>
+80101084:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010108b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010108f:	90                   	nop
 
-80101ae0 <filewrite>:
+80101090 <filewrite>:
 
 //PAGEBREAK!
 // Write to file f.
 int
 filewrite(struct file *f, char *addr, int n)
 {
-80101ae0:	f3 0f 1e fb          	endbr32 
-80101ae4:	55                   	push   %ebp
-80101ae5:	89 e5                	mov    %esp,%ebp
-80101ae7:	57                   	push   %edi
-80101ae8:	56                   	push   %esi
-80101ae9:	53                   	push   %ebx
-80101aea:	83 ec 1c             	sub    $0x1c,%esp
-80101aed:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101af0:	8b 75 08             	mov    0x8(%ebp),%esi
-80101af3:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80101af6:	8b 45 10             	mov    0x10(%ebp),%eax
+80101090:	f3 0f 1e fb          	endbr32 
+80101094:	55                   	push   %ebp
+80101095:	89 e5                	mov    %esp,%ebp
+80101097:	57                   	push   %edi
+80101098:	56                   	push   %esi
+80101099:	53                   	push   %ebx
+8010109a:	83 ec 1c             	sub    $0x1c,%esp
+8010109d:	8b 45 0c             	mov    0xc(%ebp),%eax
+801010a0:	8b 75 08             	mov    0x8(%ebp),%esi
+801010a3:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801010a6:	8b 45 10             	mov    0x10(%ebp),%eax
   int r;
 
   if(f->writable == 0)
-80101af9:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
+801010a9:	80 7e 09 00          	cmpb   $0x0,0x9(%esi)
 {
-80101afd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801010ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(f->writable == 0)
-80101b00:	0f 84 c1 00 00 00    	je     80101bc7 <filewrite+0xe7>
+801010b0:	0f 84 c1 00 00 00    	je     80101177 <filewrite+0xe7>
     return -1;
   if(f->type == FD_PIPE)
-80101b06:	8b 06                	mov    (%esi),%eax
-80101b08:	83 f8 01             	cmp    $0x1,%eax
-80101b0b:	0f 84 c3 00 00 00    	je     80101bd4 <filewrite+0xf4>
+801010b6:	8b 06                	mov    (%esi),%eax
+801010b8:	83 f8 01             	cmp    $0x1,%eax
+801010bb:	0f 84 c3 00 00 00    	je     80101184 <filewrite+0xf4>
     return pipewrite(f->pipe, addr, n);
   if(f->type == FD_INODE){
-80101b11:	83 f8 02             	cmp    $0x2,%eax
-80101b14:	0f 85 cc 00 00 00    	jne    80101be6 <filewrite+0x106>
+801010c1:	83 f8 02             	cmp    $0x2,%eax
+801010c4:	0f 85 cc 00 00 00    	jne    80101196 <filewrite+0x106>
     // and 2 blocks of slop for non-aligned writes.
     // this really belongs lower down, since writei()
     // might be writing a device like the console.
     int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
     int i = 0;
     while(i < n){
-80101b1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801010ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     int i = 0;
-80101b1d:	31 ff                	xor    %edi,%edi
+801010cd:	31 ff                	xor    %edi,%edi
     while(i < n){
-80101b1f:	85 c0                	test   %eax,%eax
-80101b21:	7f 34                	jg     80101b57 <filewrite+0x77>
-80101b23:	e9 98 00 00 00       	jmp    80101bc0 <filewrite+0xe0>
-80101b28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101b2f:	90                   	nop
+801010cf:	85 c0                	test   %eax,%eax
+801010d1:	7f 34                	jg     80101107 <filewrite+0x77>
+801010d3:	e9 98 00 00 00       	jmp    80101170 <filewrite+0xe0>
+801010d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801010df:	90                   	nop
         n1 = max;
 
       begin_op();
       ilock(f->ip);
       if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
         f->off += r;
-80101b30:	01 46 14             	add    %eax,0x14(%esi)
+801010e0:	01 46 14             	add    %eax,0x14(%esi)
       iunlock(f->ip);
-80101b33:	83 ec 0c             	sub    $0xc,%esp
-80101b36:	ff 76 10             	pushl  0x10(%esi)
+801010e3:	83 ec 0c             	sub    $0xc,%esp
+801010e6:	ff 76 10             	pushl  0x10(%esi)
         f->off += r;
-80101b39:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801010e9:	89 45 e0             	mov    %eax,-0x20(%ebp)
       iunlock(f->ip);
-80101b3c:	e8 4f 07 00 00       	call   80102290 <iunlock>
+801010ec:	e8 4f 07 00 00       	call   80101840 <iunlock>
       end_op();
-80101b41:	e8 aa 1c 00 00       	call   801037f0 <end_op>
+801010f1:	e8 aa 1c 00 00       	call   80102da0 <end_op>
 
       if(r < 0)
         break;
       if(r != n1)
-80101b46:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80101b49:	83 c4 10             	add    $0x10,%esp
-80101b4c:	39 c3                	cmp    %eax,%ebx
-80101b4e:	75 60                	jne    80101bb0 <filewrite+0xd0>
+801010f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801010f9:	83 c4 10             	add    $0x10,%esp
+801010fc:	39 c3                	cmp    %eax,%ebx
+801010fe:	75 60                	jne    80101160 <filewrite+0xd0>
         panic("short filewrite");
       i += r;
-80101b50:	01 df                	add    %ebx,%edi
+80101100:	01 df                	add    %ebx,%edi
     while(i < n){
-80101b52:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80101b55:	7e 69                	jle    80101bc0 <filewrite+0xe0>
+80101102:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101105:	7e 69                	jle    80101170 <filewrite+0xe0>
       int n1 = n - i;
-80101b57:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101b5a:	b8 00 06 00 00       	mov    $0x600,%eax
-80101b5f:	29 fb                	sub    %edi,%ebx
+80101107:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+8010110a:	b8 00 06 00 00       	mov    $0x600,%eax
+8010110f:	29 fb                	sub    %edi,%ebx
       if(n1 > max)
-80101b61:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
-80101b67:	0f 4f d8             	cmovg  %eax,%ebx
+80101111:	81 fb 00 06 00 00    	cmp    $0x600,%ebx
+80101117:	0f 4f d8             	cmovg  %eax,%ebx
       begin_op();
-80101b6a:	e8 11 1c 00 00       	call   80103780 <begin_op>
+8010111a:	e8 11 1c 00 00       	call   80102d30 <begin_op>
       ilock(f->ip);
-80101b6f:	83 ec 0c             	sub    $0xc,%esp
-80101b72:	ff 76 10             	pushl  0x10(%esi)
-80101b75:	e8 36 06 00 00       	call   801021b0 <ilock>
+8010111f:	83 ec 0c             	sub    $0xc,%esp
+80101122:	ff 76 10             	pushl  0x10(%esi)
+80101125:	e8 36 06 00 00       	call   80101760 <ilock>
       if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-80101b7a:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101b7d:	53                   	push   %ebx
-80101b7e:	ff 76 14             	pushl  0x14(%esi)
-80101b81:	01 f8                	add    %edi,%eax
-80101b83:	50                   	push   %eax
-80101b84:	ff 76 10             	pushl  0x10(%esi)
-80101b87:	e8 24 0a 00 00       	call   801025b0 <writei>
-80101b8c:	83 c4 20             	add    $0x20,%esp
-80101b8f:	85 c0                	test   %eax,%eax
-80101b91:	7f 9d                	jg     80101b30 <filewrite+0x50>
+8010112a:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010112d:	53                   	push   %ebx
+8010112e:	ff 76 14             	pushl  0x14(%esi)
+80101131:	01 f8                	add    %edi,%eax
+80101133:	50                   	push   %eax
+80101134:	ff 76 10             	pushl  0x10(%esi)
+80101137:	e8 24 0a 00 00       	call   80101b60 <writei>
+8010113c:	83 c4 20             	add    $0x20,%esp
+8010113f:	85 c0                	test   %eax,%eax
+80101141:	7f 9d                	jg     801010e0 <filewrite+0x50>
       iunlock(f->ip);
-80101b93:	83 ec 0c             	sub    $0xc,%esp
-80101b96:	ff 76 10             	pushl  0x10(%esi)
-80101b99:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80101b9c:	e8 ef 06 00 00       	call   80102290 <iunlock>
+80101143:	83 ec 0c             	sub    $0xc,%esp
+80101146:	ff 76 10             	pushl  0x10(%esi)
+80101149:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010114c:	e8 ef 06 00 00       	call   80101840 <iunlock>
       end_op();
-80101ba1:	e8 4a 1c 00 00       	call   801037f0 <end_op>
+80101151:	e8 4a 1c 00 00       	call   80102da0 <end_op>
       if(r < 0)
-80101ba6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101ba9:	83 c4 10             	add    $0x10,%esp
-80101bac:	85 c0                	test   %eax,%eax
-80101bae:	75 17                	jne    80101bc7 <filewrite+0xe7>
+80101156:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101159:	83 c4 10             	add    $0x10,%esp
+8010115c:	85 c0                	test   %eax,%eax
+8010115e:	75 17                	jne    80101177 <filewrite+0xe7>
         panic("short filewrite");
-80101bb0:	83 ec 0c             	sub    $0xc,%esp
-80101bb3:	68 67 7c 10 80       	push   $0x80107c67
-80101bb8:	e8 d3 e7 ff ff       	call   80100390 <panic>
-80101bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80101160:	83 ec 0c             	sub    $0xc,%esp
+80101163:	68 8f 71 10 80       	push   $0x8010718f
+80101168:	e8 23 f2 ff ff       	call   80100390 <panic>
+8010116d:	8d 76 00             	lea    0x0(%esi),%esi
     }
     return i == n ? n : -1;
-80101bc0:	89 f8                	mov    %edi,%eax
-80101bc2:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
-80101bc5:	74 05                	je     80101bcc <filewrite+0xec>
-80101bc7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101170:	89 f8                	mov    %edi,%eax
+80101172:	3b 7d e4             	cmp    -0x1c(%ebp),%edi
+80101175:	74 05                	je     8010117c <filewrite+0xec>
+80101177:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   }
   panic("filewrite");
 }
-80101bcc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101bcf:	5b                   	pop    %ebx
-80101bd0:	5e                   	pop    %esi
-80101bd1:	5f                   	pop    %edi
-80101bd2:	5d                   	pop    %ebp
-80101bd3:	c3                   	ret    
+8010117c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010117f:	5b                   	pop    %ebx
+80101180:	5e                   	pop    %esi
+80101181:	5f                   	pop    %edi
+80101182:	5d                   	pop    %ebp
+80101183:	c3                   	ret    
     return pipewrite(f->pipe, addr, n);
-80101bd4:	8b 46 0c             	mov    0xc(%esi),%eax
-80101bd7:	89 45 08             	mov    %eax,0x8(%ebp)
+80101184:	8b 46 0c             	mov    0xc(%esi),%eax
+80101187:	89 45 08             	mov    %eax,0x8(%ebp)
 }
-80101bda:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101bdd:	5b                   	pop    %ebx
-80101bde:	5e                   	pop    %esi
-80101bdf:	5f                   	pop    %edi
-80101be0:	5d                   	pop    %ebp
+8010118a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010118d:	5b                   	pop    %ebx
+8010118e:	5e                   	pop    %esi
+8010118f:	5f                   	pop    %edi
+80101190:	5d                   	pop    %ebp
     return pipewrite(f->pipe, addr, n);
-80101be1:	e9 0a 24 00 00       	jmp    80103ff0 <pipewrite>
+80101191:	e9 0a 24 00 00       	jmp    801035a0 <pipewrite>
   panic("filewrite");
-80101be6:	83 ec 0c             	sub    $0xc,%esp
-80101be9:	68 6d 7c 10 80       	push   $0x80107c6d
-80101bee:	e8 9d e7 ff ff       	call   80100390 <panic>
-80101bf3:	66 90                	xchg   %ax,%ax
-80101bf5:	66 90                	xchg   %ax,%ax
-80101bf7:	66 90                	xchg   %ax,%ax
-80101bf9:	66 90                	xchg   %ax,%ax
-80101bfb:	66 90                	xchg   %ax,%ax
-80101bfd:	66 90                	xchg   %ax,%ax
-80101bff:	90                   	nop
+80101196:	83 ec 0c             	sub    $0xc,%esp
+80101199:	68 95 71 10 80       	push   $0x80107195
+8010119e:	e8 ed f1 ff ff       	call   80100390 <panic>
+801011a3:	66 90                	xchg   %ax,%ax
+801011a5:	66 90                	xchg   %ax,%ax
+801011a7:	66 90                	xchg   %ax,%ax
+801011a9:	66 90                	xchg   %ax,%ax
+801011ab:	66 90                	xchg   %ax,%ax
+801011ad:	66 90                	xchg   %ax,%ax
+801011af:	90                   	nop
 
-80101c00 <bfree>:
+801011b0 <bfree>:
 }
 
 // Free a disk block.
 static void
 bfree(int dev, uint b)
 {
-80101c00:	55                   	push   %ebp
-80101c01:	89 c1                	mov    %eax,%ecx
+801011b0:	55                   	push   %ebp
+801011b1:	89 c1                	mov    %eax,%ecx
   struct buf *bp;
   int bi, m;
 
   bp = bread(dev, BBLOCK(b, sb));
-80101c03:	89 d0                	mov    %edx,%eax
-80101c05:	c1 e8 0c             	shr    $0xc,%eax
-80101c08:	03 05 d8 23 11 80    	add    0x801123d8,%eax
-{
-80101c0e:	89 e5                	mov    %esp,%ebp
-80101c10:	56                   	push   %esi
-80101c11:	53                   	push   %ebx
-80101c12:	89 d3                	mov    %edx,%ebx
+801011b3:	89 d0                	mov    %edx,%eax
+801011b5:	c1 e8 0c             	shr    $0xc,%eax
+801011b8:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+{
+801011be:	89 e5                	mov    %esp,%ebp
+801011c0:	56                   	push   %esi
+801011c1:	53                   	push   %ebx
+801011c2:	89 d3                	mov    %edx,%ebx
   bp = bread(dev, BBLOCK(b, sb));
-80101c14:	83 ec 08             	sub    $0x8,%esp
-80101c17:	50                   	push   %eax
-80101c18:	51                   	push   %ecx
-80101c19:	e8 b2 e4 ff ff       	call   801000d0 <bread>
+801011c4:	83 ec 08             	sub    $0x8,%esp
+801011c7:	50                   	push   %eax
+801011c8:	51                   	push   %ecx
+801011c9:	e8 02 ef ff ff       	call   801000d0 <bread>
   bi = b % BPB;
   m = 1 << (bi % 8);
-80101c1e:	89 d9                	mov    %ebx,%ecx
+801011ce:	89 d9                	mov    %ebx,%ecx
   if((bp->data[bi/8] & m) == 0)
-80101c20:	c1 fb 03             	sar    $0x3,%ebx
+801011d0:	c1 fb 03             	sar    $0x3,%ebx
   m = 1 << (bi % 8);
-80101c23:	ba 01 00 00 00       	mov    $0x1,%edx
-80101c28:	83 e1 07             	and    $0x7,%ecx
+801011d3:	ba 01 00 00 00       	mov    $0x1,%edx
+801011d8:	83 e1 07             	and    $0x7,%ecx
   if((bp->data[bi/8] & m) == 0)
-80101c2b:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
-80101c31:	83 c4 10             	add    $0x10,%esp
+801011db:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
+801011e1:	83 c4 10             	add    $0x10,%esp
   m = 1 << (bi % 8);
-80101c34:	d3 e2                	shl    %cl,%edx
+801011e4:	d3 e2                	shl    %cl,%edx
   if((bp->data[bi/8] & m) == 0)
-80101c36:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
-80101c3b:	85 d1                	test   %edx,%ecx
-80101c3d:	74 25                	je     80101c64 <bfree+0x64>
+801011e6:	0f b6 4c 18 5c       	movzbl 0x5c(%eax,%ebx,1),%ecx
+801011eb:	85 d1                	test   %edx,%ecx
+801011ed:	74 25                	je     80101214 <bfree+0x64>
     panic("freeing free block");
   bp->data[bi/8] &= ~m;
-80101c3f:	f7 d2                	not    %edx
+801011ef:	f7 d2                	not    %edx
   log_write(bp);
-80101c41:	83 ec 0c             	sub    $0xc,%esp
-80101c44:	89 c6                	mov    %eax,%esi
+801011f1:	83 ec 0c             	sub    $0xc,%esp
+801011f4:	89 c6                	mov    %eax,%esi
   bp->data[bi/8] &= ~m;
-80101c46:	21 ca                	and    %ecx,%edx
-80101c48:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
+801011f6:	21 ca                	and    %ecx,%edx
+801011f8:	88 54 18 5c          	mov    %dl,0x5c(%eax,%ebx,1)
   log_write(bp);
-80101c4c:	50                   	push   %eax
-80101c4d:	e8 0e 1d 00 00       	call   80103960 <log_write>
+801011fc:	50                   	push   %eax
+801011fd:	e8 0e 1d 00 00       	call   80102f10 <log_write>
   brelse(bp);
-80101c52:	89 34 24             	mov    %esi,(%esp)
-80101c55:	e8 96 e5 ff ff       	call   801001f0 <brelse>
+80101202:	89 34 24             	mov    %esi,(%esp)
+80101205:	e8 e6 ef ff ff       	call   801001f0 <brelse>
 }
-80101c5a:	83 c4 10             	add    $0x10,%esp
-80101c5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101c60:	5b                   	pop    %ebx
-80101c61:	5e                   	pop    %esi
-80101c62:	5d                   	pop    %ebp
-80101c63:	c3                   	ret    
+8010120a:	83 c4 10             	add    $0x10,%esp
+8010120d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101210:	5b                   	pop    %ebx
+80101211:	5e                   	pop    %esi
+80101212:	5d                   	pop    %ebp
+80101213:	c3                   	ret    
     panic("freeing free block");
-80101c64:	83 ec 0c             	sub    $0xc,%esp
-80101c67:	68 77 7c 10 80       	push   $0x80107c77
-80101c6c:	e8 1f e7 ff ff       	call   80100390 <panic>
-80101c71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101c78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101c7f:	90                   	nop
-
-80101c80 <balloc>:
-{
-80101c80:	55                   	push   %ebp
-80101c81:	89 e5                	mov    %esp,%ebp
-80101c83:	57                   	push   %edi
-80101c84:	56                   	push   %esi
-80101c85:	53                   	push   %ebx
-80101c86:	83 ec 1c             	sub    $0x1c,%esp
+80101214:	83 ec 0c             	sub    $0xc,%esp
+80101217:	68 9f 71 10 80       	push   $0x8010719f
+8010121c:	e8 6f f1 ff ff       	call   80100390 <panic>
+80101221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010122f:	90                   	nop
+
+80101230 <balloc>:
+{
+80101230:	55                   	push   %ebp
+80101231:	89 e5                	mov    %esp,%ebp
+80101233:	57                   	push   %edi
+80101234:	56                   	push   %esi
+80101235:	53                   	push   %ebx
+80101236:	83 ec 1c             	sub    $0x1c,%esp
   for(b = 0; b < sb.size; b += BPB){
-80101c89:	8b 0d c0 23 11 80    	mov    0x801123c0,%ecx
+80101239:	8b 0d c0 09 11 80    	mov    0x801109c0,%ecx
 {
-80101c8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
+8010123f:	89 45 d8             	mov    %eax,-0x28(%ebp)
   for(b = 0; b < sb.size; b += BPB){
-80101c92:	85 c9                	test   %ecx,%ecx
-80101c94:	0f 84 87 00 00 00    	je     80101d21 <balloc+0xa1>
-80101c9a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+80101242:	85 c9                	test   %ecx,%ecx
+80101244:	0f 84 87 00 00 00    	je     801012d1 <balloc+0xa1>
+8010124a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
     bp = bread(dev, BBLOCK(b, sb));
-80101ca1:	8b 75 dc             	mov    -0x24(%ebp),%esi
-80101ca4:	83 ec 08             	sub    $0x8,%esp
-80101ca7:	89 f0                	mov    %esi,%eax
-80101ca9:	c1 f8 0c             	sar    $0xc,%eax
-80101cac:	03 05 d8 23 11 80    	add    0x801123d8,%eax
-80101cb2:	50                   	push   %eax
-80101cb3:	ff 75 d8             	pushl  -0x28(%ebp)
-80101cb6:	e8 15 e4 ff ff       	call   801000d0 <bread>
-80101cbb:	83 c4 10             	add    $0x10,%esp
-80101cbe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101251:	8b 75 dc             	mov    -0x24(%ebp),%esi
+80101254:	83 ec 08             	sub    $0x8,%esp
+80101257:	89 f0                	mov    %esi,%eax
+80101259:	c1 f8 0c             	sar    $0xc,%eax
+8010125c:	03 05 d8 09 11 80    	add    0x801109d8,%eax
+80101262:	50                   	push   %eax
+80101263:	ff 75 d8             	pushl  -0x28(%ebp)
+80101266:	e8 65 ee ff ff       	call   801000d0 <bread>
+8010126b:	83 c4 10             	add    $0x10,%esp
+8010126e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101cc1:	a1 c0 23 11 80       	mov    0x801123c0,%eax
-80101cc6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80101cc9:	31 c0                	xor    %eax,%eax
-80101ccb:	eb 2f                	jmp    80101cfc <balloc+0x7c>
-80101ccd:	8d 76 00             	lea    0x0(%esi),%esi
+80101271:	a1 c0 09 11 80       	mov    0x801109c0,%eax
+80101276:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80101279:	31 c0                	xor    %eax,%eax
+8010127b:	eb 2f                	jmp    801012ac <balloc+0x7c>
+8010127d:	8d 76 00             	lea    0x0(%esi),%esi
       m = 1 << (bi % 8);
-80101cd0:	89 c1                	mov    %eax,%ecx
-80101cd2:	bb 01 00 00 00       	mov    $0x1,%ebx
+80101280:	89 c1                	mov    %eax,%ecx
+80101282:	bb 01 00 00 00       	mov    $0x1,%ebx
       if((bp->data[bi/8] & m) == 0){  // Is block free?
-80101cd7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101287:	8b 55 e4             	mov    -0x1c(%ebp),%edx
       m = 1 << (bi % 8);
-80101cda:	83 e1 07             	and    $0x7,%ecx
-80101cdd:	d3 e3                	shl    %cl,%ebx
+8010128a:	83 e1 07             	and    $0x7,%ecx
+8010128d:	d3 e3                	shl    %cl,%ebx
       if((bp->data[bi/8] & m) == 0){  // Is block free?
-80101cdf:	89 c1                	mov    %eax,%ecx
-80101ce1:	c1 f9 03             	sar    $0x3,%ecx
-80101ce4:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
-80101ce9:	89 fa                	mov    %edi,%edx
-80101ceb:	85 df                	test   %ebx,%edi
-80101ced:	74 41                	je     80101d30 <balloc+0xb0>
+8010128f:	89 c1                	mov    %eax,%ecx
+80101291:	c1 f9 03             	sar    $0x3,%ecx
+80101294:	0f b6 7c 0a 5c       	movzbl 0x5c(%edx,%ecx,1),%edi
+80101299:	89 fa                	mov    %edi,%edx
+8010129b:	85 df                	test   %ebx,%edi
+8010129d:	74 41                	je     801012e0 <balloc+0xb0>
     for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-80101cef:	83 c0 01             	add    $0x1,%eax
-80101cf2:	83 c6 01             	add    $0x1,%esi
-80101cf5:	3d 00 10 00 00       	cmp    $0x1000,%eax
-80101cfa:	74 05                	je     80101d01 <balloc+0x81>
-80101cfc:	39 75 e0             	cmp    %esi,-0x20(%ebp)
-80101cff:	77 cf                	ja     80101cd0 <balloc+0x50>
+8010129f:	83 c0 01             	add    $0x1,%eax
+801012a2:	83 c6 01             	add    $0x1,%esi
+801012a5:	3d 00 10 00 00       	cmp    $0x1000,%eax
+801012aa:	74 05                	je     801012b1 <balloc+0x81>
+801012ac:	39 75 e0             	cmp    %esi,-0x20(%ebp)
+801012af:	77 cf                	ja     80101280 <balloc+0x50>
     brelse(bp);
-80101d01:	83 ec 0c             	sub    $0xc,%esp
-80101d04:	ff 75 e4             	pushl  -0x1c(%ebp)
-80101d07:	e8 e4 e4 ff ff       	call   801001f0 <brelse>
+801012b1:	83 ec 0c             	sub    $0xc,%esp
+801012b4:	ff 75 e4             	pushl  -0x1c(%ebp)
+801012b7:	e8 34 ef ff ff       	call   801001f0 <brelse>
   for(b = 0; b < sb.size; b += BPB){
-80101d0c:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
-80101d13:	83 c4 10             	add    $0x10,%esp
-80101d16:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101d19:	39 05 c0 23 11 80    	cmp    %eax,0x801123c0
-80101d1f:	77 80                	ja     80101ca1 <balloc+0x21>
+801012bc:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
+801012c3:	83 c4 10             	add    $0x10,%esp
+801012c6:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801012c9:	39 05 c0 09 11 80    	cmp    %eax,0x801109c0
+801012cf:	77 80                	ja     80101251 <balloc+0x21>
   panic("balloc: out of blocks");
-80101d21:	83 ec 0c             	sub    $0xc,%esp
-80101d24:	68 8a 7c 10 80       	push   $0x80107c8a
-80101d29:	e8 62 e6 ff ff       	call   80100390 <panic>
-80101d2e:	66 90                	xchg   %ax,%ax
+801012d1:	83 ec 0c             	sub    $0xc,%esp
+801012d4:	68 b2 71 10 80       	push   $0x801071b2
+801012d9:	e8 b2 f0 ff ff       	call   80100390 <panic>
+801012de:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
-80101d30:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+801012e0:	8b 7d e4             	mov    -0x1c(%ebp),%edi
         log_write(bp);
-80101d33:	83 ec 0c             	sub    $0xc,%esp
+801012e3:	83 ec 0c             	sub    $0xc,%esp
         bp->data[bi/8] |= m;  // Mark block in use.
-80101d36:	09 da                	or     %ebx,%edx
-80101d38:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
+801012e6:	09 da                	or     %ebx,%edx
+801012e8:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
         log_write(bp);
-80101d3c:	57                   	push   %edi
-80101d3d:	e8 1e 1c 00 00       	call   80103960 <log_write>
+801012ec:	57                   	push   %edi
+801012ed:	e8 1e 1c 00 00       	call   80102f10 <log_write>
         brelse(bp);
-80101d42:	89 3c 24             	mov    %edi,(%esp)
-80101d45:	e8 a6 e4 ff ff       	call   801001f0 <brelse>
+801012f2:	89 3c 24             	mov    %edi,(%esp)
+801012f5:	e8 f6 ee ff ff       	call   801001f0 <brelse>
   bp = bread(dev, bno);
-80101d4a:	58                   	pop    %eax
-80101d4b:	5a                   	pop    %edx
-80101d4c:	56                   	push   %esi
-80101d4d:	ff 75 d8             	pushl  -0x28(%ebp)
-80101d50:	e8 7b e3 ff ff       	call   801000d0 <bread>
+801012fa:	58                   	pop    %eax
+801012fb:	5a                   	pop    %edx
+801012fc:	56                   	push   %esi
+801012fd:	ff 75 d8             	pushl  -0x28(%ebp)
+80101300:	e8 cb ed ff ff       	call   801000d0 <bread>
   memset(bp->data, 0, BSIZE);
-80101d55:	83 c4 0c             	add    $0xc,%esp
+80101305:	83 c4 0c             	add    $0xc,%esp
   bp = bread(dev, bno);
-80101d58:	89 c3                	mov    %eax,%ebx
+80101308:	89 c3                	mov    %eax,%ebx
   memset(bp->data, 0, BSIZE);
-80101d5a:	8d 40 5c             	lea    0x5c(%eax),%eax
-80101d5d:	68 00 02 00 00       	push   $0x200
-80101d62:	6a 00                	push   $0x0
-80101d64:	50                   	push   %eax
-80101d65:	e8 56 33 00 00       	call   801050c0 <memset>
+8010130a:	8d 40 5c             	lea    0x5c(%eax),%eax
+8010130d:	68 00 02 00 00       	push   $0x200
+80101312:	6a 00                	push   $0x0
+80101314:	50                   	push   %eax
+80101315:	e8 56 33 00 00       	call   80104670 <memset>
   log_write(bp);
-80101d6a:	89 1c 24             	mov    %ebx,(%esp)
-80101d6d:	e8 ee 1b 00 00       	call   80103960 <log_write>
+8010131a:	89 1c 24             	mov    %ebx,(%esp)
+8010131d:	e8 ee 1b 00 00       	call   80102f10 <log_write>
   brelse(bp);
-80101d72:	89 1c 24             	mov    %ebx,(%esp)
-80101d75:	e8 76 e4 ff ff       	call   801001f0 <brelse>
+80101322:	89 1c 24             	mov    %ebx,(%esp)
+80101325:	e8 c6 ee ff ff       	call   801001f0 <brelse>
 }
-80101d7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101d7d:	89 f0                	mov    %esi,%eax
-80101d7f:	5b                   	pop    %ebx
-80101d80:	5e                   	pop    %esi
-80101d81:	5f                   	pop    %edi
-80101d82:	5d                   	pop    %ebp
-80101d83:	c3                   	ret    
-80101d84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101d8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101d8f:	90                   	nop
+8010132a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010132d:	89 f0                	mov    %esi,%eax
+8010132f:	5b                   	pop    %ebx
+80101330:	5e                   	pop    %esi
+80101331:	5f                   	pop    %edi
+80101332:	5d                   	pop    %ebp
+80101333:	c3                   	ret    
+80101334:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010133b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010133f:	90                   	nop
 
-80101d90 <iget>:
+80101340 <iget>:
 // Find the inode with number inum on device dev
 // and return the in-memory copy. Does not lock
 // the inode and does not read it from disk.
 static struct inode*
 iget(uint dev, uint inum)
 {
-80101d90:	55                   	push   %ebp
-80101d91:	89 e5                	mov    %esp,%ebp
-80101d93:	57                   	push   %edi
-80101d94:	89 c7                	mov    %eax,%edi
-80101d96:	56                   	push   %esi
+80101340:	55                   	push   %ebp
+80101341:	89 e5                	mov    %esp,%ebp
+80101343:	57                   	push   %edi
+80101344:	89 c7                	mov    %eax,%edi
+80101346:	56                   	push   %esi
   struct inode *ip, *empty;
 
   acquire(&icache.lock);
 
   // Is the inode already cached?
   empty = 0;
-80101d97:	31 f6                	xor    %esi,%esi
+80101347:	31 f6                	xor    %esi,%esi
 {
-80101d99:	53                   	push   %ebx
+80101349:	53                   	push   %ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101d9a:	bb 14 24 11 80       	mov    $0x80112414,%ebx
+8010134a:	bb 14 0a 11 80       	mov    $0x80110a14,%ebx
 {
-80101d9f:	83 ec 28             	sub    $0x28,%esp
-80101da2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+8010134f:	83 ec 28             	sub    $0x28,%esp
+80101352:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
-80101da5:	68 e0 23 11 80       	push   $0x801123e0
-80101daa:	e8 01 32 00 00       	call   80104fb0 <acquire>
+80101355:	68 e0 09 11 80       	push   $0x801109e0
+8010135a:	e8 01 32 00 00       	call   80104560 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101daf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+8010135f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
-80101db2:	83 c4 10             	add    $0x10,%esp
-80101db5:	eb 1b                	jmp    80101dd2 <iget+0x42>
-80101db7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101dbe:	66 90                	xchg   %ax,%ax
+80101362:	83 c4 10             	add    $0x10,%esp
+80101365:	eb 1b                	jmp    80101382 <iget+0x42>
+80101367:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010136e:	66 90                	xchg   %ax,%ax
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101dc0:	39 3b                	cmp    %edi,(%ebx)
-80101dc2:	74 6c                	je     80101e30 <iget+0xa0>
-80101dc4:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101370:	39 3b                	cmp    %edi,(%ebx)
+80101372:	74 6c                	je     801013e0 <iget+0xa0>
+80101374:	81 c3 90 00 00 00    	add    $0x90,%ebx
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101dca:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
-80101dd0:	73 26                	jae    80101df8 <iget+0x68>
+8010137a:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+80101380:	73 26                	jae    801013a8 <iget+0x68>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101dd2:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80101dd5:	85 c9                	test   %ecx,%ecx
-80101dd7:	7f e7                	jg     80101dc0 <iget+0x30>
+80101382:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101385:	85 c9                	test   %ecx,%ecx
+80101387:	7f e7                	jg     80101370 <iget+0x30>
       ip->ref++;
       release(&icache.lock);
       return ip;
     }
     if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-80101dd9:	85 f6                	test   %esi,%esi
-80101ddb:	75 e7                	jne    80101dc4 <iget+0x34>
-80101ddd:	89 d8                	mov    %ebx,%eax
-80101ddf:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101de5:	85 c9                	test   %ecx,%ecx
-80101de7:	75 6e                	jne    80101e57 <iget+0xc7>
-80101de9:	89 c6                	mov    %eax,%esi
+80101389:	85 f6                	test   %esi,%esi
+8010138b:	75 e7                	jne    80101374 <iget+0x34>
+8010138d:	89 d8                	mov    %ebx,%eax
+8010138f:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101395:	85 c9                	test   %ecx,%ecx
+80101397:	75 6e                	jne    80101407 <iget+0xc7>
+80101399:	89 c6                	mov    %eax,%esi
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101deb:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
-80101df1:	72 df                	jb     80101dd2 <iget+0x42>
-80101df3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101df7:	90                   	nop
+8010139b:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+801013a1:	72 df                	jb     80101382 <iget+0x42>
+801013a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801013a7:	90                   	nop
       empty = ip;
   }
 
   // Recycle an inode cache entry.
   if(empty == 0)
-80101df8:	85 f6                	test   %esi,%esi
-80101dfa:	74 73                	je     80101e6f <iget+0xdf>
+801013a8:	85 f6                	test   %esi,%esi
+801013aa:	74 73                	je     8010141f <iget+0xdf>
   ip = empty;
   ip->dev = dev;
   ip->inum = inum;
   ip->ref = 1;
   ip->valid = 0;
   release(&icache.lock);
-80101dfc:	83 ec 0c             	sub    $0xc,%esp
+801013ac:	83 ec 0c             	sub    $0xc,%esp
   ip->dev = dev;
-80101dff:	89 3e                	mov    %edi,(%esi)
+801013af:	89 3e                	mov    %edi,(%esi)
   ip->inum = inum;
-80101e01:	89 56 04             	mov    %edx,0x4(%esi)
+801013b1:	89 56 04             	mov    %edx,0x4(%esi)
   ip->ref = 1;
-80101e04:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
+801013b4:	c7 46 08 01 00 00 00 	movl   $0x1,0x8(%esi)
   ip->valid = 0;
-80101e0b:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
+801013bb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
-80101e12:	68 e0 23 11 80       	push   $0x801123e0
-80101e17:	e8 54 32 00 00       	call   80105070 <release>
+801013c2:	68 e0 09 11 80       	push   $0x801109e0
+801013c7:	e8 54 32 00 00       	call   80104620 <release>
 
   return ip;
-80101e1c:	83 c4 10             	add    $0x10,%esp
+801013cc:	83 c4 10             	add    $0x10,%esp
 }
-80101e1f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101e22:	89 f0                	mov    %esi,%eax
-80101e24:	5b                   	pop    %ebx
-80101e25:	5e                   	pop    %esi
-80101e26:	5f                   	pop    %edi
-80101e27:	5d                   	pop    %ebp
-80101e28:	c3                   	ret    
-80101e29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801013cf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801013d2:	89 f0                	mov    %esi,%eax
+801013d4:	5b                   	pop    %ebx
+801013d5:	5e                   	pop    %esi
+801013d6:	5f                   	pop    %edi
+801013d7:	5d                   	pop    %ebp
+801013d8:	c3                   	ret    
+801013d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101e30:	39 53 04             	cmp    %edx,0x4(%ebx)
-80101e33:	75 8f                	jne    80101dc4 <iget+0x34>
+801013e0:	39 53 04             	cmp    %edx,0x4(%ebx)
+801013e3:	75 8f                	jne    80101374 <iget+0x34>
       release(&icache.lock);
-80101e35:	83 ec 0c             	sub    $0xc,%esp
+801013e5:	83 ec 0c             	sub    $0xc,%esp
       ip->ref++;
-80101e38:	83 c1 01             	add    $0x1,%ecx
+801013e8:	83 c1 01             	add    $0x1,%ecx
       return ip;
-80101e3b:	89 de                	mov    %ebx,%esi
+801013eb:	89 de                	mov    %ebx,%esi
       release(&icache.lock);
-80101e3d:	68 e0 23 11 80       	push   $0x801123e0
+801013ed:	68 e0 09 11 80       	push   $0x801109e0
       ip->ref++;
-80101e42:	89 4b 08             	mov    %ecx,0x8(%ebx)
+801013f2:	89 4b 08             	mov    %ecx,0x8(%ebx)
       release(&icache.lock);
-80101e45:	e8 26 32 00 00       	call   80105070 <release>
+801013f5:	e8 26 32 00 00       	call   80104620 <release>
       return ip;
-80101e4a:	83 c4 10             	add    $0x10,%esp
+801013fa:	83 c4 10             	add    $0x10,%esp
 }
-80101e4d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101e50:	89 f0                	mov    %esi,%eax
-80101e52:	5b                   	pop    %ebx
-80101e53:	5e                   	pop    %esi
-80101e54:	5f                   	pop    %edi
-80101e55:	5d                   	pop    %ebp
-80101e56:	c3                   	ret    
+801013fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101400:	89 f0                	mov    %esi,%eax
+80101402:	5b                   	pop    %ebx
+80101403:	5e                   	pop    %esi
+80101404:	5f                   	pop    %edi
+80101405:	5d                   	pop    %ebp
+80101406:	c3                   	ret    
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101e57:	81 fb 34 40 11 80    	cmp    $0x80114034,%ebx
-80101e5d:	73 10                	jae    80101e6f <iget+0xdf>
+80101407:	81 fb 34 26 11 80    	cmp    $0x80112634,%ebx
+8010140d:	73 10                	jae    8010141f <iget+0xdf>
     if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101e5f:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80101e62:	85 c9                	test   %ecx,%ecx
-80101e64:	0f 8f 56 ff ff ff    	jg     80101dc0 <iget+0x30>
-80101e6a:	e9 6e ff ff ff       	jmp    80101ddd <iget+0x4d>
+8010140f:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80101412:	85 c9                	test   %ecx,%ecx
+80101414:	0f 8f 56 ff ff ff    	jg     80101370 <iget+0x30>
+8010141a:	e9 6e ff ff ff       	jmp    8010138d <iget+0x4d>
     panic("iget: no inodes");
-80101e6f:	83 ec 0c             	sub    $0xc,%esp
-80101e72:	68 a0 7c 10 80       	push   $0x80107ca0
-80101e77:	e8 14 e5 ff ff       	call   80100390 <panic>
-80101e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010141f:	83 ec 0c             	sub    $0xc,%esp
+80101422:	68 c8 71 10 80       	push   $0x801071c8
+80101427:	e8 64 ef ff ff       	call   80100390 <panic>
+8010142c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80101e80 <bmap>:
+80101430 <bmap>:
 
 // Return the disk block address of the nth block in inode ip.
 // If there is no such block, bmap allocates one.
 static uint
 bmap(struct inode *ip, uint bn)
 {
-80101e80:	55                   	push   %ebp
-80101e81:	89 e5                	mov    %esp,%ebp
-80101e83:	57                   	push   %edi
-80101e84:	56                   	push   %esi
-80101e85:	89 c6                	mov    %eax,%esi
-80101e87:	53                   	push   %ebx
-80101e88:	83 ec 1c             	sub    $0x1c,%esp
+80101430:	55                   	push   %ebp
+80101431:	89 e5                	mov    %esp,%ebp
+80101433:	57                   	push   %edi
+80101434:	56                   	push   %esi
+80101435:	89 c6                	mov    %eax,%esi
+80101437:	53                   	push   %ebx
+80101438:	83 ec 1c             	sub    $0x1c,%esp
   uint addr, *a;
   struct buf *bp;
 
   if(bn < NDIRECT){
-80101e8b:	83 fa 0b             	cmp    $0xb,%edx
-80101e8e:	0f 86 84 00 00 00    	jbe    80101f18 <bmap+0x98>
+8010143b:	83 fa 0b             	cmp    $0xb,%edx
+8010143e:	0f 86 84 00 00 00    	jbe    801014c8 <bmap+0x98>
     if((addr = ip->addrs[bn]) == 0)
       ip->addrs[bn] = addr = balloc(ip->dev);
     return addr;
   }
   bn -= NDIRECT;
-80101e94:	8d 5a f4             	lea    -0xc(%edx),%ebx
+80101444:	8d 5a f4             	lea    -0xc(%edx),%ebx
 
   if(bn < NINDIRECT){
-80101e97:	83 fb 7f             	cmp    $0x7f,%ebx
-80101e9a:	0f 87 98 00 00 00    	ja     80101f38 <bmap+0xb8>
+80101447:	83 fb 7f             	cmp    $0x7f,%ebx
+8010144a:	0f 87 98 00 00 00    	ja     801014e8 <bmap+0xb8>
     // Load indirect block, allocating if necessary.
     if((addr = ip->addrs[NDIRECT]) == 0)
-80101ea0:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
-80101ea6:	8b 16                	mov    (%esi),%edx
-80101ea8:	85 c0                	test   %eax,%eax
-80101eaa:	74 54                	je     80101f00 <bmap+0x80>
+80101450:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+80101456:	8b 16                	mov    (%esi),%edx
+80101458:	85 c0                	test   %eax,%eax
+8010145a:	74 54                	je     801014b0 <bmap+0x80>
       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
     bp = bread(ip->dev, addr);
-80101eac:	83 ec 08             	sub    $0x8,%esp
-80101eaf:	50                   	push   %eax
-80101eb0:	52                   	push   %edx
-80101eb1:	e8 1a e2 ff ff       	call   801000d0 <bread>
+8010145c:	83 ec 08             	sub    $0x8,%esp
+8010145f:	50                   	push   %eax
+80101460:	52                   	push   %edx
+80101461:	e8 6a ec ff ff       	call   801000d0 <bread>
     a = (uint*)bp->data;
     if((addr = a[bn]) == 0){
-80101eb6:	83 c4 10             	add    $0x10,%esp
-80101eb9:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
+80101466:	83 c4 10             	add    $0x10,%esp
+80101469:	8d 54 98 5c          	lea    0x5c(%eax,%ebx,4),%edx
     bp = bread(ip->dev, addr);
-80101ebd:	89 c7                	mov    %eax,%edi
+8010146d:	89 c7                	mov    %eax,%edi
     if((addr = a[bn]) == 0){
-80101ebf:	8b 1a                	mov    (%edx),%ebx
-80101ec1:	85 db                	test   %ebx,%ebx
-80101ec3:	74 1b                	je     80101ee0 <bmap+0x60>
+8010146f:	8b 1a                	mov    (%edx),%ebx
+80101471:	85 db                	test   %ebx,%ebx
+80101473:	74 1b                	je     80101490 <bmap+0x60>
       a[bn] = addr = balloc(ip->dev);
       log_write(bp);
     }
     brelse(bp);
-80101ec5:	83 ec 0c             	sub    $0xc,%esp
-80101ec8:	57                   	push   %edi
-80101ec9:	e8 22 e3 ff ff       	call   801001f0 <brelse>
+80101475:	83 ec 0c             	sub    $0xc,%esp
+80101478:	57                   	push   %edi
+80101479:	e8 72 ed ff ff       	call   801001f0 <brelse>
     return addr;
-80101ece:	83 c4 10             	add    $0x10,%esp
+8010147e:	83 c4 10             	add    $0x10,%esp
   }
 
   panic("bmap: out of range");
 }
-80101ed1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101ed4:	89 d8                	mov    %ebx,%eax
-80101ed6:	5b                   	pop    %ebx
-80101ed7:	5e                   	pop    %esi
-80101ed8:	5f                   	pop    %edi
-80101ed9:	5d                   	pop    %ebp
-80101eda:	c3                   	ret    
-80101edb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101edf:	90                   	nop
+80101481:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101484:	89 d8                	mov    %ebx,%eax
+80101486:	5b                   	pop    %ebx
+80101487:	5e                   	pop    %esi
+80101488:	5f                   	pop    %edi
+80101489:	5d                   	pop    %ebp
+8010148a:	c3                   	ret    
+8010148b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010148f:	90                   	nop
       a[bn] = addr = balloc(ip->dev);
-80101ee0:	8b 06                	mov    (%esi),%eax
-80101ee2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-80101ee5:	e8 96 fd ff ff       	call   80101c80 <balloc>
-80101eea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101490:	8b 06                	mov    (%esi),%eax
+80101492:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80101495:	e8 96 fd ff ff       	call   80101230 <balloc>
+8010149a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
       log_write(bp);
-80101eed:	83 ec 0c             	sub    $0xc,%esp
+8010149d:	83 ec 0c             	sub    $0xc,%esp
       a[bn] = addr = balloc(ip->dev);
-80101ef0:	89 c3                	mov    %eax,%ebx
-80101ef2:	89 02                	mov    %eax,(%edx)
+801014a0:	89 c3                	mov    %eax,%ebx
+801014a2:	89 02                	mov    %eax,(%edx)
       log_write(bp);
-80101ef4:	57                   	push   %edi
-80101ef5:	e8 66 1a 00 00       	call   80103960 <log_write>
-80101efa:	83 c4 10             	add    $0x10,%esp
-80101efd:	eb c6                	jmp    80101ec5 <bmap+0x45>
-80101eff:	90                   	nop
+801014a4:	57                   	push   %edi
+801014a5:	e8 66 1a 00 00       	call   80102f10 <log_write>
+801014aa:	83 c4 10             	add    $0x10,%esp
+801014ad:	eb c6                	jmp    80101475 <bmap+0x45>
+801014af:	90                   	nop
       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-80101f00:	89 d0                	mov    %edx,%eax
-80101f02:	e8 79 fd ff ff       	call   80101c80 <balloc>
-80101f07:	8b 16                	mov    (%esi),%edx
-80101f09:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
-80101f0f:	eb 9b                	jmp    80101eac <bmap+0x2c>
-80101f11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014b0:	89 d0                	mov    %edx,%eax
+801014b2:	e8 79 fd ff ff       	call   80101230 <balloc>
+801014b7:	8b 16                	mov    (%esi),%edx
+801014b9:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
+801014bf:	eb 9b                	jmp    8010145c <bmap+0x2c>
+801014c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if((addr = ip->addrs[bn]) == 0)
-80101f18:	8d 3c 90             	lea    (%eax,%edx,4),%edi
-80101f1b:	8b 5f 5c             	mov    0x5c(%edi),%ebx
-80101f1e:	85 db                	test   %ebx,%ebx
-80101f20:	75 af                	jne    80101ed1 <bmap+0x51>
+801014c8:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+801014cb:	8b 5f 5c             	mov    0x5c(%edi),%ebx
+801014ce:	85 db                	test   %ebx,%ebx
+801014d0:	75 af                	jne    80101481 <bmap+0x51>
       ip->addrs[bn] = addr = balloc(ip->dev);
-80101f22:	8b 00                	mov    (%eax),%eax
-80101f24:	e8 57 fd ff ff       	call   80101c80 <balloc>
-80101f29:	89 47 5c             	mov    %eax,0x5c(%edi)
-80101f2c:	89 c3                	mov    %eax,%ebx
-}
-80101f2e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101f31:	89 d8                	mov    %ebx,%eax
-80101f33:	5b                   	pop    %ebx
-80101f34:	5e                   	pop    %esi
-80101f35:	5f                   	pop    %edi
-80101f36:	5d                   	pop    %ebp
-80101f37:	c3                   	ret    
+801014d2:	8b 00                	mov    (%eax),%eax
+801014d4:	e8 57 fd ff ff       	call   80101230 <balloc>
+801014d9:	89 47 5c             	mov    %eax,0x5c(%edi)
+801014dc:	89 c3                	mov    %eax,%ebx
+}
+801014de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801014e1:	89 d8                	mov    %ebx,%eax
+801014e3:	5b                   	pop    %ebx
+801014e4:	5e                   	pop    %esi
+801014e5:	5f                   	pop    %edi
+801014e6:	5d                   	pop    %ebp
+801014e7:	c3                   	ret    
   panic("bmap: out of range");
-80101f38:	83 ec 0c             	sub    $0xc,%esp
-80101f3b:	68 b0 7c 10 80       	push   $0x80107cb0
-80101f40:	e8 4b e4 ff ff       	call   80100390 <panic>
-80101f45:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80101f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101f50 <readsb>:
-{
-80101f50:	f3 0f 1e fb          	endbr32 
-80101f54:	55                   	push   %ebp
-80101f55:	89 e5                	mov    %esp,%ebp
-80101f57:	56                   	push   %esi
-80101f58:	53                   	push   %ebx
-80101f59:	8b 75 0c             	mov    0xc(%ebp),%esi
+801014e8:	83 ec 0c             	sub    $0xc,%esp
+801014eb:	68 d8 71 10 80       	push   $0x801071d8
+801014f0:	e8 9b ee ff ff       	call   80100390 <panic>
+801014f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801014fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101500 <readsb>:
+{
+80101500:	f3 0f 1e fb          	endbr32 
+80101504:	55                   	push   %ebp
+80101505:	89 e5                	mov    %esp,%ebp
+80101507:	56                   	push   %esi
+80101508:	53                   	push   %ebx
+80101509:	8b 75 0c             	mov    0xc(%ebp),%esi
   bp = bread(dev, 1);
-80101f5c:	83 ec 08             	sub    $0x8,%esp
-80101f5f:	6a 01                	push   $0x1
-80101f61:	ff 75 08             	pushl  0x8(%ebp)
-80101f64:	e8 67 e1 ff ff       	call   801000d0 <bread>
+8010150c:	83 ec 08             	sub    $0x8,%esp
+8010150f:	6a 01                	push   $0x1
+80101511:	ff 75 08             	pushl  0x8(%ebp)
+80101514:	e8 b7 eb ff ff       	call   801000d0 <bread>
   memmove(sb, bp->data, sizeof(*sb));
-80101f69:	83 c4 0c             	add    $0xc,%esp
+80101519:	83 c4 0c             	add    $0xc,%esp
   bp = bread(dev, 1);
-80101f6c:	89 c3                	mov    %eax,%ebx
+8010151c:	89 c3                	mov    %eax,%ebx
   memmove(sb, bp->data, sizeof(*sb));
-80101f6e:	8d 40 5c             	lea    0x5c(%eax),%eax
-80101f71:	6a 1c                	push   $0x1c
-80101f73:	50                   	push   %eax
-80101f74:	56                   	push   %esi
-80101f75:	e8 e6 31 00 00       	call   80105160 <memmove>
+8010151e:	8d 40 5c             	lea    0x5c(%eax),%eax
+80101521:	6a 1c                	push   $0x1c
+80101523:	50                   	push   %eax
+80101524:	56                   	push   %esi
+80101525:	e8 e6 31 00 00       	call   80104710 <memmove>
   brelse(bp);
-80101f7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80101f7d:	83 c4 10             	add    $0x10,%esp
+8010152a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010152d:	83 c4 10             	add    $0x10,%esp
 }
-80101f80:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101f83:	5b                   	pop    %ebx
-80101f84:	5e                   	pop    %esi
-80101f85:	5d                   	pop    %ebp
+80101530:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101533:	5b                   	pop    %ebx
+80101534:	5e                   	pop    %esi
+80101535:	5d                   	pop    %ebp
   brelse(bp);
-80101f86:	e9 65 e2 ff ff       	jmp    801001f0 <brelse>
-80101f8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80101f8f:	90                   	nop
-
-80101f90 <iinit>:
-{
-80101f90:	f3 0f 1e fb          	endbr32 
-80101f94:	55                   	push   %ebp
-80101f95:	89 e5                	mov    %esp,%ebp
-80101f97:	53                   	push   %ebx
-80101f98:	bb 20 24 11 80       	mov    $0x80112420,%ebx
-80101f9d:	83 ec 0c             	sub    $0xc,%esp
+80101536:	e9 b5 ec ff ff       	jmp    801001f0 <brelse>
+8010153b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010153f:	90                   	nop
+
+80101540 <iinit>:
+{
+80101540:	f3 0f 1e fb          	endbr32 
+80101544:	55                   	push   %ebp
+80101545:	89 e5                	mov    %esp,%ebp
+80101547:	53                   	push   %ebx
+80101548:	bb 20 0a 11 80       	mov    $0x80110a20,%ebx
+8010154d:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-80101fa0:	68 c3 7c 10 80       	push   $0x80107cc3
-80101fa5:	68 e0 23 11 80       	push   $0x801123e0
-80101faa:	e8 81 2e 00 00       	call   80104e30 <initlock>
+80101550:	68 eb 71 10 80       	push   $0x801071eb
+80101555:	68 e0 09 11 80       	push   $0x801109e0
+8010155a:	e8 81 2e 00 00       	call   801043e0 <initlock>
   for(i = 0; i < NINODE; i++) {
-80101faf:	83 c4 10             	add    $0x10,%esp
-80101fb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010155f:	83 c4 10             	add    $0x10,%esp
+80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     initsleeplock(&icache.inode[i].lock, "inode");
-80101fb8:	83 ec 08             	sub    $0x8,%esp
-80101fbb:	68 ca 7c 10 80       	push   $0x80107cca
-80101fc0:	53                   	push   %ebx
-80101fc1:	81 c3 90 00 00 00    	add    $0x90,%ebx
-80101fc7:	e8 24 2d 00 00       	call   80104cf0 <initsleeplock>
+80101568:	83 ec 08             	sub    $0x8,%esp
+8010156b:	68 f2 71 10 80       	push   $0x801071f2
+80101570:	53                   	push   %ebx
+80101571:	81 c3 90 00 00 00    	add    $0x90,%ebx
+80101577:	e8 24 2d 00 00       	call   801042a0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
-80101fcc:	83 c4 10             	add    $0x10,%esp
-80101fcf:	81 fb 40 40 11 80    	cmp    $0x80114040,%ebx
-80101fd5:	75 e1                	jne    80101fb8 <iinit+0x28>
+8010157c:	83 c4 10             	add    $0x10,%esp
+8010157f:	81 fb 40 26 11 80    	cmp    $0x80112640,%ebx
+80101585:	75 e1                	jne    80101568 <iinit+0x28>
   readsb(dev, &sb);
-80101fd7:	83 ec 08             	sub    $0x8,%esp
-80101fda:	68 c0 23 11 80       	push   $0x801123c0
-80101fdf:	ff 75 08             	pushl  0x8(%ebp)
-80101fe2:	e8 69 ff ff ff       	call   80101f50 <readsb>
+80101587:	83 ec 08             	sub    $0x8,%esp
+8010158a:	68 c0 09 11 80       	push   $0x801109c0
+8010158f:	ff 75 08             	pushl  0x8(%ebp)
+80101592:	e8 69 ff ff ff       	call   80101500 <readsb>
   cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101fe7:	ff 35 d8 23 11 80    	pushl  0x801123d8
-80101fed:	ff 35 d4 23 11 80    	pushl  0x801123d4
-80101ff3:	ff 35 d0 23 11 80    	pushl  0x801123d0
-80101ff9:	ff 35 cc 23 11 80    	pushl  0x801123cc
-80101fff:	ff 35 c8 23 11 80    	pushl  0x801123c8
-80102005:	ff 35 c4 23 11 80    	pushl  0x801123c4
-8010200b:	ff 35 c0 23 11 80    	pushl  0x801123c0
-80102011:	68 30 7d 10 80       	push   $0x80107d30
-80102016:	e8 d5 e6 ff ff       	call   801006f0 <cprintf>
-}
-8010201b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010201e:	83 c4 30             	add    $0x30,%esp
-80102021:	c9                   	leave  
-80102022:	c3                   	ret    
-80102023:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80102030 <ialloc>:
-{
-80102030:	f3 0f 1e fb          	endbr32 
-80102034:	55                   	push   %ebp
-80102035:	89 e5                	mov    %esp,%ebp
-80102037:	57                   	push   %edi
-80102038:	56                   	push   %esi
-80102039:	53                   	push   %ebx
-8010203a:	83 ec 1c             	sub    $0x1c,%esp
-8010203d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101597:	ff 35 d8 09 11 80    	pushl  0x801109d8
+8010159d:	ff 35 d4 09 11 80    	pushl  0x801109d4
+801015a3:	ff 35 d0 09 11 80    	pushl  0x801109d0
+801015a9:	ff 35 cc 09 11 80    	pushl  0x801109cc
+801015af:	ff 35 c8 09 11 80    	pushl  0x801109c8
+801015b5:	ff 35 c4 09 11 80    	pushl  0x801109c4
+801015bb:	ff 35 c0 09 11 80    	pushl  0x801109c0
+801015c1:	68 58 72 10 80       	push   $0x80107258
+801015c6:	e8 e5 f0 ff ff       	call   801006b0 <cprintf>
+}
+801015cb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801015ce:	83 c4 30             	add    $0x30,%esp
+801015d1:	c9                   	leave  
+801015d2:	c3                   	ret    
+801015d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801015da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801015e0 <ialloc>:
+{
+801015e0:	f3 0f 1e fb          	endbr32 
+801015e4:	55                   	push   %ebp
+801015e5:	89 e5                	mov    %esp,%ebp
+801015e7:	57                   	push   %edi
+801015e8:	56                   	push   %esi
+801015e9:	53                   	push   %ebx
+801015ea:	83 ec 1c             	sub    $0x1c,%esp
+801015ed:	8b 45 0c             	mov    0xc(%ebp),%eax
   for(inum = 1; inum < sb.ninodes; inum++){
-80102040:	83 3d c8 23 11 80 01 	cmpl   $0x1,0x801123c8
+801015f0:	83 3d c8 09 11 80 01 	cmpl   $0x1,0x801109c8
 {
-80102047:	8b 75 08             	mov    0x8(%ebp),%esi
-8010204a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801015f7:	8b 75 08             	mov    0x8(%ebp),%esi
+801015fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   for(inum = 1; inum < sb.ninodes; inum++){
-8010204d:	0f 86 8d 00 00 00    	jbe    801020e0 <ialloc+0xb0>
-80102053:	bf 01 00 00 00       	mov    $0x1,%edi
-80102058:	eb 1d                	jmp    80102077 <ialloc+0x47>
-8010205a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801015fd:	0f 86 8d 00 00 00    	jbe    80101690 <ialloc+0xb0>
+80101603:	bf 01 00 00 00       	mov    $0x1,%edi
+80101608:	eb 1d                	jmp    80101627 <ialloc+0x47>
+8010160a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     brelse(bp);
-80102060:	83 ec 0c             	sub    $0xc,%esp
+80101610:	83 ec 0c             	sub    $0xc,%esp
   for(inum = 1; inum < sb.ninodes; inum++){
-80102063:	83 c7 01             	add    $0x1,%edi
+80101613:	83 c7 01             	add    $0x1,%edi
     brelse(bp);
-80102066:	53                   	push   %ebx
-80102067:	e8 84 e1 ff ff       	call   801001f0 <brelse>
+80101616:	53                   	push   %ebx
+80101617:	e8 d4 eb ff ff       	call   801001f0 <brelse>
   for(inum = 1; inum < sb.ninodes; inum++){
-8010206c:	83 c4 10             	add    $0x10,%esp
-8010206f:	3b 3d c8 23 11 80    	cmp    0x801123c8,%edi
-80102075:	73 69                	jae    801020e0 <ialloc+0xb0>
+8010161c:	83 c4 10             	add    $0x10,%esp
+8010161f:	3b 3d c8 09 11 80    	cmp    0x801109c8,%edi
+80101625:	73 69                	jae    80101690 <ialloc+0xb0>
     bp = bread(dev, IBLOCK(inum, sb));
-80102077:	89 f8                	mov    %edi,%eax
-80102079:	83 ec 08             	sub    $0x8,%esp
-8010207c:	c1 e8 03             	shr    $0x3,%eax
-8010207f:	03 05 d4 23 11 80    	add    0x801123d4,%eax
-80102085:	50                   	push   %eax
-80102086:	56                   	push   %esi
-80102087:	e8 44 e0 ff ff       	call   801000d0 <bread>
+80101627:	89 f8                	mov    %edi,%eax
+80101629:	83 ec 08             	sub    $0x8,%esp
+8010162c:	c1 e8 03             	shr    $0x3,%eax
+8010162f:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+80101635:	50                   	push   %eax
+80101636:	56                   	push   %esi
+80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
     if(dip->type == 0){  // a free inode
-8010208c:	83 c4 10             	add    $0x10,%esp
+8010163c:	83 c4 10             	add    $0x10,%esp
     bp = bread(dev, IBLOCK(inum, sb));
-8010208f:	89 c3                	mov    %eax,%ebx
+8010163f:	89 c3                	mov    %eax,%ebx
     dip = (struct dinode*)bp->data + inum%IPB;
-80102091:	89 f8                	mov    %edi,%eax
-80102093:	83 e0 07             	and    $0x7,%eax
-80102096:	c1 e0 06             	shl    $0x6,%eax
-80102099:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
+80101641:	89 f8                	mov    %edi,%eax
+80101643:	83 e0 07             	and    $0x7,%eax
+80101646:	c1 e0 06             	shl    $0x6,%eax
+80101649:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
     if(dip->type == 0){  // a free inode
-8010209d:	66 83 39 00          	cmpw   $0x0,(%ecx)
-801020a1:	75 bd                	jne    80102060 <ialloc+0x30>
+8010164d:	66 83 39 00          	cmpw   $0x0,(%ecx)
+80101651:	75 bd                	jne    80101610 <ialloc+0x30>
       memset(dip, 0, sizeof(*dip));
-801020a3:	83 ec 04             	sub    $0x4,%esp
-801020a6:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-801020a9:	6a 40                	push   $0x40
-801020ab:	6a 00                	push   $0x0
-801020ad:	51                   	push   %ecx
-801020ae:	e8 0d 30 00 00       	call   801050c0 <memset>
+80101653:	83 ec 04             	sub    $0x4,%esp
+80101656:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80101659:	6a 40                	push   $0x40
+8010165b:	6a 00                	push   $0x0
+8010165d:	51                   	push   %ecx
+8010165e:	e8 0d 30 00 00       	call   80104670 <memset>
       dip->type = type;
-801020b3:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-801020b7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-801020ba:	66 89 01             	mov    %ax,(%ecx)
+80101663:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
+80101667:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+8010166a:	66 89 01             	mov    %ax,(%ecx)
       log_write(bp);   // mark it allocated on the disk
-801020bd:	89 1c 24             	mov    %ebx,(%esp)
-801020c0:	e8 9b 18 00 00       	call   80103960 <log_write>
+8010166d:	89 1c 24             	mov    %ebx,(%esp)
+80101670:	e8 9b 18 00 00       	call   80102f10 <log_write>
       brelse(bp);
-801020c5:	89 1c 24             	mov    %ebx,(%esp)
-801020c8:	e8 23 e1 ff ff       	call   801001f0 <brelse>
+80101675:	89 1c 24             	mov    %ebx,(%esp)
+80101678:	e8 73 eb ff ff       	call   801001f0 <brelse>
       return iget(dev, inum);
-801020cd:	83 c4 10             	add    $0x10,%esp
+8010167d:	83 c4 10             	add    $0x10,%esp
 }
-801020d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101680:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return iget(dev, inum);
-801020d3:	89 fa                	mov    %edi,%edx
+80101683:	89 fa                	mov    %edi,%edx
 }
-801020d5:	5b                   	pop    %ebx
+80101685:	5b                   	pop    %ebx
       return iget(dev, inum);
-801020d6:	89 f0                	mov    %esi,%eax
+80101686:	89 f0                	mov    %esi,%eax
 }
-801020d8:	5e                   	pop    %esi
-801020d9:	5f                   	pop    %edi
-801020da:	5d                   	pop    %ebp
+80101688:	5e                   	pop    %esi
+80101689:	5f                   	pop    %edi
+8010168a:	5d                   	pop    %ebp
       return iget(dev, inum);
-801020db:	e9 b0 fc ff ff       	jmp    80101d90 <iget>
+8010168b:	e9 b0 fc ff ff       	jmp    80101340 <iget>
   panic("ialloc: no inodes");
-801020e0:	83 ec 0c             	sub    $0xc,%esp
-801020e3:	68 d0 7c 10 80       	push   $0x80107cd0
-801020e8:	e8 a3 e2 ff ff       	call   80100390 <panic>
-801020ed:	8d 76 00             	lea    0x0(%esi),%esi
-
-801020f0 <iupdate>:
-{
-801020f0:	f3 0f 1e fb          	endbr32 
-801020f4:	55                   	push   %ebp
-801020f5:	89 e5                	mov    %esp,%ebp
-801020f7:	56                   	push   %esi
-801020f8:	53                   	push   %ebx
-801020f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101690:	83 ec 0c             	sub    $0xc,%esp
+80101693:	68 f8 71 10 80       	push   $0x801071f8
+80101698:	e8 f3 ec ff ff       	call   80100390 <panic>
+8010169d:	8d 76 00             	lea    0x0(%esi),%esi
+
+801016a0 <iupdate>:
+{
+801016a0:	f3 0f 1e fb          	endbr32 
+801016a4:	55                   	push   %ebp
+801016a5:	89 e5                	mov    %esp,%ebp
+801016a7:	56                   	push   %esi
+801016a8:	53                   	push   %ebx
+801016a9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801020fc:	8b 43 04             	mov    0x4(%ebx),%eax
+801016ac:	8b 43 04             	mov    0x4(%ebx),%eax
   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801020ff:	83 c3 5c             	add    $0x5c,%ebx
+801016af:	83 c3 5c             	add    $0x5c,%ebx
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-80102102:	83 ec 08             	sub    $0x8,%esp
-80102105:	c1 e8 03             	shr    $0x3,%eax
-80102108:	03 05 d4 23 11 80    	add    0x801123d4,%eax
-8010210e:	50                   	push   %eax
-8010210f:	ff 73 a4             	pushl  -0x5c(%ebx)
-80102112:	e8 b9 df ff ff       	call   801000d0 <bread>
+801016b2:	83 ec 08             	sub    $0x8,%esp
+801016b5:	c1 e8 03             	shr    $0x3,%eax
+801016b8:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801016be:	50                   	push   %eax
+801016bf:	ff 73 a4             	pushl  -0x5c(%ebx)
+801016c2:	e8 09 ea ff ff       	call   801000d0 <bread>
   dip->type = ip->type;
-80102117:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
+801016c7:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-8010211b:	83 c4 0c             	add    $0xc,%esp
+801016cb:	83 c4 0c             	add    $0xc,%esp
   bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-8010211e:	89 c6                	mov    %eax,%esi
+801016ce:	89 c6                	mov    %eax,%esi
   dip = (struct dinode*)bp->data + ip->inum%IPB;
-80102120:	8b 43 a8             	mov    -0x58(%ebx),%eax
-80102123:	83 e0 07             	and    $0x7,%eax
-80102126:	c1 e0 06             	shl    $0x6,%eax
-80102129:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+801016d0:	8b 43 a8             	mov    -0x58(%ebx),%eax
+801016d3:	83 e0 07             	and    $0x7,%eax
+801016d6:	c1 e0 06             	shl    $0x6,%eax
+801016d9:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
   dip->type = ip->type;
-8010212d:	66 89 10             	mov    %dx,(%eax)
+801016dd:	66 89 10             	mov    %dx,(%eax)
   dip->major = ip->major;
-80102130:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
+801016e0:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-80102134:	83 c0 0c             	add    $0xc,%eax
+801016e4:	83 c0 0c             	add    $0xc,%eax
   dip->major = ip->major;
-80102137:	66 89 50 f6          	mov    %dx,-0xa(%eax)
+801016e7:	66 89 50 f6          	mov    %dx,-0xa(%eax)
   dip->minor = ip->minor;
-8010213b:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
-8010213f:	66 89 50 f8          	mov    %dx,-0x8(%eax)
+801016eb:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
+801016ef:	66 89 50 f8          	mov    %dx,-0x8(%eax)
   dip->nlink = ip->nlink;
-80102143:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
-80102147:	66 89 50 fa          	mov    %dx,-0x6(%eax)
+801016f3:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
+801016f7:	66 89 50 fa          	mov    %dx,-0x6(%eax)
   dip->size = ip->size;
-8010214b:	8b 53 fc             	mov    -0x4(%ebx),%edx
-8010214e:	89 50 fc             	mov    %edx,-0x4(%eax)
+801016fb:	8b 53 fc             	mov    -0x4(%ebx),%edx
+801016fe:	89 50 fc             	mov    %edx,-0x4(%eax)
   memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-80102151:	6a 34                	push   $0x34
-80102153:	53                   	push   %ebx
-80102154:	50                   	push   %eax
-80102155:	e8 06 30 00 00       	call   80105160 <memmove>
+80101701:	6a 34                	push   $0x34
+80101703:	53                   	push   %ebx
+80101704:	50                   	push   %eax
+80101705:	e8 06 30 00 00       	call   80104710 <memmove>
   log_write(bp);
-8010215a:	89 34 24             	mov    %esi,(%esp)
-8010215d:	e8 fe 17 00 00       	call   80103960 <log_write>
+8010170a:	89 34 24             	mov    %esi,(%esp)
+8010170d:	e8 fe 17 00 00       	call   80102f10 <log_write>
   brelse(bp);
-80102162:	89 75 08             	mov    %esi,0x8(%ebp)
-80102165:	83 c4 10             	add    $0x10,%esp
+80101712:	89 75 08             	mov    %esi,0x8(%ebp)
+80101715:	83 c4 10             	add    $0x10,%esp
 }
-80102168:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010216b:	5b                   	pop    %ebx
-8010216c:	5e                   	pop    %esi
-8010216d:	5d                   	pop    %ebp
+80101718:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010171b:	5b                   	pop    %ebx
+8010171c:	5e                   	pop    %esi
+8010171d:	5d                   	pop    %ebp
   brelse(bp);
-8010216e:	e9 7d e0 ff ff       	jmp    801001f0 <brelse>
-80102173:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010217a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80102180 <idup>:
-{
-80102180:	f3 0f 1e fb          	endbr32 
-80102184:	55                   	push   %ebp
-80102185:	89 e5                	mov    %esp,%ebp
-80102187:	53                   	push   %ebx
-80102188:	83 ec 10             	sub    $0x10,%esp
-8010218b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010171e:	e9 cd ea ff ff       	jmp    801001f0 <brelse>
+80101723:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010172a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101730 <idup>:
+{
+80101730:	f3 0f 1e fb          	endbr32 
+80101734:	55                   	push   %ebp
+80101735:	89 e5                	mov    %esp,%ebp
+80101737:	53                   	push   %ebx
+80101738:	83 ec 10             	sub    $0x10,%esp
+8010173b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
-8010218e:	68 e0 23 11 80       	push   $0x801123e0
-80102193:	e8 18 2e 00 00       	call   80104fb0 <acquire>
+8010173e:	68 e0 09 11 80       	push   $0x801109e0
+80101743:	e8 18 2e 00 00       	call   80104560 <acquire>
   ip->ref++;
-80102198:	83 43 08 01          	addl   $0x1,0x8(%ebx)
+80101748:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
-8010219c:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
-801021a3:	e8 c8 2e 00 00       	call   80105070 <release>
+8010174c:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101753:	e8 c8 2e 00 00       	call   80104620 <release>
 }
-801021a8:	89 d8                	mov    %ebx,%eax
-801021aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801021ad:	c9                   	leave  
-801021ae:	c3                   	ret    
-801021af:	90                   	nop
-
-801021b0 <ilock>:
-{
-801021b0:	f3 0f 1e fb          	endbr32 
-801021b4:	55                   	push   %ebp
-801021b5:	89 e5                	mov    %esp,%ebp
-801021b7:	56                   	push   %esi
-801021b8:	53                   	push   %ebx
-801021b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101758:	89 d8                	mov    %ebx,%eax
+8010175a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010175d:	c9                   	leave  
+8010175e:	c3                   	ret    
+8010175f:	90                   	nop
+
+80101760 <ilock>:
+{
+80101760:	f3 0f 1e fb          	endbr32 
+80101764:	55                   	push   %ebp
+80101765:	89 e5                	mov    %esp,%ebp
+80101767:	56                   	push   %esi
+80101768:	53                   	push   %ebx
+80101769:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(ip == 0 || ip->ref < 1)
-801021bc:	85 db                	test   %ebx,%ebx
-801021be:	0f 84 b3 00 00 00    	je     80102277 <ilock+0xc7>
-801021c4:	8b 53 08             	mov    0x8(%ebx),%edx
-801021c7:	85 d2                	test   %edx,%edx
-801021c9:	0f 8e a8 00 00 00    	jle    80102277 <ilock+0xc7>
+8010176c:	85 db                	test   %ebx,%ebx
+8010176e:	0f 84 b3 00 00 00    	je     80101827 <ilock+0xc7>
+80101774:	8b 53 08             	mov    0x8(%ebx),%edx
+80101777:	85 d2                	test   %edx,%edx
+80101779:	0f 8e a8 00 00 00    	jle    80101827 <ilock+0xc7>
   acquiresleep(&ip->lock);
-801021cf:	83 ec 0c             	sub    $0xc,%esp
-801021d2:	8d 43 0c             	lea    0xc(%ebx),%eax
-801021d5:	50                   	push   %eax
-801021d6:	e8 55 2b 00 00       	call   80104d30 <acquiresleep>
+8010177f:	83 ec 0c             	sub    $0xc,%esp
+80101782:	8d 43 0c             	lea    0xc(%ebx),%eax
+80101785:	50                   	push   %eax
+80101786:	e8 55 2b 00 00       	call   801042e0 <acquiresleep>
   if(ip->valid == 0){
-801021db:	8b 43 4c             	mov    0x4c(%ebx),%eax
-801021de:	83 c4 10             	add    $0x10,%esp
-801021e1:	85 c0                	test   %eax,%eax
-801021e3:	74 0b                	je     801021f0 <ilock+0x40>
-}
-801021e5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801021e8:	5b                   	pop    %ebx
-801021e9:	5e                   	pop    %esi
-801021ea:	5d                   	pop    %ebp
-801021eb:	c3                   	ret    
-801021ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010178b:	8b 43 4c             	mov    0x4c(%ebx),%eax
+8010178e:	83 c4 10             	add    $0x10,%esp
+80101791:	85 c0                	test   %eax,%eax
+80101793:	74 0b                	je     801017a0 <ilock+0x40>
+}
+80101795:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101798:	5b                   	pop    %ebx
+80101799:	5e                   	pop    %esi
+8010179a:	5d                   	pop    %ebp
+8010179b:	c3                   	ret    
+8010179c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-801021f0:	8b 43 04             	mov    0x4(%ebx),%eax
-801021f3:	83 ec 08             	sub    $0x8,%esp
-801021f6:	c1 e8 03             	shr    $0x3,%eax
-801021f9:	03 05 d4 23 11 80    	add    0x801123d4,%eax
-801021ff:	50                   	push   %eax
-80102200:	ff 33                	pushl  (%ebx)
-80102202:	e8 c9 de ff ff       	call   801000d0 <bread>
+801017a0:	8b 43 04             	mov    0x4(%ebx),%eax
+801017a3:	83 ec 08             	sub    $0x8,%esp
+801017a6:	c1 e8 03             	shr    $0x3,%eax
+801017a9:	03 05 d4 09 11 80    	add    0x801109d4,%eax
+801017af:	50                   	push   %eax
+801017b0:	ff 33                	pushl  (%ebx)
+801017b2:	e8 19 e9 ff ff       	call   801000d0 <bread>
     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-80102207:	83 c4 0c             	add    $0xc,%esp
+801017b7:	83 c4 0c             	add    $0xc,%esp
     bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-8010220a:	89 c6                	mov    %eax,%esi
+801017ba:	89 c6                	mov    %eax,%esi
     dip = (struct dinode*)bp->data + ip->inum%IPB;
-8010220c:	8b 43 04             	mov    0x4(%ebx),%eax
-8010220f:	83 e0 07             	and    $0x7,%eax
-80102212:	c1 e0 06             	shl    $0x6,%eax
-80102215:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
+801017bc:	8b 43 04             	mov    0x4(%ebx),%eax
+801017bf:	83 e0 07             	and    $0x7,%eax
+801017c2:	c1 e0 06             	shl    $0x6,%eax
+801017c5:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
     ip->type = dip->type;
-80102219:	0f b7 10             	movzwl (%eax),%edx
+801017c9:	0f b7 10             	movzwl (%eax),%edx
     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-8010221c:	83 c0 0c             	add    $0xc,%eax
+801017cc:	83 c0 0c             	add    $0xc,%eax
     ip->type = dip->type;
-8010221f:	66 89 53 50          	mov    %dx,0x50(%ebx)
+801017cf:	66 89 53 50          	mov    %dx,0x50(%ebx)
     ip->major = dip->major;
-80102223:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
-80102227:	66 89 53 52          	mov    %dx,0x52(%ebx)
+801017d3:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
+801017d7:	66 89 53 52          	mov    %dx,0x52(%ebx)
     ip->minor = dip->minor;
-8010222b:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
-8010222f:	66 89 53 54          	mov    %dx,0x54(%ebx)
+801017db:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
+801017df:	66 89 53 54          	mov    %dx,0x54(%ebx)
     ip->nlink = dip->nlink;
-80102233:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
-80102237:	66 89 53 56          	mov    %dx,0x56(%ebx)
+801017e3:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
+801017e7:	66 89 53 56          	mov    %dx,0x56(%ebx)
     ip->size = dip->size;
-8010223b:	8b 50 fc             	mov    -0x4(%eax),%edx
-8010223e:	89 53 58             	mov    %edx,0x58(%ebx)
+801017eb:	8b 50 fc             	mov    -0x4(%eax),%edx
+801017ee:	89 53 58             	mov    %edx,0x58(%ebx)
     memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-80102241:	6a 34                	push   $0x34
-80102243:	50                   	push   %eax
-80102244:	8d 43 5c             	lea    0x5c(%ebx),%eax
-80102247:	50                   	push   %eax
-80102248:	e8 13 2f 00 00       	call   80105160 <memmove>
+801017f1:	6a 34                	push   $0x34
+801017f3:	50                   	push   %eax
+801017f4:	8d 43 5c             	lea    0x5c(%ebx),%eax
+801017f7:	50                   	push   %eax
+801017f8:	e8 13 2f 00 00       	call   80104710 <memmove>
     brelse(bp);
-8010224d:	89 34 24             	mov    %esi,(%esp)
-80102250:	e8 9b df ff ff       	call   801001f0 <brelse>
+801017fd:	89 34 24             	mov    %esi,(%esp)
+80101800:	e8 eb e9 ff ff       	call   801001f0 <brelse>
     if(ip->type == 0)
-80102255:	83 c4 10             	add    $0x10,%esp
-80102258:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
+80101805:	83 c4 10             	add    $0x10,%esp
+80101808:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
     ip->valid = 1;
-8010225d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
+8010180d:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
     if(ip->type == 0)
-80102264:	0f 85 7b ff ff ff    	jne    801021e5 <ilock+0x35>
+80101814:	0f 85 7b ff ff ff    	jne    80101795 <ilock+0x35>
       panic("ilock: no type");
-8010226a:	83 ec 0c             	sub    $0xc,%esp
-8010226d:	68 e8 7c 10 80       	push   $0x80107ce8
-80102272:	e8 19 e1 ff ff       	call   80100390 <panic>
+8010181a:	83 ec 0c             	sub    $0xc,%esp
+8010181d:	68 10 72 10 80       	push   $0x80107210
+80101822:	e8 69 eb ff ff       	call   80100390 <panic>
     panic("ilock");
-80102277:	83 ec 0c             	sub    $0xc,%esp
-8010227a:	68 e2 7c 10 80       	push   $0x80107ce2
-8010227f:	e8 0c e1 ff ff       	call   80100390 <panic>
-80102284:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010228b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010228f:	90                   	nop
-
-80102290 <iunlock>:
-{
-80102290:	f3 0f 1e fb          	endbr32 
-80102294:	55                   	push   %ebp
-80102295:	89 e5                	mov    %esp,%ebp
-80102297:	56                   	push   %esi
-80102298:	53                   	push   %ebx
-80102299:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101827:	83 ec 0c             	sub    $0xc,%esp
+8010182a:	68 0a 72 10 80       	push   $0x8010720a
+8010182f:	e8 5c eb ff ff       	call   80100390 <panic>
+80101834:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010183b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010183f:	90                   	nop
+
+80101840 <iunlock>:
+{
+80101840:	f3 0f 1e fb          	endbr32 
+80101844:	55                   	push   %ebp
+80101845:	89 e5                	mov    %esp,%ebp
+80101847:	56                   	push   %esi
+80101848:	53                   	push   %ebx
+80101849:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-8010229c:	85 db                	test   %ebx,%ebx
-8010229e:	74 28                	je     801022c8 <iunlock+0x38>
-801022a0:	83 ec 0c             	sub    $0xc,%esp
-801022a3:	8d 73 0c             	lea    0xc(%ebx),%esi
-801022a6:	56                   	push   %esi
-801022a7:	e8 24 2b 00 00       	call   80104dd0 <holdingsleep>
-801022ac:	83 c4 10             	add    $0x10,%esp
-801022af:	85 c0                	test   %eax,%eax
-801022b1:	74 15                	je     801022c8 <iunlock+0x38>
-801022b3:	8b 43 08             	mov    0x8(%ebx),%eax
-801022b6:	85 c0                	test   %eax,%eax
-801022b8:	7e 0e                	jle    801022c8 <iunlock+0x38>
+8010184c:	85 db                	test   %ebx,%ebx
+8010184e:	74 28                	je     80101878 <iunlock+0x38>
+80101850:	83 ec 0c             	sub    $0xc,%esp
+80101853:	8d 73 0c             	lea    0xc(%ebx),%esi
+80101856:	56                   	push   %esi
+80101857:	e8 24 2b 00 00       	call   80104380 <holdingsleep>
+8010185c:	83 c4 10             	add    $0x10,%esp
+8010185f:	85 c0                	test   %eax,%eax
+80101861:	74 15                	je     80101878 <iunlock+0x38>
+80101863:	8b 43 08             	mov    0x8(%ebx),%eax
+80101866:	85 c0                	test   %eax,%eax
+80101868:	7e 0e                	jle    80101878 <iunlock+0x38>
   releasesleep(&ip->lock);
-801022ba:	89 75 08             	mov    %esi,0x8(%ebp)
+8010186a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-801022bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801022c0:	5b                   	pop    %ebx
-801022c1:	5e                   	pop    %esi
-801022c2:	5d                   	pop    %ebp
+8010186d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80101870:	5b                   	pop    %ebx
+80101871:	5e                   	pop    %esi
+80101872:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-801022c3:	e9 c8 2a 00 00       	jmp    80104d90 <releasesleep>
+80101873:	e9 c8 2a 00 00       	jmp    80104340 <releasesleep>
     panic("iunlock");
-801022c8:	83 ec 0c             	sub    $0xc,%esp
-801022cb:	68 f7 7c 10 80       	push   $0x80107cf7
-801022d0:	e8 bb e0 ff ff       	call   80100390 <panic>
-801022d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801022dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801022e0 <iput>:
-{
-801022e0:	f3 0f 1e fb          	endbr32 
-801022e4:	55                   	push   %ebp
-801022e5:	89 e5                	mov    %esp,%ebp
-801022e7:	57                   	push   %edi
-801022e8:	56                   	push   %esi
-801022e9:	53                   	push   %ebx
-801022ea:	83 ec 28             	sub    $0x28,%esp
-801022ed:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101878:	83 ec 0c             	sub    $0xc,%esp
+8010187b:	68 1f 72 10 80       	push   $0x8010721f
+80101880:	e8 0b eb ff ff       	call   80100390 <panic>
+80101885:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010188c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80101890 <iput>:
+{
+80101890:	f3 0f 1e fb          	endbr32 
+80101894:	55                   	push   %ebp
+80101895:	89 e5                	mov    %esp,%ebp
+80101897:	57                   	push   %edi
+80101898:	56                   	push   %esi
+80101899:	53                   	push   %ebx
+8010189a:	83 ec 28             	sub    $0x28,%esp
+8010189d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquiresleep(&ip->lock);
-801022f0:	8d 7b 0c             	lea    0xc(%ebx),%edi
-801022f3:	57                   	push   %edi
-801022f4:	e8 37 2a 00 00       	call   80104d30 <acquiresleep>
+801018a0:	8d 7b 0c             	lea    0xc(%ebx),%edi
+801018a3:	57                   	push   %edi
+801018a4:	e8 37 2a 00 00       	call   801042e0 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
-801022f9:	8b 53 4c             	mov    0x4c(%ebx),%edx
-801022fc:	83 c4 10             	add    $0x10,%esp
-801022ff:	85 d2                	test   %edx,%edx
-80102301:	74 07                	je     8010230a <iput+0x2a>
-80102303:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-80102308:	74 36                	je     80102340 <iput+0x60>
+801018a9:	8b 53 4c             	mov    0x4c(%ebx),%edx
+801018ac:	83 c4 10             	add    $0x10,%esp
+801018af:	85 d2                	test   %edx,%edx
+801018b1:	74 07                	je     801018ba <iput+0x2a>
+801018b3:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+801018b8:	74 36                	je     801018f0 <iput+0x60>
   releasesleep(&ip->lock);
-8010230a:	83 ec 0c             	sub    $0xc,%esp
-8010230d:	57                   	push   %edi
-8010230e:	e8 7d 2a 00 00       	call   80104d90 <releasesleep>
+801018ba:	83 ec 0c             	sub    $0xc,%esp
+801018bd:	57                   	push   %edi
+801018be:	e8 7d 2a 00 00       	call   80104340 <releasesleep>
   acquire(&icache.lock);
-80102313:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
-8010231a:	e8 91 2c 00 00       	call   80104fb0 <acquire>
+801018c3:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+801018ca:	e8 91 2c 00 00       	call   80104560 <acquire>
   ip->ref--;
-8010231f:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
+801018cf:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
-80102323:	83 c4 10             	add    $0x10,%esp
-80102326:	c7 45 08 e0 23 11 80 	movl   $0x801123e0,0x8(%ebp)
+801018d3:	83 c4 10             	add    $0x10,%esp
+801018d6:	c7 45 08 e0 09 11 80 	movl   $0x801109e0,0x8(%ebp)
 }
-8010232d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102330:	5b                   	pop    %ebx
-80102331:	5e                   	pop    %esi
-80102332:	5f                   	pop    %edi
-80102333:	5d                   	pop    %ebp
+801018dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801018e0:	5b                   	pop    %ebx
+801018e1:	5e                   	pop    %esi
+801018e2:	5f                   	pop    %edi
+801018e3:	5d                   	pop    %ebp
   release(&icache.lock);
-80102334:	e9 37 2d 00 00       	jmp    80105070 <release>
-80102339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801018e4:	e9 37 2d 00 00       	jmp    80104620 <release>
+801018e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     acquire(&icache.lock);
-80102340:	83 ec 0c             	sub    $0xc,%esp
-80102343:	68 e0 23 11 80       	push   $0x801123e0
-80102348:	e8 63 2c 00 00       	call   80104fb0 <acquire>
+801018f0:	83 ec 0c             	sub    $0xc,%esp
+801018f3:	68 e0 09 11 80       	push   $0x801109e0
+801018f8:	e8 63 2c 00 00       	call   80104560 <acquire>
     int r = ip->ref;
-8010234d:	8b 73 08             	mov    0x8(%ebx),%esi
+801018fd:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
-80102350:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
-80102357:	e8 14 2d 00 00       	call   80105070 <release>
+80101900:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101907:	e8 14 2d 00 00       	call   80104620 <release>
     if(r == 1){
-8010235c:	83 c4 10             	add    $0x10,%esp
-8010235f:	83 fe 01             	cmp    $0x1,%esi
-80102362:	75 a6                	jne    8010230a <iput+0x2a>
-80102364:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
-8010236a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-8010236d:	8d 73 5c             	lea    0x5c(%ebx),%esi
-80102370:	89 cf                	mov    %ecx,%edi
-80102372:	eb 0b                	jmp    8010237f <iput+0x9f>
-80102374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010190c:	83 c4 10             	add    $0x10,%esp
+8010190f:	83 fe 01             	cmp    $0x1,%esi
+80101912:	75 a6                	jne    801018ba <iput+0x2a>
+80101914:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
+8010191a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+8010191d:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80101920:	89 cf                	mov    %ecx,%edi
+80101922:	eb 0b                	jmp    8010192f <iput+0x9f>
+80101924:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 {
   int i, j;
   struct buf *bp;
   uint *a;
 
   for(i = 0; i < NDIRECT; i++){
-80102378:	83 c6 04             	add    $0x4,%esi
-8010237b:	39 fe                	cmp    %edi,%esi
-8010237d:	74 19                	je     80102398 <iput+0xb8>
+80101928:	83 c6 04             	add    $0x4,%esi
+8010192b:	39 fe                	cmp    %edi,%esi
+8010192d:	74 19                	je     80101948 <iput+0xb8>
     if(ip->addrs[i]){
-8010237f:	8b 16                	mov    (%esi),%edx
-80102381:	85 d2                	test   %edx,%edx
-80102383:	74 f3                	je     80102378 <iput+0x98>
+8010192f:	8b 16                	mov    (%esi),%edx
+80101931:	85 d2                	test   %edx,%edx
+80101933:	74 f3                	je     80101928 <iput+0x98>
       bfree(ip->dev, ip->addrs[i]);
-80102385:	8b 03                	mov    (%ebx),%eax
-80102387:	e8 74 f8 ff ff       	call   80101c00 <bfree>
+80101935:	8b 03                	mov    (%ebx),%eax
+80101937:	e8 74 f8 ff ff       	call   801011b0 <bfree>
       ip->addrs[i] = 0;
-8010238c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80102392:	eb e4                	jmp    80102378 <iput+0x98>
-80102394:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010193c:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80101942:	eb e4                	jmp    80101928 <iput+0x98>
+80101944:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     }
   }
 
   if(ip->addrs[NDIRECT]){
-80102398:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
-8010239e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-801023a1:	85 c0                	test   %eax,%eax
-801023a3:	75 33                	jne    801023d8 <iput+0xf8>
+80101948:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
+8010194e:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80101951:	85 c0                	test   %eax,%eax
+80101953:	75 33                	jne    80101988 <iput+0xf8>
     bfree(ip->dev, ip->addrs[NDIRECT]);
     ip->addrs[NDIRECT] = 0;
   }
 
   ip->size = 0;
   iupdate(ip);
-801023a5:	83 ec 0c             	sub    $0xc,%esp
+80101955:	83 ec 0c             	sub    $0xc,%esp
   ip->size = 0;
-801023a8:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+80101958:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   iupdate(ip);
-801023af:	53                   	push   %ebx
-801023b0:	e8 3b fd ff ff       	call   801020f0 <iupdate>
+8010195f:	53                   	push   %ebx
+80101960:	e8 3b fd ff ff       	call   801016a0 <iupdate>
       ip->type = 0;
-801023b5:	31 c0                	xor    %eax,%eax
-801023b7:	66 89 43 50          	mov    %ax,0x50(%ebx)
+80101965:	31 c0                	xor    %eax,%eax
+80101967:	66 89 43 50          	mov    %ax,0x50(%ebx)
       iupdate(ip);
-801023bb:	89 1c 24             	mov    %ebx,(%esp)
-801023be:	e8 2d fd ff ff       	call   801020f0 <iupdate>
+8010196b:	89 1c 24             	mov    %ebx,(%esp)
+8010196e:	e8 2d fd ff ff       	call   801016a0 <iupdate>
       ip->valid = 0;
-801023c3:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
-801023ca:	83 c4 10             	add    $0x10,%esp
-801023cd:	e9 38 ff ff ff       	jmp    8010230a <iput+0x2a>
-801023d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101973:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
+8010197a:	83 c4 10             	add    $0x10,%esp
+8010197d:	e9 38 ff ff ff       	jmp    801018ba <iput+0x2a>
+80101982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     bp = bread(ip->dev, ip->addrs[NDIRECT]);
-801023d8:	83 ec 08             	sub    $0x8,%esp
-801023db:	50                   	push   %eax
-801023dc:	ff 33                	pushl  (%ebx)
-801023de:	e8 ed dc ff ff       	call   801000d0 <bread>
-801023e3:	89 7d e0             	mov    %edi,-0x20(%ebp)
-801023e6:	83 c4 10             	add    $0x10,%esp
-801023e9:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
-801023ef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80101988:	83 ec 08             	sub    $0x8,%esp
+8010198b:	50                   	push   %eax
+8010198c:	ff 33                	pushl  (%ebx)
+8010198e:	e8 3d e7 ff ff       	call   801000d0 <bread>
+80101993:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101996:	83 c4 10             	add    $0x10,%esp
+80101999:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
+8010199f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     for(j = 0; j < NINDIRECT; j++){
-801023f2:	8d 70 5c             	lea    0x5c(%eax),%esi
-801023f5:	89 cf                	mov    %ecx,%edi
-801023f7:	eb 0e                	jmp    80102407 <iput+0x127>
-801023f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102400:	83 c6 04             	add    $0x4,%esi
-80102403:	39 f7                	cmp    %esi,%edi
-80102405:	74 19                	je     80102420 <iput+0x140>
+801019a2:	8d 70 5c             	lea    0x5c(%eax),%esi
+801019a5:	89 cf                	mov    %ecx,%edi
+801019a7:	eb 0e                	jmp    801019b7 <iput+0x127>
+801019a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801019b0:	83 c6 04             	add    $0x4,%esi
+801019b3:	39 f7                	cmp    %esi,%edi
+801019b5:	74 19                	je     801019d0 <iput+0x140>
       if(a[j])
-80102407:	8b 16                	mov    (%esi),%edx
-80102409:	85 d2                	test   %edx,%edx
-8010240b:	74 f3                	je     80102400 <iput+0x120>
+801019b7:	8b 16                	mov    (%esi),%edx
+801019b9:	85 d2                	test   %edx,%edx
+801019bb:	74 f3                	je     801019b0 <iput+0x120>
         bfree(ip->dev, a[j]);
-8010240d:	8b 03                	mov    (%ebx),%eax
-8010240f:	e8 ec f7 ff ff       	call   80101c00 <bfree>
-80102414:	eb ea                	jmp    80102400 <iput+0x120>
-80102416:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010241d:	8d 76 00             	lea    0x0(%esi),%esi
+801019bd:	8b 03                	mov    (%ebx),%eax
+801019bf:	e8 ec f7 ff ff       	call   801011b0 <bfree>
+801019c4:	eb ea                	jmp    801019b0 <iput+0x120>
+801019c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801019cd:	8d 76 00             	lea    0x0(%esi),%esi
     brelse(bp);
-80102420:	83 ec 0c             	sub    $0xc,%esp
-80102423:	ff 75 e4             	pushl  -0x1c(%ebp)
-80102426:	8b 7d e0             	mov    -0x20(%ebp),%edi
-80102429:	e8 c2 dd ff ff       	call   801001f0 <brelse>
+801019d0:	83 ec 0c             	sub    $0xc,%esp
+801019d3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801019d6:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801019d9:	e8 12 e8 ff ff       	call   801001f0 <brelse>
     bfree(ip->dev, ip->addrs[NDIRECT]);
-8010242e:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
-80102434:	8b 03                	mov    (%ebx),%eax
-80102436:	e8 c5 f7 ff ff       	call   80101c00 <bfree>
+801019de:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
+801019e4:	8b 03                	mov    (%ebx),%eax
+801019e6:	e8 c5 f7 ff ff       	call   801011b0 <bfree>
     ip->addrs[NDIRECT] = 0;
-8010243b:	83 c4 10             	add    $0x10,%esp
-8010243e:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
-80102445:	00 00 00 
-80102448:	e9 58 ff ff ff       	jmp    801023a5 <iput+0xc5>
-8010244d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102450 <iunlockput>:
-{
-80102450:	f3 0f 1e fb          	endbr32 
-80102454:	55                   	push   %ebp
-80102455:	89 e5                	mov    %esp,%ebp
-80102457:	53                   	push   %ebx
-80102458:	83 ec 10             	sub    $0x10,%esp
-8010245b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801019eb:	83 c4 10             	add    $0x10,%esp
+801019ee:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
+801019f5:	00 00 00 
+801019f8:	e9 58 ff ff ff       	jmp    80101955 <iput+0xc5>
+801019fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80101a00 <iunlockput>:
+{
+80101a00:	f3 0f 1e fb          	endbr32 
+80101a04:	55                   	push   %ebp
+80101a05:	89 e5                	mov    %esp,%ebp
+80101a07:	53                   	push   %ebx
+80101a08:	83 ec 10             	sub    $0x10,%esp
+80101a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   iunlock(ip);
-8010245e:	53                   	push   %ebx
-8010245f:	e8 2c fe ff ff       	call   80102290 <iunlock>
+80101a0e:	53                   	push   %ebx
+80101a0f:	e8 2c fe ff ff       	call   80101840 <iunlock>
   iput(ip);
-80102464:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80102467:	83 c4 10             	add    $0x10,%esp
+80101a14:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80101a17:	83 c4 10             	add    $0x10,%esp
 }
-8010246a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010246d:	c9                   	leave  
+80101a1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80101a1d:	c9                   	leave  
   iput(ip);
-8010246e:	e9 6d fe ff ff       	jmp    801022e0 <iput>
-80102473:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010247a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101a1e:	e9 6d fe ff ff       	jmp    80101890 <iput>
+80101a23:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80102480 <stati>:
+80101a30 <stati>:
 
 // Copy stat information from inode.
 // Caller must hold ip->lock.
 void
 stati(struct inode *ip, struct stat *st)
 {
-80102480:	f3 0f 1e fb          	endbr32 
-80102484:	55                   	push   %ebp
-80102485:	89 e5                	mov    %esp,%ebp
-80102487:	8b 55 08             	mov    0x8(%ebp),%edx
-8010248a:	8b 45 0c             	mov    0xc(%ebp),%eax
+80101a30:	f3 0f 1e fb          	endbr32 
+80101a34:	55                   	push   %ebp
+80101a35:	89 e5                	mov    %esp,%ebp
+80101a37:	8b 55 08             	mov    0x8(%ebp),%edx
+80101a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   st->dev = ip->dev;
-8010248d:	8b 0a                	mov    (%edx),%ecx
-8010248f:	89 48 04             	mov    %ecx,0x4(%eax)
+80101a3d:	8b 0a                	mov    (%edx),%ecx
+80101a3f:	89 48 04             	mov    %ecx,0x4(%eax)
   st->ino = ip->inum;
-80102492:	8b 4a 04             	mov    0x4(%edx),%ecx
-80102495:	89 48 08             	mov    %ecx,0x8(%eax)
+80101a42:	8b 4a 04             	mov    0x4(%edx),%ecx
+80101a45:	89 48 08             	mov    %ecx,0x8(%eax)
   st->type = ip->type;
-80102498:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
-8010249c:	66 89 08             	mov    %cx,(%eax)
+80101a48:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
+80101a4c:	66 89 08             	mov    %cx,(%eax)
   st->nlink = ip->nlink;
-8010249f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
-801024a3:	66 89 48 0c          	mov    %cx,0xc(%eax)
+80101a4f:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
+80101a53:	66 89 48 0c          	mov    %cx,0xc(%eax)
   st->size = ip->size;
-801024a7:	8b 52 58             	mov    0x58(%edx),%edx
-801024aa:	89 50 10             	mov    %edx,0x10(%eax)
+80101a57:	8b 52 58             	mov    0x58(%edx),%edx
+80101a5a:	89 50 10             	mov    %edx,0x10(%eax)
 }
-801024ad:	5d                   	pop    %ebp
-801024ae:	c3                   	ret    
-801024af:	90                   	nop
+80101a5d:	5d                   	pop    %ebp
+80101a5e:	c3                   	ret    
+80101a5f:	90                   	nop
 
-801024b0 <readi>:
+80101a60 <readi>:
 //PAGEBREAK!
 // Read data from inode.
 // Caller must hold ip->lock.
 int
 readi(struct inode *ip, char *dst, uint off, uint n)
 {
-801024b0:	f3 0f 1e fb          	endbr32 
-801024b4:	55                   	push   %ebp
-801024b5:	89 e5                	mov    %esp,%ebp
-801024b7:	57                   	push   %edi
-801024b8:	56                   	push   %esi
-801024b9:	53                   	push   %ebx
-801024ba:	83 ec 1c             	sub    $0x1c,%esp
-801024bd:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801024c0:	8b 45 08             	mov    0x8(%ebp),%eax
-801024c3:	8b 75 10             	mov    0x10(%ebp),%esi
-801024c6:	89 7d e0             	mov    %edi,-0x20(%ebp)
-801024c9:	8b 7d 14             	mov    0x14(%ebp),%edi
+80101a60:	f3 0f 1e fb          	endbr32 
+80101a64:	55                   	push   %ebp
+80101a65:	89 e5                	mov    %esp,%ebp
+80101a67:	57                   	push   %edi
+80101a68:	56                   	push   %esi
+80101a69:	53                   	push   %ebx
+80101a6a:	83 ec 1c             	sub    $0x1c,%esp
+80101a6d:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80101a70:	8b 45 08             	mov    0x8(%ebp),%eax
+80101a73:	8b 75 10             	mov    0x10(%ebp),%esi
+80101a76:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101a79:	8b 7d 14             	mov    0x14(%ebp),%edi
   uint tot, m;
   struct buf *bp;
 
   if(ip->type == T_DEV){
-801024cc:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+80101a7c:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
 {
-801024d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801024d4:	89 7d e4             	mov    %edi,-0x1c(%ebp)
+80101a81:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101a84:	89 7d e4             	mov    %edi,-0x1c(%ebp)
   if(ip->type == T_DEV){
-801024d7:	0f 84 a3 00 00 00    	je     80102580 <readi+0xd0>
+80101a87:	0f 84 a3 00 00 00    	je     80101b30 <readi+0xd0>
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
       return -1;
     return devsw[ip->major].read(ip, dst, n);
   }
 
   if(off > ip->size || off + n < off)
-801024dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
-801024e0:	8b 40 58             	mov    0x58(%eax),%eax
-801024e3:	39 c6                	cmp    %eax,%esi
-801024e5:	0f 87 b6 00 00 00    	ja     801025a1 <readi+0xf1>
-801024eb:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-801024ee:	31 c9                	xor    %ecx,%ecx
-801024f0:	89 da                	mov    %ebx,%edx
-801024f2:	01 f2                	add    %esi,%edx
-801024f4:	0f 92 c1             	setb   %cl
-801024f7:	89 cf                	mov    %ecx,%edi
-801024f9:	0f 82 a2 00 00 00    	jb     801025a1 <readi+0xf1>
+80101a8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101a90:	8b 40 58             	mov    0x58(%eax),%eax
+80101a93:	39 c6                	cmp    %eax,%esi
+80101a95:	0f 87 b6 00 00 00    	ja     80101b51 <readi+0xf1>
+80101a9b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101a9e:	31 c9                	xor    %ecx,%ecx
+80101aa0:	89 da                	mov    %ebx,%edx
+80101aa2:	01 f2                	add    %esi,%edx
+80101aa4:	0f 92 c1             	setb   %cl
+80101aa7:	89 cf                	mov    %ecx,%edi
+80101aa9:	0f 82 a2 00 00 00    	jb     80101b51 <readi+0xf1>
     return -1;
   if(off + n > ip->size)
     n = ip->size - off;
-801024ff:	89 c1                	mov    %eax,%ecx
-80102501:	29 f1                	sub    %esi,%ecx
-80102503:	39 d0                	cmp    %edx,%eax
-80102505:	0f 43 cb             	cmovae %ebx,%ecx
-80102508:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101aaf:	89 c1                	mov    %eax,%ecx
+80101ab1:	29 f1                	sub    %esi,%ecx
+80101ab3:	39 d0                	cmp    %edx,%eax
+80101ab5:	0f 43 cb             	cmovae %ebx,%ecx
+80101ab8:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
 
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-8010250b:	85 c9                	test   %ecx,%ecx
-8010250d:	74 63                	je     80102572 <readi+0xc2>
-8010250f:	90                   	nop
+80101abb:	85 c9                	test   %ecx,%ecx
+80101abd:	74 63                	je     80101b22 <readi+0xc2>
+80101abf:	90                   	nop
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80102510:	8b 5d d8             	mov    -0x28(%ebp),%ebx
-80102513:	89 f2                	mov    %esi,%edx
-80102515:	c1 ea 09             	shr    $0x9,%edx
-80102518:	89 d8                	mov    %ebx,%eax
-8010251a:	e8 61 f9 ff ff       	call   80101e80 <bmap>
-8010251f:	83 ec 08             	sub    $0x8,%esp
-80102522:	50                   	push   %eax
-80102523:	ff 33                	pushl  (%ebx)
-80102525:	e8 a6 db ff ff       	call   801000d0 <bread>
+80101ac0:	8b 5d d8             	mov    -0x28(%ebp),%ebx
+80101ac3:	89 f2                	mov    %esi,%edx
+80101ac5:	c1 ea 09             	shr    $0x9,%edx
+80101ac8:	89 d8                	mov    %ebx,%eax
+80101aca:	e8 61 f9 ff ff       	call   80101430 <bmap>
+80101acf:	83 ec 08             	sub    $0x8,%esp
+80101ad2:	50                   	push   %eax
+80101ad3:	ff 33                	pushl  (%ebx)
+80101ad5:	e8 f6 e5 ff ff       	call   801000d0 <bread>
     m = min(n - tot, BSIZE - off%BSIZE);
-8010252a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-8010252d:	b9 00 02 00 00       	mov    $0x200,%ecx
-80102532:	83 c4 0c             	add    $0xc,%esp
+80101ada:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80101add:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101ae2:	83 c4 0c             	add    $0xc,%esp
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80102535:	89 c2                	mov    %eax,%edx
+80101ae5:	89 c2                	mov    %eax,%edx
     m = min(n - tot, BSIZE - off%BSIZE);
-80102537:	89 f0                	mov    %esi,%eax
-80102539:	25 ff 01 00 00       	and    $0x1ff,%eax
-8010253e:	29 fb                	sub    %edi,%ebx
+80101ae7:	89 f0                	mov    %esi,%eax
+80101ae9:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101aee:	29 fb                	sub    %edi,%ebx
     memmove(dst, bp->data + off%BSIZE, m);
-80102540:	89 55 dc             	mov    %edx,-0x24(%ebp)
+80101af0:	89 55 dc             	mov    %edx,-0x24(%ebp)
     m = min(n - tot, BSIZE - off%BSIZE);
-80102543:	29 c1                	sub    %eax,%ecx
+80101af3:	29 c1                	sub    %eax,%ecx
     memmove(dst, bp->data + off%BSIZE, m);
-80102545:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
+80101af5:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
     m = min(n - tot, BSIZE - off%BSIZE);
-80102549:	39 d9                	cmp    %ebx,%ecx
-8010254b:	0f 46 d9             	cmovbe %ecx,%ebx
+80101af9:	39 d9                	cmp    %ebx,%ecx
+80101afb:	0f 46 d9             	cmovbe %ecx,%ebx
     memmove(dst, bp->data + off%BSIZE, m);
-8010254e:	53                   	push   %ebx
+80101afe:	53                   	push   %ebx
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-8010254f:	01 df                	add    %ebx,%edi
-80102551:	01 de                	add    %ebx,%esi
+80101aff:	01 df                	add    %ebx,%edi
+80101b01:	01 de                	add    %ebx,%esi
     memmove(dst, bp->data + off%BSIZE, m);
-80102553:	50                   	push   %eax
-80102554:	ff 75 e0             	pushl  -0x20(%ebp)
-80102557:	e8 04 2c 00 00       	call   80105160 <memmove>
+80101b03:	50                   	push   %eax
+80101b04:	ff 75 e0             	pushl  -0x20(%ebp)
+80101b07:	e8 04 2c 00 00       	call   80104710 <memmove>
     brelse(bp);
-8010255c:	8b 55 dc             	mov    -0x24(%ebp),%edx
-8010255f:	89 14 24             	mov    %edx,(%esp)
-80102562:	e8 89 dc ff ff       	call   801001f0 <brelse>
+80101b0c:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80101b0f:	89 14 24             	mov    %edx,(%esp)
+80101b12:	e8 d9 e6 ff ff       	call   801001f0 <brelse>
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80102567:	01 5d e0             	add    %ebx,-0x20(%ebp)
-8010256a:	83 c4 10             	add    $0x10,%esp
-8010256d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80102570:	77 9e                	ja     80102510 <readi+0x60>
+80101b17:	01 5d e0             	add    %ebx,-0x20(%ebp)
+80101b1a:	83 c4 10             	add    $0x10,%esp
+80101b1d:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80101b20:	77 9e                	ja     80101ac0 <readi+0x60>
   }
   return n;
-80102572:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101b22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
 }
-80102575:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102578:	5b                   	pop    %ebx
-80102579:	5e                   	pop    %esi
-8010257a:	5f                   	pop    %edi
-8010257b:	5d                   	pop    %ebp
-8010257c:	c3                   	ret    
-8010257d:	8d 76 00             	lea    0x0(%esi),%esi
+80101b25:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b28:	5b                   	pop    %ebx
+80101b29:	5e                   	pop    %esi
+80101b2a:	5f                   	pop    %edi
+80101b2b:	5d                   	pop    %ebp
+80101b2c:	c3                   	ret    
+80101b2d:	8d 76 00             	lea    0x0(%esi),%esi
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-80102580:	0f bf 40 52          	movswl 0x52(%eax),%eax
-80102584:	66 83 f8 09          	cmp    $0x9,%ax
-80102588:	77 17                	ja     801025a1 <readi+0xf1>
-8010258a:	8b 04 c5 60 23 11 80 	mov    -0x7feedca0(,%eax,8),%eax
-80102591:	85 c0                	test   %eax,%eax
-80102593:	74 0c                	je     801025a1 <readi+0xf1>
+80101b30:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101b34:	66 83 f8 09          	cmp    $0x9,%ax
+80101b38:	77 17                	ja     80101b51 <readi+0xf1>
+80101b3a:	8b 04 c5 60 09 11 80 	mov    -0x7feef6a0(,%eax,8),%eax
+80101b41:	85 c0                	test   %eax,%eax
+80101b43:	74 0c                	je     80101b51 <readi+0xf1>
     return devsw[ip->major].read(ip, dst, n);
-80102595:	89 7d 10             	mov    %edi,0x10(%ebp)
+80101b45:	89 7d 10             	mov    %edi,0x10(%ebp)
 }
-80102598:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010259b:	5b                   	pop    %ebx
-8010259c:	5e                   	pop    %esi
-8010259d:	5f                   	pop    %edi
-8010259e:	5d                   	pop    %ebp
+80101b48:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101b4b:	5b                   	pop    %ebx
+80101b4c:	5e                   	pop    %esi
+80101b4d:	5f                   	pop    %edi
+80101b4e:	5d                   	pop    %ebp
     return devsw[ip->major].read(ip, dst, n);
-8010259f:	ff e0                	jmp    *%eax
+80101b4f:	ff e0                	jmp    *%eax
       return -1;
-801025a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801025a6:	eb cd                	jmp    80102575 <readi+0xc5>
-801025a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801025af:	90                   	nop
+80101b51:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101b56:	eb cd                	jmp    80101b25 <readi+0xc5>
+80101b58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101b5f:	90                   	nop
 
-801025b0 <writei>:
+80101b60 <writei>:
 // PAGEBREAK!
 // Write data to inode.
 // Caller must hold ip->lock.
 int
 writei(struct inode *ip, char *src, uint off, uint n)
 {
-801025b0:	f3 0f 1e fb          	endbr32 
-801025b4:	55                   	push   %ebp
-801025b5:	89 e5                	mov    %esp,%ebp
-801025b7:	57                   	push   %edi
-801025b8:	56                   	push   %esi
-801025b9:	53                   	push   %ebx
-801025ba:	83 ec 1c             	sub    $0x1c,%esp
-801025bd:	8b 45 08             	mov    0x8(%ebp),%eax
-801025c0:	8b 75 0c             	mov    0xc(%ebp),%esi
-801025c3:	8b 7d 14             	mov    0x14(%ebp),%edi
+80101b60:	f3 0f 1e fb          	endbr32 
+80101b64:	55                   	push   %ebp
+80101b65:	89 e5                	mov    %esp,%ebp
+80101b67:	57                   	push   %edi
+80101b68:	56                   	push   %esi
+80101b69:	53                   	push   %ebx
+80101b6a:	83 ec 1c             	sub    $0x1c,%esp
+80101b6d:	8b 45 08             	mov    0x8(%ebp),%eax
+80101b70:	8b 75 0c             	mov    0xc(%ebp),%esi
+80101b73:	8b 7d 14             	mov    0x14(%ebp),%edi
   uint tot, m;
   struct buf *bp;
 
   if(ip->type == T_DEV){
-801025c6:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
+80101b76:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
 {
-801025cb:	89 75 dc             	mov    %esi,-0x24(%ebp)
-801025ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801025d1:	8b 75 10             	mov    0x10(%ebp),%esi
-801025d4:	89 7d e0             	mov    %edi,-0x20(%ebp)
+80101b7b:	89 75 dc             	mov    %esi,-0x24(%ebp)
+80101b7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80101b81:	8b 75 10             	mov    0x10(%ebp),%esi
+80101b84:	89 7d e0             	mov    %edi,-0x20(%ebp)
   if(ip->type == T_DEV){
-801025d7:	0f 84 b3 00 00 00    	je     80102690 <writei+0xe0>
+80101b87:	0f 84 b3 00 00 00    	je     80101c40 <writei+0xe0>
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
       return -1;
     return devsw[ip->major].write(ip, src, n);
   }
 
   if(off > ip->size || off + n < off)
-801025dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
-801025e0:	39 70 58             	cmp    %esi,0x58(%eax)
-801025e3:	0f 82 e3 00 00 00    	jb     801026cc <writei+0x11c>
+80101b8d:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101b90:	39 70 58             	cmp    %esi,0x58(%eax)
+80101b93:	0f 82 e3 00 00 00    	jb     80101c7c <writei+0x11c>
     return -1;
   if(off + n > MAXFILE*BSIZE)
-801025e9:	8b 7d e0             	mov    -0x20(%ebp),%edi
-801025ec:	89 f8                	mov    %edi,%eax
-801025ee:	01 f0                	add    %esi,%eax
-801025f0:	0f 82 d6 00 00 00    	jb     801026cc <writei+0x11c>
-801025f6:	3d 00 18 01 00       	cmp    $0x11800,%eax
-801025fb:	0f 87 cb 00 00 00    	ja     801026cc <writei+0x11c>
+80101b99:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80101b9c:	89 f8                	mov    %edi,%eax
+80101b9e:	01 f0                	add    %esi,%eax
+80101ba0:	0f 82 d6 00 00 00    	jb     80101c7c <writei+0x11c>
+80101ba6:	3d 00 18 01 00       	cmp    $0x11800,%eax
+80101bab:	0f 87 cb 00 00 00    	ja     80101c7c <writei+0x11c>
     return -1;
 
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80102601:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80102608:	85 ff                	test   %edi,%edi
-8010260a:	74 75                	je     80102681 <writei+0xd1>
-8010260c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101bb1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80101bb8:	85 ff                	test   %edi,%edi
+80101bba:	74 75                	je     80101c31 <writei+0xd1>
+80101bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80102610:	8b 7d d8             	mov    -0x28(%ebp),%edi
-80102613:	89 f2                	mov    %esi,%edx
-80102615:	c1 ea 09             	shr    $0x9,%edx
-80102618:	89 f8                	mov    %edi,%eax
-8010261a:	e8 61 f8 ff ff       	call   80101e80 <bmap>
-8010261f:	83 ec 08             	sub    $0x8,%esp
-80102622:	50                   	push   %eax
-80102623:	ff 37                	pushl  (%edi)
-80102625:	e8 a6 da ff ff       	call   801000d0 <bread>
+80101bc0:	8b 7d d8             	mov    -0x28(%ebp),%edi
+80101bc3:	89 f2                	mov    %esi,%edx
+80101bc5:	c1 ea 09             	shr    $0x9,%edx
+80101bc8:	89 f8                	mov    %edi,%eax
+80101bca:	e8 61 f8 ff ff       	call   80101430 <bmap>
+80101bcf:	83 ec 08             	sub    $0x8,%esp
+80101bd2:	50                   	push   %eax
+80101bd3:	ff 37                	pushl  (%edi)
+80101bd5:	e8 f6 e4 ff ff       	call   801000d0 <bread>
     m = min(n - tot, BSIZE - off%BSIZE);
-8010262a:	b9 00 02 00 00       	mov    $0x200,%ecx
-8010262f:	8b 5d e0             	mov    -0x20(%ebp),%ebx
-80102632:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
+80101bda:	b9 00 02 00 00       	mov    $0x200,%ecx
+80101bdf:	8b 5d e0             	mov    -0x20(%ebp),%ebx
+80101be2:	2b 5d e4             	sub    -0x1c(%ebp),%ebx
     bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80102635:	89 c7                	mov    %eax,%edi
+80101be5:	89 c7                	mov    %eax,%edi
     m = min(n - tot, BSIZE - off%BSIZE);
-80102637:	89 f0                	mov    %esi,%eax
-80102639:	83 c4 0c             	add    $0xc,%esp
-8010263c:	25 ff 01 00 00       	and    $0x1ff,%eax
-80102641:	29 c1                	sub    %eax,%ecx
+80101be7:	89 f0                	mov    %esi,%eax
+80101be9:	83 c4 0c             	add    $0xc,%esp
+80101bec:	25 ff 01 00 00       	and    $0x1ff,%eax
+80101bf1:	29 c1                	sub    %eax,%ecx
     memmove(bp->data + off%BSIZE, src, m);
-80102643:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
+80101bf3:	8d 44 07 5c          	lea    0x5c(%edi,%eax,1),%eax
     m = min(n - tot, BSIZE - off%BSIZE);
-80102647:	39 d9                	cmp    %ebx,%ecx
-80102649:	0f 46 d9             	cmovbe %ecx,%ebx
+80101bf7:	39 d9                	cmp    %ebx,%ecx
+80101bf9:	0f 46 d9             	cmovbe %ecx,%ebx
     memmove(bp->data + off%BSIZE, src, m);
-8010264c:	53                   	push   %ebx
+80101bfc:	53                   	push   %ebx
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-8010264d:	01 de                	add    %ebx,%esi
+80101bfd:	01 de                	add    %ebx,%esi
     memmove(bp->data + off%BSIZE, src, m);
-8010264f:	ff 75 dc             	pushl  -0x24(%ebp)
-80102652:	50                   	push   %eax
-80102653:	e8 08 2b 00 00       	call   80105160 <memmove>
+80101bff:	ff 75 dc             	pushl  -0x24(%ebp)
+80101c02:	50                   	push   %eax
+80101c03:	e8 08 2b 00 00       	call   80104710 <memmove>
     log_write(bp);
-80102658:	89 3c 24             	mov    %edi,(%esp)
-8010265b:	e8 00 13 00 00       	call   80103960 <log_write>
+80101c08:	89 3c 24             	mov    %edi,(%esp)
+80101c0b:	e8 00 13 00 00       	call   80102f10 <log_write>
     brelse(bp);
-80102660:	89 3c 24             	mov    %edi,(%esp)
-80102663:	e8 88 db ff ff       	call   801001f0 <brelse>
+80101c10:	89 3c 24             	mov    %edi,(%esp)
+80101c13:	e8 d8 e5 ff ff       	call   801001f0 <brelse>
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80102668:	01 5d e4             	add    %ebx,-0x1c(%ebp)
-8010266b:	83 c4 10             	add    $0x10,%esp
-8010266e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80102671:	01 5d dc             	add    %ebx,-0x24(%ebp)
-80102674:	39 45 e0             	cmp    %eax,-0x20(%ebp)
-80102677:	77 97                	ja     80102610 <writei+0x60>
+80101c18:	01 5d e4             	add    %ebx,-0x1c(%ebp)
+80101c1b:	83 c4 10             	add    $0x10,%esp
+80101c1e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101c21:	01 5d dc             	add    %ebx,-0x24(%ebp)
+80101c24:	39 45 e0             	cmp    %eax,-0x20(%ebp)
+80101c27:	77 97                	ja     80101bc0 <writei+0x60>
   }
 
   if(n > 0 && off > ip->size){
-80102679:	8b 45 d8             	mov    -0x28(%ebp),%eax
-8010267c:	3b 70 58             	cmp    0x58(%eax),%esi
-8010267f:	77 37                	ja     801026b8 <writei+0x108>
+80101c29:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101c2c:	3b 70 58             	cmp    0x58(%eax),%esi
+80101c2f:	77 37                	ja     80101c68 <writei+0x108>
     ip->size = off;
     iupdate(ip);
   }
   return n;
-80102681:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101c31:	8b 45 e0             	mov    -0x20(%ebp),%eax
 }
-80102684:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102687:	5b                   	pop    %ebx
-80102688:	5e                   	pop    %esi
-80102689:	5f                   	pop    %edi
-8010268a:	5d                   	pop    %ebp
-8010268b:	c3                   	ret    
-8010268c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101c34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c37:	5b                   	pop    %ebx
+80101c38:	5e                   	pop    %esi
+80101c39:	5f                   	pop    %edi
+80101c3a:	5d                   	pop    %ebp
+80101c3b:	c3                   	ret    
+80101c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-80102690:	0f bf 40 52          	movswl 0x52(%eax),%eax
-80102694:	66 83 f8 09          	cmp    $0x9,%ax
-80102698:	77 32                	ja     801026cc <writei+0x11c>
-8010269a:	8b 04 c5 64 23 11 80 	mov    -0x7feedc9c(,%eax,8),%eax
-801026a1:	85 c0                	test   %eax,%eax
-801026a3:	74 27                	je     801026cc <writei+0x11c>
+80101c40:	0f bf 40 52          	movswl 0x52(%eax),%eax
+80101c44:	66 83 f8 09          	cmp    $0x9,%ax
+80101c48:	77 32                	ja     80101c7c <writei+0x11c>
+80101c4a:	8b 04 c5 64 09 11 80 	mov    -0x7feef69c(,%eax,8),%eax
+80101c51:	85 c0                	test   %eax,%eax
+80101c53:	74 27                	je     80101c7c <writei+0x11c>
     return devsw[ip->major].write(ip, src, n);
-801026a5:	89 7d 10             	mov    %edi,0x10(%ebp)
+80101c55:	89 7d 10             	mov    %edi,0x10(%ebp)
 }
-801026a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801026ab:	5b                   	pop    %ebx
-801026ac:	5e                   	pop    %esi
-801026ad:	5f                   	pop    %edi
-801026ae:	5d                   	pop    %ebp
+80101c58:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101c5b:	5b                   	pop    %ebx
+80101c5c:	5e                   	pop    %esi
+80101c5d:	5f                   	pop    %edi
+80101c5e:	5d                   	pop    %ebp
     return devsw[ip->major].write(ip, src, n);
-801026af:	ff e0                	jmp    *%eax
-801026b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c5f:	ff e0                	jmp    *%eax
+80101c61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     ip->size = off;
-801026b8:	8b 45 d8             	mov    -0x28(%ebp),%eax
+80101c68:	8b 45 d8             	mov    -0x28(%ebp),%eax
     iupdate(ip);
-801026bb:	83 ec 0c             	sub    $0xc,%esp
+80101c6b:	83 ec 0c             	sub    $0xc,%esp
     ip->size = off;
-801026be:	89 70 58             	mov    %esi,0x58(%eax)
+80101c6e:	89 70 58             	mov    %esi,0x58(%eax)
     iupdate(ip);
-801026c1:	50                   	push   %eax
-801026c2:	e8 29 fa ff ff       	call   801020f0 <iupdate>
-801026c7:	83 c4 10             	add    $0x10,%esp
-801026ca:	eb b5                	jmp    80102681 <writei+0xd1>
+80101c71:	50                   	push   %eax
+80101c72:	e8 29 fa ff ff       	call   801016a0 <iupdate>
+80101c77:	83 c4 10             	add    $0x10,%esp
+80101c7a:	eb b5                	jmp    80101c31 <writei+0xd1>
       return -1;
-801026cc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801026d1:	eb b1                	jmp    80102684 <writei+0xd4>
-801026d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801026da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80101c7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80101c81:	eb b1                	jmp    80101c34 <writei+0xd4>
+80101c83:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801026e0 <namecmp>:
+80101c90 <namecmp>:
 //PAGEBREAK!
 // Directories
 
 int
 namecmp(const char *s, const char *t)
 {
-801026e0:	f3 0f 1e fb          	endbr32 
-801026e4:	55                   	push   %ebp
-801026e5:	89 e5                	mov    %esp,%ebp
-801026e7:	83 ec 0c             	sub    $0xc,%esp
+80101c90:	f3 0f 1e fb          	endbr32 
+80101c94:	55                   	push   %ebp
+80101c95:	89 e5                	mov    %esp,%ebp
+80101c97:	83 ec 0c             	sub    $0xc,%esp
   return strncmp(s, t, DIRSIZ);
-801026ea:	6a 0e                	push   $0xe
-801026ec:	ff 75 0c             	pushl  0xc(%ebp)
-801026ef:	ff 75 08             	pushl  0x8(%ebp)
-801026f2:	e8 d9 2a 00 00       	call   801051d0 <strncmp>
-}
-801026f7:	c9                   	leave  
-801026f8:	c3                   	ret    
-801026f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101c9a:	6a 0e                	push   $0xe
+80101c9c:	ff 75 0c             	pushl  0xc(%ebp)
+80101c9f:	ff 75 08             	pushl  0x8(%ebp)
+80101ca2:	e8 d9 2a 00 00       	call   80104780 <strncmp>
+}
+80101ca7:	c9                   	leave  
+80101ca8:	c3                   	ret    
+80101ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80102700 <dirlookup>:
+80101cb0 <dirlookup>:
 
 // Look for a directory entry in a directory.
 // If found, set *poff to byte offset of entry.
 struct inode*
 dirlookup(struct inode *dp, char *name, uint *poff)
 {
-80102700:	f3 0f 1e fb          	endbr32 
-80102704:	55                   	push   %ebp
-80102705:	89 e5                	mov    %esp,%ebp
-80102707:	57                   	push   %edi
-80102708:	56                   	push   %esi
-80102709:	53                   	push   %ebx
-8010270a:	83 ec 1c             	sub    $0x1c,%esp
-8010270d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101cb0:	f3 0f 1e fb          	endbr32 
+80101cb4:	55                   	push   %ebp
+80101cb5:	89 e5                	mov    %esp,%ebp
+80101cb7:	57                   	push   %edi
+80101cb8:	56                   	push   %esi
+80101cb9:	53                   	push   %ebx
+80101cba:	83 ec 1c             	sub    $0x1c,%esp
+80101cbd:	8b 5d 08             	mov    0x8(%ebp),%ebx
   uint off, inum;
   struct dirent de;
 
   if(dp->type != T_DIR)
-80102710:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80102715:	0f 85 89 00 00 00    	jne    801027a4 <dirlookup+0xa4>
+80101cc0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80101cc5:	0f 85 89 00 00 00    	jne    80101d54 <dirlookup+0xa4>
     panic("dirlookup not DIR");
 
   for(off = 0; off < dp->size; off += sizeof(de)){
-8010271b:	8b 53 58             	mov    0x58(%ebx),%edx
-8010271e:	31 ff                	xor    %edi,%edi
-80102720:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80102723:	85 d2                	test   %edx,%edx
-80102725:	74 42                	je     80102769 <dirlookup+0x69>
-80102727:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010272e:	66 90                	xchg   %ax,%ax
+80101ccb:	8b 53 58             	mov    0x58(%ebx),%edx
+80101cce:	31 ff                	xor    %edi,%edi
+80101cd0:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101cd3:	85 d2                	test   %edx,%edx
+80101cd5:	74 42                	je     80101d19 <dirlookup+0x69>
+80101cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101cde:	66 90                	xchg   %ax,%ax
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102730:	6a 10                	push   $0x10
-80102732:	57                   	push   %edi
-80102733:	56                   	push   %esi
-80102734:	53                   	push   %ebx
-80102735:	e8 76 fd ff ff       	call   801024b0 <readi>
-8010273a:	83 c4 10             	add    $0x10,%esp
-8010273d:	83 f8 10             	cmp    $0x10,%eax
-80102740:	75 55                	jne    80102797 <dirlookup+0x97>
+80101ce0:	6a 10                	push   $0x10
+80101ce2:	57                   	push   %edi
+80101ce3:	56                   	push   %esi
+80101ce4:	53                   	push   %ebx
+80101ce5:	e8 76 fd ff ff       	call   80101a60 <readi>
+80101cea:	83 c4 10             	add    $0x10,%esp
+80101ced:	83 f8 10             	cmp    $0x10,%eax
+80101cf0:	75 55                	jne    80101d47 <dirlookup+0x97>
       panic("dirlookup read");
     if(de.inum == 0)
-80102742:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80102747:	74 18                	je     80102761 <dirlookup+0x61>
+80101cf2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101cf7:	74 18                	je     80101d11 <dirlookup+0x61>
   return strncmp(s, t, DIRSIZ);
-80102749:	83 ec 04             	sub    $0x4,%esp
-8010274c:	8d 45 da             	lea    -0x26(%ebp),%eax
-8010274f:	6a 0e                	push   $0xe
-80102751:	50                   	push   %eax
-80102752:	ff 75 0c             	pushl  0xc(%ebp)
-80102755:	e8 76 2a 00 00       	call   801051d0 <strncmp>
+80101cf9:	83 ec 04             	sub    $0x4,%esp
+80101cfc:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101cff:	6a 0e                	push   $0xe
+80101d01:	50                   	push   %eax
+80101d02:	ff 75 0c             	pushl  0xc(%ebp)
+80101d05:	e8 76 2a 00 00       	call   80104780 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
-8010275a:	83 c4 10             	add    $0x10,%esp
-8010275d:	85 c0                	test   %eax,%eax
-8010275f:	74 17                	je     80102778 <dirlookup+0x78>
+80101d0a:	83 c4 10             	add    $0x10,%esp
+80101d0d:	85 c0                	test   %eax,%eax
+80101d0f:	74 17                	je     80101d28 <dirlookup+0x78>
   for(off = 0; off < dp->size; off += sizeof(de)){
-80102761:	83 c7 10             	add    $0x10,%edi
-80102764:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80102767:	72 c7                	jb     80102730 <dirlookup+0x30>
+80101d11:	83 c7 10             	add    $0x10,%edi
+80101d14:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101d17:	72 c7                	jb     80101ce0 <dirlookup+0x30>
       return iget(dp->dev, inum);
     }
   }
 
   return 0;
 }
-80102769:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d19:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-8010276c:	31 c0                	xor    %eax,%eax
+80101d1c:	31 c0                	xor    %eax,%eax
 }
-8010276e:	5b                   	pop    %ebx
-8010276f:	5e                   	pop    %esi
-80102770:	5f                   	pop    %edi
-80102771:	5d                   	pop    %ebp
-80102772:	c3                   	ret    
-80102773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102777:	90                   	nop
+80101d1e:	5b                   	pop    %ebx
+80101d1f:	5e                   	pop    %esi
+80101d20:	5f                   	pop    %edi
+80101d21:	5d                   	pop    %ebp
+80101d22:	c3                   	ret    
+80101d23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101d27:	90                   	nop
       if(poff)
-80102778:	8b 45 10             	mov    0x10(%ebp),%eax
-8010277b:	85 c0                	test   %eax,%eax
-8010277d:	74 05                	je     80102784 <dirlookup+0x84>
+80101d28:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d2b:	85 c0                	test   %eax,%eax
+80101d2d:	74 05                	je     80101d34 <dirlookup+0x84>
         *poff = off;
-8010277f:	8b 45 10             	mov    0x10(%ebp),%eax
-80102782:	89 38                	mov    %edi,(%eax)
+80101d2f:	8b 45 10             	mov    0x10(%ebp),%eax
+80101d32:	89 38                	mov    %edi,(%eax)
       inum = de.inum;
-80102784:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
+80101d34:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
       return iget(dp->dev, inum);
-80102788:	8b 03                	mov    (%ebx),%eax
-8010278a:	e8 01 f6 ff ff       	call   80101d90 <iget>
+80101d38:	8b 03                	mov    (%ebx),%eax
+80101d3a:	e8 01 f6 ff ff       	call   80101340 <iget>
 }
-8010278f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102792:	5b                   	pop    %ebx
-80102793:	5e                   	pop    %esi
-80102794:	5f                   	pop    %edi
-80102795:	5d                   	pop    %ebp
-80102796:	c3                   	ret    
+80101d3f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101d42:	5b                   	pop    %ebx
+80101d43:	5e                   	pop    %esi
+80101d44:	5f                   	pop    %edi
+80101d45:	5d                   	pop    %ebp
+80101d46:	c3                   	ret    
       panic("dirlookup read");
-80102797:	83 ec 0c             	sub    $0xc,%esp
-8010279a:	68 11 7d 10 80       	push   $0x80107d11
-8010279f:	e8 ec db ff ff       	call   80100390 <panic>
+80101d47:	83 ec 0c             	sub    $0xc,%esp
+80101d4a:	68 39 72 10 80       	push   $0x80107239
+80101d4f:	e8 3c e6 ff ff       	call   80100390 <panic>
     panic("dirlookup not DIR");
-801027a4:	83 ec 0c             	sub    $0xc,%esp
-801027a7:	68 ff 7c 10 80       	push   $0x80107cff
-801027ac:	e8 df db ff ff       	call   80100390 <panic>
-801027b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801027b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801027bf:	90                   	nop
+80101d54:	83 ec 0c             	sub    $0xc,%esp
+80101d57:	68 27 72 10 80       	push   $0x80107227
+80101d5c:	e8 2f e6 ff ff       	call   80100390 <panic>
+80101d61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101d6f:	90                   	nop
 
-801027c0 <namex>:
+80101d70 <namex>:
 // If parent != 0, return the inode for the parent and copy the final
 // path element into name, which must have room for DIRSIZ bytes.
 // Must be called inside a transaction since it calls iput().
 static struct inode*
 namex(char *path, int nameiparent, char *name)
 {
-801027c0:	55                   	push   %ebp
-801027c1:	89 e5                	mov    %esp,%ebp
-801027c3:	57                   	push   %edi
-801027c4:	56                   	push   %esi
-801027c5:	53                   	push   %ebx
-801027c6:	89 c3                	mov    %eax,%ebx
-801027c8:	83 ec 1c             	sub    $0x1c,%esp
+80101d70:	55                   	push   %ebp
+80101d71:	89 e5                	mov    %esp,%ebp
+80101d73:	57                   	push   %edi
+80101d74:	56                   	push   %esi
+80101d75:	53                   	push   %ebx
+80101d76:	89 c3                	mov    %eax,%ebx
+80101d78:	83 ec 1c             	sub    $0x1c,%esp
   struct inode *ip, *next;
 
   if(*path == '/')
-801027cb:	80 38 2f             	cmpb   $0x2f,(%eax)
+80101d7b:	80 38 2f             	cmpb   $0x2f,(%eax)
 {
-801027ce:	89 55 e0             	mov    %edx,-0x20(%ebp)
-801027d1:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+80101d7e:	89 55 e0             	mov    %edx,-0x20(%ebp)
+80101d81:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
   if(*path == '/')
-801027d4:	0f 84 86 01 00 00    	je     80102960 <namex+0x1a0>
+80101d84:	0f 84 86 01 00 00    	je     80101f10 <namex+0x1a0>
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-801027da:	e8 d1 1b 00 00       	call   801043b0 <myproc>
+80101d8a:	e8 d1 1b 00 00       	call   80103960 <myproc>
   acquire(&icache.lock);
-801027df:	83 ec 0c             	sub    $0xc,%esp
-801027e2:	89 df                	mov    %ebx,%edi
+80101d8f:	83 ec 0c             	sub    $0xc,%esp
+80101d92:	89 df                	mov    %ebx,%edi
     ip = idup(myproc()->cwd);
-801027e4:	8b 70 68             	mov    0x68(%eax),%esi
+80101d94:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
-801027e7:	68 e0 23 11 80       	push   $0x801123e0
-801027ec:	e8 bf 27 00 00       	call   80104fb0 <acquire>
+80101d97:	68 e0 09 11 80       	push   $0x801109e0
+80101d9c:	e8 bf 27 00 00       	call   80104560 <acquire>
   ip->ref++;
-801027f1:	83 46 08 01          	addl   $0x1,0x8(%esi)
+80101da1:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
-801027f5:	c7 04 24 e0 23 11 80 	movl   $0x801123e0,(%esp)
-801027fc:	e8 6f 28 00 00       	call   80105070 <release>
-80102801:	83 c4 10             	add    $0x10,%esp
-80102804:	eb 0d                	jmp    80102813 <namex+0x53>
-80102806:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010280d:	8d 76 00             	lea    0x0(%esi),%esi
+80101da5:	c7 04 24 e0 09 11 80 	movl   $0x801109e0,(%esp)
+80101dac:	e8 6f 28 00 00       	call   80104620 <release>
+80101db1:	83 c4 10             	add    $0x10,%esp
+80101db4:	eb 0d                	jmp    80101dc3 <namex+0x53>
+80101db6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101dbd:	8d 76 00             	lea    0x0(%esi),%esi
     path++;
-80102810:	83 c7 01             	add    $0x1,%edi
+80101dc0:	83 c7 01             	add    $0x1,%edi
   while(*path == '/')
-80102813:	0f b6 07             	movzbl (%edi),%eax
-80102816:	3c 2f                	cmp    $0x2f,%al
-80102818:	74 f6                	je     80102810 <namex+0x50>
+80101dc3:	0f b6 07             	movzbl (%edi),%eax
+80101dc6:	3c 2f                	cmp    $0x2f,%al
+80101dc8:	74 f6                	je     80101dc0 <namex+0x50>
   if(*path == 0)
-8010281a:	84 c0                	test   %al,%al
-8010281c:	0f 84 ee 00 00 00    	je     80102910 <namex+0x150>
+80101dca:	84 c0                	test   %al,%al
+80101dcc:	0f 84 ee 00 00 00    	je     80101ec0 <namex+0x150>
   while(*path != '/' && *path != 0)
-80102822:	0f b6 07             	movzbl (%edi),%eax
-80102825:	84 c0                	test   %al,%al
-80102827:	0f 84 fb 00 00 00    	je     80102928 <namex+0x168>
-8010282d:	89 fb                	mov    %edi,%ebx
-8010282f:	3c 2f                	cmp    $0x2f,%al
-80102831:	0f 84 f1 00 00 00    	je     80102928 <namex+0x168>
-80102837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010283e:	66 90                	xchg   %ax,%ax
-80102840:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
+80101dd2:	0f b6 07             	movzbl (%edi),%eax
+80101dd5:	84 c0                	test   %al,%al
+80101dd7:	0f 84 fb 00 00 00    	je     80101ed8 <namex+0x168>
+80101ddd:	89 fb                	mov    %edi,%ebx
+80101ddf:	3c 2f                	cmp    $0x2f,%al
+80101de1:	0f 84 f1 00 00 00    	je     80101ed8 <namex+0x168>
+80101de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101dee:	66 90                	xchg   %ax,%ax
+80101df0:	0f b6 43 01          	movzbl 0x1(%ebx),%eax
     path++;
-80102844:	83 c3 01             	add    $0x1,%ebx
+80101df4:	83 c3 01             	add    $0x1,%ebx
   while(*path != '/' && *path != 0)
-80102847:	3c 2f                	cmp    $0x2f,%al
-80102849:	74 04                	je     8010284f <namex+0x8f>
-8010284b:	84 c0                	test   %al,%al
-8010284d:	75 f1                	jne    80102840 <namex+0x80>
+80101df7:	3c 2f                	cmp    $0x2f,%al
+80101df9:	74 04                	je     80101dff <namex+0x8f>
+80101dfb:	84 c0                	test   %al,%al
+80101dfd:	75 f1                	jne    80101df0 <namex+0x80>
   len = path - s;
-8010284f:	89 d8                	mov    %ebx,%eax
-80102851:	29 f8                	sub    %edi,%eax
+80101dff:	89 d8                	mov    %ebx,%eax
+80101e01:	29 f8                	sub    %edi,%eax
   if(len >= DIRSIZ)
-80102853:	83 f8 0d             	cmp    $0xd,%eax
-80102856:	0f 8e 84 00 00 00    	jle    801028e0 <namex+0x120>
+80101e03:	83 f8 0d             	cmp    $0xd,%eax
+80101e06:	0f 8e 84 00 00 00    	jle    80101e90 <namex+0x120>
     memmove(name, s, DIRSIZ);
-8010285c:	83 ec 04             	sub    $0x4,%esp
-8010285f:	6a 0e                	push   $0xe
-80102861:	57                   	push   %edi
+80101e0c:	83 ec 04             	sub    $0x4,%esp
+80101e0f:	6a 0e                	push   $0xe
+80101e11:	57                   	push   %edi
     path++;
-80102862:	89 df                	mov    %ebx,%edi
+80101e12:	89 df                	mov    %ebx,%edi
     memmove(name, s, DIRSIZ);
-80102864:	ff 75 e4             	pushl  -0x1c(%ebp)
-80102867:	e8 f4 28 00 00       	call   80105160 <memmove>
-8010286c:	83 c4 10             	add    $0x10,%esp
+80101e14:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101e17:	e8 f4 28 00 00       	call   80104710 <memmove>
+80101e1c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
-8010286f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
-80102872:	75 0c                	jne    80102880 <namex+0xc0>
-80102874:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101e1f:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+80101e22:	75 0c                	jne    80101e30 <namex+0xc0>
+80101e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     path++;
-80102878:	83 c7 01             	add    $0x1,%edi
+80101e28:	83 c7 01             	add    $0x1,%edi
   while(*path == '/')
-8010287b:	80 3f 2f             	cmpb   $0x2f,(%edi)
-8010287e:	74 f8                	je     80102878 <namex+0xb8>
+80101e2b:	80 3f 2f             	cmpb   $0x2f,(%edi)
+80101e2e:	74 f8                	je     80101e28 <namex+0xb8>
 
   while((path = skipelem(path, name)) != 0){
     ilock(ip);
-80102880:	83 ec 0c             	sub    $0xc,%esp
-80102883:	56                   	push   %esi
-80102884:	e8 27 f9 ff ff       	call   801021b0 <ilock>
+80101e30:	83 ec 0c             	sub    $0xc,%esp
+80101e33:	56                   	push   %esi
+80101e34:	e8 27 f9 ff ff       	call   80101760 <ilock>
     if(ip->type != T_DIR){
-80102889:	83 c4 10             	add    $0x10,%esp
-8010288c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80102891:	0f 85 a1 00 00 00    	jne    80102938 <namex+0x178>
+80101e39:	83 c4 10             	add    $0x10,%esp
+80101e3c:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80101e41:	0f 85 a1 00 00 00    	jne    80101ee8 <namex+0x178>
       iunlockput(ip);
       return 0;
     }
     if(nameiparent && *path == '\0'){
-80102897:	8b 55 e0             	mov    -0x20(%ebp),%edx
-8010289a:	85 d2                	test   %edx,%edx
-8010289c:	74 09                	je     801028a7 <namex+0xe7>
-8010289e:	80 3f 00             	cmpb   $0x0,(%edi)
-801028a1:	0f 84 d9 00 00 00    	je     80102980 <namex+0x1c0>
+80101e47:	8b 55 e0             	mov    -0x20(%ebp),%edx
+80101e4a:	85 d2                	test   %edx,%edx
+80101e4c:	74 09                	je     80101e57 <namex+0xe7>
+80101e4e:	80 3f 00             	cmpb   $0x0,(%edi)
+80101e51:	0f 84 d9 00 00 00    	je     80101f30 <namex+0x1c0>
       // Stop one level early.
       iunlock(ip);
       return ip;
     }
     if((next = dirlookup(ip, name, 0)) == 0){
-801028a7:	83 ec 04             	sub    $0x4,%esp
-801028aa:	6a 00                	push   $0x0
-801028ac:	ff 75 e4             	pushl  -0x1c(%ebp)
-801028af:	56                   	push   %esi
-801028b0:	e8 4b fe ff ff       	call   80102700 <dirlookup>
-801028b5:	83 c4 10             	add    $0x10,%esp
-801028b8:	89 c3                	mov    %eax,%ebx
-801028ba:	85 c0                	test   %eax,%eax
-801028bc:	74 7a                	je     80102938 <namex+0x178>
+80101e57:	83 ec 04             	sub    $0x4,%esp
+80101e5a:	6a 00                	push   $0x0
+80101e5c:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101e5f:	56                   	push   %esi
+80101e60:	e8 4b fe ff ff       	call   80101cb0 <dirlookup>
+80101e65:	83 c4 10             	add    $0x10,%esp
+80101e68:	89 c3                	mov    %eax,%ebx
+80101e6a:	85 c0                	test   %eax,%eax
+80101e6c:	74 7a                	je     80101ee8 <namex+0x178>
   iunlock(ip);
-801028be:	83 ec 0c             	sub    $0xc,%esp
-801028c1:	56                   	push   %esi
-801028c2:	e8 c9 f9 ff ff       	call   80102290 <iunlock>
+80101e6e:	83 ec 0c             	sub    $0xc,%esp
+80101e71:	56                   	push   %esi
+80101e72:	e8 c9 f9 ff ff       	call   80101840 <iunlock>
   iput(ip);
-801028c7:	89 34 24             	mov    %esi,(%esp)
-801028ca:	89 de                	mov    %ebx,%esi
-801028cc:	e8 0f fa ff ff       	call   801022e0 <iput>
-801028d1:	83 c4 10             	add    $0x10,%esp
-801028d4:	e9 3a ff ff ff       	jmp    80102813 <namex+0x53>
-801028d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801028e0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-801028e3:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
-801028e6:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+80101e77:	89 34 24             	mov    %esi,(%esp)
+80101e7a:	89 de                	mov    %ebx,%esi
+80101e7c:	e8 0f fa ff ff       	call   80101890 <iput>
+80101e81:	83 c4 10             	add    $0x10,%esp
+80101e84:	e9 3a ff ff ff       	jmp    80101dc3 <namex+0x53>
+80101e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101e90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80101e93:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
+80101e96:	89 4d dc             	mov    %ecx,-0x24(%ebp)
     memmove(name, s, len);
-801028e9:	83 ec 04             	sub    $0x4,%esp
-801028ec:	50                   	push   %eax
-801028ed:	57                   	push   %edi
+80101e99:	83 ec 04             	sub    $0x4,%esp
+80101e9c:	50                   	push   %eax
+80101e9d:	57                   	push   %edi
     name[len] = 0;
-801028ee:	89 df                	mov    %ebx,%edi
+80101e9e:	89 df                	mov    %ebx,%edi
     memmove(name, s, len);
-801028f0:	ff 75 e4             	pushl  -0x1c(%ebp)
-801028f3:	e8 68 28 00 00       	call   80105160 <memmove>
+80101ea0:	ff 75 e4             	pushl  -0x1c(%ebp)
+80101ea3:	e8 68 28 00 00       	call   80104710 <memmove>
     name[len] = 0;
-801028f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801028fb:	83 c4 10             	add    $0x10,%esp
-801028fe:	c6 00 00             	movb   $0x0,(%eax)
-80102901:	e9 69 ff ff ff       	jmp    8010286f <namex+0xaf>
-80102906:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010290d:	8d 76 00             	lea    0x0(%esi),%esi
+80101ea8:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80101eab:	83 c4 10             	add    $0x10,%esp
+80101eae:	c6 00 00             	movb   $0x0,(%eax)
+80101eb1:	e9 69 ff ff ff       	jmp    80101e1f <namex+0xaf>
+80101eb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101ebd:	8d 76 00             	lea    0x0(%esi),%esi
       return 0;
     }
     iunlockput(ip);
     ip = next;
   }
   if(nameiparent){
-80102910:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80102913:	85 c0                	test   %eax,%eax
-80102915:	0f 85 85 00 00 00    	jne    801029a0 <namex+0x1e0>
+80101ec0:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80101ec3:	85 c0                	test   %eax,%eax
+80101ec5:	0f 85 85 00 00 00    	jne    80101f50 <namex+0x1e0>
     iput(ip);
     return 0;
   }
   return ip;
 }
-8010291b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010291e:	89 f0                	mov    %esi,%eax
-80102920:	5b                   	pop    %ebx
-80102921:	5e                   	pop    %esi
-80102922:	5f                   	pop    %edi
-80102923:	5d                   	pop    %ebp
-80102924:	c3                   	ret    
-80102925:	8d 76 00             	lea    0x0(%esi),%esi
+80101ecb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ece:	89 f0                	mov    %esi,%eax
+80101ed0:	5b                   	pop    %ebx
+80101ed1:	5e                   	pop    %esi
+80101ed2:	5f                   	pop    %edi
+80101ed3:	5d                   	pop    %ebp
+80101ed4:	c3                   	ret    
+80101ed5:	8d 76 00             	lea    0x0(%esi),%esi
   while(*path != '/' && *path != 0)
-80102928:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-8010292b:	89 fb                	mov    %edi,%ebx
-8010292d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80102930:	31 c0                	xor    %eax,%eax
-80102932:	eb b5                	jmp    801028e9 <namex+0x129>
-80102934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101ed8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80101edb:	89 fb                	mov    %edi,%ebx
+80101edd:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80101ee0:	31 c0                	xor    %eax,%eax
+80101ee2:	eb b5                	jmp    80101e99 <namex+0x129>
+80101ee4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   iunlock(ip);
-80102938:	83 ec 0c             	sub    $0xc,%esp
-8010293b:	56                   	push   %esi
-8010293c:	e8 4f f9 ff ff       	call   80102290 <iunlock>
+80101ee8:	83 ec 0c             	sub    $0xc,%esp
+80101eeb:	56                   	push   %esi
+80101eec:	e8 4f f9 ff ff       	call   80101840 <iunlock>
   iput(ip);
-80102941:	89 34 24             	mov    %esi,(%esp)
+80101ef1:	89 34 24             	mov    %esi,(%esp)
       return 0;
-80102944:	31 f6                	xor    %esi,%esi
+80101ef4:	31 f6                	xor    %esi,%esi
   iput(ip);
-80102946:	e8 95 f9 ff ff       	call   801022e0 <iput>
+80101ef6:	e8 95 f9 ff ff       	call   80101890 <iput>
       return 0;
-8010294b:	83 c4 10             	add    $0x10,%esp
+80101efb:	83 c4 10             	add    $0x10,%esp
 }
-8010294e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102951:	89 f0                	mov    %esi,%eax
-80102953:	5b                   	pop    %ebx
-80102954:	5e                   	pop    %esi
-80102955:	5f                   	pop    %edi
-80102956:	5d                   	pop    %ebp
-80102957:	c3                   	ret    
-80102958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010295f:	90                   	nop
+80101efe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f01:	89 f0                	mov    %esi,%eax
+80101f03:	5b                   	pop    %ebx
+80101f04:	5e                   	pop    %esi
+80101f05:	5f                   	pop    %edi
+80101f06:	5d                   	pop    %ebp
+80101f07:	c3                   	ret    
+80101f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f0f:	90                   	nop
     ip = iget(ROOTDEV, ROOTINO);
-80102960:	ba 01 00 00 00       	mov    $0x1,%edx
-80102965:	b8 01 00 00 00       	mov    $0x1,%eax
-8010296a:	89 df                	mov    %ebx,%edi
-8010296c:	e8 1f f4 ff ff       	call   80101d90 <iget>
-80102971:	89 c6                	mov    %eax,%esi
-80102973:	e9 9b fe ff ff       	jmp    80102813 <namex+0x53>
-80102978:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010297f:	90                   	nop
+80101f10:	ba 01 00 00 00       	mov    $0x1,%edx
+80101f15:	b8 01 00 00 00       	mov    $0x1,%eax
+80101f1a:	89 df                	mov    %ebx,%edi
+80101f1c:	e8 1f f4 ff ff       	call   80101340 <iget>
+80101f21:	89 c6                	mov    %eax,%esi
+80101f23:	e9 9b fe ff ff       	jmp    80101dc3 <namex+0x53>
+80101f28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f2f:	90                   	nop
       iunlock(ip);
-80102980:	83 ec 0c             	sub    $0xc,%esp
-80102983:	56                   	push   %esi
-80102984:	e8 07 f9 ff ff       	call   80102290 <iunlock>
+80101f30:	83 ec 0c             	sub    $0xc,%esp
+80101f33:	56                   	push   %esi
+80101f34:	e8 07 f9 ff ff       	call   80101840 <iunlock>
       return ip;
-80102989:	83 c4 10             	add    $0x10,%esp
+80101f39:	83 c4 10             	add    $0x10,%esp
 }
-8010298c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010298f:	89 f0                	mov    %esi,%eax
-80102991:	5b                   	pop    %ebx
-80102992:	5e                   	pop    %esi
-80102993:	5f                   	pop    %edi
-80102994:	5d                   	pop    %ebp
-80102995:	c3                   	ret    
-80102996:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010299d:	8d 76 00             	lea    0x0(%esi),%esi
+80101f3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101f3f:	89 f0                	mov    %esi,%eax
+80101f41:	5b                   	pop    %ebx
+80101f42:	5e                   	pop    %esi
+80101f43:	5f                   	pop    %edi
+80101f44:	5d                   	pop    %ebp
+80101f45:	c3                   	ret    
+80101f46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f4d:	8d 76 00             	lea    0x0(%esi),%esi
     iput(ip);
-801029a0:	83 ec 0c             	sub    $0xc,%esp
-801029a3:	56                   	push   %esi
+80101f50:	83 ec 0c             	sub    $0xc,%esp
+80101f53:	56                   	push   %esi
     return 0;
-801029a4:	31 f6                	xor    %esi,%esi
+80101f54:	31 f6                	xor    %esi,%esi
     iput(ip);
-801029a6:	e8 35 f9 ff ff       	call   801022e0 <iput>
+80101f56:	e8 35 f9 ff ff       	call   80101890 <iput>
     return 0;
-801029ab:	83 c4 10             	add    $0x10,%esp
-801029ae:	e9 68 ff ff ff       	jmp    8010291b <namex+0x15b>
-801029b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801029ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801029c0 <dirlink>:
-{
-801029c0:	f3 0f 1e fb          	endbr32 
-801029c4:	55                   	push   %ebp
-801029c5:	89 e5                	mov    %esp,%ebp
-801029c7:	57                   	push   %edi
-801029c8:	56                   	push   %esi
-801029c9:	53                   	push   %ebx
-801029ca:	83 ec 20             	sub    $0x20,%esp
-801029cd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80101f5b:	83 c4 10             	add    $0x10,%esp
+80101f5e:	e9 68 ff ff ff       	jmp    80101ecb <namex+0x15b>
+80101f63:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80101f6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80101f70 <dirlink>:
+{
+80101f70:	f3 0f 1e fb          	endbr32 
+80101f74:	55                   	push   %ebp
+80101f75:	89 e5                	mov    %esp,%ebp
+80101f77:	57                   	push   %edi
+80101f78:	56                   	push   %esi
+80101f79:	53                   	push   %ebx
+80101f7a:	83 ec 20             	sub    $0x20,%esp
+80101f7d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if((ip = dirlookup(dp, name, 0)) != 0){
-801029d0:	6a 00                	push   $0x0
-801029d2:	ff 75 0c             	pushl  0xc(%ebp)
-801029d5:	53                   	push   %ebx
-801029d6:	e8 25 fd ff ff       	call   80102700 <dirlookup>
-801029db:	83 c4 10             	add    $0x10,%esp
-801029de:	85 c0                	test   %eax,%eax
-801029e0:	75 6b                	jne    80102a4d <dirlink+0x8d>
+80101f80:	6a 00                	push   $0x0
+80101f82:	ff 75 0c             	pushl  0xc(%ebp)
+80101f85:	53                   	push   %ebx
+80101f86:	e8 25 fd ff ff       	call   80101cb0 <dirlookup>
+80101f8b:	83 c4 10             	add    $0x10,%esp
+80101f8e:	85 c0                	test   %eax,%eax
+80101f90:	75 6b                	jne    80101ffd <dirlink+0x8d>
   for(off = 0; off < dp->size; off += sizeof(de)){
-801029e2:	8b 7b 58             	mov    0x58(%ebx),%edi
-801029e5:	8d 75 d8             	lea    -0x28(%ebp),%esi
-801029e8:	85 ff                	test   %edi,%edi
-801029ea:	74 2d                	je     80102a19 <dirlink+0x59>
-801029ec:	31 ff                	xor    %edi,%edi
-801029ee:	8d 75 d8             	lea    -0x28(%ebp),%esi
-801029f1:	eb 0d                	jmp    80102a00 <dirlink+0x40>
-801029f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801029f7:	90                   	nop
-801029f8:	83 c7 10             	add    $0x10,%edi
-801029fb:	3b 7b 58             	cmp    0x58(%ebx),%edi
-801029fe:	73 19                	jae    80102a19 <dirlink+0x59>
+80101f92:	8b 7b 58             	mov    0x58(%ebx),%edi
+80101f95:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101f98:	85 ff                	test   %edi,%edi
+80101f9a:	74 2d                	je     80101fc9 <dirlink+0x59>
+80101f9c:	31 ff                	xor    %edi,%edi
+80101f9e:	8d 75 d8             	lea    -0x28(%ebp),%esi
+80101fa1:	eb 0d                	jmp    80101fb0 <dirlink+0x40>
+80101fa3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80101fa7:	90                   	nop
+80101fa8:	83 c7 10             	add    $0x10,%edi
+80101fab:	3b 7b 58             	cmp    0x58(%ebx),%edi
+80101fae:	73 19                	jae    80101fc9 <dirlink+0x59>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102a00:	6a 10                	push   $0x10
-80102a02:	57                   	push   %edi
-80102a03:	56                   	push   %esi
-80102a04:	53                   	push   %ebx
-80102a05:	e8 a6 fa ff ff       	call   801024b0 <readi>
-80102a0a:	83 c4 10             	add    $0x10,%esp
-80102a0d:	83 f8 10             	cmp    $0x10,%eax
-80102a10:	75 4e                	jne    80102a60 <dirlink+0xa0>
+80101fb0:	6a 10                	push   $0x10
+80101fb2:	57                   	push   %edi
+80101fb3:	56                   	push   %esi
+80101fb4:	53                   	push   %ebx
+80101fb5:	e8 a6 fa ff ff       	call   80101a60 <readi>
+80101fba:	83 c4 10             	add    $0x10,%esp
+80101fbd:	83 f8 10             	cmp    $0x10,%eax
+80101fc0:	75 4e                	jne    80102010 <dirlink+0xa0>
     if(de.inum == 0)
-80102a12:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80102a17:	75 df                	jne    801029f8 <dirlink+0x38>
+80101fc2:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80101fc7:	75 df                	jne    80101fa8 <dirlink+0x38>
   strncpy(de.name, name, DIRSIZ);
-80102a19:	83 ec 04             	sub    $0x4,%esp
-80102a1c:	8d 45 da             	lea    -0x26(%ebp),%eax
-80102a1f:	6a 0e                	push   $0xe
-80102a21:	ff 75 0c             	pushl  0xc(%ebp)
-80102a24:	50                   	push   %eax
-80102a25:	e8 f6 27 00 00       	call   80105220 <strncpy>
+80101fc9:	83 ec 04             	sub    $0x4,%esp
+80101fcc:	8d 45 da             	lea    -0x26(%ebp),%eax
+80101fcf:	6a 0e                	push   $0xe
+80101fd1:	ff 75 0c             	pushl  0xc(%ebp)
+80101fd4:	50                   	push   %eax
+80101fd5:	e8 f6 27 00 00       	call   801047d0 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102a2a:	6a 10                	push   $0x10
+80101fda:	6a 10                	push   $0x10
   de.inum = inum;
-80102a2c:	8b 45 10             	mov    0x10(%ebp),%eax
+80101fdc:	8b 45 10             	mov    0x10(%ebp),%eax
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102a2f:	57                   	push   %edi
-80102a30:	56                   	push   %esi
-80102a31:	53                   	push   %ebx
+80101fdf:	57                   	push   %edi
+80101fe0:	56                   	push   %esi
+80101fe1:	53                   	push   %ebx
   de.inum = inum;
-80102a32:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
+80101fe2:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102a36:	e8 75 fb ff ff       	call   801025b0 <writei>
-80102a3b:	83 c4 20             	add    $0x20,%esp
-80102a3e:	83 f8 10             	cmp    $0x10,%eax
-80102a41:	75 2a                	jne    80102a6d <dirlink+0xad>
+80101fe6:	e8 75 fb ff ff       	call   80101b60 <writei>
+80101feb:	83 c4 20             	add    $0x20,%esp
+80101fee:	83 f8 10             	cmp    $0x10,%eax
+80101ff1:	75 2a                	jne    8010201d <dirlink+0xad>
   return 0;
-80102a43:	31 c0                	xor    %eax,%eax
+80101ff3:	31 c0                	xor    %eax,%eax
 }
-80102a45:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102a48:	5b                   	pop    %ebx
-80102a49:	5e                   	pop    %esi
-80102a4a:	5f                   	pop    %edi
-80102a4b:	5d                   	pop    %ebp
-80102a4c:	c3                   	ret    
+80101ff5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80101ff8:	5b                   	pop    %ebx
+80101ff9:	5e                   	pop    %esi
+80101ffa:	5f                   	pop    %edi
+80101ffb:	5d                   	pop    %ebp
+80101ffc:	c3                   	ret    
     iput(ip);
-80102a4d:	83 ec 0c             	sub    $0xc,%esp
-80102a50:	50                   	push   %eax
-80102a51:	e8 8a f8 ff ff       	call   801022e0 <iput>
-    return -1;
-80102a56:	83 c4 10             	add    $0x10,%esp
-80102a59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80102a5e:	eb e5                	jmp    80102a45 <dirlink+0x85>
+80101ffd:	83 ec 0c             	sub    $0xc,%esp
+80102000:	50                   	push   %eax
+80102001:	e8 8a f8 ff ff       	call   80101890 <iput>
+    return -1;
+80102006:	83 c4 10             	add    $0x10,%esp
+80102009:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010200e:	eb e5                	jmp    80101ff5 <dirlink+0x85>
       panic("dirlink read");
-80102a60:	83 ec 0c             	sub    $0xc,%esp
-80102a63:	68 20 7d 10 80       	push   $0x80107d20
-80102a68:	e8 23 d9 ff ff       	call   80100390 <panic>
+80102010:	83 ec 0c             	sub    $0xc,%esp
+80102013:	68 48 72 10 80       	push   $0x80107248
+80102018:	e8 73 e3 ff ff       	call   80100390 <panic>
     panic("dirlink");
-80102a6d:	83 ec 0c             	sub    $0xc,%esp
-80102a70:	68 02 83 10 80       	push   $0x80108302
-80102a75:	e8 16 d9 ff ff       	call   80100390 <panic>
-80102a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010201d:	83 ec 0c             	sub    $0xc,%esp
+80102020:	68 1e 78 10 80       	push   $0x8010781e
+80102025:	e8 66 e3 ff ff       	call   80100390 <panic>
+8010202a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80102a80 <namei>:
+80102030 <namei>:
 
 struct inode*
 namei(char *path)
 {
-80102a80:	f3 0f 1e fb          	endbr32 
-80102a84:	55                   	push   %ebp
+80102030:	f3 0f 1e fb          	endbr32 
+80102034:	55                   	push   %ebp
   char name[DIRSIZ];
   return namex(path, 0, name);
-80102a85:	31 d2                	xor    %edx,%edx
+80102035:	31 d2                	xor    %edx,%edx
 {
-80102a87:	89 e5                	mov    %esp,%ebp
-80102a89:	83 ec 18             	sub    $0x18,%esp
+80102037:	89 e5                	mov    %esp,%ebp
+80102039:	83 ec 18             	sub    $0x18,%esp
   return namex(path, 0, name);
-80102a8c:	8b 45 08             	mov    0x8(%ebp),%eax
-80102a8f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
-80102a92:	e8 29 fd ff ff       	call   801027c0 <namex>
-}
-80102a97:	c9                   	leave  
-80102a98:	c3                   	ret    
-80102a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010203c:	8b 45 08             	mov    0x8(%ebp),%eax
+8010203f:	8d 4d ea             	lea    -0x16(%ebp),%ecx
+80102042:	e8 29 fd ff ff       	call   80101d70 <namex>
+}
+80102047:	c9                   	leave  
+80102048:	c3                   	ret    
+80102049:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80102aa0 <nameiparent>:
+80102050 <nameiparent>:
 
 struct inode*
 nameiparent(char *path, char *name)
 {
-80102aa0:	f3 0f 1e fb          	endbr32 
-80102aa4:	55                   	push   %ebp
+80102050:	f3 0f 1e fb          	endbr32 
+80102054:	55                   	push   %ebp
   return namex(path, 1, name);
-80102aa5:	ba 01 00 00 00       	mov    $0x1,%edx
+80102055:	ba 01 00 00 00       	mov    $0x1,%edx
 {
-80102aaa:	89 e5                	mov    %esp,%ebp
+8010205a:	89 e5                	mov    %esp,%ebp
   return namex(path, 1, name);
-80102aac:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80102aaf:	8b 45 08             	mov    0x8(%ebp),%eax
+8010205c:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010205f:	8b 45 08             	mov    0x8(%ebp),%eax
 }
-80102ab2:	5d                   	pop    %ebp
+80102062:	5d                   	pop    %ebp
   return namex(path, 1, name);
-80102ab3:	e9 08 fd ff ff       	jmp    801027c0 <namex>
-80102ab8:	66 90                	xchg   %ax,%ax
-80102aba:	66 90                	xchg   %ax,%ax
-80102abc:	66 90                	xchg   %ax,%ax
-80102abe:	66 90                	xchg   %ax,%ax
+80102063:	e9 08 fd ff ff       	jmp    80101d70 <namex>
+80102068:	66 90                	xchg   %ax,%ax
+8010206a:	66 90                	xchg   %ax,%ax
+8010206c:	66 90                	xchg   %ax,%ax
+8010206e:	66 90                	xchg   %ax,%ax
 
-80102ac0 <idestart>:
+80102070 <idestart>:
 }
 
 // Start the request for b.  Caller must hold idelock.
 static void
 idestart(struct buf *b)
 {
-80102ac0:	55                   	push   %ebp
-80102ac1:	89 e5                	mov    %esp,%ebp
-80102ac3:	57                   	push   %edi
-80102ac4:	56                   	push   %esi
-80102ac5:	53                   	push   %ebx
-80102ac6:	83 ec 0c             	sub    $0xc,%esp
+80102070:	55                   	push   %ebp
+80102071:	89 e5                	mov    %esp,%ebp
+80102073:	57                   	push   %edi
+80102074:	56                   	push   %esi
+80102075:	53                   	push   %ebx
+80102076:	83 ec 0c             	sub    $0xc,%esp
   if(b == 0)
-80102ac9:	85 c0                	test   %eax,%eax
-80102acb:	0f 84 b4 00 00 00    	je     80102b85 <idestart+0xc5>
+80102079:	85 c0                	test   %eax,%eax
+8010207b:	0f 84 b4 00 00 00    	je     80102135 <idestart+0xc5>
     panic("idestart");
   if(b->blockno >= FSSIZE)
-80102ad1:	8b 70 08             	mov    0x8(%eax),%esi
-80102ad4:	89 c3                	mov    %eax,%ebx
-80102ad6:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
-80102adc:	0f 87 96 00 00 00    	ja     80102b78 <idestart+0xb8>
+80102081:	8b 70 08             	mov    0x8(%eax),%esi
+80102084:	89 c3                	mov    %eax,%ebx
+80102086:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
+8010208c:	0f 87 96 00 00 00    	ja     80102128 <idestart+0xb8>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102ae2:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
-80102ae7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102aee:	66 90                	xchg   %ax,%ax
-80102af0:	89 ca                	mov    %ecx,%edx
-80102af2:	ec                   	in     (%dx),%al
+80102092:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
+80102097:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010209e:	66 90                	xchg   %ax,%ax
+801020a0:	89 ca                	mov    %ecx,%edx
+801020a2:	ec                   	in     (%dx),%al
   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102af3:	83 e0 c0             	and    $0xffffffc0,%eax
-80102af6:	3c 40                	cmp    $0x40,%al
-80102af8:	75 f6                	jne    80102af0 <idestart+0x30>
+801020a3:	83 e0 c0             	and    $0xffffffc0,%eax
+801020a6:	3c 40                	cmp    $0x40,%al
+801020a8:	75 f6                	jne    801020a0 <idestart+0x30>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102afa:	31 ff                	xor    %edi,%edi
-80102afc:	ba f6 03 00 00       	mov    $0x3f6,%edx
-80102b01:	89 f8                	mov    %edi,%eax
-80102b03:	ee                   	out    %al,(%dx)
-80102b04:	b8 01 00 00 00       	mov    $0x1,%eax
-80102b09:	ba f2 01 00 00       	mov    $0x1f2,%edx
-80102b0e:	ee                   	out    %al,(%dx)
-80102b0f:	ba f3 01 00 00       	mov    $0x1f3,%edx
-80102b14:	89 f0                	mov    %esi,%eax
-80102b16:	ee                   	out    %al,(%dx)
+801020aa:	31 ff                	xor    %edi,%edi
+801020ac:	ba f6 03 00 00       	mov    $0x3f6,%edx
+801020b1:	89 f8                	mov    %edi,%eax
+801020b3:	ee                   	out    %al,(%dx)
+801020b4:	b8 01 00 00 00       	mov    $0x1,%eax
+801020b9:	ba f2 01 00 00       	mov    $0x1f2,%edx
+801020be:	ee                   	out    %al,(%dx)
+801020bf:	ba f3 01 00 00       	mov    $0x1f3,%edx
+801020c4:	89 f0                	mov    %esi,%eax
+801020c6:	ee                   	out    %al,(%dx)
 
   idewait(0);
   outb(0x3f6, 0);  // generate interrupt
   outb(0x1f2, sector_per_block);  // number of sectors
   outb(0x1f3, sector & 0xff);
   outb(0x1f4, (sector >> 8) & 0xff);
-80102b17:	89 f0                	mov    %esi,%eax
-80102b19:	ba f4 01 00 00       	mov    $0x1f4,%edx
-80102b1e:	c1 f8 08             	sar    $0x8,%eax
-80102b21:	ee                   	out    %al,(%dx)
-80102b22:	ba f5 01 00 00       	mov    $0x1f5,%edx
-80102b27:	89 f8                	mov    %edi,%eax
-80102b29:	ee                   	out    %al,(%dx)
+801020c7:	89 f0                	mov    %esi,%eax
+801020c9:	ba f4 01 00 00       	mov    $0x1f4,%edx
+801020ce:	c1 f8 08             	sar    $0x8,%eax
+801020d1:	ee                   	out    %al,(%dx)
+801020d2:	ba f5 01 00 00       	mov    $0x1f5,%edx
+801020d7:	89 f8                	mov    %edi,%eax
+801020d9:	ee                   	out    %al,(%dx)
   outb(0x1f5, (sector >> 16) & 0xff);
   outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
-80102b2a:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
-80102b2e:	ba f6 01 00 00       	mov    $0x1f6,%edx
-80102b33:	c1 e0 04             	shl    $0x4,%eax
-80102b36:	83 e0 10             	and    $0x10,%eax
-80102b39:	83 c8 e0             	or     $0xffffffe0,%eax
-80102b3c:	ee                   	out    %al,(%dx)
+801020da:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
+801020de:	ba f6 01 00 00       	mov    $0x1f6,%edx
+801020e3:	c1 e0 04             	shl    $0x4,%eax
+801020e6:	83 e0 10             	and    $0x10,%eax
+801020e9:	83 c8 e0             	or     $0xffffffe0,%eax
+801020ec:	ee                   	out    %al,(%dx)
   if(b->flags & B_DIRTY){
-80102b3d:	f6 03 04             	testb  $0x4,(%ebx)
-80102b40:	75 16                	jne    80102b58 <idestart+0x98>
-80102b42:	b8 20 00 00 00       	mov    $0x20,%eax
-80102b47:	89 ca                	mov    %ecx,%edx
-80102b49:	ee                   	out    %al,(%dx)
+801020ed:	f6 03 04             	testb  $0x4,(%ebx)
+801020f0:	75 16                	jne    80102108 <idestart+0x98>
+801020f2:	b8 20 00 00 00       	mov    $0x20,%eax
+801020f7:	89 ca                	mov    %ecx,%edx
+801020f9:	ee                   	out    %al,(%dx)
     outb(0x1f7, write_cmd);
     outsl(0x1f0, b->data, BSIZE/4);
   } else {
     outb(0x1f7, read_cmd);
   }
 }
-80102b4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102b4d:	5b                   	pop    %ebx
-80102b4e:	5e                   	pop    %esi
-80102b4f:	5f                   	pop    %edi
-80102b50:	5d                   	pop    %ebp
-80102b51:	c3                   	ret    
-80102b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80102b58:	b8 30 00 00 00       	mov    $0x30,%eax
-80102b5d:	89 ca                	mov    %ecx,%edx
-80102b5f:	ee                   	out    %al,(%dx)
+801020fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801020fd:	5b                   	pop    %ebx
+801020fe:	5e                   	pop    %esi
+801020ff:	5f                   	pop    %edi
+80102100:	5d                   	pop    %ebp
+80102101:	c3                   	ret    
+80102102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102108:	b8 30 00 00 00       	mov    $0x30,%eax
+8010210d:	89 ca                	mov    %ecx,%edx
+8010210f:	ee                   	out    %al,(%dx)
   asm volatile("cld; rep outsl" :
-80102b60:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102110:	b9 80 00 00 00       	mov    $0x80,%ecx
     outsl(0x1f0, b->data, BSIZE/4);
-80102b65:	8d 73 5c             	lea    0x5c(%ebx),%esi
-80102b68:	ba f0 01 00 00       	mov    $0x1f0,%edx
-80102b6d:	fc                   	cld    
-80102b6e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
-}
-80102b70:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102b73:	5b                   	pop    %ebx
-80102b74:	5e                   	pop    %esi
-80102b75:	5f                   	pop    %edi
-80102b76:	5d                   	pop    %ebp
-80102b77:	c3                   	ret    
+80102115:	8d 73 5c             	lea    0x5c(%ebx),%esi
+80102118:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010211d:	fc                   	cld    
+8010211e:	f3 6f                	rep outsl %ds:(%esi),(%dx)
+}
+80102120:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102123:	5b                   	pop    %ebx
+80102124:	5e                   	pop    %esi
+80102125:	5f                   	pop    %edi
+80102126:	5d                   	pop    %ebp
+80102127:	c3                   	ret    
     panic("incorrect blockno");
-80102b78:	83 ec 0c             	sub    $0xc,%esp
-80102b7b:	68 8c 7d 10 80       	push   $0x80107d8c
-80102b80:	e8 0b d8 ff ff       	call   80100390 <panic>
+80102128:	83 ec 0c             	sub    $0xc,%esp
+8010212b:	68 b4 72 10 80       	push   $0x801072b4
+80102130:	e8 5b e2 ff ff       	call   80100390 <panic>
     panic("idestart");
-80102b85:	83 ec 0c             	sub    $0xc,%esp
-80102b88:	68 83 7d 10 80       	push   $0x80107d83
-80102b8d:	e8 fe d7 ff ff       	call   80100390 <panic>
-80102b92:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102ba0 <ideinit>:
-{
-80102ba0:	f3 0f 1e fb          	endbr32 
-80102ba4:	55                   	push   %ebp
-80102ba5:	89 e5                	mov    %esp,%ebp
-80102ba7:	83 ec 10             	sub    $0x10,%esp
+80102135:	83 ec 0c             	sub    $0xc,%esp
+80102138:	68 ab 72 10 80       	push   $0x801072ab
+8010213d:	e8 4e e2 ff ff       	call   80100390 <panic>
+80102142:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80102150 <ideinit>:
+{
+80102150:	f3 0f 1e fb          	endbr32 
+80102154:	55                   	push   %ebp
+80102155:	89 e5                	mov    %esp,%ebp
+80102157:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-80102baa:	68 9e 7d 10 80       	push   $0x80107d9e
-80102baf:	68 80 b5 10 80       	push   $0x8010b580
-80102bb4:	e8 77 22 00 00       	call   80104e30 <initlock>
+8010215a:	68 c6 72 10 80       	push   $0x801072c6
+8010215f:	68 80 a5 10 80       	push   $0x8010a580
+80102164:	e8 77 22 00 00       	call   801043e0 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
-80102bb9:	58                   	pop    %eax
-80102bba:	a1 00 47 11 80       	mov    0x80114700,%eax
-80102bbf:	5a                   	pop    %edx
-80102bc0:	83 e8 01             	sub    $0x1,%eax
-80102bc3:	50                   	push   %eax
-80102bc4:	6a 0e                	push   $0xe
-80102bc6:	e8 b5 02 00 00       	call   80102e80 <ioapicenable>
+80102169:	58                   	pop    %eax
+8010216a:	a1 00 2d 11 80       	mov    0x80112d00,%eax
+8010216f:	5a                   	pop    %edx
+80102170:	83 e8 01             	sub    $0x1,%eax
+80102173:	50                   	push   %eax
+80102174:	6a 0e                	push   $0xe
+80102176:	e8 b5 02 00 00       	call   80102430 <ioapicenable>
   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102bcb:	83 c4 10             	add    $0x10,%esp
+8010217b:	83 c4 10             	add    $0x10,%esp
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102bce:	ba f7 01 00 00       	mov    $0x1f7,%edx
-80102bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102bd7:	90                   	nop
-80102bd8:	ec                   	in     (%dx),%al
-80102bd9:	83 e0 c0             	and    $0xffffffc0,%eax
-80102bdc:	3c 40                	cmp    $0x40,%al
-80102bde:	75 f8                	jne    80102bd8 <ideinit+0x38>
+8010217e:	ba f7 01 00 00       	mov    $0x1f7,%edx
+80102183:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102187:	90                   	nop
+80102188:	ec                   	in     (%dx),%al
+80102189:	83 e0 c0             	and    $0xffffffc0,%eax
+8010218c:	3c 40                	cmp    $0x40,%al
+8010218e:	75 f8                	jne    80102188 <ideinit+0x38>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102be0:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
-80102be5:	ba f6 01 00 00       	mov    $0x1f6,%edx
-80102bea:	ee                   	out    %al,(%dx)
-80102beb:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
+80102190:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
+80102195:	ba f6 01 00 00       	mov    $0x1f6,%edx
+8010219a:	ee                   	out    %al,(%dx)
+8010219b:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102bf0:	ba f7 01 00 00       	mov    $0x1f7,%edx
-80102bf5:	eb 0e                	jmp    80102c05 <ideinit+0x65>
-80102bf7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102bfe:	66 90                	xchg   %ax,%ax
+801021a0:	ba f7 01 00 00       	mov    $0x1f7,%edx
+801021a5:	eb 0e                	jmp    801021b5 <ideinit+0x65>
+801021a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021ae:	66 90                	xchg   %ax,%ax
   for(i=0; i<1000; i++){
-80102c00:	83 e9 01             	sub    $0x1,%ecx
-80102c03:	74 0f                	je     80102c14 <ideinit+0x74>
-80102c05:	ec                   	in     (%dx),%al
+801021b0:	83 e9 01             	sub    $0x1,%ecx
+801021b3:	74 0f                	je     801021c4 <ideinit+0x74>
+801021b5:	ec                   	in     (%dx),%al
     if(inb(0x1f7) != 0){
-80102c06:	84 c0                	test   %al,%al
-80102c08:	74 f6                	je     80102c00 <ideinit+0x60>
+801021b6:	84 c0                	test   %al,%al
+801021b8:	74 f6                	je     801021b0 <ideinit+0x60>
       havedisk1 = 1;
-80102c0a:	c7 05 60 b5 10 80 01 	movl   $0x1,0x8010b560
-80102c11:	00 00 00 
+801021ba:	c7 05 60 a5 10 80 01 	movl   $0x1,0x8010a560
+801021c1:	00 00 00 
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102c14:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
-80102c19:	ba f6 01 00 00       	mov    $0x1f6,%edx
-80102c1e:	ee                   	out    %al,(%dx)
-}
-80102c1f:	c9                   	leave  
-80102c20:	c3                   	ret    
-80102c21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102c28:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102c2f:	90                   	nop
+801021c4:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
+801021c9:	ba f6 01 00 00       	mov    $0x1f6,%edx
+801021ce:	ee                   	out    %al,(%dx)
+}
+801021cf:	c9                   	leave  
+801021d0:	c3                   	ret    
+801021d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801021df:	90                   	nop
 
-80102c30 <ideintr>:
+801021e0 <ideintr>:
 
 // Interrupt handler.
 void
 ideintr(void)
 {
-80102c30:	f3 0f 1e fb          	endbr32 
-80102c34:	55                   	push   %ebp
-80102c35:	89 e5                	mov    %esp,%ebp
-80102c37:	57                   	push   %edi
-80102c38:	56                   	push   %esi
-80102c39:	53                   	push   %ebx
-80102c3a:	83 ec 18             	sub    $0x18,%esp
+801021e0:	f3 0f 1e fb          	endbr32 
+801021e4:	55                   	push   %ebp
+801021e5:	89 e5                	mov    %esp,%ebp
+801021e7:	57                   	push   %edi
+801021e8:	56                   	push   %esi
+801021e9:	53                   	push   %ebx
+801021ea:	83 ec 18             	sub    $0x18,%esp
   struct buf *b;
 
   // First queued buffer is the active request.
   acquire(&idelock);
-80102c3d:	68 80 b5 10 80       	push   $0x8010b580
-80102c42:	e8 69 23 00 00       	call   80104fb0 <acquire>
+801021ed:	68 80 a5 10 80       	push   $0x8010a580
+801021f2:	e8 69 23 00 00       	call   80104560 <acquire>
 
   if((b = idequeue) == 0){
-80102c47:	8b 1d 64 b5 10 80    	mov    0x8010b564,%ebx
-80102c4d:	83 c4 10             	add    $0x10,%esp
-80102c50:	85 db                	test   %ebx,%ebx
-80102c52:	74 5f                	je     80102cb3 <ideintr+0x83>
+801021f7:	8b 1d 64 a5 10 80    	mov    0x8010a564,%ebx
+801021fd:	83 c4 10             	add    $0x10,%esp
+80102200:	85 db                	test   %ebx,%ebx
+80102202:	74 5f                	je     80102263 <ideintr+0x83>
     release(&idelock);
     return;
   }
   idequeue = b->qnext;
-80102c54:	8b 43 58             	mov    0x58(%ebx),%eax
-80102c57:	a3 64 b5 10 80       	mov    %eax,0x8010b564
+80102204:	8b 43 58             	mov    0x58(%ebx),%eax
+80102207:	a3 64 a5 10 80       	mov    %eax,0x8010a564
 
   // Read data if needed.
   if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-80102c5c:	8b 33                	mov    (%ebx),%esi
-80102c5e:	f7 c6 04 00 00 00    	test   $0x4,%esi
-80102c64:	75 2b                	jne    80102c91 <ideintr+0x61>
+8010220c:	8b 33                	mov    (%ebx),%esi
+8010220e:	f7 c6 04 00 00 00    	test   $0x4,%esi
+80102214:	75 2b                	jne    80102241 <ideintr+0x61>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102c66:	ba f7 01 00 00       	mov    $0x1f7,%edx
-80102c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102c6f:	90                   	nop
-80102c70:	ec                   	in     (%dx),%al
+80102216:	ba f7 01 00 00       	mov    $0x1f7,%edx
+8010221b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010221f:	90                   	nop
+80102220:	ec                   	in     (%dx),%al
   while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102c71:	89 c1                	mov    %eax,%ecx
-80102c73:	83 e1 c0             	and    $0xffffffc0,%ecx
-80102c76:	80 f9 40             	cmp    $0x40,%cl
-80102c79:	75 f5                	jne    80102c70 <ideintr+0x40>
+80102221:	89 c1                	mov    %eax,%ecx
+80102223:	83 e1 c0             	and    $0xffffffc0,%ecx
+80102226:	80 f9 40             	cmp    $0x40,%cl
+80102229:	75 f5                	jne    80102220 <ideintr+0x40>
   if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-80102c7b:	a8 21                	test   $0x21,%al
-80102c7d:	75 12                	jne    80102c91 <ideintr+0x61>
+8010222b:	a8 21                	test   $0x21,%al
+8010222d:	75 12                	jne    80102241 <ideintr+0x61>
     insl(0x1f0, b->data, BSIZE/4);
-80102c7f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
+8010222f:	8d 7b 5c             	lea    0x5c(%ebx),%edi
   asm volatile("cld; rep insl" :
-80102c82:	b9 80 00 00 00       	mov    $0x80,%ecx
-80102c87:	ba f0 01 00 00       	mov    $0x1f0,%edx
-80102c8c:	fc                   	cld    
-80102c8d:	f3 6d                	rep insl (%dx),%es:(%edi)
-80102c8f:	8b 33                	mov    (%ebx),%esi
+80102232:	b9 80 00 00 00       	mov    $0x80,%ecx
+80102237:	ba f0 01 00 00       	mov    $0x1f0,%edx
+8010223c:	fc                   	cld    
+8010223d:	f3 6d                	rep insl (%dx),%es:(%edi)
+8010223f:	8b 33                	mov    (%ebx),%esi
 
   // Wake process waiting for this buf.
   b->flags |= B_VALID;
   b->flags &= ~B_DIRTY;
-80102c91:	83 e6 fb             	and    $0xfffffffb,%esi
+80102241:	83 e6 fb             	and    $0xfffffffb,%esi
   wakeup(b);
-80102c94:	83 ec 0c             	sub    $0xc,%esp
+80102244:	83 ec 0c             	sub    $0xc,%esp
   b->flags &= ~B_DIRTY;
-80102c97:	83 ce 02             	or     $0x2,%esi
-80102c9a:	89 33                	mov    %esi,(%ebx)
+80102247:	83 ce 02             	or     $0x2,%esi
+8010224a:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
-80102c9c:	53                   	push   %ebx
-80102c9d:	e8 8e 1e 00 00       	call   80104b30 <wakeup>
+8010224c:	53                   	push   %ebx
+8010224d:	e8 8e 1e 00 00       	call   801040e0 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
-80102ca2:	a1 64 b5 10 80       	mov    0x8010b564,%eax
-80102ca7:	83 c4 10             	add    $0x10,%esp
-80102caa:	85 c0                	test   %eax,%eax
-80102cac:	74 05                	je     80102cb3 <ideintr+0x83>
+80102252:	a1 64 a5 10 80       	mov    0x8010a564,%eax
+80102257:	83 c4 10             	add    $0x10,%esp
+8010225a:	85 c0                	test   %eax,%eax
+8010225c:	74 05                	je     80102263 <ideintr+0x83>
     idestart(idequeue);
-80102cae:	e8 0d fe ff ff       	call   80102ac0 <idestart>
+8010225e:	e8 0d fe ff ff       	call   80102070 <idestart>
     release(&idelock);
-80102cb3:	83 ec 0c             	sub    $0xc,%esp
-80102cb6:	68 80 b5 10 80       	push   $0x8010b580
-80102cbb:	e8 b0 23 00 00       	call   80105070 <release>
+80102263:	83 ec 0c             	sub    $0xc,%esp
+80102266:	68 80 a5 10 80       	push   $0x8010a580
+8010226b:	e8 b0 23 00 00       	call   80104620 <release>
 
   release(&idelock);
 }
-80102cc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102cc3:	5b                   	pop    %ebx
-80102cc4:	5e                   	pop    %esi
-80102cc5:	5f                   	pop    %edi
-80102cc6:	5d                   	pop    %ebp
-80102cc7:	c3                   	ret    
-80102cc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102ccf:	90                   	nop
+80102270:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102273:	5b                   	pop    %ebx
+80102274:	5e                   	pop    %esi
+80102275:	5f                   	pop    %edi
+80102276:	5d                   	pop    %ebp
+80102277:	c3                   	ret    
+80102278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010227f:	90                   	nop
 
-80102cd0 <iderw>:
+80102280 <iderw>:
 // Sync buf with disk.
 // If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
 // Else if B_VALID is not set, read buf from disk, set B_VALID.
 void
 iderw(struct buf *b)
 {
-80102cd0:	f3 0f 1e fb          	endbr32 
-80102cd4:	55                   	push   %ebp
-80102cd5:	89 e5                	mov    %esp,%ebp
-80102cd7:	53                   	push   %ebx
-80102cd8:	83 ec 10             	sub    $0x10,%esp
-80102cdb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102280:	f3 0f 1e fb          	endbr32 
+80102284:	55                   	push   %ebp
+80102285:	89 e5                	mov    %esp,%ebp
+80102287:	53                   	push   %ebx
+80102288:	83 ec 10             	sub    $0x10,%esp
+8010228b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct buf **pp;
 
   if(!holdingsleep(&b->lock))
-80102cde:	8d 43 0c             	lea    0xc(%ebx),%eax
-80102ce1:	50                   	push   %eax
-80102ce2:	e8 e9 20 00 00       	call   80104dd0 <holdingsleep>
-80102ce7:	83 c4 10             	add    $0x10,%esp
-80102cea:	85 c0                	test   %eax,%eax
-80102cec:	0f 84 cf 00 00 00    	je     80102dc1 <iderw+0xf1>
+8010228e:	8d 43 0c             	lea    0xc(%ebx),%eax
+80102291:	50                   	push   %eax
+80102292:	e8 e9 20 00 00       	call   80104380 <holdingsleep>
+80102297:	83 c4 10             	add    $0x10,%esp
+8010229a:	85 c0                	test   %eax,%eax
+8010229c:	0f 84 cf 00 00 00    	je     80102371 <iderw+0xf1>
     panic("iderw: buf not locked");
   if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-80102cf2:	8b 03                	mov    (%ebx),%eax
-80102cf4:	83 e0 06             	and    $0x6,%eax
-80102cf7:	83 f8 02             	cmp    $0x2,%eax
-80102cfa:	0f 84 b4 00 00 00    	je     80102db4 <iderw+0xe4>
+801022a2:	8b 03                	mov    (%ebx),%eax
+801022a4:	83 e0 06             	and    $0x6,%eax
+801022a7:	83 f8 02             	cmp    $0x2,%eax
+801022aa:	0f 84 b4 00 00 00    	je     80102364 <iderw+0xe4>
     panic("iderw: nothing to do");
   if(b->dev != 0 && !havedisk1)
-80102d00:	8b 53 04             	mov    0x4(%ebx),%edx
-80102d03:	85 d2                	test   %edx,%edx
-80102d05:	74 0d                	je     80102d14 <iderw+0x44>
-80102d07:	a1 60 b5 10 80       	mov    0x8010b560,%eax
-80102d0c:	85 c0                	test   %eax,%eax
-80102d0e:	0f 84 93 00 00 00    	je     80102da7 <iderw+0xd7>
+801022b0:	8b 53 04             	mov    0x4(%ebx),%edx
+801022b3:	85 d2                	test   %edx,%edx
+801022b5:	74 0d                	je     801022c4 <iderw+0x44>
+801022b7:	a1 60 a5 10 80       	mov    0x8010a560,%eax
+801022bc:	85 c0                	test   %eax,%eax
+801022be:	0f 84 93 00 00 00    	je     80102357 <iderw+0xd7>
     panic("iderw: ide disk 1 not present");
 
   acquire(&idelock);  //DOC:acquire-lock
-80102d14:	83 ec 0c             	sub    $0xc,%esp
-80102d17:	68 80 b5 10 80       	push   $0x8010b580
-80102d1c:	e8 8f 22 00 00       	call   80104fb0 <acquire>
+801022c4:	83 ec 0c             	sub    $0xc,%esp
+801022c7:	68 80 a5 10 80       	push   $0x8010a580
+801022cc:	e8 8f 22 00 00       	call   80104560 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102d21:	a1 64 b5 10 80       	mov    0x8010b564,%eax
+801022d1:	a1 64 a5 10 80       	mov    0x8010a564,%eax
   b->qnext = 0;
-80102d26:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
+801022d6:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102d2d:	83 c4 10             	add    $0x10,%esp
-80102d30:	85 c0                	test   %eax,%eax
-80102d32:	74 6c                	je     80102da0 <iderw+0xd0>
-80102d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102d38:	89 c2                	mov    %eax,%edx
-80102d3a:	8b 40 58             	mov    0x58(%eax),%eax
-80102d3d:	85 c0                	test   %eax,%eax
-80102d3f:	75 f7                	jne    80102d38 <iderw+0x68>
-80102d41:	83 c2 58             	add    $0x58,%edx
+801022dd:	83 c4 10             	add    $0x10,%esp
+801022e0:	85 c0                	test   %eax,%eax
+801022e2:	74 6c                	je     80102350 <iderw+0xd0>
+801022e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801022e8:	89 c2                	mov    %eax,%edx
+801022ea:	8b 40 58             	mov    0x58(%eax),%eax
+801022ed:	85 c0                	test   %eax,%eax
+801022ef:	75 f7                	jne    801022e8 <iderw+0x68>
+801022f1:	83 c2 58             	add    $0x58,%edx
     ;
   *pp = b;
-80102d44:	89 1a                	mov    %ebx,(%edx)
+801022f4:	89 1a                	mov    %ebx,(%edx)
 
   // Start disk if necessary.
   if(idequeue == b)
-80102d46:	39 1d 64 b5 10 80    	cmp    %ebx,0x8010b564
-80102d4c:	74 42                	je     80102d90 <iderw+0xc0>
+801022f6:	39 1d 64 a5 10 80    	cmp    %ebx,0x8010a564
+801022fc:	74 42                	je     80102340 <iderw+0xc0>
     idestart(b);
 
   // Wait for request to finish.
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-80102d4e:	8b 03                	mov    (%ebx),%eax
-80102d50:	83 e0 06             	and    $0x6,%eax
-80102d53:	83 f8 02             	cmp    $0x2,%eax
-80102d56:	74 23                	je     80102d7b <iderw+0xab>
-80102d58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102d5f:	90                   	nop
+801022fe:	8b 03                	mov    (%ebx),%eax
+80102300:	83 e0 06             	and    $0x6,%eax
+80102303:	83 f8 02             	cmp    $0x2,%eax
+80102306:	74 23                	je     8010232b <iderw+0xab>
+80102308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010230f:	90                   	nop
     sleep(b, &idelock);
-80102d60:	83 ec 08             	sub    $0x8,%esp
-80102d63:	68 80 b5 10 80       	push   $0x8010b580
-80102d68:	53                   	push   %ebx
-80102d69:	e8 02 1c 00 00       	call   80104970 <sleep>
+80102310:	83 ec 08             	sub    $0x8,%esp
+80102313:	68 80 a5 10 80       	push   $0x8010a580
+80102318:	53                   	push   %ebx
+80102319:	e8 02 1c 00 00       	call   80103f20 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-80102d6e:	8b 03                	mov    (%ebx),%eax
-80102d70:	83 c4 10             	add    $0x10,%esp
-80102d73:	83 e0 06             	and    $0x6,%eax
-80102d76:	83 f8 02             	cmp    $0x2,%eax
-80102d79:	75 e5                	jne    80102d60 <iderw+0x90>
+8010231e:	8b 03                	mov    (%ebx),%eax
+80102320:	83 c4 10             	add    $0x10,%esp
+80102323:	83 e0 06             	and    $0x6,%eax
+80102326:	83 f8 02             	cmp    $0x2,%eax
+80102329:	75 e5                	jne    80102310 <iderw+0x90>
   }
 
 
   release(&idelock);
-80102d7b:	c7 45 08 80 b5 10 80 	movl   $0x8010b580,0x8(%ebp)
+8010232b:	c7 45 08 80 a5 10 80 	movl   $0x8010a580,0x8(%ebp)
 }
-80102d82:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102d85:	c9                   	leave  
+80102332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102335:	c9                   	leave  
   release(&idelock);
-80102d86:	e9 e5 22 00 00       	jmp    80105070 <release>
-80102d8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102d8f:	90                   	nop
+80102336:	e9 e5 22 00 00       	jmp    80104620 <release>
+8010233b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010233f:	90                   	nop
     idestart(b);
-80102d90:	89 d8                	mov    %ebx,%eax
-80102d92:	e8 29 fd ff ff       	call   80102ac0 <idestart>
-80102d97:	eb b5                	jmp    80102d4e <iderw+0x7e>
-80102d99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102340:	89 d8                	mov    %ebx,%eax
+80102342:	e8 29 fd ff ff       	call   80102070 <idestart>
+80102347:	eb b5                	jmp    801022fe <iderw+0x7e>
+80102349:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102da0:	ba 64 b5 10 80       	mov    $0x8010b564,%edx
-80102da5:	eb 9d                	jmp    80102d44 <iderw+0x74>
+80102350:	ba 64 a5 10 80       	mov    $0x8010a564,%edx
+80102355:	eb 9d                	jmp    801022f4 <iderw+0x74>
     panic("iderw: ide disk 1 not present");
-80102da7:	83 ec 0c             	sub    $0xc,%esp
-80102daa:	68 cd 7d 10 80       	push   $0x80107dcd
-80102daf:	e8 dc d5 ff ff       	call   80100390 <panic>
+80102357:	83 ec 0c             	sub    $0xc,%esp
+8010235a:	68 f5 72 10 80       	push   $0x801072f5
+8010235f:	e8 2c e0 ff ff       	call   80100390 <panic>
     panic("iderw: nothing to do");
-80102db4:	83 ec 0c             	sub    $0xc,%esp
-80102db7:	68 b8 7d 10 80       	push   $0x80107db8
-80102dbc:	e8 cf d5 ff ff       	call   80100390 <panic>
+80102364:	83 ec 0c             	sub    $0xc,%esp
+80102367:	68 e0 72 10 80       	push   $0x801072e0
+8010236c:	e8 1f e0 ff ff       	call   80100390 <panic>
     panic("iderw: buf not locked");
-80102dc1:	83 ec 0c             	sub    $0xc,%esp
-80102dc4:	68 a2 7d 10 80       	push   $0x80107da2
-80102dc9:	e8 c2 d5 ff ff       	call   80100390 <panic>
-80102dce:	66 90                	xchg   %ax,%ax
+80102371:	83 ec 0c             	sub    $0xc,%esp
+80102374:	68 ca 72 10 80       	push   $0x801072ca
+80102379:	e8 12 e0 ff ff       	call   80100390 <panic>
+8010237e:	66 90                	xchg   %ax,%ax
 
-80102dd0 <ioapicinit>:
+80102380 <ioapicinit>:
   ioapic->data = data;
 }
 
 void
 ioapicinit(void)
 {
-80102dd0:	f3 0f 1e fb          	endbr32 
-80102dd4:	55                   	push   %ebp
+80102380:	f3 0f 1e fb          	endbr32 
+80102384:	55                   	push   %ebp
   int i, id, maxintr;
 
   ioapic = (volatile struct ioapic*)IOAPIC;
-80102dd5:	c7 05 34 40 11 80 00 	movl   $0xfec00000,0x80114034
-80102ddc:	00 c0 fe 
+80102385:	c7 05 34 26 11 80 00 	movl   $0xfec00000,0x80112634
+8010238c:	00 c0 fe 
 {
-80102ddf:	89 e5                	mov    %esp,%ebp
-80102de1:	56                   	push   %esi
-80102de2:	53                   	push   %ebx
+8010238f:	89 e5                	mov    %esp,%ebp
+80102391:	56                   	push   %esi
+80102392:	53                   	push   %ebx
   ioapic->reg = reg;
-80102de3:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
-80102dea:	00 00 00 
+80102393:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
+8010239a:	00 00 00 
   return ioapic->data;
-80102ded:	8b 15 34 40 11 80    	mov    0x80114034,%edx
-80102df3:	8b 72 10             	mov    0x10(%edx),%esi
+8010239d:	8b 15 34 26 11 80    	mov    0x80112634,%edx
+801023a3:	8b 72 10             	mov    0x10(%edx),%esi
   ioapic->reg = reg;
-80102df6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
+801023a6:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
   return ioapic->data;
-80102dfc:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+801023ac:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
   id = ioapicread(REG_ID) >> 24;
   if(id != ioapicid)
-80102e02:	0f b6 15 60 41 11 80 	movzbl 0x80114160,%edx
+801023b2:	0f b6 15 60 27 11 80 	movzbl 0x80112760,%edx
   maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-80102e09:	c1 ee 10             	shr    $0x10,%esi
-80102e0c:	89 f0                	mov    %esi,%eax
-80102e0e:	0f b6 f0             	movzbl %al,%esi
+801023b9:	c1 ee 10             	shr    $0x10,%esi
+801023bc:	89 f0                	mov    %esi,%eax
+801023be:	0f b6 f0             	movzbl %al,%esi
   return ioapic->data;
-80102e11:	8b 41 10             	mov    0x10(%ecx),%eax
+801023c1:	8b 41 10             	mov    0x10(%ecx),%eax
   id = ioapicread(REG_ID) >> 24;
-80102e14:	c1 e8 18             	shr    $0x18,%eax
+801023c4:	c1 e8 18             	shr    $0x18,%eax
   if(id != ioapicid)
-80102e17:	39 c2                	cmp    %eax,%edx
-80102e19:	74 16                	je     80102e31 <ioapicinit+0x61>
+801023c7:	39 c2                	cmp    %eax,%edx
+801023c9:	74 16                	je     801023e1 <ioapicinit+0x61>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-80102e1b:	83 ec 0c             	sub    $0xc,%esp
-80102e1e:	68 ec 7d 10 80       	push   $0x80107dec
-80102e23:	e8 c8 d8 ff ff       	call   801006f0 <cprintf>
-80102e28:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
-80102e2e:	83 c4 10             	add    $0x10,%esp
-80102e31:	83 c6 21             	add    $0x21,%esi
-{
-80102e34:	ba 10 00 00 00       	mov    $0x10,%edx
-80102e39:	b8 20 00 00 00       	mov    $0x20,%eax
-80102e3e:	66 90                	xchg   %ax,%ax
+801023cb:	83 ec 0c             	sub    $0xc,%esp
+801023ce:	68 14 73 10 80       	push   $0x80107314
+801023d3:	e8 d8 e2 ff ff       	call   801006b0 <cprintf>
+801023d8:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023de:	83 c4 10             	add    $0x10,%esp
+801023e1:	83 c6 21             	add    $0x21,%esi
+{
+801023e4:	ba 10 00 00 00       	mov    $0x10,%edx
+801023e9:	b8 20 00 00 00       	mov    $0x20,%eax
+801023ee:	66 90                	xchg   %ax,%ax
   ioapic->reg = reg;
-80102e40:	89 11                	mov    %edx,(%ecx)
+801023f0:	89 11                	mov    %edx,(%ecx)
 
   // Mark all interrupts edge-triggered, active high, disabled,
   // and not routed to any CPUs.
   for(i = 0; i <= maxintr; i++){
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-80102e42:	89 c3                	mov    %eax,%ebx
+801023f2:	89 c3                	mov    %eax,%ebx
   ioapic->data = data;
-80102e44:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
-80102e4a:	83 c0 01             	add    $0x1,%eax
+801023f4:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+801023fa:	83 c0 01             	add    $0x1,%eax
     ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-80102e4d:	81 cb 00 00 01 00    	or     $0x10000,%ebx
+801023fd:	81 cb 00 00 01 00    	or     $0x10000,%ebx
   ioapic->data = data;
-80102e53:	89 59 10             	mov    %ebx,0x10(%ecx)
+80102403:	89 59 10             	mov    %ebx,0x10(%ecx)
   ioapic->reg = reg;
-80102e56:	8d 5a 01             	lea    0x1(%edx),%ebx
-80102e59:	83 c2 02             	add    $0x2,%edx
-80102e5c:	89 19                	mov    %ebx,(%ecx)
+80102406:	8d 5a 01             	lea    0x1(%edx),%ebx
+80102409:	83 c2 02             	add    $0x2,%edx
+8010240c:	89 19                	mov    %ebx,(%ecx)
   ioapic->data = data;
-80102e5e:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
-80102e64:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
+8010240e:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
+80102414:	c7 41 10 00 00 00 00 	movl   $0x0,0x10(%ecx)
   for(i = 0; i <= maxintr; i++){
-80102e6b:	39 f0                	cmp    %esi,%eax
-80102e6d:	75 d1                	jne    80102e40 <ioapicinit+0x70>
+8010241b:	39 f0                	cmp    %esi,%eax
+8010241d:	75 d1                	jne    801023f0 <ioapicinit+0x70>
     ioapicwrite(REG_TABLE+2*i+1, 0);
   }
 }
-80102e6f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102e72:	5b                   	pop    %ebx
-80102e73:	5e                   	pop    %esi
-80102e74:	5d                   	pop    %ebp
-80102e75:	c3                   	ret    
-80102e76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80102e7d:	8d 76 00             	lea    0x0(%esi),%esi
+8010241f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102422:	5b                   	pop    %ebx
+80102423:	5e                   	pop    %esi
+80102424:	5d                   	pop    %ebp
+80102425:	c3                   	ret    
+80102426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010242d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80102e80 <ioapicenable>:
+80102430 <ioapicenable>:
 
 void
 ioapicenable(int irq, int cpunum)
 {
-80102e80:	f3 0f 1e fb          	endbr32 
-80102e84:	55                   	push   %ebp
+80102430:	f3 0f 1e fb          	endbr32 
+80102434:	55                   	push   %ebp
   ioapic->reg = reg;
-80102e85:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+80102435:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
 {
-80102e8b:	89 e5                	mov    %esp,%ebp
-80102e8d:	8b 45 08             	mov    0x8(%ebp),%eax
+8010243b:	89 e5                	mov    %esp,%ebp
+8010243d:	8b 45 08             	mov    0x8(%ebp),%eax
   // Mark interrupt edge-triggered, active high,
   // enabled, and routed to the given cpunum,
   // which happens to be that cpu's APIC ID.
   ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-80102e90:	8d 50 20             	lea    0x20(%eax),%edx
-80102e93:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
+80102440:	8d 50 20             	lea    0x20(%eax),%edx
+80102443:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
   ioapic->reg = reg;
-80102e97:	89 01                	mov    %eax,(%ecx)
+80102447:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102e99:	8b 0d 34 40 11 80    	mov    0x80114034,%ecx
+80102449:	8b 0d 34 26 11 80    	mov    0x80112634,%ecx
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-80102e9f:	83 c0 01             	add    $0x1,%eax
+8010244f:	83 c0 01             	add    $0x1,%eax
   ioapic->data = data;
-80102ea2:	89 51 10             	mov    %edx,0x10(%ecx)
+80102452:	89 51 10             	mov    %edx,0x10(%ecx)
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-80102ea5:	8b 55 0c             	mov    0xc(%ebp),%edx
+80102455:	8b 55 0c             	mov    0xc(%ebp),%edx
   ioapic->reg = reg;
-80102ea8:	89 01                	mov    %eax,(%ecx)
+80102458:	89 01                	mov    %eax,(%ecx)
   ioapic->data = data;
-80102eaa:	a1 34 40 11 80       	mov    0x80114034,%eax
+8010245a:	a1 34 26 11 80       	mov    0x80112634,%eax
   ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-80102eaf:	c1 e2 18             	shl    $0x18,%edx
+8010245f:	c1 e2 18             	shl    $0x18,%edx
   ioapic->data = data;
-80102eb2:	89 50 10             	mov    %edx,0x10(%eax)
+80102462:	89 50 10             	mov    %edx,0x10(%eax)
 }
-80102eb5:	5d                   	pop    %ebp
-80102eb6:	c3                   	ret    
-80102eb7:	66 90                	xchg   %ax,%ax
-80102eb9:	66 90                	xchg   %ax,%ax
-80102ebb:	66 90                	xchg   %ax,%ax
-80102ebd:	66 90                	xchg   %ax,%ax
-80102ebf:	90                   	nop
+80102465:	5d                   	pop    %ebp
+80102466:	c3                   	ret    
+80102467:	66 90                	xchg   %ax,%ax
+80102469:	66 90                	xchg   %ax,%ax
+8010246b:	66 90                	xchg   %ax,%ax
+8010246d:	66 90                	xchg   %ax,%ax
+8010246f:	90                   	nop
 
-80102ec0 <kfree>:
+80102470 <kfree>:
 // which normally should have been returned by a
 // call to kalloc().  (The exception is when
 // initializing the allocator; see kinit above.)
 void
 kfree(char *v)
 {
-80102ec0:	f3 0f 1e fb          	endbr32 
-80102ec4:	55                   	push   %ebp
-80102ec5:	89 e5                	mov    %esp,%ebp
-80102ec7:	53                   	push   %ebx
-80102ec8:	83 ec 04             	sub    $0x4,%esp
-80102ecb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102470:	f3 0f 1e fb          	endbr32 
+80102474:	55                   	push   %ebp
+80102475:	89 e5                	mov    %esp,%ebp
+80102477:	53                   	push   %ebx
+80102478:	83 ec 04             	sub    $0x4,%esp
+8010247b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct run *r;
 
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
-80102ece:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
-80102ed4:	75 7a                	jne    80102f50 <kfree+0x90>
-80102ed6:	81 fb a8 6e 11 80    	cmp    $0x80116ea8,%ebx
-80102edc:	72 72                	jb     80102f50 <kfree+0x90>
-80102ede:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80102ee4:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102ee9:	77 65                	ja     80102f50 <kfree+0x90>
+8010247e:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
+80102484:	75 7a                	jne    80102500 <kfree+0x90>
+80102486:	81 fb a8 54 11 80    	cmp    $0x801154a8,%ebx
+8010248c:	72 72                	jb     80102500 <kfree+0x90>
+8010248e:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80102494:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
+80102499:	77 65                	ja     80102500 <kfree+0x90>
     panic("kfree");
 
   // Fill with junk to catch dangling refs.
   memset(v, 1, PGSIZE);
-80102eeb:	83 ec 04             	sub    $0x4,%esp
-80102eee:	68 00 10 00 00       	push   $0x1000
-80102ef3:	6a 01                	push   $0x1
-80102ef5:	53                   	push   %ebx
-80102ef6:	e8 c5 21 00 00       	call   801050c0 <memset>
+8010249b:	83 ec 04             	sub    $0x4,%esp
+8010249e:	68 00 10 00 00       	push   $0x1000
+801024a3:	6a 01                	push   $0x1
+801024a5:	53                   	push   %ebx
+801024a6:	e8 c5 21 00 00       	call   80104670 <memset>
 
   if(kmem.use_lock)
-80102efb:	8b 15 74 40 11 80    	mov    0x80114074,%edx
-80102f01:	83 c4 10             	add    $0x10,%esp
-80102f04:	85 d2                	test   %edx,%edx
-80102f06:	75 20                	jne    80102f28 <kfree+0x68>
+801024ab:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+801024b1:	83 c4 10             	add    $0x10,%esp
+801024b4:	85 d2                	test   %edx,%edx
+801024b6:	75 20                	jne    801024d8 <kfree+0x68>
     acquire(&kmem.lock);
   r = (struct run*)v;
   r->next = kmem.freelist;
-80102f08:	a1 78 40 11 80       	mov    0x80114078,%eax
-80102f0d:	89 03                	mov    %eax,(%ebx)
+801024b8:	a1 78 26 11 80       	mov    0x80112678,%eax
+801024bd:	89 03                	mov    %eax,(%ebx)
   kmem.freelist = r;
   if(kmem.use_lock)
-80102f0f:	a1 74 40 11 80       	mov    0x80114074,%eax
+801024bf:	a1 74 26 11 80       	mov    0x80112674,%eax
   kmem.freelist = r;
-80102f14:	89 1d 78 40 11 80    	mov    %ebx,0x80114078
+801024c4:	89 1d 78 26 11 80    	mov    %ebx,0x80112678
   if(kmem.use_lock)
-80102f1a:	85 c0                	test   %eax,%eax
-80102f1c:	75 22                	jne    80102f40 <kfree+0x80>
+801024ca:	85 c0                	test   %eax,%eax
+801024cc:	75 22                	jne    801024f0 <kfree+0x80>
     release(&kmem.lock);
 }
-80102f1e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102f21:	c9                   	leave  
-80102f22:	c3                   	ret    
-80102f23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102f27:	90                   	nop
+801024ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024d1:	c9                   	leave  
+801024d2:	c3                   	ret    
+801024d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801024d7:	90                   	nop
     acquire(&kmem.lock);
-80102f28:	83 ec 0c             	sub    $0xc,%esp
-80102f2b:	68 40 40 11 80       	push   $0x80114040
-80102f30:	e8 7b 20 00 00       	call   80104fb0 <acquire>
-80102f35:	83 c4 10             	add    $0x10,%esp
-80102f38:	eb ce                	jmp    80102f08 <kfree+0x48>
-80102f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801024d8:	83 ec 0c             	sub    $0xc,%esp
+801024db:	68 40 26 11 80       	push   $0x80112640
+801024e0:	e8 7b 20 00 00       	call   80104560 <acquire>
+801024e5:	83 c4 10             	add    $0x10,%esp
+801024e8:	eb ce                	jmp    801024b8 <kfree+0x48>
+801024ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     release(&kmem.lock);
-80102f40:	c7 45 08 40 40 11 80 	movl   $0x80114040,0x8(%ebp)
+801024f0:	c7 45 08 40 26 11 80 	movl   $0x80112640,0x8(%ebp)
 }
-80102f47:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102f4a:	c9                   	leave  
+801024f7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801024fa:	c9                   	leave  
     release(&kmem.lock);
-80102f4b:	e9 20 21 00 00       	jmp    80105070 <release>
+801024fb:	e9 20 21 00 00       	jmp    80104620 <release>
     panic("kfree");
-80102f50:	83 ec 0c             	sub    $0xc,%esp
-80102f53:	68 1e 7e 10 80       	push   $0x80107e1e
-80102f58:	e8 33 d4 ff ff       	call   80100390 <panic>
-80102f5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102f60 <freerange>:
-{
-80102f60:	f3 0f 1e fb          	endbr32 
-80102f64:	55                   	push   %ebp
-80102f65:	89 e5                	mov    %esp,%ebp
-80102f67:	56                   	push   %esi
+80102500:	83 ec 0c             	sub    $0xc,%esp
+80102503:	68 46 73 10 80       	push   $0x80107346
+80102508:	e8 83 de ff ff       	call   80100390 <panic>
+8010250d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80102510 <freerange>:
+{
+80102510:	f3 0f 1e fb          	endbr32 
+80102514:	55                   	push   %ebp
+80102515:	89 e5                	mov    %esp,%ebp
+80102517:	56                   	push   %esi
   p = (char*)PGROUNDUP((uint)vstart);
-80102f68:	8b 45 08             	mov    0x8(%ebp),%eax
+80102518:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80102f6b:	8b 75 0c             	mov    0xc(%ebp),%esi
-80102f6e:	53                   	push   %ebx
+8010251b:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010251e:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-80102f6f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102f75:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010251f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102525:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102f7b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80102f81:	39 de                	cmp    %ebx,%esi
-80102f83:	72 1f                	jb     80102fa4 <freerange+0x44>
-80102f85:	8d 76 00             	lea    0x0(%esi),%esi
+8010252b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102531:	39 de                	cmp    %ebx,%esi
+80102533:	72 1f                	jb     80102554 <freerange+0x44>
+80102535:	8d 76 00             	lea    0x0(%esi),%esi
     kfree(p);
-80102f88:	83 ec 0c             	sub    $0xc,%esp
-80102f8b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+80102538:	83 ec 0c             	sub    $0xc,%esp
+8010253b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102f91:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102541:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-80102f97:	50                   	push   %eax
-80102f98:	e8 23 ff ff ff       	call   80102ec0 <kfree>
+80102547:	50                   	push   %eax
+80102548:	e8 23 ff ff ff       	call   80102470 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102f9d:	83 c4 10             	add    $0x10,%esp
-80102fa0:	39 f3                	cmp    %esi,%ebx
-80102fa2:	76 e4                	jbe    80102f88 <freerange+0x28>
-}
-80102fa4:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102fa7:	5b                   	pop    %ebx
-80102fa8:	5e                   	pop    %esi
-80102fa9:	5d                   	pop    %ebp
-80102faa:	c3                   	ret    
-80102fab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102faf:	90                   	nop
-
-80102fb0 <kinit1>:
-{
-80102fb0:	f3 0f 1e fb          	endbr32 
-80102fb4:	55                   	push   %ebp
-80102fb5:	89 e5                	mov    %esp,%ebp
-80102fb7:	56                   	push   %esi
-80102fb8:	53                   	push   %ebx
-80102fb9:	8b 75 0c             	mov    0xc(%ebp),%esi
+8010254d:	83 c4 10             	add    $0x10,%esp
+80102550:	39 f3                	cmp    %esi,%ebx
+80102552:	76 e4                	jbe    80102538 <freerange+0x28>
+}
+80102554:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102557:	5b                   	pop    %ebx
+80102558:	5e                   	pop    %esi
+80102559:	5d                   	pop    %ebp
+8010255a:	c3                   	ret    
+8010255b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010255f:	90                   	nop
+
+80102560 <kinit1>:
+{
+80102560:	f3 0f 1e fb          	endbr32 
+80102564:	55                   	push   %ebp
+80102565:	89 e5                	mov    %esp,%ebp
+80102567:	56                   	push   %esi
+80102568:	53                   	push   %ebx
+80102569:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
-80102fbc:	83 ec 08             	sub    $0x8,%esp
-80102fbf:	68 24 7e 10 80       	push   $0x80107e24
-80102fc4:	68 40 40 11 80       	push   $0x80114040
-80102fc9:	e8 62 1e 00 00       	call   80104e30 <initlock>
+8010256c:	83 ec 08             	sub    $0x8,%esp
+8010256f:	68 4c 73 10 80       	push   $0x8010734c
+80102574:	68 40 26 11 80       	push   $0x80112640
+80102579:	e8 62 1e 00 00       	call   801043e0 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
-80102fce:	8b 45 08             	mov    0x8(%ebp),%eax
+8010257e:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102fd1:	83 c4 10             	add    $0x10,%esp
+80102581:	83 c4 10             	add    $0x10,%esp
   kmem.use_lock = 0;
-80102fd4:	c7 05 74 40 11 80 00 	movl   $0x0,0x80114074
-80102fdb:	00 00 00 
+80102584:	c7 05 74 26 11 80 00 	movl   $0x0,0x80112674
+8010258b:	00 00 00 
   p = (char*)PGROUNDUP((uint)vstart);
-80102fde:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102fe4:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+8010258e:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+80102594:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102fea:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80102ff0:	39 de                	cmp    %ebx,%esi
-80102ff2:	72 20                	jb     80103014 <kinit1+0x64>
-80102ff4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010259a:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025a0:	39 de                	cmp    %ebx,%esi
+801025a2:	72 20                	jb     801025c4 <kinit1+0x64>
+801025a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     kfree(p);
-80102ff8:	83 ec 0c             	sub    $0xc,%esp
-80102ffb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801025a8:	83 ec 0c             	sub    $0xc,%esp
+801025ab:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80103001:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-80103007:	50                   	push   %eax
-80103008:	e8 b3 fe ff ff       	call   80102ec0 <kfree>
+801025b7:	50                   	push   %eax
+801025b8:	e8 b3 fe ff ff       	call   80102470 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010300d:	83 c4 10             	add    $0x10,%esp
-80103010:	39 de                	cmp    %ebx,%esi
-80103012:	73 e4                	jae    80102ff8 <kinit1+0x48>
-}
-80103014:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103017:	5b                   	pop    %ebx
-80103018:	5e                   	pop    %esi
-80103019:	5d                   	pop    %ebp
-8010301a:	c3                   	ret    
-8010301b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010301f:	90                   	nop
-
-80103020 <kinit2>:
-{
-80103020:	f3 0f 1e fb          	endbr32 
-80103024:	55                   	push   %ebp
-80103025:	89 e5                	mov    %esp,%ebp
-80103027:	56                   	push   %esi
+801025bd:	83 c4 10             	add    $0x10,%esp
+801025c0:	39 de                	cmp    %ebx,%esi
+801025c2:	73 e4                	jae    801025a8 <kinit1+0x48>
+}
+801025c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801025c7:	5b                   	pop    %ebx
+801025c8:	5e                   	pop    %esi
+801025c9:	5d                   	pop    %ebp
+801025ca:	c3                   	ret    
+801025cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801025cf:	90                   	nop
+
+801025d0 <kinit2>:
+{
+801025d0:	f3 0f 1e fb          	endbr32 
+801025d4:	55                   	push   %ebp
+801025d5:	89 e5                	mov    %esp,%ebp
+801025d7:	56                   	push   %esi
   p = (char*)PGROUNDUP((uint)vstart);
-80103028:	8b 45 08             	mov    0x8(%ebp),%eax
+801025d8:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-8010302b:	8b 75 0c             	mov    0xc(%ebp),%esi
-8010302e:	53                   	push   %ebx
+801025db:	8b 75 0c             	mov    0xc(%ebp),%esi
+801025de:	53                   	push   %ebx
   p = (char*)PGROUNDUP((uint)vstart);
-8010302f:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80103035:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801025df:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
+801025e5:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010303b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80103041:	39 de                	cmp    %ebx,%esi
-80103043:	72 1f                	jb     80103064 <kinit2+0x44>
-80103045:	8d 76 00             	lea    0x0(%esi),%esi
+801025eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801025f1:	39 de                	cmp    %ebx,%esi
+801025f3:	72 1f                	jb     80102614 <kinit2+0x44>
+801025f5:	8d 76 00             	lea    0x0(%esi),%esi
     kfree(p);
-80103048:	83 ec 0c             	sub    $0xc,%esp
-8010304b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
+801025f8:	83 ec 0c             	sub    $0xc,%esp
+801025fb:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80103051:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80102601:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     kfree(p);
-80103057:	50                   	push   %eax
-80103058:	e8 63 fe ff ff       	call   80102ec0 <kfree>
+80102607:	50                   	push   %eax
+80102608:	e8 63 fe ff ff       	call   80102470 <kfree>
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010305d:	83 c4 10             	add    $0x10,%esp
-80103060:	39 de                	cmp    %ebx,%esi
-80103062:	73 e4                	jae    80103048 <kinit2+0x28>
+8010260d:	83 c4 10             	add    $0x10,%esp
+80102610:	39 de                	cmp    %ebx,%esi
+80102612:	73 e4                	jae    801025f8 <kinit2+0x28>
   kmem.use_lock = 1;
-80103064:	c7 05 74 40 11 80 01 	movl   $0x1,0x80114074
-8010306b:	00 00 00 
+80102614:	c7 05 74 26 11 80 01 	movl   $0x1,0x80112674
+8010261b:	00 00 00 
 }
-8010306e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103071:	5b                   	pop    %ebx
-80103072:	5e                   	pop    %esi
-80103073:	5d                   	pop    %ebp
-80103074:	c3                   	ret    
-80103075:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010307c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010261e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80102621:	5b                   	pop    %ebx
+80102622:	5e                   	pop    %esi
+80102623:	5d                   	pop    %ebp
+80102624:	c3                   	ret    
+80102625:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010262c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80103080 <kalloc>:
+80102630 <kalloc>:
 // Allocate one 4096-byte page of physical memory.
 // Returns a pointer that the kernel can use.
 // Returns 0 if the memory cannot be allocated.
 char*
 kalloc(void)
 {
-80103080:	f3 0f 1e fb          	endbr32 
+80102630:	f3 0f 1e fb          	endbr32 
   struct run *r;
 
   if(kmem.use_lock)
-80103084:	a1 74 40 11 80       	mov    0x80114074,%eax
-80103089:	85 c0                	test   %eax,%eax
-8010308b:	75 1b                	jne    801030a8 <kalloc+0x28>
+80102634:	a1 74 26 11 80       	mov    0x80112674,%eax
+80102639:	85 c0                	test   %eax,%eax
+8010263b:	75 1b                	jne    80102658 <kalloc+0x28>
     acquire(&kmem.lock);
   r = kmem.freelist;
-8010308d:	a1 78 40 11 80       	mov    0x80114078,%eax
+8010263d:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(r)
-80103092:	85 c0                	test   %eax,%eax
-80103094:	74 0a                	je     801030a0 <kalloc+0x20>
+80102642:	85 c0                	test   %eax,%eax
+80102644:	74 0a                	je     80102650 <kalloc+0x20>
     kmem.freelist = r->next;
-80103096:	8b 10                	mov    (%eax),%edx
-80103098:	89 15 78 40 11 80    	mov    %edx,0x80114078
+80102646:	8b 10                	mov    (%eax),%edx
+80102648:	89 15 78 26 11 80    	mov    %edx,0x80112678
   if(kmem.use_lock)
-8010309e:	c3                   	ret    
-8010309f:	90                   	nop
+8010264e:	c3                   	ret    
+8010264f:	90                   	nop
     release(&kmem.lock);
   return (char*)r;
 }
-801030a0:	c3                   	ret    
-801030a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102650:	c3                   	ret    
+80102651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 {
-801030a8:	55                   	push   %ebp
-801030a9:	89 e5                	mov    %esp,%ebp
-801030ab:	83 ec 24             	sub    $0x24,%esp
+80102658:	55                   	push   %ebp
+80102659:	89 e5                	mov    %esp,%ebp
+8010265b:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
-801030ae:	68 40 40 11 80       	push   $0x80114040
-801030b3:	e8 f8 1e 00 00       	call   80104fb0 <acquire>
+8010265e:	68 40 26 11 80       	push   $0x80112640
+80102663:	e8 f8 1e 00 00       	call   80104560 <acquire>
   r = kmem.freelist;
-801030b8:	a1 78 40 11 80       	mov    0x80114078,%eax
+80102668:	a1 78 26 11 80       	mov    0x80112678,%eax
   if(r)
-801030bd:	8b 15 74 40 11 80    	mov    0x80114074,%edx
-801030c3:	83 c4 10             	add    $0x10,%esp
-801030c6:	85 c0                	test   %eax,%eax
-801030c8:	74 08                	je     801030d2 <kalloc+0x52>
+8010266d:	8b 15 74 26 11 80    	mov    0x80112674,%edx
+80102673:	83 c4 10             	add    $0x10,%esp
+80102676:	85 c0                	test   %eax,%eax
+80102678:	74 08                	je     80102682 <kalloc+0x52>
     kmem.freelist = r->next;
-801030ca:	8b 08                	mov    (%eax),%ecx
-801030cc:	89 0d 78 40 11 80    	mov    %ecx,0x80114078
+8010267a:	8b 08                	mov    (%eax),%ecx
+8010267c:	89 0d 78 26 11 80    	mov    %ecx,0x80112678
   if(kmem.use_lock)
-801030d2:	85 d2                	test   %edx,%edx
-801030d4:	74 16                	je     801030ec <kalloc+0x6c>
+80102682:	85 d2                	test   %edx,%edx
+80102684:	74 16                	je     8010269c <kalloc+0x6c>
     release(&kmem.lock);
-801030d6:	83 ec 0c             	sub    $0xc,%esp
-801030d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
-801030dc:	68 40 40 11 80       	push   $0x80114040
-801030e1:	e8 8a 1f 00 00       	call   80105070 <release>
+80102686:	83 ec 0c             	sub    $0xc,%esp
+80102689:	89 45 f4             	mov    %eax,-0xc(%ebp)
+8010268c:	68 40 26 11 80       	push   $0x80112640
+80102691:	e8 8a 1f 00 00       	call   80104620 <release>
   return (char*)r;
-801030e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
+80102696:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
-801030e9:	83 c4 10             	add    $0x10,%esp
+80102699:	83 c4 10             	add    $0x10,%esp
 }
-801030ec:	c9                   	leave  
-801030ed:	c3                   	ret    
-801030ee:	66 90                	xchg   %ax,%ax
+8010269c:	c9                   	leave  
+8010269d:	c3                   	ret    
+8010269e:	66 90                	xchg   %ax,%ax
 
-801030f0 <kbdgetc>:
+801026a0 <kbdgetc>:
 #include "defs.h"
 #include "kbd.h"
 
 int
 kbdgetc(void)
 {
-801030f0:	f3 0f 1e fb          	endbr32 
+801026a0:	f3 0f 1e fb          	endbr32 
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801030f4:	ba 64 00 00 00       	mov    $0x64,%edx
-801030f9:	ec                   	in     (%dx),%al
+801026a4:	ba 64 00 00 00       	mov    $0x64,%edx
+801026a9:	ec                   	in     (%dx),%al
     normalmap, shiftmap, ctlmap, ctlmap
   };
   uint st, data, c;
 
   st = inb(KBSTATP);
   if((st & KBS_DIB) == 0)
-801030fa:	a8 01                	test   $0x1,%al
-801030fc:	0f 84 be 00 00 00    	je     801031c0 <kbdgetc+0xd0>
+801026aa:	a8 01                	test   $0x1,%al
+801026ac:	0f 84 be 00 00 00    	je     80102770 <kbdgetc+0xd0>
 {
-80103102:	55                   	push   %ebp
-80103103:	ba 60 00 00 00       	mov    $0x60,%edx
-80103108:	89 e5                	mov    %esp,%ebp
-8010310a:	53                   	push   %ebx
-8010310b:	ec                   	in     (%dx),%al
+801026b2:	55                   	push   %ebp
+801026b3:	ba 60 00 00 00       	mov    $0x60,%edx
+801026b8:	89 e5                	mov    %esp,%ebp
+801026ba:	53                   	push   %ebx
+801026bb:	ec                   	in     (%dx),%al
   return data;
-8010310c:	8b 1d b4 b5 10 80    	mov    0x8010b5b4,%ebx
+801026bc:	8b 1d b4 a5 10 80    	mov    0x8010a5b4,%ebx
     return -1;
   data = inb(KBDATAP);
-80103112:	0f b6 d0             	movzbl %al,%edx
+801026c2:	0f b6 d0             	movzbl %al,%edx
 
   if(data == 0xE0){
-80103115:	3c e0                	cmp    $0xe0,%al
-80103117:	74 57                	je     80103170 <kbdgetc+0x80>
+801026c5:	3c e0                	cmp    $0xe0,%al
+801026c7:	74 57                	je     80102720 <kbdgetc+0x80>
     shift |= E0ESC;
     return 0;
   } else if(data & 0x80){
-80103119:	89 d9                	mov    %ebx,%ecx
-8010311b:	83 e1 40             	and    $0x40,%ecx
-8010311e:	84 c0                	test   %al,%al
-80103120:	78 5e                	js     80103180 <kbdgetc+0x90>
+801026c9:	89 d9                	mov    %ebx,%ecx
+801026cb:	83 e1 40             	and    $0x40,%ecx
+801026ce:	84 c0                	test   %al,%al
+801026d0:	78 5e                	js     80102730 <kbdgetc+0x90>
     // Key released
     data = (shift & E0ESC ? data : data & 0x7F);
     shift &= ~(shiftcode[data] | E0ESC);
     return 0;
   } else if(shift & E0ESC){
-80103122:	85 c9                	test   %ecx,%ecx
-80103124:	74 09                	je     8010312f <kbdgetc+0x3f>
+801026d2:	85 c9                	test   %ecx,%ecx
+801026d4:	74 09                	je     801026df <kbdgetc+0x3f>
     // Last character was an E0 escape; or with 0x80
     data |= 0x80;
-80103126:	83 c8 80             	or     $0xffffff80,%eax
+801026d6:	83 c8 80             	or     $0xffffff80,%eax
     shift &= ~E0ESC;
-80103129:	83 e3 bf             	and    $0xffffffbf,%ebx
+801026d9:	83 e3 bf             	and    $0xffffffbf,%ebx
     data |= 0x80;
-8010312c:	0f b6 d0             	movzbl %al,%edx
+801026dc:	0f b6 d0             	movzbl %al,%edx
   }
 
   shift |= shiftcode[data];
-8010312f:	0f b6 8a 60 7f 10 80 	movzbl -0x7fef80a0(%edx),%ecx
+801026df:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
   shift ^= togglecode[data];
-80103136:	0f b6 82 60 7e 10 80 	movzbl -0x7fef81a0(%edx),%eax
+801026e6:	0f b6 82 80 73 10 80 	movzbl -0x7fef8c80(%edx),%eax
   shift |= shiftcode[data];
-8010313d:	09 d9                	or     %ebx,%ecx
+801026ed:	09 d9                	or     %ebx,%ecx
   shift ^= togglecode[data];
-8010313f:	31 c1                	xor    %eax,%ecx
+801026ef:	31 c1                	xor    %eax,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-80103141:	89 c8                	mov    %ecx,%eax
+801026f1:	89 c8                	mov    %ecx,%eax
   shift ^= togglecode[data];
-80103143:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+801026f3:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
   c = charcode[shift & (CTL | SHIFT)][data];
-80103149:	83 e0 03             	and    $0x3,%eax
+801026f9:	83 e0 03             	and    $0x3,%eax
   if(shift & CAPSLOCK){
-8010314c:	83 e1 08             	and    $0x8,%ecx
+801026fc:	83 e1 08             	and    $0x8,%ecx
   c = charcode[shift & (CTL | SHIFT)][data];
-8010314f:	8b 04 85 40 7e 10 80 	mov    -0x7fef81c0(,%eax,4),%eax
-80103156:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
+801026ff:	8b 04 85 60 73 10 80 	mov    -0x7fef8ca0(,%eax,4),%eax
+80102706:	0f b6 04 10          	movzbl (%eax,%edx,1),%eax
   if(shift & CAPSLOCK){
-8010315a:	74 0b                	je     80103167 <kbdgetc+0x77>
+8010270a:	74 0b                	je     80102717 <kbdgetc+0x77>
     if('a' <= c && c <= 'z')
-8010315c:	8d 50 9f             	lea    -0x61(%eax),%edx
-8010315f:	83 fa 19             	cmp    $0x19,%edx
-80103162:	77 44                	ja     801031a8 <kbdgetc+0xb8>
+8010270c:	8d 50 9f             	lea    -0x61(%eax),%edx
+8010270f:	83 fa 19             	cmp    $0x19,%edx
+80102712:	77 44                	ja     80102758 <kbdgetc+0xb8>
       c += 'A' - 'a';
-80103164:	83 e8 20             	sub    $0x20,%eax
+80102714:	83 e8 20             	sub    $0x20,%eax
     else if('A' <= c && c <= 'Z')
       c += 'a' - 'A';
   }
   return c;
 }
-80103167:	5b                   	pop    %ebx
-80103168:	5d                   	pop    %ebp
-80103169:	c3                   	ret    
-8010316a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102717:	5b                   	pop    %ebx
+80102718:	5d                   	pop    %ebp
+80102719:	c3                   	ret    
+8010271a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     shift |= E0ESC;
-80103170:	83 cb 40             	or     $0x40,%ebx
+80102720:	83 cb 40             	or     $0x40,%ebx
     return 0;
-80103173:	31 c0                	xor    %eax,%eax
+80102723:	31 c0                	xor    %eax,%eax
     shift |= E0ESC;
-80103175:	89 1d b4 b5 10 80    	mov    %ebx,0x8010b5b4
+80102725:	89 1d b4 a5 10 80    	mov    %ebx,0x8010a5b4
 }
-8010317b:	5b                   	pop    %ebx
-8010317c:	5d                   	pop    %ebp
-8010317d:	c3                   	ret    
-8010317e:	66 90                	xchg   %ax,%ax
+8010272b:	5b                   	pop    %ebx
+8010272c:	5d                   	pop    %ebp
+8010272d:	c3                   	ret    
+8010272e:	66 90                	xchg   %ax,%ax
     data = (shift & E0ESC ? data : data & 0x7F);
-80103180:	83 e0 7f             	and    $0x7f,%eax
-80103183:	85 c9                	test   %ecx,%ecx
-80103185:	0f 44 d0             	cmove  %eax,%edx
+80102730:	83 e0 7f             	and    $0x7f,%eax
+80102733:	85 c9                	test   %ecx,%ecx
+80102735:	0f 44 d0             	cmove  %eax,%edx
     return 0;
-80103188:	31 c0                	xor    %eax,%eax
+80102738:	31 c0                	xor    %eax,%eax
     shift &= ~(shiftcode[data] | E0ESC);
-8010318a:	0f b6 8a 60 7f 10 80 	movzbl -0x7fef80a0(%edx),%ecx
-80103191:	83 c9 40             	or     $0x40,%ecx
-80103194:	0f b6 c9             	movzbl %cl,%ecx
-80103197:	f7 d1                	not    %ecx
-80103199:	21 d9                	and    %ebx,%ecx
+8010273a:	0f b6 8a 80 74 10 80 	movzbl -0x7fef8b80(%edx),%ecx
+80102741:	83 c9 40             	or     $0x40,%ecx
+80102744:	0f b6 c9             	movzbl %cl,%ecx
+80102747:	f7 d1                	not    %ecx
+80102749:	21 d9                	and    %ebx,%ecx
 }
-8010319b:	5b                   	pop    %ebx
-8010319c:	5d                   	pop    %ebp
+8010274b:	5b                   	pop    %ebx
+8010274c:	5d                   	pop    %ebp
     shift &= ~(shiftcode[data] | E0ESC);
-8010319d:	89 0d b4 b5 10 80    	mov    %ecx,0x8010b5b4
+8010274d:	89 0d b4 a5 10 80    	mov    %ecx,0x8010a5b4
 }
-801031a3:	c3                   	ret    
-801031a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102753:	c3                   	ret    
+80102754:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     else if('A' <= c && c <= 'Z')
-801031a8:	8d 48 bf             	lea    -0x41(%eax),%ecx
+80102758:	8d 48 bf             	lea    -0x41(%eax),%ecx
       c += 'a' - 'A';
-801031ab:	8d 50 20             	lea    0x20(%eax),%edx
+8010275b:	8d 50 20             	lea    0x20(%eax),%edx
 }
-801031ae:	5b                   	pop    %ebx
-801031af:	5d                   	pop    %ebp
+8010275e:	5b                   	pop    %ebx
+8010275f:	5d                   	pop    %ebp
       c += 'a' - 'A';
-801031b0:	83 f9 1a             	cmp    $0x1a,%ecx
-801031b3:	0f 42 c2             	cmovb  %edx,%eax
+80102760:	83 f9 1a             	cmp    $0x1a,%ecx
+80102763:	0f 42 c2             	cmovb  %edx,%eax
 }
-801031b6:	c3                   	ret    
-801031b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801031be:	66 90                	xchg   %ax,%ax
+80102766:	c3                   	ret    
+80102767:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010276e:	66 90                	xchg   %ax,%ax
     return -1;
-801031c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80102770:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801031c5:	c3                   	ret    
-801031c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801031cd:	8d 76 00             	lea    0x0(%esi),%esi
+80102775:	c3                   	ret    
+80102776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010277d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801031d0 <kbdintr>:
+80102780 <kbdintr>:
 
 void
 kbdintr(void)
 {
-801031d0:	f3 0f 1e fb          	endbr32 
-801031d4:	55                   	push   %ebp
-801031d5:	89 e5                	mov    %esp,%ebp
-801031d7:	83 ec 14             	sub    $0x14,%esp
+80102780:	f3 0f 1e fb          	endbr32 
+80102784:	55                   	push   %ebp
+80102785:	89 e5                	mov    %esp,%ebp
+80102787:	83 ec 14             	sub    $0x14,%esp
   consoleintr(kbdgetc);
-801031da:	68 f0 30 10 80       	push   $0x801030f0
-801031df:	e8 fc da ff ff       	call   80100ce0 <consoleintr>
+8010278a:	68 a0 26 10 80       	push   $0x801026a0
+8010278f:	e8 cc e0 ff ff       	call   80100860 <consoleintr>
 }
-801031e4:	83 c4 10             	add    $0x10,%esp
-801031e7:	c9                   	leave  
-801031e8:	c3                   	ret    
-801031e9:	66 90                	xchg   %ax,%ax
-801031eb:	66 90                	xchg   %ax,%ax
-801031ed:	66 90                	xchg   %ax,%ax
-801031ef:	90                   	nop
+80102794:	83 c4 10             	add    $0x10,%esp
+80102797:	c9                   	leave  
+80102798:	c3                   	ret    
+80102799:	66 90                	xchg   %ax,%ax
+8010279b:	66 90                	xchg   %ax,%ax
+8010279d:	66 90                	xchg   %ax,%ax
+8010279f:	90                   	nop
 
-801031f0 <lapicinit>:
+801027a0 <lapicinit>:
   lapic[ID];  // wait for write to finish, by reading
 }
 
 void
 lapicinit(void)
 {
-801031f0:	f3 0f 1e fb          	endbr32 
+801027a0:	f3 0f 1e fb          	endbr32 
   if(!lapic)
-801031f4:	a1 7c 40 11 80       	mov    0x8011407c,%eax
-801031f9:	85 c0                	test   %eax,%eax
-801031fb:	0f 84 c7 00 00 00    	je     801032c8 <lapicinit+0xd8>
+801027a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801027a9:	85 c0                	test   %eax,%eax
+801027ab:	0f 84 c7 00 00 00    	je     80102878 <lapicinit+0xd8>
   lapic[index] = value;
-80103201:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
-80103208:	01 00 00 
+801027b1:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
+801027b8:	01 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010320b:	8b 50 20             	mov    0x20(%eax),%edx
+801027bb:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010320e:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
-80103215:	00 00 00 
+801027be:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
+801027c5:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80103218:	8b 50 20             	mov    0x20(%eax),%edx
+801027c8:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010321b:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
-80103222:	00 02 00 
+801027cb:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
+801027d2:	00 02 00 
   lapic[ID];  // wait for write to finish, by reading
-80103225:	8b 50 20             	mov    0x20(%eax),%edx
+801027d5:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103228:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
-8010322f:	96 98 00 
+801027d8:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
+801027df:	96 98 00 
   lapic[ID];  // wait for write to finish, by reading
-80103232:	8b 50 20             	mov    0x20(%eax),%edx
+801027e2:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103235:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
-8010323c:	00 01 00 
+801027e5:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
+801027ec:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010323f:	8b 50 20             	mov    0x20(%eax),%edx
+801027ef:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103242:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
-80103249:	00 01 00 
+801027f2:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
+801027f9:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-8010324c:	8b 50 20             	mov    0x20(%eax),%edx
+801027fc:	8b 50 20             	mov    0x20(%eax),%edx
   lapicw(LINT0, MASKED);
   lapicw(LINT1, MASKED);
 
   // Disable performance counter overflow interrupts
   // on machines that provide that interrupt entry.
   if(((lapic[VER]>>16) & 0xFF) >= 4)
-8010324f:	8b 50 30             	mov    0x30(%eax),%edx
-80103252:	c1 ea 10             	shr    $0x10,%edx
-80103255:	81 e2 fc 00 00 00    	and    $0xfc,%edx
-8010325b:	75 73                	jne    801032d0 <lapicinit+0xe0>
+801027ff:	8b 50 30             	mov    0x30(%eax),%edx
+80102802:	c1 ea 10             	shr    $0x10,%edx
+80102805:	81 e2 fc 00 00 00    	and    $0xfc,%edx
+8010280b:	75 73                	jne    80102880 <lapicinit+0xe0>
   lapic[index] = value;
-8010325d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
-80103264:	00 00 00 
+8010280d:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
+80102814:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80103267:	8b 50 20             	mov    0x20(%eax),%edx
+80102817:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010326a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-80103271:	00 00 00 
+8010281a:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+80102821:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80103274:	8b 50 20             	mov    0x20(%eax),%edx
+80102824:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103277:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-8010327e:	00 00 00 
+80102827:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
+8010282e:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80103281:	8b 50 20             	mov    0x20(%eax),%edx
+80102831:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103284:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-8010328b:	00 00 00 
+80102834:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+8010283b:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010328e:	8b 50 20             	mov    0x20(%eax),%edx
+8010283e:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-80103291:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
-80103298:	00 00 00 
+80102841:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
+80102848:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010329b:	8b 50 20             	mov    0x20(%eax),%edx
+8010284b:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-8010329e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
-801032a5:	85 08 00 
+8010284e:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
+80102855:	85 08 00 
   lapic[ID];  // wait for write to finish, by reading
-801032a8:	8b 50 20             	mov    0x20(%eax),%edx
-801032ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801032af:	90                   	nop
+80102858:	8b 50 20             	mov    0x20(%eax),%edx
+8010285b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010285f:	90                   	nop
   lapicw(EOI, 0);
 
   // Send an Init Level De-Assert to synchronise arbitration ID's.
   lapicw(ICRHI, 0);
   lapicw(ICRLO, BCAST | INIT | LEVEL);
   while(lapic[ICRLO] & DELIVS)
-801032b0:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
-801032b6:	80 e6 10             	and    $0x10,%dh
-801032b9:	75 f5                	jne    801032b0 <lapicinit+0xc0>
+80102860:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
+80102866:	80 e6 10             	and    $0x10,%dh
+80102869:	75 f5                	jne    80102860 <lapicinit+0xc0>
   lapic[index] = value;
-801032bb:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
-801032c2:	00 00 00 
+8010286b:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
+80102872:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801032c5:	8b 40 20             	mov    0x20(%eax),%eax
+80102875:	8b 40 20             	mov    0x20(%eax),%eax
     ;
 
   // Enable interrupts on the APIC (but not on the processor).
   lapicw(TPR, 0);
 }
-801032c8:	c3                   	ret    
-801032c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102878:	c3                   	ret    
+80102879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   lapic[index] = value;
-801032d0:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
-801032d7:	00 01 00 
+80102880:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
+80102887:	00 01 00 
   lapic[ID];  // wait for write to finish, by reading
-801032da:	8b 50 20             	mov    0x20(%eax),%edx
+8010288a:	8b 50 20             	mov    0x20(%eax),%edx
 }
-801032dd:	e9 7b ff ff ff       	jmp    8010325d <lapicinit+0x6d>
-801032e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801032e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010288d:	e9 7b ff ff ff       	jmp    8010280d <lapicinit+0x6d>
+80102892:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801032f0 <lapicid>:
+801028a0 <lapicid>:
 
 int
 lapicid(void)
 {
-801032f0:	f3 0f 1e fb          	endbr32 
+801028a0:	f3 0f 1e fb          	endbr32 
   if (!lapic)
-801032f4:	a1 7c 40 11 80       	mov    0x8011407c,%eax
-801032f9:	85 c0                	test   %eax,%eax
-801032fb:	74 0b                	je     80103308 <lapicid+0x18>
+801028a4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028a9:	85 c0                	test   %eax,%eax
+801028ab:	74 0b                	je     801028b8 <lapicid+0x18>
     return 0;
   return lapic[ID] >> 24;
-801032fd:	8b 40 20             	mov    0x20(%eax),%eax
-80103300:	c1 e8 18             	shr    $0x18,%eax
-80103303:	c3                   	ret    
-80103304:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028ad:	8b 40 20             	mov    0x20(%eax),%eax
+801028b0:	c1 e8 18             	shr    $0x18,%eax
+801028b3:	c3                   	ret    
+801028b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return 0;
-80103308:	31 c0                	xor    %eax,%eax
+801028b8:	31 c0                	xor    %eax,%eax
 }
-8010330a:	c3                   	ret    
-8010330b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010330f:	90                   	nop
+801028ba:	c3                   	ret    
+801028bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028bf:	90                   	nop
 
-80103310 <lapiceoi>:
+801028c0 <lapiceoi>:
 
 // Acknowledge interrupt.
 void
 lapiceoi(void)
 {
-80103310:	f3 0f 1e fb          	endbr32 
+801028c0:	f3 0f 1e fb          	endbr32 
   if(lapic)
-80103314:	a1 7c 40 11 80       	mov    0x8011407c,%eax
-80103319:	85 c0                	test   %eax,%eax
-8010331b:	74 0d                	je     8010332a <lapiceoi+0x1a>
+801028c4:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+801028c9:	85 c0                	test   %eax,%eax
+801028cb:	74 0d                	je     801028da <lapiceoi+0x1a>
   lapic[index] = value;
-8010331d:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-80103324:	00 00 00 
+801028cd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
+801028d4:	00 00 00 
   lapic[ID];  // wait for write to finish, by reading
-80103327:	8b 40 20             	mov    0x20(%eax),%eax
+801028d7:	8b 40 20             	mov    0x20(%eax),%eax
     lapicw(EOI, 0);
 }
-8010332a:	c3                   	ret    
-8010332b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010332f:	90                   	nop
+801028da:	c3                   	ret    
+801028db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028df:	90                   	nop
 
-80103330 <microdelay>:
+801028e0 <microdelay>:
 
 // Spin for a given number of microseconds.
 // On real hardware would want to tune this dynamically.
 void
 microdelay(int us)
 {
-80103330:	f3 0f 1e fb          	endbr32 
+801028e0:	f3 0f 1e fb          	endbr32 
 }
-80103334:	c3                   	ret    
-80103335:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010333c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801028e4:	c3                   	ret    
+801028e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801028ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80103340 <lapicstartap>:
+801028f0 <lapicstartap>:
 
 // Start additional processor running entry code at addr.
 // See Appendix B of MultiProcessor Specification.
 void
 lapicstartap(uchar apicid, uint addr)
 {
-80103340:	f3 0f 1e fb          	endbr32 
-80103344:	55                   	push   %ebp
+801028f0:	f3 0f 1e fb          	endbr32 
+801028f4:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103345:	b8 0f 00 00 00       	mov    $0xf,%eax
-8010334a:	ba 70 00 00 00       	mov    $0x70,%edx
-8010334f:	89 e5                	mov    %esp,%ebp
-80103351:	53                   	push   %ebx
-80103352:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80103355:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103358:	ee                   	out    %al,(%dx)
-80103359:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010335e:	ba 71 00 00 00       	mov    $0x71,%edx
-80103363:	ee                   	out    %al,(%dx)
+801028f5:	b8 0f 00 00 00       	mov    $0xf,%eax
+801028fa:	ba 70 00 00 00       	mov    $0x70,%edx
+801028ff:	89 e5                	mov    %esp,%ebp
+80102901:	53                   	push   %ebx
+80102902:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80102905:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102908:	ee                   	out    %al,(%dx)
+80102909:	b8 0a 00 00 00       	mov    $0xa,%eax
+8010290e:	ba 71 00 00 00       	mov    $0x71,%edx
+80102913:	ee                   	out    %al,(%dx)
   // and the warm reset vector (DWORD based at 40:67) to point at
   // the AP startup code prior to the [universal startup algorithm]."
   outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
   outb(CMOS_PORT+1, 0x0A);
   wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
   wrv[0] = 0;
-80103364:	31 c0                	xor    %eax,%eax
+80102914:	31 c0                	xor    %eax,%eax
   wrv[1] = addr >> 4;
 
   // "Universal startup algorithm."
   // Send INIT (level-triggered) interrupt to reset other CPU.
   lapicw(ICRHI, apicid<<24);
-80103366:	c1 e3 18             	shl    $0x18,%ebx
+80102916:	c1 e3 18             	shl    $0x18,%ebx
   wrv[0] = 0;
-80103369:	66 a3 67 04 00 80    	mov    %ax,0x80000467
+80102919:	66 a3 67 04 00 80    	mov    %ax,0x80000467
   wrv[1] = addr >> 4;
-8010336f:	89 c8                	mov    %ecx,%eax
+8010291f:	89 c8                	mov    %ecx,%eax
   // when it is in the halted state due to an INIT.  So the second
   // should be ignored, but it is part of the official Intel algorithm.
   // Bochs complains about the second one.  Too bad for Bochs.
   for(i = 0; i < 2; i++){
     lapicw(ICRHI, apicid<<24);
     lapicw(ICRLO, STARTUP | (addr>>12));
-80103371:	c1 e9 0c             	shr    $0xc,%ecx
+80102921:	c1 e9 0c             	shr    $0xc,%ecx
   lapicw(ICRHI, apicid<<24);
-80103374:	89 da                	mov    %ebx,%edx
+80102924:	89 da                	mov    %ebx,%edx
   wrv[1] = addr >> 4;
-80103376:	c1 e8 04             	shr    $0x4,%eax
+80102926:	c1 e8 04             	shr    $0x4,%eax
     lapicw(ICRLO, STARTUP | (addr>>12));
-80103379:	80 cd 06             	or     $0x6,%ch
+80102929:	80 cd 06             	or     $0x6,%ch
   wrv[1] = addr >> 4;
-8010337c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
+8010292c:	66 a3 69 04 00 80    	mov    %ax,0x80000469
   lapic[index] = value;
-80103382:	a1 7c 40 11 80       	mov    0x8011407c,%eax
-80103387:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
+80102932:	a1 7c 26 11 80       	mov    0x8011267c,%eax
+80102937:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-8010338d:	8b 58 20             	mov    0x20(%eax),%ebx
+8010293d:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-80103390:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
-80103397:	c5 00 00 
+80102940:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
+80102947:	c5 00 00 
   lapic[ID];  // wait for write to finish, by reading
-8010339a:	8b 58 20             	mov    0x20(%eax),%ebx
+8010294a:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-8010339d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
-801033a4:	85 00 00 
+8010294d:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
+80102954:	85 00 00 
   lapic[ID];  // wait for write to finish, by reading
-801033a7:	8b 58 20             	mov    0x20(%eax),%ebx
+80102957:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801033aa:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+8010295a:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801033b0:	8b 58 20             	mov    0x20(%eax),%ebx
+80102960:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801033b3:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+80102963:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801033b9:	8b 58 20             	mov    0x20(%eax),%ebx
+80102969:	8b 58 20             	mov    0x20(%eax),%ebx
   lapic[index] = value;
-801033bc:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
+8010296c:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
   lapic[ID];  // wait for write to finish, by reading
-801033c2:	8b 50 20             	mov    0x20(%eax),%edx
+80102972:	8b 50 20             	mov    0x20(%eax),%edx
   lapic[index] = value;
-801033c5:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
+80102975:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
     microdelay(200);
   }
 }
-801033cb:	5b                   	pop    %ebx
+8010297b:	5b                   	pop    %ebx
   lapic[ID];  // wait for write to finish, by reading
-801033cc:	8b 40 20             	mov    0x20(%eax),%eax
+8010297c:	8b 40 20             	mov    0x20(%eax),%eax
 }
-801033cf:	5d                   	pop    %ebp
-801033d0:	c3                   	ret    
-801033d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801033d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801033df:	90                   	nop
+8010297f:	5d                   	pop    %ebp
+80102980:	c3                   	ret    
+80102981:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010298f:	90                   	nop
 
-801033e0 <cmostime>:
+80102990 <cmostime>:
 }
 
 // qemu seems to use 24-hour GWT and the values are BCD encoded
 void
 cmostime(struct rtcdate *r)
 {
-801033e0:	f3 0f 1e fb          	endbr32 
-801033e4:	55                   	push   %ebp
-801033e5:	b8 0b 00 00 00       	mov    $0xb,%eax
-801033ea:	ba 70 00 00 00       	mov    $0x70,%edx
-801033ef:	89 e5                	mov    %esp,%ebp
-801033f1:	57                   	push   %edi
-801033f2:	56                   	push   %esi
-801033f3:	53                   	push   %ebx
-801033f4:	83 ec 4c             	sub    $0x4c,%esp
-801033f7:	ee                   	out    %al,(%dx)
+80102990:	f3 0f 1e fb          	endbr32 
+80102994:	55                   	push   %ebp
+80102995:	b8 0b 00 00 00       	mov    $0xb,%eax
+8010299a:	ba 70 00 00 00       	mov    $0x70,%edx
+8010299f:	89 e5                	mov    %esp,%ebp
+801029a1:	57                   	push   %edi
+801029a2:	56                   	push   %esi
+801029a3:	53                   	push   %ebx
+801029a4:	83 ec 4c             	sub    $0x4c,%esp
+801029a7:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801033f8:	ba 71 00 00 00       	mov    $0x71,%edx
-801033fd:	ec                   	in     (%dx),%al
+801029a8:	ba 71 00 00 00       	mov    $0x71,%edx
+801029ad:	ec                   	in     (%dx),%al
   struct rtcdate t1, t2;
   int sb, bcd;
 
   sb = cmos_read(CMOS_STATB);
 
   bcd = (sb & (1 << 2)) == 0;
-801033fe:	83 e0 04             	and    $0x4,%eax
+801029ae:	83 e0 04             	and    $0x4,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103401:	bb 70 00 00 00       	mov    $0x70,%ebx
-80103406:	88 45 b3             	mov    %al,-0x4d(%ebp)
-80103409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103410:	31 c0                	xor    %eax,%eax
-80103412:	89 da                	mov    %ebx,%edx
-80103414:	ee                   	out    %al,(%dx)
+801029b1:	bb 70 00 00 00       	mov    $0x70,%ebx
+801029b6:	88 45 b3             	mov    %al,-0x4d(%ebp)
+801029b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801029c0:	31 c0                	xor    %eax,%eax
+801029c2:	89 da                	mov    %ebx,%edx
+801029c4:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103415:	b9 71 00 00 00       	mov    $0x71,%ecx
-8010341a:	89 ca                	mov    %ecx,%edx
-8010341c:	ec                   	in     (%dx),%al
-8010341d:	88 45 b7             	mov    %al,-0x49(%ebp)
+801029c5:	b9 71 00 00 00       	mov    $0x71,%ecx
+801029ca:	89 ca                	mov    %ecx,%edx
+801029cc:	ec                   	in     (%dx),%al
+801029cd:	88 45 b7             	mov    %al,-0x49(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103420:	89 da                	mov    %ebx,%edx
-80103422:	b8 02 00 00 00       	mov    $0x2,%eax
-80103427:	ee                   	out    %al,(%dx)
+801029d0:	89 da                	mov    %ebx,%edx
+801029d2:	b8 02 00 00 00       	mov    $0x2,%eax
+801029d7:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103428:	89 ca                	mov    %ecx,%edx
-8010342a:	ec                   	in     (%dx),%al
-8010342b:	88 45 b6             	mov    %al,-0x4a(%ebp)
+801029d8:	89 ca                	mov    %ecx,%edx
+801029da:	ec                   	in     (%dx),%al
+801029db:	88 45 b6             	mov    %al,-0x4a(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010342e:	89 da                	mov    %ebx,%edx
-80103430:	b8 04 00 00 00       	mov    $0x4,%eax
-80103435:	ee                   	out    %al,(%dx)
+801029de:	89 da                	mov    %ebx,%edx
+801029e0:	b8 04 00 00 00       	mov    $0x4,%eax
+801029e5:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103436:	89 ca                	mov    %ecx,%edx
-80103438:	ec                   	in     (%dx),%al
-80103439:	88 45 b5             	mov    %al,-0x4b(%ebp)
+801029e6:	89 ca                	mov    %ecx,%edx
+801029e8:	ec                   	in     (%dx),%al
+801029e9:	88 45 b5             	mov    %al,-0x4b(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010343c:	89 da                	mov    %ebx,%edx
-8010343e:	b8 07 00 00 00       	mov    $0x7,%eax
-80103443:	ee                   	out    %al,(%dx)
+801029ec:	89 da                	mov    %ebx,%edx
+801029ee:	b8 07 00 00 00       	mov    $0x7,%eax
+801029f3:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103444:	89 ca                	mov    %ecx,%edx
-80103446:	ec                   	in     (%dx),%al
-80103447:	88 45 b4             	mov    %al,-0x4c(%ebp)
+801029f4:	89 ca                	mov    %ecx,%edx
+801029f6:	ec                   	in     (%dx),%al
+801029f7:	88 45 b4             	mov    %al,-0x4c(%ebp)
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010344a:	89 da                	mov    %ebx,%edx
-8010344c:	b8 08 00 00 00       	mov    $0x8,%eax
-80103451:	ee                   	out    %al,(%dx)
+801029fa:	89 da                	mov    %ebx,%edx
+801029fc:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a01:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103452:	89 ca                	mov    %ecx,%edx
-80103454:	ec                   	in     (%dx),%al
-80103455:	89 c7                	mov    %eax,%edi
+80102a02:	89 ca                	mov    %ecx,%edx
+80102a04:	ec                   	in     (%dx),%al
+80102a05:	89 c7                	mov    %eax,%edi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103457:	89 da                	mov    %ebx,%edx
-80103459:	b8 09 00 00 00       	mov    $0x9,%eax
-8010345e:	ee                   	out    %al,(%dx)
+80102a07:	89 da                	mov    %ebx,%edx
+80102a09:	b8 09 00 00 00       	mov    $0x9,%eax
+80102a0e:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010345f:	89 ca                	mov    %ecx,%edx
-80103461:	ec                   	in     (%dx),%al
-80103462:	89 c6                	mov    %eax,%esi
+80102a0f:	89 ca                	mov    %ecx,%edx
+80102a11:	ec                   	in     (%dx),%al
+80102a12:	89 c6                	mov    %eax,%esi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103464:	89 da                	mov    %ebx,%edx
-80103466:	b8 0a 00 00 00       	mov    $0xa,%eax
-8010346b:	ee                   	out    %al,(%dx)
+80102a14:	89 da                	mov    %ebx,%edx
+80102a16:	b8 0a 00 00 00       	mov    $0xa,%eax
+80102a1b:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010346c:	89 ca                	mov    %ecx,%edx
-8010346e:	ec                   	in     (%dx),%al
+80102a1c:	89 ca                	mov    %ecx,%edx
+80102a1e:	ec                   	in     (%dx),%al
 
   // make sure CMOS doesn't modify time while we read it
   for(;;) {
     fill_rtcdate(&t1);
     if(cmos_read(CMOS_STATA) & CMOS_UIP)
-8010346f:	84 c0                	test   %al,%al
-80103471:	78 9d                	js     80103410 <cmostime+0x30>
+80102a1f:	84 c0                	test   %al,%al
+80102a21:	78 9d                	js     801029c0 <cmostime+0x30>
   return inb(CMOS_RETURN);
-80103473:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
-80103477:	89 fa                	mov    %edi,%edx
-80103479:	0f b6 fa             	movzbl %dl,%edi
-8010347c:	89 f2                	mov    %esi,%edx
-8010347e:	89 45 b8             	mov    %eax,-0x48(%ebp)
-80103481:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
-80103485:	0f b6 f2             	movzbl %dl,%esi
+80102a23:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
+80102a27:	89 fa                	mov    %edi,%edx
+80102a29:	0f b6 fa             	movzbl %dl,%edi
+80102a2c:	89 f2                	mov    %esi,%edx
+80102a2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102a31:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
+80102a35:	0f b6 f2             	movzbl %dl,%esi
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103488:	89 da                	mov    %ebx,%edx
-8010348a:	89 7d c8             	mov    %edi,-0x38(%ebp)
-8010348d:	89 45 bc             	mov    %eax,-0x44(%ebp)
-80103490:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
-80103494:	89 75 cc             	mov    %esi,-0x34(%ebp)
-80103497:	89 45 c0             	mov    %eax,-0x40(%ebp)
-8010349a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
-8010349e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-801034a1:	31 c0                	xor    %eax,%eax
-801034a3:	ee                   	out    %al,(%dx)
+80102a38:	89 da                	mov    %ebx,%edx
+80102a3a:	89 7d c8             	mov    %edi,-0x38(%ebp)
+80102a3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102a40:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
+80102a44:	89 75 cc             	mov    %esi,-0x34(%ebp)
+80102a47:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102a4a:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
+80102a4e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102a51:	31 c0                	xor    %eax,%eax
+80102a53:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034a4:	89 ca                	mov    %ecx,%edx
-801034a6:	ec                   	in     (%dx),%al
-801034a7:	0f b6 c0             	movzbl %al,%eax
+80102a54:	89 ca                	mov    %ecx,%edx
+80102a56:	ec                   	in     (%dx),%al
+80102a57:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801034aa:	89 da                	mov    %ebx,%edx
-801034ac:	89 45 d0             	mov    %eax,-0x30(%ebp)
-801034af:	b8 02 00 00 00       	mov    $0x2,%eax
-801034b4:	ee                   	out    %al,(%dx)
+80102a5a:	89 da                	mov    %ebx,%edx
+80102a5c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+80102a5f:	b8 02 00 00 00       	mov    $0x2,%eax
+80102a64:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034b5:	89 ca                	mov    %ecx,%edx
-801034b7:	ec                   	in     (%dx),%al
-801034b8:	0f b6 c0             	movzbl %al,%eax
+80102a65:	89 ca                	mov    %ecx,%edx
+80102a67:	ec                   	in     (%dx),%al
+80102a68:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801034bb:	89 da                	mov    %ebx,%edx
-801034bd:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-801034c0:	b8 04 00 00 00       	mov    $0x4,%eax
-801034c5:	ee                   	out    %al,(%dx)
+80102a6b:	89 da                	mov    %ebx,%edx
+80102a6d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+80102a70:	b8 04 00 00 00       	mov    $0x4,%eax
+80102a75:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034c6:	89 ca                	mov    %ecx,%edx
-801034c8:	ec                   	in     (%dx),%al
-801034c9:	0f b6 c0             	movzbl %al,%eax
+80102a76:	89 ca                	mov    %ecx,%edx
+80102a78:	ec                   	in     (%dx),%al
+80102a79:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801034cc:	89 da                	mov    %ebx,%edx
-801034ce:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801034d1:	b8 07 00 00 00       	mov    $0x7,%eax
-801034d6:	ee                   	out    %al,(%dx)
+80102a7c:	89 da                	mov    %ebx,%edx
+80102a7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80102a81:	b8 07 00 00 00       	mov    $0x7,%eax
+80102a86:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034d7:	89 ca                	mov    %ecx,%edx
-801034d9:	ec                   	in     (%dx),%al
-801034da:	0f b6 c0             	movzbl %al,%eax
+80102a87:	89 ca                	mov    %ecx,%edx
+80102a89:	ec                   	in     (%dx),%al
+80102a8a:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801034dd:	89 da                	mov    %ebx,%edx
-801034df:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801034e2:	b8 08 00 00 00       	mov    $0x8,%eax
-801034e7:	ee                   	out    %al,(%dx)
+80102a8d:	89 da                	mov    %ebx,%edx
+80102a8f:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80102a92:	b8 08 00 00 00       	mov    $0x8,%eax
+80102a97:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034e8:	89 ca                	mov    %ecx,%edx
-801034ea:	ec                   	in     (%dx),%al
-801034eb:	0f b6 c0             	movzbl %al,%eax
+80102a98:	89 ca                	mov    %ecx,%edx
+80102a9a:	ec                   	in     (%dx),%al
+80102a9b:	0f b6 c0             	movzbl %al,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801034ee:	89 da                	mov    %ebx,%edx
-801034f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801034f3:	b8 09 00 00 00       	mov    $0x9,%eax
-801034f8:	ee                   	out    %al,(%dx)
+80102a9e:	89 da                	mov    %ebx,%edx
+80102aa0:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80102aa3:	b8 09 00 00 00       	mov    $0x9,%eax
+80102aa8:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801034f9:	89 ca                	mov    %ecx,%edx
-801034fb:	ec                   	in     (%dx),%al
-801034fc:	0f b6 c0             	movzbl %al,%eax
+80102aa9:	89 ca                	mov    %ecx,%edx
+80102aab:	ec                   	in     (%dx),%al
+80102aac:	0f b6 c0             	movzbl %al,%eax
         continue;
     fill_rtcdate(&t2);
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-801034ff:	83 ec 04             	sub    $0x4,%esp
+80102aaf:	83 ec 04             	sub    $0x4,%esp
   return inb(CMOS_RETURN);
-80103502:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80102ab2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80103505:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80103508:	6a 18                	push   $0x18
-8010350a:	50                   	push   %eax
-8010350b:	8d 45 b8             	lea    -0x48(%ebp),%eax
-8010350e:	50                   	push   %eax
-8010350f:	e8 fc 1b 00 00       	call   80105110 <memcmp>
-80103514:	83 c4 10             	add    $0x10,%esp
-80103517:	85 c0                	test   %eax,%eax
-80103519:	0f 85 f1 fe ff ff    	jne    80103410 <cmostime+0x30>
+80102ab5:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80102ab8:	6a 18                	push   $0x18
+80102aba:	50                   	push   %eax
+80102abb:	8d 45 b8             	lea    -0x48(%ebp),%eax
+80102abe:	50                   	push   %eax
+80102abf:	e8 fc 1b 00 00       	call   801046c0 <memcmp>
+80102ac4:	83 c4 10             	add    $0x10,%esp
+80102ac7:	85 c0                	test   %eax,%eax
+80102ac9:	0f 85 f1 fe ff ff    	jne    801029c0 <cmostime+0x30>
       break;
   }
 
   // convert
   if(bcd) {
-8010351f:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
-80103523:	75 78                	jne    8010359d <cmostime+0x1bd>
+80102acf:	80 7d b3 00          	cmpb   $0x0,-0x4d(%ebp)
+80102ad3:	75 78                	jne    80102b4d <cmostime+0x1bd>
 #define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
     CONV(second);
-80103525:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80103528:	89 c2                	mov    %eax,%edx
-8010352a:	83 e0 0f             	and    $0xf,%eax
-8010352d:	c1 ea 04             	shr    $0x4,%edx
-80103530:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80103533:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80103536:	89 45 b8             	mov    %eax,-0x48(%ebp)
+80102ad5:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102ad8:	89 c2                	mov    %eax,%edx
+80102ada:	83 e0 0f             	and    $0xf,%eax
+80102add:	c1 ea 04             	shr    $0x4,%edx
+80102ae0:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102ae3:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102ae6:	89 45 b8             	mov    %eax,-0x48(%ebp)
     CONV(minute);
-80103539:	8b 45 bc             	mov    -0x44(%ebp),%eax
-8010353c:	89 c2                	mov    %eax,%edx
-8010353e:	83 e0 0f             	and    $0xf,%eax
-80103541:	c1 ea 04             	shr    $0x4,%edx
-80103544:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80103547:	8d 04 50             	lea    (%eax,%edx,2),%eax
-8010354a:	89 45 bc             	mov    %eax,-0x44(%ebp)
+80102ae9:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102aec:	89 c2                	mov    %eax,%edx
+80102aee:	83 e0 0f             	and    $0xf,%eax
+80102af1:	c1 ea 04             	shr    $0x4,%edx
+80102af4:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102af7:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102afa:	89 45 bc             	mov    %eax,-0x44(%ebp)
     CONV(hour  );
-8010354d:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80103550:	89 c2                	mov    %eax,%edx
-80103552:	83 e0 0f             	and    $0xf,%eax
-80103555:	c1 ea 04             	shr    $0x4,%edx
-80103558:	8d 14 92             	lea    (%edx,%edx,4),%edx
-8010355b:	8d 04 50             	lea    (%eax,%edx,2),%eax
-8010355e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+80102afd:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b00:	89 c2                	mov    %eax,%edx
+80102b02:	83 e0 0f             	and    $0xf,%eax
+80102b05:	c1 ea 04             	shr    $0x4,%edx
+80102b08:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b0b:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b0e:	89 45 c0             	mov    %eax,-0x40(%ebp)
     CONV(day   );
-80103561:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80103564:	89 c2                	mov    %eax,%edx
-80103566:	83 e0 0f             	and    $0xf,%eax
-80103569:	c1 ea 04             	shr    $0x4,%edx
-8010356c:	8d 14 92             	lea    (%edx,%edx,4),%edx
-8010356f:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80103572:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+80102b11:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b14:	89 c2                	mov    %eax,%edx
+80102b16:	83 e0 0f             	and    $0xf,%eax
+80102b19:	c1 ea 04             	shr    $0x4,%edx
+80102b1c:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b1f:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b22:	89 45 c4             	mov    %eax,-0x3c(%ebp)
     CONV(month );
-80103575:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80103578:	89 c2                	mov    %eax,%edx
-8010357a:	83 e0 0f             	and    $0xf,%eax
-8010357d:	c1 ea 04             	shr    $0x4,%edx
-80103580:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80103583:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80103586:	89 45 c8             	mov    %eax,-0x38(%ebp)
+80102b25:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b28:	89 c2                	mov    %eax,%edx
+80102b2a:	83 e0 0f             	and    $0xf,%eax
+80102b2d:	c1 ea 04             	shr    $0x4,%edx
+80102b30:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b33:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b36:	89 45 c8             	mov    %eax,-0x38(%ebp)
     CONV(year  );
-80103589:	8b 45 cc             	mov    -0x34(%ebp),%eax
-8010358c:	89 c2                	mov    %eax,%edx
-8010358e:	83 e0 0f             	and    $0xf,%eax
-80103591:	c1 ea 04             	shr    $0x4,%edx
-80103594:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80103597:	8d 04 50             	lea    (%eax,%edx,2),%eax
-8010359a:	89 45 cc             	mov    %eax,-0x34(%ebp)
+80102b39:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102b3c:	89 c2                	mov    %eax,%edx
+80102b3e:	83 e0 0f             	and    $0xf,%eax
+80102b41:	c1 ea 04             	shr    $0x4,%edx
+80102b44:	8d 14 92             	lea    (%edx,%edx,4),%edx
+80102b47:	8d 04 50             	lea    (%eax,%edx,2),%eax
+80102b4a:	89 45 cc             	mov    %eax,-0x34(%ebp)
 #undef     CONV
   }
 
   *r = t1;
-8010359d:	8b 75 08             	mov    0x8(%ebp),%esi
-801035a0:	8b 45 b8             	mov    -0x48(%ebp),%eax
-801035a3:	89 06                	mov    %eax,(%esi)
-801035a5:	8b 45 bc             	mov    -0x44(%ebp),%eax
-801035a8:	89 46 04             	mov    %eax,0x4(%esi)
-801035ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
-801035ae:	89 46 08             	mov    %eax,0x8(%esi)
-801035b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-801035b4:	89 46 0c             	mov    %eax,0xc(%esi)
-801035b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
-801035ba:	89 46 10             	mov    %eax,0x10(%esi)
-801035bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
-801035c0:	89 46 14             	mov    %eax,0x14(%esi)
+80102b4d:	8b 75 08             	mov    0x8(%ebp),%esi
+80102b50:	8b 45 b8             	mov    -0x48(%ebp),%eax
+80102b53:	89 06                	mov    %eax,(%esi)
+80102b55:	8b 45 bc             	mov    -0x44(%ebp),%eax
+80102b58:	89 46 04             	mov    %eax,0x4(%esi)
+80102b5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
+80102b5e:	89 46 08             	mov    %eax,0x8(%esi)
+80102b61:	8b 45 c4             	mov    -0x3c(%ebp),%eax
+80102b64:	89 46 0c             	mov    %eax,0xc(%esi)
+80102b67:	8b 45 c8             	mov    -0x38(%ebp),%eax
+80102b6a:	89 46 10             	mov    %eax,0x10(%esi)
+80102b6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
+80102b70:	89 46 14             	mov    %eax,0x14(%esi)
   r->year += 2000;
-801035c3:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
+80102b73:	81 46 14 d0 07 00 00 	addl   $0x7d0,0x14(%esi)
 }
-801035ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801035cd:	5b                   	pop    %ebx
-801035ce:	5e                   	pop    %esi
-801035cf:	5f                   	pop    %edi
-801035d0:	5d                   	pop    %ebp
-801035d1:	c3                   	ret    
-801035d2:	66 90                	xchg   %ax,%ax
-801035d4:	66 90                	xchg   %ax,%ax
-801035d6:	66 90                	xchg   %ax,%ax
-801035d8:	66 90                	xchg   %ax,%ax
-801035da:	66 90                	xchg   %ax,%ax
-801035dc:	66 90                	xchg   %ax,%ax
-801035de:	66 90                	xchg   %ax,%ax
+80102b7a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102b7d:	5b                   	pop    %ebx
+80102b7e:	5e                   	pop    %esi
+80102b7f:	5f                   	pop    %edi
+80102b80:	5d                   	pop    %ebp
+80102b81:	c3                   	ret    
+80102b82:	66 90                	xchg   %ax,%ax
+80102b84:	66 90                	xchg   %ax,%ax
+80102b86:	66 90                	xchg   %ax,%ax
+80102b88:	66 90                	xchg   %ax,%ax
+80102b8a:	66 90                	xchg   %ax,%ax
+80102b8c:	66 90                	xchg   %ax,%ax
+80102b8e:	66 90                	xchg   %ax,%ax
 
-801035e0 <install_trans>:
+80102b90 <install_trans>:
 static void
 install_trans(void)
 {
   int tail;
 
   for (tail = 0; tail < log.lh.n; tail++) {
-801035e0:	8b 0d c8 40 11 80    	mov    0x801140c8,%ecx
-801035e6:	85 c9                	test   %ecx,%ecx
-801035e8:	0f 8e 8a 00 00 00    	jle    80103678 <install_trans+0x98>
-{
-801035ee:	55                   	push   %ebp
-801035ef:	89 e5                	mov    %esp,%ebp
-801035f1:	57                   	push   %edi
+80102b90:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102b96:	85 c9                	test   %ecx,%ecx
+80102b98:	0f 8e 8a 00 00 00    	jle    80102c28 <install_trans+0x98>
+{
+80102b9e:	55                   	push   %ebp
+80102b9f:	89 e5                	mov    %esp,%ebp
+80102ba1:	57                   	push   %edi
   for (tail = 0; tail < log.lh.n; tail++) {
-801035f2:	31 ff                	xor    %edi,%edi
+80102ba2:	31 ff                	xor    %edi,%edi
 {
-801035f4:	56                   	push   %esi
-801035f5:	53                   	push   %ebx
-801035f6:	83 ec 0c             	sub    $0xc,%esp
-801035f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102ba4:	56                   	push   %esi
+80102ba5:	53                   	push   %ebx
+80102ba6:	83 ec 0c             	sub    $0xc,%esp
+80102ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80103600:	a1 b4 40 11 80       	mov    0x801140b4,%eax
-80103605:	83 ec 08             	sub    $0x8,%esp
-80103608:	01 f8                	add    %edi,%eax
-8010360a:	83 c0 01             	add    $0x1,%eax
-8010360d:	50                   	push   %eax
-8010360e:	ff 35 c4 40 11 80    	pushl  0x801140c4
-80103614:	e8 b7 ca ff ff       	call   801000d0 <bread>
-80103619:	89 c6                	mov    %eax,%esi
+80102bb0:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102bb5:	83 ec 08             	sub    $0x8,%esp
+80102bb8:	01 f8                	add    %edi,%eax
+80102bba:	83 c0 01             	add    $0x1,%eax
+80102bbd:	50                   	push   %eax
+80102bbe:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102bc4:	e8 07 d5 ff ff       	call   801000d0 <bread>
+80102bc9:	89 c6                	mov    %eax,%esi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-8010361b:	58                   	pop    %eax
-8010361c:	5a                   	pop    %edx
-8010361d:	ff 34 bd cc 40 11 80 	pushl  -0x7feebf34(,%edi,4)
-80103624:	ff 35 c4 40 11 80    	pushl  0x801140c4
+80102bcb:	58                   	pop    %eax
+80102bcc:	5a                   	pop    %edx
+80102bcd:	ff 34 bd cc 26 11 80 	pushl  -0x7feed934(,%edi,4)
+80102bd4:	ff 35 c4 26 11 80    	pushl  0x801126c4
   for (tail = 0; tail < log.lh.n; tail++) {
-8010362a:	83 c7 01             	add    $0x1,%edi
+80102bda:	83 c7 01             	add    $0x1,%edi
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-8010362d:	e8 9e ca ff ff       	call   801000d0 <bread>
+80102bdd:	e8 ee d4 ff ff       	call   801000d0 <bread>
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80103632:	83 c4 0c             	add    $0xc,%esp
+80102be2:	83 c4 0c             	add    $0xc,%esp
     struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80103635:	89 c3                	mov    %eax,%ebx
+80102be5:	89 c3                	mov    %eax,%ebx
     memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80103637:	8d 46 5c             	lea    0x5c(%esi),%eax
-8010363a:	68 00 02 00 00       	push   $0x200
-8010363f:	50                   	push   %eax
-80103640:	8d 43 5c             	lea    0x5c(%ebx),%eax
-80103643:	50                   	push   %eax
-80103644:	e8 17 1b 00 00       	call   80105160 <memmove>
+80102be7:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102bea:	68 00 02 00 00       	push   $0x200
+80102bef:	50                   	push   %eax
+80102bf0:	8d 43 5c             	lea    0x5c(%ebx),%eax
+80102bf3:	50                   	push   %eax
+80102bf4:	e8 17 1b 00 00       	call   80104710 <memmove>
     bwrite(dbuf);  // write dst to disk
-80103649:	89 1c 24             	mov    %ebx,(%esp)
-8010364c:	e8 5f cb ff ff       	call   801001b0 <bwrite>
+80102bf9:	89 1c 24             	mov    %ebx,(%esp)
+80102bfc:	e8 af d5 ff ff       	call   801001b0 <bwrite>
     brelse(lbuf);
-80103651:	89 34 24             	mov    %esi,(%esp)
-80103654:	e8 97 cb ff ff       	call   801001f0 <brelse>
+80102c01:	89 34 24             	mov    %esi,(%esp)
+80102c04:	e8 e7 d5 ff ff       	call   801001f0 <brelse>
     brelse(dbuf);
-80103659:	89 1c 24             	mov    %ebx,(%esp)
-8010365c:	e8 8f cb ff ff       	call   801001f0 <brelse>
+80102c09:	89 1c 24             	mov    %ebx,(%esp)
+80102c0c:	e8 df d5 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-80103661:	83 c4 10             	add    $0x10,%esp
-80103664:	39 3d c8 40 11 80    	cmp    %edi,0x801140c8
-8010366a:	7f 94                	jg     80103600 <install_trans+0x20>
-  }
-}
-8010366c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010366f:	5b                   	pop    %ebx
-80103670:	5e                   	pop    %esi
-80103671:	5f                   	pop    %edi
-80103672:	5d                   	pop    %ebp
-80103673:	c3                   	ret    
-80103674:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103678:	c3                   	ret    
-80103679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102c11:	83 c4 10             	add    $0x10,%esp
+80102c14:	39 3d c8 26 11 80    	cmp    %edi,0x801126c8
+80102c1a:	7f 94                	jg     80102bb0 <install_trans+0x20>
+  }
+}
+80102c1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102c1f:	5b                   	pop    %ebx
+80102c20:	5e                   	pop    %esi
+80102c21:	5f                   	pop    %edi
+80102c22:	5d                   	pop    %ebp
+80102c23:	c3                   	ret    
+80102c24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c28:	c3                   	ret    
+80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80103680 <write_head>:
+80102c30 <write_head>:
 // Write in-memory log header to disk.
 // This is the true point at which the
 // current transaction commits.
 static void
 write_head(void)
 {
-80103680:	55                   	push   %ebp
-80103681:	89 e5                	mov    %esp,%ebp
-80103683:	53                   	push   %ebx
-80103684:	83 ec 0c             	sub    $0xc,%esp
+80102c30:	55                   	push   %ebp
+80102c31:	89 e5                	mov    %esp,%ebp
+80102c33:	53                   	push   %ebx
+80102c34:	83 ec 0c             	sub    $0xc,%esp
   struct buf *buf = bread(log.dev, log.start);
-80103687:	ff 35 b4 40 11 80    	pushl  0x801140b4
-8010368d:	ff 35 c4 40 11 80    	pushl  0x801140c4
-80103693:	e8 38 ca ff ff       	call   801000d0 <bread>
+80102c37:	ff 35 b4 26 11 80    	pushl  0x801126b4
+80102c3d:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102c43:	e8 88 d4 ff ff       	call   801000d0 <bread>
   struct logheader *hb = (struct logheader *) (buf->data);
   int i;
   hb->n = log.lh.n;
   for (i = 0; i < log.lh.n; i++) {
-80103698:	83 c4 10             	add    $0x10,%esp
+80102c48:	83 c4 10             	add    $0x10,%esp
   struct buf *buf = bread(log.dev, log.start);
-8010369b:	89 c3                	mov    %eax,%ebx
+80102c4b:	89 c3                	mov    %eax,%ebx
   hb->n = log.lh.n;
-8010369d:	a1 c8 40 11 80       	mov    0x801140c8,%eax
-801036a2:	89 43 5c             	mov    %eax,0x5c(%ebx)
+80102c4d:	a1 c8 26 11 80       	mov    0x801126c8,%eax
+80102c52:	89 43 5c             	mov    %eax,0x5c(%ebx)
   for (i = 0; i < log.lh.n; i++) {
-801036a5:	85 c0                	test   %eax,%eax
-801036a7:	7e 19                	jle    801036c2 <write_head+0x42>
-801036a9:	31 d2                	xor    %edx,%edx
-801036ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801036af:	90                   	nop
+80102c55:	85 c0                	test   %eax,%eax
+80102c57:	7e 19                	jle    80102c72 <write_head+0x42>
+80102c59:	31 d2                	xor    %edx,%edx
+80102c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c5f:	90                   	nop
     hb->block[i] = log.lh.block[i];
-801036b0:	8b 0c 95 cc 40 11 80 	mov    -0x7feebf34(,%edx,4),%ecx
-801036b7:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
+80102c60:	8b 0c 95 cc 26 11 80 	mov    -0x7feed934(,%edx,4),%ecx
+80102c67:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
-801036bb:	83 c2 01             	add    $0x1,%edx
-801036be:	39 d0                	cmp    %edx,%eax
-801036c0:	75 ee                	jne    801036b0 <write_head+0x30>
+80102c6b:	83 c2 01             	add    $0x1,%edx
+80102c6e:	39 d0                	cmp    %edx,%eax
+80102c70:	75 ee                	jne    80102c60 <write_head+0x30>
   }
   bwrite(buf);
-801036c2:	83 ec 0c             	sub    $0xc,%esp
-801036c5:	53                   	push   %ebx
-801036c6:	e8 e5 ca ff ff       	call   801001b0 <bwrite>
+80102c72:	83 ec 0c             	sub    $0xc,%esp
+80102c75:	53                   	push   %ebx
+80102c76:	e8 35 d5 ff ff       	call   801001b0 <bwrite>
   brelse(buf);
-801036cb:	89 1c 24             	mov    %ebx,(%esp)
-801036ce:	e8 1d cb ff ff       	call   801001f0 <brelse>
+80102c7b:	89 1c 24             	mov    %ebx,(%esp)
+80102c7e:	e8 6d d5 ff ff       	call   801001f0 <brelse>
 }
-801036d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801036d6:	83 c4 10             	add    $0x10,%esp
-801036d9:	c9                   	leave  
-801036da:	c3                   	ret    
-801036db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801036df:	90                   	nop
-
-801036e0 <initlog>:
-{
-801036e0:	f3 0f 1e fb          	endbr32 
-801036e4:	55                   	push   %ebp
-801036e5:	89 e5                	mov    %esp,%ebp
-801036e7:	53                   	push   %ebx
-801036e8:	83 ec 2c             	sub    $0x2c,%esp
-801036eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102c86:	83 c4 10             	add    $0x10,%esp
+80102c89:	c9                   	leave  
+80102c8a:	c3                   	ret    
+80102c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102c8f:	90                   	nop
+
+80102c90 <initlog>:
+{
+80102c90:	f3 0f 1e fb          	endbr32 
+80102c94:	55                   	push   %ebp
+80102c95:	89 e5                	mov    %esp,%ebp
+80102c97:	53                   	push   %ebx
+80102c98:	83 ec 2c             	sub    $0x2c,%esp
+80102c9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-801036ee:	68 60 80 10 80       	push   $0x80108060
-801036f3:	68 80 40 11 80       	push   $0x80114080
-801036f8:	e8 33 17 00 00       	call   80104e30 <initlock>
+80102c9e:	68 80 75 10 80       	push   $0x80107580
+80102ca3:	68 80 26 11 80       	push   $0x80112680
+80102ca8:	e8 33 17 00 00       	call   801043e0 <initlock>
   readsb(dev, &sb);
-801036fd:	58                   	pop    %eax
-801036fe:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80103701:	5a                   	pop    %edx
-80103702:	50                   	push   %eax
-80103703:	53                   	push   %ebx
-80103704:	e8 47 e8 ff ff       	call   80101f50 <readsb>
+80102cad:	58                   	pop    %eax
+80102cae:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80102cb1:	5a                   	pop    %edx
+80102cb2:	50                   	push   %eax
+80102cb3:	53                   	push   %ebx
+80102cb4:	e8 47 e8 ff ff       	call   80101500 <readsb>
   log.start = sb.logstart;
-80103709:	8b 45 ec             	mov    -0x14(%ebp),%eax
+80102cb9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   struct buf *buf = bread(log.dev, log.start);
-8010370c:	59                   	pop    %ecx
+80102cbc:	59                   	pop    %ecx
   log.dev = dev;
-8010370d:	89 1d c4 40 11 80    	mov    %ebx,0x801140c4
+80102cbd:	89 1d c4 26 11 80    	mov    %ebx,0x801126c4
   log.size = sb.nlog;
-80103713:	8b 55 e8             	mov    -0x18(%ebp),%edx
+80102cc3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   log.start = sb.logstart;
-80103716:	a3 b4 40 11 80       	mov    %eax,0x801140b4
+80102cc6:	a3 b4 26 11 80       	mov    %eax,0x801126b4
   log.size = sb.nlog;
-8010371b:	89 15 b8 40 11 80    	mov    %edx,0x801140b8
+80102ccb:	89 15 b8 26 11 80    	mov    %edx,0x801126b8
   struct buf *buf = bread(log.dev, log.start);
-80103721:	5a                   	pop    %edx
-80103722:	50                   	push   %eax
-80103723:	53                   	push   %ebx
-80103724:	e8 a7 c9 ff ff       	call   801000d0 <bread>
+80102cd1:	5a                   	pop    %edx
+80102cd2:	50                   	push   %eax
+80102cd3:	53                   	push   %ebx
+80102cd4:	e8 f7 d3 ff ff       	call   801000d0 <bread>
   for (i = 0; i < log.lh.n; i++) {
-80103729:	83 c4 10             	add    $0x10,%esp
+80102cd9:	83 c4 10             	add    $0x10,%esp
   log.lh.n = lh->n;
-8010372c:	8b 48 5c             	mov    0x5c(%eax),%ecx
-8010372f:	89 0d c8 40 11 80    	mov    %ecx,0x801140c8
+80102cdc:	8b 48 5c             	mov    0x5c(%eax),%ecx
+80102cdf:	89 0d c8 26 11 80    	mov    %ecx,0x801126c8
   for (i = 0; i < log.lh.n; i++) {
-80103735:	85 c9                	test   %ecx,%ecx
-80103737:	7e 19                	jle    80103752 <initlog+0x72>
-80103739:	31 d2                	xor    %edx,%edx
-8010373b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010373f:	90                   	nop
+80102ce5:	85 c9                	test   %ecx,%ecx
+80102ce7:	7e 19                	jle    80102d02 <initlog+0x72>
+80102ce9:	31 d2                	xor    %edx,%edx
+80102ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102cef:	90                   	nop
     log.lh.block[i] = lh->block[i];
-80103740:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
-80103744:	89 1c 95 cc 40 11 80 	mov    %ebx,-0x7feebf34(,%edx,4)
+80102cf0:	8b 5c 90 60          	mov    0x60(%eax,%edx,4),%ebx
+80102cf4:	89 1c 95 cc 26 11 80 	mov    %ebx,-0x7feed934(,%edx,4)
   for (i = 0; i < log.lh.n; i++) {
-8010374b:	83 c2 01             	add    $0x1,%edx
-8010374e:	39 d1                	cmp    %edx,%ecx
-80103750:	75 ee                	jne    80103740 <initlog+0x60>
+80102cfb:	83 c2 01             	add    $0x1,%edx
+80102cfe:	39 d1                	cmp    %edx,%ecx
+80102d00:	75 ee                	jne    80102cf0 <initlog+0x60>
   brelse(buf);
-80103752:	83 ec 0c             	sub    $0xc,%esp
-80103755:	50                   	push   %eax
-80103756:	e8 95 ca ff ff       	call   801001f0 <brelse>
+80102d02:	83 ec 0c             	sub    $0xc,%esp
+80102d05:	50                   	push   %eax
+80102d06:	e8 e5 d4 ff ff       	call   801001f0 <brelse>
 
 static void
 recover_from_log(void)
 {
   read_head();
   install_trans(); // if committed, copy from log to disk
-8010375b:	e8 80 fe ff ff       	call   801035e0 <install_trans>
+80102d0b:	e8 80 fe ff ff       	call   80102b90 <install_trans>
   log.lh.n = 0;
-80103760:	c7 05 c8 40 11 80 00 	movl   $0x0,0x801140c8
-80103767:	00 00 00 
+80102d10:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102d17:	00 00 00 
   write_head(); // clear the log
-8010376a:	e8 11 ff ff ff       	call   80103680 <write_head>
+80102d1a:	e8 11 ff ff ff       	call   80102c30 <write_head>
 }
-8010376f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103772:	83 c4 10             	add    $0x10,%esp
-80103775:	c9                   	leave  
-80103776:	c3                   	ret    
-80103777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010377e:	66 90                	xchg   %ax,%ax
+80102d1f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102d22:	83 c4 10             	add    $0x10,%esp
+80102d25:	c9                   	leave  
+80102d26:	c3                   	ret    
+80102d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d2e:	66 90                	xchg   %ax,%ax
 
-80103780 <begin_op>:
+80102d30 <begin_op>:
 }
 
 // called at the start of each FS system call.
 void
 begin_op(void)
 {
-80103780:	f3 0f 1e fb          	endbr32 
-80103784:	55                   	push   %ebp
-80103785:	89 e5                	mov    %esp,%ebp
-80103787:	83 ec 14             	sub    $0x14,%esp
+80102d30:	f3 0f 1e fb          	endbr32 
+80102d34:	55                   	push   %ebp
+80102d35:	89 e5                	mov    %esp,%ebp
+80102d37:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
-8010378a:	68 80 40 11 80       	push   $0x80114080
-8010378f:	e8 1c 18 00 00       	call   80104fb0 <acquire>
-80103794:	83 c4 10             	add    $0x10,%esp
-80103797:	eb 1c                	jmp    801037b5 <begin_op+0x35>
-80103799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102d3a:	68 80 26 11 80       	push   $0x80112680
+80102d3f:	e8 1c 18 00 00       	call   80104560 <acquire>
+80102d44:	83 c4 10             	add    $0x10,%esp
+80102d47:	eb 1c                	jmp    80102d65 <begin_op+0x35>
+80102d49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   while(1){
     if(log.committing){
       sleep(&log, &log.lock);
-801037a0:	83 ec 08             	sub    $0x8,%esp
-801037a3:	68 80 40 11 80       	push   $0x80114080
-801037a8:	68 80 40 11 80       	push   $0x80114080
-801037ad:	e8 be 11 00 00       	call   80104970 <sleep>
-801037b2:	83 c4 10             	add    $0x10,%esp
+80102d50:	83 ec 08             	sub    $0x8,%esp
+80102d53:	68 80 26 11 80       	push   $0x80112680
+80102d58:	68 80 26 11 80       	push   $0x80112680
+80102d5d:	e8 be 11 00 00       	call   80103f20 <sleep>
+80102d62:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
-801037b5:	a1 c0 40 11 80       	mov    0x801140c0,%eax
-801037ba:	85 c0                	test   %eax,%eax
-801037bc:	75 e2                	jne    801037a0 <begin_op+0x20>
+80102d65:	a1 c0 26 11 80       	mov    0x801126c0,%eax
+80102d6a:	85 c0                	test   %eax,%eax
+80102d6c:	75 e2                	jne    80102d50 <begin_op+0x20>
     } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-801037be:	a1 bc 40 11 80       	mov    0x801140bc,%eax
-801037c3:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
-801037c9:	83 c0 01             	add    $0x1,%eax
-801037cc:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
-801037cf:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
-801037d2:	83 fa 1e             	cmp    $0x1e,%edx
-801037d5:	7f c9                	jg     801037a0 <begin_op+0x20>
+80102d6e:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102d73:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102d79:	83 c0 01             	add    $0x1,%eax
+80102d7c:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
+80102d7f:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
+80102d82:	83 fa 1e             	cmp    $0x1e,%edx
+80102d85:	7f c9                	jg     80102d50 <begin_op+0x20>
       // this op might exhaust log space; wait for commit.
       sleep(&log, &log.lock);
     } else {
       log.outstanding += 1;
       release(&log.lock);
-801037d7:	83 ec 0c             	sub    $0xc,%esp
+80102d87:	83 ec 0c             	sub    $0xc,%esp
       log.outstanding += 1;
-801037da:	a3 bc 40 11 80       	mov    %eax,0x801140bc
+80102d8a:	a3 bc 26 11 80       	mov    %eax,0x801126bc
       release(&log.lock);
-801037df:	68 80 40 11 80       	push   $0x80114080
-801037e4:	e8 87 18 00 00       	call   80105070 <release>
+80102d8f:	68 80 26 11 80       	push   $0x80112680
+80102d94:	e8 87 18 00 00       	call   80104620 <release>
       break;
     }
   }
 }
-801037e9:	83 c4 10             	add    $0x10,%esp
-801037ec:	c9                   	leave  
-801037ed:	c3                   	ret    
-801037ee:	66 90                	xchg   %ax,%ax
+80102d99:	83 c4 10             	add    $0x10,%esp
+80102d9c:	c9                   	leave  
+80102d9d:	c3                   	ret    
+80102d9e:	66 90                	xchg   %ax,%ax
 
-801037f0 <end_op>:
+80102da0 <end_op>:
 
 // called at the end of each FS system call.
 // commits if this was the last outstanding operation.
 void
 end_op(void)
 {
-801037f0:	f3 0f 1e fb          	endbr32 
-801037f4:	55                   	push   %ebp
-801037f5:	89 e5                	mov    %esp,%ebp
-801037f7:	57                   	push   %edi
-801037f8:	56                   	push   %esi
-801037f9:	53                   	push   %ebx
-801037fa:	83 ec 18             	sub    $0x18,%esp
+80102da0:	f3 0f 1e fb          	endbr32 
+80102da4:	55                   	push   %ebp
+80102da5:	89 e5                	mov    %esp,%ebp
+80102da7:	57                   	push   %edi
+80102da8:	56                   	push   %esi
+80102da9:	53                   	push   %ebx
+80102daa:	83 ec 18             	sub    $0x18,%esp
   int do_commit = 0;
 
   acquire(&log.lock);
-801037fd:	68 80 40 11 80       	push   $0x80114080
-80103802:	e8 a9 17 00 00       	call   80104fb0 <acquire>
+80102dad:	68 80 26 11 80       	push   $0x80112680
+80102db2:	e8 a9 17 00 00       	call   80104560 <acquire>
   log.outstanding -= 1;
-80103807:	a1 bc 40 11 80       	mov    0x801140bc,%eax
+80102db7:	a1 bc 26 11 80       	mov    0x801126bc,%eax
   if(log.committing)
-8010380c:	8b 35 c0 40 11 80    	mov    0x801140c0,%esi
-80103812:	83 c4 10             	add    $0x10,%esp
+80102dbc:	8b 35 c0 26 11 80    	mov    0x801126c0,%esi
+80102dc2:	83 c4 10             	add    $0x10,%esp
   log.outstanding -= 1;
-80103815:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80103818:	89 1d bc 40 11 80    	mov    %ebx,0x801140bc
+80102dc5:	8d 58 ff             	lea    -0x1(%eax),%ebx
+80102dc8:	89 1d bc 26 11 80    	mov    %ebx,0x801126bc
   if(log.committing)
-8010381e:	85 f6                	test   %esi,%esi
-80103820:	0f 85 1e 01 00 00    	jne    80103944 <end_op+0x154>
+80102dce:	85 f6                	test   %esi,%esi
+80102dd0:	0f 85 1e 01 00 00    	jne    80102ef4 <end_op+0x154>
     panic("log.committing");
   if(log.outstanding == 0){
-80103826:	85 db                	test   %ebx,%ebx
-80103828:	0f 85 f2 00 00 00    	jne    80103920 <end_op+0x130>
+80102dd6:	85 db                	test   %ebx,%ebx
+80102dd8:	0f 85 f2 00 00 00    	jne    80102ed0 <end_op+0x130>
     do_commit = 1;
     log.committing = 1;
-8010382e:	c7 05 c0 40 11 80 01 	movl   $0x1,0x801140c0
-80103835:	00 00 00 
+80102dde:	c7 05 c0 26 11 80 01 	movl   $0x1,0x801126c0
+80102de5:	00 00 00 
     // begin_op() may be waiting for log space,
     // and decrementing log.outstanding has decreased
     // the amount of reserved space.
     wakeup(&log);
   }
   release(&log.lock);
-80103838:	83 ec 0c             	sub    $0xc,%esp
-8010383b:	68 80 40 11 80       	push   $0x80114080
-80103840:	e8 2b 18 00 00       	call   80105070 <release>
+80102de8:	83 ec 0c             	sub    $0xc,%esp
+80102deb:	68 80 26 11 80       	push   $0x80112680
+80102df0:	e8 2b 18 00 00       	call   80104620 <release>
 }
 
 static void
 commit()
 {
   if (log.lh.n > 0) {
-80103845:	8b 0d c8 40 11 80    	mov    0x801140c8,%ecx
-8010384b:	83 c4 10             	add    $0x10,%esp
-8010384e:	85 c9                	test   %ecx,%ecx
-80103850:	7f 3e                	jg     80103890 <end_op+0xa0>
+80102df5:	8b 0d c8 26 11 80    	mov    0x801126c8,%ecx
+80102dfb:	83 c4 10             	add    $0x10,%esp
+80102dfe:	85 c9                	test   %ecx,%ecx
+80102e00:	7f 3e                	jg     80102e40 <end_op+0xa0>
     acquire(&log.lock);
-80103852:	83 ec 0c             	sub    $0xc,%esp
-80103855:	68 80 40 11 80       	push   $0x80114080
-8010385a:	e8 51 17 00 00       	call   80104fb0 <acquire>
+80102e02:	83 ec 0c             	sub    $0xc,%esp
+80102e05:	68 80 26 11 80       	push   $0x80112680
+80102e0a:	e8 51 17 00 00       	call   80104560 <acquire>
     wakeup(&log);
-8010385f:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
+80102e0f:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
     log.committing = 0;
-80103866:	c7 05 c0 40 11 80 00 	movl   $0x0,0x801140c0
-8010386d:	00 00 00 
+80102e16:	c7 05 c0 26 11 80 00 	movl   $0x0,0x801126c0
+80102e1d:	00 00 00 
     wakeup(&log);
-80103870:	e8 bb 12 00 00       	call   80104b30 <wakeup>
+80102e20:	e8 bb 12 00 00       	call   801040e0 <wakeup>
     release(&log.lock);
-80103875:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
-8010387c:	e8 ef 17 00 00       	call   80105070 <release>
-80103881:	83 c4 10             	add    $0x10,%esp
-}
-80103884:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103887:	5b                   	pop    %ebx
-80103888:	5e                   	pop    %esi
-80103889:	5f                   	pop    %edi
-8010388a:	5d                   	pop    %ebp
-8010388b:	c3                   	ret    
-8010388c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102e25:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102e2c:	e8 ef 17 00 00       	call   80104620 <release>
+80102e31:	83 c4 10             	add    $0x10,%esp
+}
+80102e34:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102e37:	5b                   	pop    %ebx
+80102e38:	5e                   	pop    %esi
+80102e39:	5f                   	pop    %edi
+80102e3a:	5d                   	pop    %ebp
+80102e3b:	c3                   	ret    
+80102e3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80103890:	a1 b4 40 11 80       	mov    0x801140b4,%eax
-80103895:	83 ec 08             	sub    $0x8,%esp
-80103898:	01 d8                	add    %ebx,%eax
-8010389a:	83 c0 01             	add    $0x1,%eax
-8010389d:	50                   	push   %eax
-8010389e:	ff 35 c4 40 11 80    	pushl  0x801140c4
-801038a4:	e8 27 c8 ff ff       	call   801000d0 <bread>
-801038a9:	89 c6                	mov    %eax,%esi
+80102e40:	a1 b4 26 11 80       	mov    0x801126b4,%eax
+80102e45:	83 ec 08             	sub    $0x8,%esp
+80102e48:	01 d8                	add    %ebx,%eax
+80102e4a:	83 c0 01             	add    $0x1,%eax
+80102e4d:	50                   	push   %eax
+80102e4e:	ff 35 c4 26 11 80    	pushl  0x801126c4
+80102e54:	e8 77 d2 ff ff       	call   801000d0 <bread>
+80102e59:	89 c6                	mov    %eax,%esi
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-801038ab:	58                   	pop    %eax
-801038ac:	5a                   	pop    %edx
-801038ad:	ff 34 9d cc 40 11 80 	pushl  -0x7feebf34(,%ebx,4)
-801038b4:	ff 35 c4 40 11 80    	pushl  0x801140c4
+80102e5b:	58                   	pop    %eax
+80102e5c:	5a                   	pop    %edx
+80102e5d:	ff 34 9d cc 26 11 80 	pushl  -0x7feed934(,%ebx,4)
+80102e64:	ff 35 c4 26 11 80    	pushl  0x801126c4
   for (tail = 0; tail < log.lh.n; tail++) {
-801038ba:	83 c3 01             	add    $0x1,%ebx
+80102e6a:	83 c3 01             	add    $0x1,%ebx
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-801038bd:	e8 0e c8 ff ff       	call   801000d0 <bread>
+80102e6d:	e8 5e d2 ff ff       	call   801000d0 <bread>
     memmove(to->data, from->data, BSIZE);
-801038c2:	83 c4 0c             	add    $0xc,%esp
+80102e72:	83 c4 0c             	add    $0xc,%esp
     struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-801038c5:	89 c7                	mov    %eax,%edi
+80102e75:	89 c7                	mov    %eax,%edi
     memmove(to->data, from->data, BSIZE);
-801038c7:	8d 40 5c             	lea    0x5c(%eax),%eax
-801038ca:	68 00 02 00 00       	push   $0x200
-801038cf:	50                   	push   %eax
-801038d0:	8d 46 5c             	lea    0x5c(%esi),%eax
-801038d3:	50                   	push   %eax
-801038d4:	e8 87 18 00 00       	call   80105160 <memmove>
+80102e77:	8d 40 5c             	lea    0x5c(%eax),%eax
+80102e7a:	68 00 02 00 00       	push   $0x200
+80102e7f:	50                   	push   %eax
+80102e80:	8d 46 5c             	lea    0x5c(%esi),%eax
+80102e83:	50                   	push   %eax
+80102e84:	e8 87 18 00 00       	call   80104710 <memmove>
     bwrite(to);  // write the log
-801038d9:	89 34 24             	mov    %esi,(%esp)
-801038dc:	e8 cf c8 ff ff       	call   801001b0 <bwrite>
+80102e89:	89 34 24             	mov    %esi,(%esp)
+80102e8c:	e8 1f d3 ff ff       	call   801001b0 <bwrite>
     brelse(from);
-801038e1:	89 3c 24             	mov    %edi,(%esp)
-801038e4:	e8 07 c9 ff ff       	call   801001f0 <brelse>
+80102e91:	89 3c 24             	mov    %edi,(%esp)
+80102e94:	e8 57 d3 ff ff       	call   801001f0 <brelse>
     brelse(to);
-801038e9:	89 34 24             	mov    %esi,(%esp)
-801038ec:	e8 ff c8 ff ff       	call   801001f0 <brelse>
+80102e99:	89 34 24             	mov    %esi,(%esp)
+80102e9c:	e8 4f d3 ff ff       	call   801001f0 <brelse>
   for (tail = 0; tail < log.lh.n; tail++) {
-801038f1:	83 c4 10             	add    $0x10,%esp
-801038f4:	3b 1d c8 40 11 80    	cmp    0x801140c8,%ebx
-801038fa:	7c 94                	jl     80103890 <end_op+0xa0>
+80102ea1:	83 c4 10             	add    $0x10,%esp
+80102ea4:	3b 1d c8 26 11 80    	cmp    0x801126c8,%ebx
+80102eaa:	7c 94                	jl     80102e40 <end_op+0xa0>
     write_log();     // Write modified blocks from cache to log
     write_head();    // Write header to disk -- the real commit
-801038fc:	e8 7f fd ff ff       	call   80103680 <write_head>
+80102eac:	e8 7f fd ff ff       	call   80102c30 <write_head>
     install_trans(); // Now install writes to home locations
-80103901:	e8 da fc ff ff       	call   801035e0 <install_trans>
+80102eb1:	e8 da fc ff ff       	call   80102b90 <install_trans>
     log.lh.n = 0;
-80103906:	c7 05 c8 40 11 80 00 	movl   $0x0,0x801140c8
-8010390d:	00 00 00 
+80102eb6:	c7 05 c8 26 11 80 00 	movl   $0x0,0x801126c8
+80102ebd:	00 00 00 
     write_head();    // Erase the transaction from the log
-80103910:	e8 6b fd ff ff       	call   80103680 <write_head>
-80103915:	e9 38 ff ff ff       	jmp    80103852 <end_op+0x62>
-8010391a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102ec0:	e8 6b fd ff ff       	call   80102c30 <write_head>
+80102ec5:	e9 38 ff ff ff       	jmp    80102e02 <end_op+0x62>
+80102eca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     wakeup(&log);
-80103920:	83 ec 0c             	sub    $0xc,%esp
-80103923:	68 80 40 11 80       	push   $0x80114080
-80103928:	e8 03 12 00 00       	call   80104b30 <wakeup>
+80102ed0:	83 ec 0c             	sub    $0xc,%esp
+80102ed3:	68 80 26 11 80       	push   $0x80112680
+80102ed8:	e8 03 12 00 00       	call   801040e0 <wakeup>
   release(&log.lock);
-8010392d:	c7 04 24 80 40 11 80 	movl   $0x80114080,(%esp)
-80103934:	e8 37 17 00 00       	call   80105070 <release>
-80103939:	83 c4 10             	add    $0x10,%esp
-}
-8010393c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010393f:	5b                   	pop    %ebx
-80103940:	5e                   	pop    %esi
-80103941:	5f                   	pop    %edi
-80103942:	5d                   	pop    %ebp
-80103943:	c3                   	ret    
+80102edd:	c7 04 24 80 26 11 80 	movl   $0x80112680,(%esp)
+80102ee4:	e8 37 17 00 00       	call   80104620 <release>
+80102ee9:	83 c4 10             	add    $0x10,%esp
+}
+80102eec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80102eef:	5b                   	pop    %ebx
+80102ef0:	5e                   	pop    %esi
+80102ef1:	5f                   	pop    %edi
+80102ef2:	5d                   	pop    %ebp
+80102ef3:	c3                   	ret    
     panic("log.committing");
-80103944:	83 ec 0c             	sub    $0xc,%esp
-80103947:	68 64 80 10 80       	push   $0x80108064
-8010394c:	e8 3f ca ff ff       	call   80100390 <panic>
-80103951:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103958:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010395f:	90                   	nop
+80102ef4:	83 ec 0c             	sub    $0xc,%esp
+80102ef7:	68 84 75 10 80       	push   $0x80107584
+80102efc:	e8 8f d4 ff ff       	call   80100390 <panic>
+80102f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80102f0f:	90                   	nop
 
-80103960 <log_write>:
+80102f10 <log_write>:
 //   modify bp->data[]
 //   log_write(bp)
 //   brelse(bp)
 void
 log_write(struct buf *b)
 {
-80103960:	f3 0f 1e fb          	endbr32 
-80103964:	55                   	push   %ebp
-80103965:	89 e5                	mov    %esp,%ebp
-80103967:	53                   	push   %ebx
-80103968:	83 ec 04             	sub    $0x4,%esp
+80102f10:	f3 0f 1e fb          	endbr32 
+80102f14:	55                   	push   %ebp
+80102f15:	89 e5                	mov    %esp,%ebp
+80102f17:	53                   	push   %ebx
+80102f18:	83 ec 04             	sub    $0x4,%esp
   int i;
 
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-8010396b:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
+80102f1b:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
 {
-80103971:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80102f21:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80103974:	83 fa 1d             	cmp    $0x1d,%edx
-80103977:	0f 8f 91 00 00 00    	jg     80103a0e <log_write+0xae>
-8010397d:	a1 b8 40 11 80       	mov    0x801140b8,%eax
-80103982:	83 e8 01             	sub    $0x1,%eax
-80103985:	39 c2                	cmp    %eax,%edx
-80103987:	0f 8d 81 00 00 00    	jge    80103a0e <log_write+0xae>
+80102f24:	83 fa 1d             	cmp    $0x1d,%edx
+80102f27:	0f 8f 91 00 00 00    	jg     80102fbe <log_write+0xae>
+80102f2d:	a1 b8 26 11 80       	mov    0x801126b8,%eax
+80102f32:	83 e8 01             	sub    $0x1,%eax
+80102f35:	39 c2                	cmp    %eax,%edx
+80102f37:	0f 8d 81 00 00 00    	jge    80102fbe <log_write+0xae>
     panic("too big a transaction");
   if (log.outstanding < 1)
-8010398d:	a1 bc 40 11 80       	mov    0x801140bc,%eax
-80103992:	85 c0                	test   %eax,%eax
-80103994:	0f 8e 81 00 00 00    	jle    80103a1b <log_write+0xbb>
+80102f3d:	a1 bc 26 11 80       	mov    0x801126bc,%eax
+80102f42:	85 c0                	test   %eax,%eax
+80102f44:	0f 8e 81 00 00 00    	jle    80102fcb <log_write+0xbb>
     panic("log_write outside of trans");
 
   acquire(&log.lock);
-8010399a:	83 ec 0c             	sub    $0xc,%esp
-8010399d:	68 80 40 11 80       	push   $0x80114080
-801039a2:	e8 09 16 00 00       	call   80104fb0 <acquire>
+80102f4a:	83 ec 0c             	sub    $0xc,%esp
+80102f4d:	68 80 26 11 80       	push   $0x80112680
+80102f52:	e8 09 16 00 00       	call   80104560 <acquire>
   for (i = 0; i < log.lh.n; i++) {
-801039a7:	8b 15 c8 40 11 80    	mov    0x801140c8,%edx
-801039ad:	83 c4 10             	add    $0x10,%esp
-801039b0:	85 d2                	test   %edx,%edx
-801039b2:	7e 4e                	jle    80103a02 <log_write+0xa2>
+80102f57:	8b 15 c8 26 11 80    	mov    0x801126c8,%edx
+80102f5d:	83 c4 10             	add    $0x10,%esp
+80102f60:	85 d2                	test   %edx,%edx
+80102f62:	7e 4e                	jle    80102fb2 <log_write+0xa2>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-801039b4:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80102f64:	8b 4b 08             	mov    0x8(%ebx),%ecx
   for (i = 0; i < log.lh.n; i++) {
-801039b7:	31 c0                	xor    %eax,%eax
-801039b9:	eb 0c                	jmp    801039c7 <log_write+0x67>
-801039bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801039bf:	90                   	nop
-801039c0:	83 c0 01             	add    $0x1,%eax
-801039c3:	39 c2                	cmp    %eax,%edx
-801039c5:	74 29                	je     801039f0 <log_write+0x90>
+80102f67:	31 c0                	xor    %eax,%eax
+80102f69:	eb 0c                	jmp    80102f77 <log_write+0x67>
+80102f6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80102f6f:	90                   	nop
+80102f70:	83 c0 01             	add    $0x1,%eax
+80102f73:	39 c2                	cmp    %eax,%edx
+80102f75:	74 29                	je     80102fa0 <log_write+0x90>
     if (log.lh.block[i] == b->blockno)   // log absorbtion
-801039c7:	39 0c 85 cc 40 11 80 	cmp    %ecx,-0x7feebf34(,%eax,4)
-801039ce:	75 f0                	jne    801039c0 <log_write+0x60>
+80102f77:	39 0c 85 cc 26 11 80 	cmp    %ecx,-0x7feed934(,%eax,4)
+80102f7e:	75 f0                	jne    80102f70 <log_write+0x60>
       break;
   }
   log.lh.block[i] = b->blockno;
-801039d0:	89 0c 85 cc 40 11 80 	mov    %ecx,-0x7feebf34(,%eax,4)
+80102f80:	89 0c 85 cc 26 11 80 	mov    %ecx,-0x7feed934(,%eax,4)
   if (i == log.lh.n)
     log.lh.n++;
   b->flags |= B_DIRTY; // prevent eviction
-801039d7:	83 0b 04             	orl    $0x4,(%ebx)
+80102f87:	83 0b 04             	orl    $0x4,(%ebx)
   release(&log.lock);
 }
-801039da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80102f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   release(&log.lock);
-801039dd:	c7 45 08 80 40 11 80 	movl   $0x80114080,0x8(%ebp)
+80102f8d:	c7 45 08 80 26 11 80 	movl   $0x80112680,0x8(%ebp)
 }
-801039e4:	c9                   	leave  
+80102f94:	c9                   	leave  
   release(&log.lock);
-801039e5:	e9 86 16 00 00       	jmp    80105070 <release>
-801039ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80102f95:	e9 86 16 00 00       	jmp    80104620 <release>
+80102f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
-801039f0:	89 0c 95 cc 40 11 80 	mov    %ecx,-0x7feebf34(,%edx,4)
+80102fa0:	89 0c 95 cc 26 11 80 	mov    %ecx,-0x7feed934(,%edx,4)
     log.lh.n++;
-801039f7:	83 c2 01             	add    $0x1,%edx
-801039fa:	89 15 c8 40 11 80    	mov    %edx,0x801140c8
-80103a00:	eb d5                	jmp    801039d7 <log_write+0x77>
+80102fa7:	83 c2 01             	add    $0x1,%edx
+80102faa:	89 15 c8 26 11 80    	mov    %edx,0x801126c8
+80102fb0:	eb d5                	jmp    80102f87 <log_write+0x77>
   log.lh.block[i] = b->blockno;
-80103a02:	8b 43 08             	mov    0x8(%ebx),%eax
-80103a05:	a3 cc 40 11 80       	mov    %eax,0x801140cc
+80102fb2:	8b 43 08             	mov    0x8(%ebx),%eax
+80102fb5:	a3 cc 26 11 80       	mov    %eax,0x801126cc
   if (i == log.lh.n)
-80103a0a:	75 cb                	jne    801039d7 <log_write+0x77>
-80103a0c:	eb e9                	jmp    801039f7 <log_write+0x97>
+80102fba:	75 cb                	jne    80102f87 <log_write+0x77>
+80102fbc:	eb e9                	jmp    80102fa7 <log_write+0x97>
     panic("too big a transaction");
-80103a0e:	83 ec 0c             	sub    $0xc,%esp
-80103a11:	68 73 80 10 80       	push   $0x80108073
-80103a16:	e8 75 c9 ff ff       	call   80100390 <panic>
+80102fbe:	83 ec 0c             	sub    $0xc,%esp
+80102fc1:	68 93 75 10 80       	push   $0x80107593
+80102fc6:	e8 c5 d3 ff ff       	call   80100390 <panic>
     panic("log_write outside of trans");
-80103a1b:	83 ec 0c             	sub    $0xc,%esp
-80103a1e:	68 89 80 10 80       	push   $0x80108089
-80103a23:	e8 68 c9 ff ff       	call   80100390 <panic>
-80103a28:	66 90                	xchg   %ax,%ax
-80103a2a:	66 90                	xchg   %ax,%ax
-80103a2c:	66 90                	xchg   %ax,%ax
-80103a2e:	66 90                	xchg   %ax,%ax
+80102fcb:	83 ec 0c             	sub    $0xc,%esp
+80102fce:	68 a9 75 10 80       	push   $0x801075a9
+80102fd3:	e8 b8 d3 ff ff       	call   80100390 <panic>
+80102fd8:	66 90                	xchg   %ax,%ax
+80102fda:	66 90                	xchg   %ax,%ax
+80102fdc:	66 90                	xchg   %ax,%ax
+80102fde:	66 90                	xchg   %ax,%ax
 
-80103a30 <mpmain>:
+80102fe0 <mpmain>:
 }
 
 // Common CPU setup code.
 static void
 mpmain(void)
 {
-80103a30:	55                   	push   %ebp
-80103a31:	89 e5                	mov    %esp,%ebp
-80103a33:	53                   	push   %ebx
-80103a34:	83 ec 04             	sub    $0x4,%esp
+80102fe0:	55                   	push   %ebp
+80102fe1:	89 e5                	mov    %esp,%ebp
+80102fe3:	53                   	push   %ebx
+80102fe4:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80103a37:	e8 54 09 00 00       	call   80104390 <cpuid>
-80103a3c:	89 c3                	mov    %eax,%ebx
-80103a3e:	e8 4d 09 00 00       	call   80104390 <cpuid>
-80103a43:	83 ec 04             	sub    $0x4,%esp
-80103a46:	53                   	push   %ebx
-80103a47:	50                   	push   %eax
-80103a48:	68 a4 80 10 80       	push   $0x801080a4
-80103a4d:	e8 9e cc ff ff       	call   801006f0 <cprintf>
+80102fe7:	e8 54 09 00 00       	call   80103940 <cpuid>
+80102fec:	89 c3                	mov    %eax,%ebx
+80102fee:	e8 4d 09 00 00       	call   80103940 <cpuid>
+80102ff3:	83 ec 04             	sub    $0x4,%esp
+80102ff6:	53                   	push   %ebx
+80102ff7:	50                   	push   %eax
+80102ff8:	68 c4 75 10 80       	push   $0x801075c4
+80102ffd:	e8 ae d6 ff ff       	call   801006b0 <cprintf>
   idtinit();       // load idt register
-80103a52:	e8 69 29 00 00       	call   801063c0 <idtinit>
+80103002:	e8 19 29 00 00       	call   80105920 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103a57:	e8 c4 08 00 00       	call   80104320 <mycpu>
-80103a5c:	89 c2                	mov    %eax,%edx
+80103007:	e8 c4 08 00 00       	call   801038d0 <mycpu>
+8010300c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
   uint result;
 
   // The + in "+m" denotes a read-modify-write operand.
   asm volatile("lock; xchgl %0, %1" :
-80103a5e:	b8 01 00 00 00       	mov    $0x1,%eax
-80103a63:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
+8010300e:	b8 01 00 00 00       	mov    $0x1,%eax
+80103013:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-80103a6a:	e8 11 0c 00 00       	call   80104680 <scheduler>
-80103a6f:	90                   	nop
+8010301a:	e8 11 0c 00 00       	call   80103c30 <scheduler>
+8010301f:	90                   	nop
 
-80103a70 <mpenter>:
+80103020 <mpenter>:
 {
-80103a70:	f3 0f 1e fb          	endbr32 
-80103a74:	55                   	push   %ebp
-80103a75:	89 e5                	mov    %esp,%ebp
-80103a77:	83 ec 08             	sub    $0x8,%esp
+80103020:	f3 0f 1e fb          	endbr32 
+80103024:	55                   	push   %ebp
+80103025:	89 e5                	mov    %esp,%ebp
+80103027:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80103a7a:	e8 11 3a 00 00       	call   80107490 <switchkvm>
+8010302a:	e8 c1 39 00 00       	call   801069f0 <switchkvm>
   seginit();
-80103a7f:	e8 7c 39 00 00       	call   80107400 <seginit>
+8010302f:	e8 2c 39 00 00       	call   80106960 <seginit>
   lapicinit();
-80103a84:	e8 67 f7 ff ff       	call   801031f0 <lapicinit>
+80103034:	e8 67 f7 ff ff       	call   801027a0 <lapicinit>
   mpmain();
-80103a89:	e8 a2 ff ff ff       	call   80103a30 <mpmain>
-80103a8e:	66 90                	xchg   %ax,%ax
+80103039:	e8 a2 ff ff ff       	call   80102fe0 <mpmain>
+8010303e:	66 90                	xchg   %ax,%ax
 
-80103a90 <main>:
+80103040 <main>:
 {
-80103a90:	f3 0f 1e fb          	endbr32 
-80103a94:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-80103a98:	83 e4 f0             	and    $0xfffffff0,%esp
-80103a9b:	ff 71 fc             	pushl  -0x4(%ecx)
-80103a9e:	55                   	push   %ebp
-80103a9f:	89 e5                	mov    %esp,%ebp
-80103aa1:	53                   	push   %ebx
-80103aa2:	51                   	push   %ecx
+80103040:	f3 0f 1e fb          	endbr32 
+80103044:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+80103048:	83 e4 f0             	and    $0xfffffff0,%esp
+8010304b:	ff 71 fc             	pushl  -0x4(%ecx)
+8010304e:	55                   	push   %ebp
+8010304f:	89 e5                	mov    %esp,%ebp
+80103051:	53                   	push   %ebx
+80103052:	51                   	push   %ecx
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
-80103aa3:	83 ec 08             	sub    $0x8,%esp
-80103aa6:	68 00 00 40 80       	push   $0x80400000
-80103aab:	68 a8 6e 11 80       	push   $0x80116ea8
-80103ab0:	e8 fb f4 ff ff       	call   80102fb0 <kinit1>
+80103053:	83 ec 08             	sub    $0x8,%esp
+80103056:	68 00 00 40 80       	push   $0x80400000
+8010305b:	68 a8 54 11 80       	push   $0x801154a8
+80103060:	e8 fb f4 ff ff       	call   80102560 <kinit1>
   kvmalloc();      // kernel page table
-80103ab5:	e8 b6 3e 00 00       	call   80107970 <kvmalloc>
+80103065:	e8 66 3e 00 00       	call   80106ed0 <kvmalloc>
   mpinit();        // detect other processors
-80103aba:	e8 81 01 00 00       	call   80103c40 <mpinit>
+8010306a:	e8 81 01 00 00       	call   801031f0 <mpinit>
   lapicinit();     // interrupt controller
-80103abf:	e8 2c f7 ff ff       	call   801031f0 <lapicinit>
+8010306f:	e8 2c f7 ff ff       	call   801027a0 <lapicinit>
   seginit();       // segment descriptors
-80103ac4:	e8 37 39 00 00       	call   80107400 <seginit>
+80103074:	e8 e7 38 00 00       	call   80106960 <seginit>
   picinit();       // disable pic
-80103ac9:	e8 52 03 00 00       	call   80103e20 <picinit>
+80103079:	e8 52 03 00 00       	call   801033d0 <picinit>
   ioapicinit();    // another interrupt controller
-80103ace:	e8 fd f2 ff ff       	call   80102dd0 <ioapicinit>
+8010307e:	e8 fd f2 ff ff       	call   80102380 <ioapicinit>
   consoleinit();   // console hardware
-80103ad3:	e8 98 d9 ff ff       	call   80101470 <consoleinit>
+80103083:	e8 a8 d9 ff ff       	call   80100a30 <consoleinit>
   uartinit();      // serial port
-80103ad8:	e8 e3 2b 00 00       	call   801066c0 <uartinit>
+80103088:	e8 93 2b 00 00       	call   80105c20 <uartinit>
   pinit();         // process table
-80103add:	e8 1e 08 00 00       	call   80104300 <pinit>
+8010308d:	e8 1e 08 00 00       	call   801038b0 <pinit>
   tvinit();        // trap vectors
-80103ae2:	e8 59 28 00 00       	call   80106340 <tvinit>
+80103092:	e8 09 28 00 00       	call   801058a0 <tvinit>
   binit();         // buffer cache
-80103ae7:	e8 54 c5 ff ff       	call   80100040 <binit>
+80103097:	e8 a4 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
-80103aec:	e8 3f dd ff ff       	call   80101830 <fileinit>
+8010309c:	e8 3f dd ff ff       	call   80100de0 <fileinit>
   ideinit();       // disk 
-80103af1:	e8 aa f0 ff ff       	call   80102ba0 <ideinit>
+801030a1:	e8 aa f0 ff ff       	call   80102150 <ideinit>
 
   // Write entry code to unused memory at 0x7000.
   // The linker has placed the image of entryother.S in
   // _binary_entryother_start.
   code = P2V(0x7000);
   memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-80103af6:	83 c4 0c             	add    $0xc,%esp
-80103af9:	68 8a 00 00 00       	push   $0x8a
-80103afe:	68 8c b4 10 80       	push   $0x8010b48c
-80103b03:	68 00 70 00 80       	push   $0x80007000
-80103b08:	e8 53 16 00 00       	call   80105160 <memmove>
+801030a6:	83 c4 0c             	add    $0xc,%esp
+801030a9:	68 8a 00 00 00       	push   $0x8a
+801030ae:	68 8c a4 10 80       	push   $0x8010a48c
+801030b3:	68 00 70 00 80       	push   $0x80007000
+801030b8:	e8 53 16 00 00       	call   80104710 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
-80103b0d:	83 c4 10             	add    $0x10,%esp
-80103b10:	69 05 00 47 11 80 b0 	imul   $0xb0,0x80114700,%eax
-80103b17:	00 00 00 
-80103b1a:	05 80 41 11 80       	add    $0x80114180,%eax
-80103b1f:	3d 80 41 11 80       	cmp    $0x80114180,%eax
-80103b24:	76 7a                	jbe    80103ba0 <main+0x110>
-80103b26:	bb 80 41 11 80       	mov    $0x80114180,%ebx
-80103b2b:	eb 1c                	jmp    80103b49 <main+0xb9>
-80103b2d:	8d 76 00             	lea    0x0(%esi),%esi
-80103b30:	69 05 00 47 11 80 b0 	imul   $0xb0,0x80114700,%eax
-80103b37:	00 00 00 
-80103b3a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-80103b40:	05 80 41 11 80       	add    $0x80114180,%eax
-80103b45:	39 c3                	cmp    %eax,%ebx
-80103b47:	73 57                	jae    80103ba0 <main+0x110>
+801030bd:	83 c4 10             	add    $0x10,%esp
+801030c0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030c7:	00 00 00 
+801030ca:	05 80 27 11 80       	add    $0x80112780,%eax
+801030cf:	3d 80 27 11 80       	cmp    $0x80112780,%eax
+801030d4:	76 7a                	jbe    80103150 <main+0x110>
+801030d6:	bb 80 27 11 80       	mov    $0x80112780,%ebx
+801030db:	eb 1c                	jmp    801030f9 <main+0xb9>
+801030dd:	8d 76 00             	lea    0x0(%esi),%esi
+801030e0:	69 05 00 2d 11 80 b0 	imul   $0xb0,0x80112d00,%eax
+801030e7:	00 00 00 
+801030ea:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
+801030f0:	05 80 27 11 80       	add    $0x80112780,%eax
+801030f5:	39 c3                	cmp    %eax,%ebx
+801030f7:	73 57                	jae    80103150 <main+0x110>
     if(c == mycpu())  // We've started already.
-80103b49:	e8 d2 07 00 00       	call   80104320 <mycpu>
-80103b4e:	39 c3                	cmp    %eax,%ebx
-80103b50:	74 de                	je     80103b30 <main+0xa0>
+801030f9:	e8 d2 07 00 00       	call   801038d0 <mycpu>
+801030fe:	39 c3                	cmp    %eax,%ebx
+80103100:	74 de                	je     801030e0 <main+0xa0>
       continue;
 
     // Tell entryother.S what stack to use, where to enter, and what
     // pgdir to use. We cannot use kpgdir yet, because the AP processor
     // is running in low  memory, so we use entrypgdir for the APs too.
     stack = kalloc();
-80103b52:	e8 29 f5 ff ff       	call   80103080 <kalloc>
+80103102:	e8 29 f5 ff ff       	call   80102630 <kalloc>
     *(void**)(code-4) = stack + KSTACKSIZE;
     *(void(**)(void))(code-8) = mpenter;
     *(int**)(code-12) = (void *) V2P(entrypgdir);
 
     lapicstartap(c->apicid, V2P(code));
-80103b57:	83 ec 08             	sub    $0x8,%esp
+80103107:	83 ec 08             	sub    $0x8,%esp
     *(void(**)(void))(code-8) = mpenter;
-80103b5a:	c7 05 f8 6f 00 80 70 	movl   $0x80103a70,0x80006ff8
-80103b61:	3a 10 80 
+8010310a:	c7 05 f8 6f 00 80 20 	movl   $0x80103020,0x80006ff8
+80103111:	30 10 80 
     *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103b64:	c7 05 f4 6f 00 80 00 	movl   $0x10a000,0x80006ff4
-80103b6b:	a0 10 00 
+80103114:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
+8010311b:	90 10 00 
     *(void**)(code-4) = stack + KSTACKSIZE;
-80103b6e:	05 00 10 00 00       	add    $0x1000,%eax
-80103b73:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
+8010311e:	05 00 10 00 00       	add    $0x1000,%eax
+80103123:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
     lapicstartap(c->apicid, V2P(code));
-80103b78:	0f b6 03             	movzbl (%ebx),%eax
-80103b7b:	68 00 70 00 00       	push   $0x7000
-80103b80:	50                   	push   %eax
-80103b81:	e8 ba f7 ff ff       	call   80103340 <lapicstartap>
+80103128:	0f b6 03             	movzbl (%ebx),%eax
+8010312b:	68 00 70 00 00       	push   $0x7000
+80103130:	50                   	push   %eax
+80103131:	e8 ba f7 ff ff       	call   801028f0 <lapicstartap>
 
     // wait for cpu to finish mpmain()
     while(c->started == 0)
-80103b86:	83 c4 10             	add    $0x10,%esp
-80103b89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b90:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
-80103b96:	85 c0                	test   %eax,%eax
-80103b98:	74 f6                	je     80103b90 <main+0x100>
-80103b9a:	eb 94                	jmp    80103b30 <main+0xa0>
-80103b9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103136:	83 c4 10             	add    $0x10,%esp
+80103139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103140:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
+80103146:	85 c0                	test   %eax,%eax
+80103148:	74 f6                	je     80103140 <main+0x100>
+8010314a:	eb 94                	jmp    801030e0 <main+0xa0>
+8010314c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-80103ba0:	83 ec 08             	sub    $0x8,%esp
-80103ba3:	68 00 00 00 8e       	push   $0x8e000000
-80103ba8:	68 00 00 40 80       	push   $0x80400000
-80103bad:	e8 6e f4 ff ff       	call   80103020 <kinit2>
+80103150:	83 ec 08             	sub    $0x8,%esp
+80103153:	68 00 00 00 8e       	push   $0x8e000000
+80103158:	68 00 00 40 80       	push   $0x80400000
+8010315d:	e8 6e f4 ff ff       	call   801025d0 <kinit2>
   userinit();      // first user process
-80103bb2:	e8 29 08 00 00       	call   801043e0 <userinit>
+80103162:	e8 29 08 00 00       	call   80103990 <userinit>
   mpmain();        // finish this processor's setup
-80103bb7:	e8 74 fe ff ff       	call   80103a30 <mpmain>
-80103bbc:	66 90                	xchg   %ax,%ax
-80103bbe:	66 90                	xchg   %ax,%ax
+80103167:	e8 74 fe ff ff       	call   80102fe0 <mpmain>
+8010316c:	66 90                	xchg   %ax,%ax
+8010316e:	66 90                	xchg   %ax,%ax
 
-80103bc0 <mpsearch1>:
+80103170 <mpsearch1>:
 }
 
 // Look for an MP structure in the len bytes at addr.
 static struct mp*
 mpsearch1(uint a, int len)
 {
-80103bc0:	55                   	push   %ebp
-80103bc1:	89 e5                	mov    %esp,%ebp
-80103bc3:	57                   	push   %edi
-80103bc4:	56                   	push   %esi
+80103170:	55                   	push   %ebp
+80103171:	89 e5                	mov    %esp,%ebp
+80103173:	57                   	push   %edi
+80103174:	56                   	push   %esi
   uchar *e, *p, *addr;
 
   addr = P2V(a);
-80103bc5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
+80103175:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
 {
-80103bcb:	53                   	push   %ebx
+8010317b:	53                   	push   %ebx
   e = addr+len;
-80103bcc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
+8010317c:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
 {
-80103bcf:	83 ec 0c             	sub    $0xc,%esp
+8010317f:	83 ec 0c             	sub    $0xc,%esp
   for(p = addr; p < e; p += sizeof(struct mp))
-80103bd2:	39 de                	cmp    %ebx,%esi
-80103bd4:	72 10                	jb     80103be6 <mpsearch1+0x26>
-80103bd6:	eb 50                	jmp    80103c28 <mpsearch1+0x68>
-80103bd8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103bdf:	90                   	nop
-80103be0:	89 fe                	mov    %edi,%esi
-80103be2:	39 fb                	cmp    %edi,%ebx
-80103be4:	76 42                	jbe    80103c28 <mpsearch1+0x68>
+80103182:	39 de                	cmp    %ebx,%esi
+80103184:	72 10                	jb     80103196 <mpsearch1+0x26>
+80103186:	eb 50                	jmp    801031d8 <mpsearch1+0x68>
+80103188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010318f:	90                   	nop
+80103190:	89 fe                	mov    %edi,%esi
+80103192:	39 fb                	cmp    %edi,%ebx
+80103194:	76 42                	jbe    801031d8 <mpsearch1+0x68>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103be6:	83 ec 04             	sub    $0x4,%esp
-80103be9:	8d 7e 10             	lea    0x10(%esi),%edi
-80103bec:	6a 04                	push   $0x4
-80103bee:	68 b8 80 10 80       	push   $0x801080b8
-80103bf3:	56                   	push   %esi
-80103bf4:	e8 17 15 00 00       	call   80105110 <memcmp>
-80103bf9:	83 c4 10             	add    $0x10,%esp
-80103bfc:	85 c0                	test   %eax,%eax
-80103bfe:	75 e0                	jne    80103be0 <mpsearch1+0x20>
-80103c00:	89 f2                	mov    %esi,%edx
-80103c02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103196:	83 ec 04             	sub    $0x4,%esp
+80103199:	8d 7e 10             	lea    0x10(%esi),%edi
+8010319c:	6a 04                	push   $0x4
+8010319e:	68 d8 75 10 80       	push   $0x801075d8
+801031a3:	56                   	push   %esi
+801031a4:	e8 17 15 00 00       	call   801046c0 <memcmp>
+801031a9:	83 c4 10             	add    $0x10,%esp
+801031ac:	85 c0                	test   %eax,%eax
+801031ae:	75 e0                	jne    80103190 <mpsearch1+0x20>
+801031b0:	89 f2                	mov    %esi,%edx
+801031b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     sum += addr[i];
-80103c08:	0f b6 0a             	movzbl (%edx),%ecx
-80103c0b:	83 c2 01             	add    $0x1,%edx
-80103c0e:	01 c8                	add    %ecx,%eax
+801031b8:	0f b6 0a             	movzbl (%edx),%ecx
+801031bb:	83 c2 01             	add    $0x1,%edx
+801031be:	01 c8                	add    %ecx,%eax
   for(i=0; i<len; i++)
-80103c10:	39 fa                	cmp    %edi,%edx
-80103c12:	75 f4                	jne    80103c08 <mpsearch1+0x48>
+801031c0:	39 fa                	cmp    %edi,%edx
+801031c2:	75 f4                	jne    801031b8 <mpsearch1+0x48>
     if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103c14:	84 c0                	test   %al,%al
-80103c16:	75 c8                	jne    80103be0 <mpsearch1+0x20>
+801031c4:	84 c0                	test   %al,%al
+801031c6:	75 c8                	jne    80103190 <mpsearch1+0x20>
       return (struct mp*)p;
   return 0;
 }
-80103c18:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103c1b:	89 f0                	mov    %esi,%eax
-80103c1d:	5b                   	pop    %ebx
-80103c1e:	5e                   	pop    %esi
-80103c1f:	5f                   	pop    %edi
-80103c20:	5d                   	pop    %ebp
-80103c21:	c3                   	ret    
-80103c22:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801031c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801031cb:	89 f0                	mov    %esi,%eax
+801031cd:	5b                   	pop    %ebx
+801031ce:	5e                   	pop    %esi
+801031cf:	5f                   	pop    %edi
+801031d0:	5d                   	pop    %ebp
+801031d1:	c3                   	ret    
+801031d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801031d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80103c2b:	31 f6                	xor    %esi,%esi
+801031db:	31 f6                	xor    %esi,%esi
 }
-80103c2d:	5b                   	pop    %ebx
-80103c2e:	89 f0                	mov    %esi,%eax
-80103c30:	5e                   	pop    %esi
-80103c31:	5f                   	pop    %edi
-80103c32:	5d                   	pop    %ebp
-80103c33:	c3                   	ret    
-80103c34:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103c3f:	90                   	nop
+801031dd:	5b                   	pop    %ebx
+801031de:	89 f0                	mov    %esi,%eax
+801031e0:	5e                   	pop    %esi
+801031e1:	5f                   	pop    %edi
+801031e2:	5d                   	pop    %ebp
+801031e3:	c3                   	ret    
+801031e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801031eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801031ef:	90                   	nop
 
-80103c40 <mpinit>:
+801031f0 <mpinit>:
   return conf;
 }
 
 void
 mpinit(void)
 {
-80103c40:	f3 0f 1e fb          	endbr32 
-80103c44:	55                   	push   %ebp
-80103c45:	89 e5                	mov    %esp,%ebp
-80103c47:	57                   	push   %edi
-80103c48:	56                   	push   %esi
-80103c49:	53                   	push   %ebx
-80103c4a:	83 ec 1c             	sub    $0x1c,%esp
+801031f0:	f3 0f 1e fb          	endbr32 
+801031f4:	55                   	push   %ebp
+801031f5:	89 e5                	mov    %esp,%ebp
+801031f7:	57                   	push   %edi
+801031f8:	56                   	push   %esi
+801031f9:	53                   	push   %ebx
+801031fa:	83 ec 1c             	sub    $0x1c,%esp
   if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-80103c4d:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
-80103c54:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
-80103c5b:	c1 e0 08             	shl    $0x8,%eax
-80103c5e:	09 d0                	or     %edx,%eax
-80103c60:	c1 e0 04             	shl    $0x4,%eax
-80103c63:	75 1b                	jne    80103c80 <mpinit+0x40>
+801031fd:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
+80103204:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
+8010320b:	c1 e0 08             	shl    $0x8,%eax
+8010320e:	09 d0                	or     %edx,%eax
+80103210:	c1 e0 04             	shl    $0x4,%eax
+80103213:	75 1b                	jne    80103230 <mpinit+0x40>
     p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103c65:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
-80103c6c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
-80103c73:	c1 e0 08             	shl    $0x8,%eax
-80103c76:	09 d0                	or     %edx,%eax
-80103c78:	c1 e0 0a             	shl    $0xa,%eax
+80103215:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
+8010321c:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
+80103223:	c1 e0 08             	shl    $0x8,%eax
+80103226:	09 d0                	or     %edx,%eax
+80103228:	c1 e0 0a             	shl    $0xa,%eax
     if((mp = mpsearch1(p-1024, 1024)))
-80103c7b:	2d 00 04 00 00       	sub    $0x400,%eax
+8010322b:	2d 00 04 00 00       	sub    $0x400,%eax
     if((mp = mpsearch1(p, 1024)))
-80103c80:	ba 00 04 00 00       	mov    $0x400,%edx
-80103c85:	e8 36 ff ff ff       	call   80103bc0 <mpsearch1>
-80103c8a:	89 c6                	mov    %eax,%esi
-80103c8c:	85 c0                	test   %eax,%eax
-80103c8e:	0f 84 4c 01 00 00    	je     80103de0 <mpinit+0x1a0>
+80103230:	ba 00 04 00 00       	mov    $0x400,%edx
+80103235:	e8 36 ff ff ff       	call   80103170 <mpsearch1>
+8010323a:	89 c6                	mov    %eax,%esi
+8010323c:	85 c0                	test   %eax,%eax
+8010323e:	0f 84 4c 01 00 00    	je     80103390 <mpinit+0x1a0>
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103c94:	8b 5e 04             	mov    0x4(%esi),%ebx
-80103c97:	85 db                	test   %ebx,%ebx
-80103c99:	0f 84 61 01 00 00    	je     80103e00 <mpinit+0x1c0>
+80103244:	8b 5e 04             	mov    0x4(%esi),%ebx
+80103247:	85 db                	test   %ebx,%ebx
+80103249:	0f 84 61 01 00 00    	je     801033b0 <mpinit+0x1c0>
   if(memcmp(conf, "PCMP", 4) != 0)
-80103c9f:	83 ec 04             	sub    $0x4,%esp
+8010324f:	83 ec 04             	sub    $0x4,%esp
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103ca2:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80103252:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
-80103ca8:	6a 04                	push   $0x4
-80103caa:	68 bd 80 10 80       	push   $0x801080bd
-80103caf:	50                   	push   %eax
+80103258:	6a 04                	push   $0x4
+8010325a:	68 dd 75 10 80       	push   $0x801075dd
+8010325f:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
-80103cb0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103260:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-80103cb3:	e8 58 14 00 00       	call   80105110 <memcmp>
-80103cb8:	83 c4 10             	add    $0x10,%esp
-80103cbb:	85 c0                	test   %eax,%eax
-80103cbd:	0f 85 3d 01 00 00    	jne    80103e00 <mpinit+0x1c0>
+80103263:	e8 58 14 00 00       	call   801046c0 <memcmp>
+80103268:	83 c4 10             	add    $0x10,%esp
+8010326b:	85 c0                	test   %eax,%eax
+8010326d:	0f 85 3d 01 00 00    	jne    801033b0 <mpinit+0x1c0>
   if(conf->version != 1 && conf->version != 4)
-80103cc3:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
-80103cca:	3c 01                	cmp    $0x1,%al
-80103ccc:	74 08                	je     80103cd6 <mpinit+0x96>
-80103cce:	3c 04                	cmp    $0x4,%al
-80103cd0:	0f 85 2a 01 00 00    	jne    80103e00 <mpinit+0x1c0>
+80103273:	0f b6 83 06 00 00 80 	movzbl -0x7ffffffa(%ebx),%eax
+8010327a:	3c 01                	cmp    $0x1,%al
+8010327c:	74 08                	je     80103286 <mpinit+0x96>
+8010327e:	3c 04                	cmp    $0x4,%al
+80103280:	0f 85 2a 01 00 00    	jne    801033b0 <mpinit+0x1c0>
   if(sum((uchar*)conf, conf->length) != 0)
-80103cd6:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+80103286:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
   for(i=0; i<len; i++)
-80103cdd:	66 85 d2             	test   %dx,%dx
-80103ce0:	74 26                	je     80103d08 <mpinit+0xc8>
-80103ce2:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
-80103ce5:	89 d8                	mov    %ebx,%eax
+8010328d:	66 85 d2             	test   %dx,%dx
+80103290:	74 26                	je     801032b8 <mpinit+0xc8>
+80103292:	8d 3c 1a             	lea    (%edx,%ebx,1),%edi
+80103295:	89 d8                	mov    %ebx,%eax
   sum = 0;
-80103ce7:	31 d2                	xor    %edx,%edx
-80103ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103297:	31 d2                	xor    %edx,%edx
+80103299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sum += addr[i];
-80103cf0:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
-80103cf7:	83 c0 01             	add    $0x1,%eax
-80103cfa:	01 ca                	add    %ecx,%edx
+801032a0:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
+801032a7:	83 c0 01             	add    $0x1,%eax
+801032aa:	01 ca                	add    %ecx,%edx
   for(i=0; i<len; i++)
-80103cfc:	39 f8                	cmp    %edi,%eax
-80103cfe:	75 f0                	jne    80103cf0 <mpinit+0xb0>
+801032ac:	39 f8                	cmp    %edi,%eax
+801032ae:	75 f0                	jne    801032a0 <mpinit+0xb0>
   if(sum((uchar*)conf, conf->length) != 0)
-80103d00:	84 d2                	test   %dl,%dl
-80103d02:	0f 85 f8 00 00 00    	jne    80103e00 <mpinit+0x1c0>
+801032b0:	84 d2                	test   %dl,%dl
+801032b2:	0f 85 f8 00 00 00    	jne    801033b0 <mpinit+0x1c0>
   struct mpioapic *ioapic;
 
   if((conf = mpconfig(&mp)) == 0)
     panic("Expect to run on an SMP");
   ismp = 1;
   lapic = (uint*)conf->lapicaddr;
-80103d08:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
-80103d0e:	a3 7c 40 11 80       	mov    %eax,0x8011407c
+801032b8:	8b 83 24 00 00 80    	mov    -0x7fffffdc(%ebx),%eax
+801032be:	a3 7c 26 11 80       	mov    %eax,0x8011267c
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103d13:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
-80103d19:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
+801032c3:	8d 83 2c 00 00 80    	lea    -0x7fffffd4(%ebx),%eax
+801032c9:	0f b7 93 04 00 00 80 	movzwl -0x7ffffffc(%ebx),%edx
   ismp = 1;
-80103d20:	bb 01 00 00 00       	mov    $0x1,%ebx
+801032d0:	bb 01 00 00 00       	mov    $0x1,%ebx
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103d25:	03 55 e4             	add    -0x1c(%ebp),%edx
-80103d28:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-80103d2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103d2f:	90                   	nop
-80103d30:	39 c2                	cmp    %eax,%edx
-80103d32:	76 15                	jbe    80103d49 <mpinit+0x109>
+801032d5:	03 55 e4             	add    -0x1c(%ebp),%edx
+801032d8:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801032db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801032df:	90                   	nop
+801032e0:	39 c2                	cmp    %eax,%edx
+801032e2:	76 15                	jbe    801032f9 <mpinit+0x109>
     switch(*p){
-80103d34:	0f b6 08             	movzbl (%eax),%ecx
-80103d37:	80 f9 02             	cmp    $0x2,%cl
-80103d3a:	74 5c                	je     80103d98 <mpinit+0x158>
-80103d3c:	77 42                	ja     80103d80 <mpinit+0x140>
-80103d3e:	84 c9                	test   %cl,%cl
-80103d40:	74 6e                	je     80103db0 <mpinit+0x170>
+801032e4:	0f b6 08             	movzbl (%eax),%ecx
+801032e7:	80 f9 02             	cmp    $0x2,%cl
+801032ea:	74 5c                	je     80103348 <mpinit+0x158>
+801032ec:	77 42                	ja     80103330 <mpinit+0x140>
+801032ee:	84 c9                	test   %cl,%cl
+801032f0:	74 6e                	je     80103360 <mpinit+0x170>
       p += sizeof(struct mpioapic);
       continue;
     case MPBUS:
     case MPIOINTR:
     case MPLINTR:
       p += 8;
-80103d42:	83 c0 08             	add    $0x8,%eax
+801032f2:	83 c0 08             	add    $0x8,%eax
   for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103d45:	39 c2                	cmp    %eax,%edx
-80103d47:	77 eb                	ja     80103d34 <mpinit+0xf4>
-80103d49:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+801032f5:	39 c2                	cmp    %eax,%edx
+801032f7:	77 eb                	ja     801032e4 <mpinit+0xf4>
+801032f9:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
     default:
       ismp = 0;
       break;
     }
   }
   if(!ismp)
-80103d4c:	85 db                	test   %ebx,%ebx
-80103d4e:	0f 84 b9 00 00 00    	je     80103e0d <mpinit+0x1cd>
+801032fc:	85 db                	test   %ebx,%ebx
+801032fe:	0f 84 b9 00 00 00    	je     801033bd <mpinit+0x1cd>
     panic("Didn't find a suitable machine");
 
   if(mp->imcrp){
-80103d54:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
-80103d58:	74 15                	je     80103d6f <mpinit+0x12f>
+80103304:	80 7e 0c 00          	cmpb   $0x0,0xc(%esi)
+80103308:	74 15                	je     8010331f <mpinit+0x12f>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103d5a:	b8 70 00 00 00       	mov    $0x70,%eax
-80103d5f:	ba 22 00 00 00       	mov    $0x22,%edx
-80103d64:	ee                   	out    %al,(%dx)
+8010330a:	b8 70 00 00 00       	mov    $0x70,%eax
+8010330f:	ba 22 00 00 00       	mov    $0x22,%edx
+80103314:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103d65:	ba 23 00 00 00       	mov    $0x23,%edx
-80103d6a:	ec                   	in     (%dx),%al
+80103315:	ba 23 00 00 00       	mov    $0x23,%edx
+8010331a:	ec                   	in     (%dx),%al
     // Bochs doesn't support IMCR, so this doesn't run on Bochs.
     // But it would on real hardware.
     outb(0x22, 0x70);   // Select IMCR
     outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-80103d6b:	83 c8 01             	or     $0x1,%eax
+8010331b:	83 c8 01             	or     $0x1,%eax
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103d6e:	ee                   	out    %al,(%dx)
+8010331e:	ee                   	out    %al,(%dx)
   }
 }
-80103d6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103d72:	5b                   	pop    %ebx
-80103d73:	5e                   	pop    %esi
-80103d74:	5f                   	pop    %edi
-80103d75:	5d                   	pop    %ebp
-80103d76:	c3                   	ret    
-80103d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d7e:	66 90                	xchg   %ax,%ax
+8010331f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103322:	5b                   	pop    %ebx
+80103323:	5e                   	pop    %esi
+80103324:	5f                   	pop    %edi
+80103325:	5d                   	pop    %ebp
+80103326:	c3                   	ret    
+80103327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010332e:	66 90                	xchg   %ax,%ax
     switch(*p){
-80103d80:	83 e9 03             	sub    $0x3,%ecx
-80103d83:	80 f9 01             	cmp    $0x1,%cl
-80103d86:	76 ba                	jbe    80103d42 <mpinit+0x102>
-80103d88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80103d8f:	eb 9f                	jmp    80103d30 <mpinit+0xf0>
-80103d91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103330:	83 e9 03             	sub    $0x3,%ecx
+80103333:	80 f9 01             	cmp    $0x1,%cl
+80103336:	76 ba                	jbe    801032f2 <mpinit+0x102>
+80103338:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010333f:	eb 9f                	jmp    801032e0 <mpinit+0xf0>
+80103341:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       ioapicid = ioapic->apicno;
-80103d98:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
+80103348:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
       p += sizeof(struct mpioapic);
-80103d9c:	83 c0 08             	add    $0x8,%eax
+8010334c:	83 c0 08             	add    $0x8,%eax
       ioapicid = ioapic->apicno;
-80103d9f:	88 0d 60 41 11 80    	mov    %cl,0x80114160
+8010334f:	88 0d 60 27 11 80    	mov    %cl,0x80112760
       continue;
-80103da5:	eb 89                	jmp    80103d30 <mpinit+0xf0>
-80103da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103dae:	66 90                	xchg   %ax,%ax
+80103355:	eb 89                	jmp    801032e0 <mpinit+0xf0>
+80103357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010335e:	66 90                	xchg   %ax,%ax
       if(ncpu < NCPU) {
-80103db0:	8b 0d 00 47 11 80    	mov    0x80114700,%ecx
-80103db6:	83 f9 07             	cmp    $0x7,%ecx
-80103db9:	7f 19                	jg     80103dd4 <mpinit+0x194>
+80103360:	8b 0d 00 2d 11 80    	mov    0x80112d00,%ecx
+80103366:	83 f9 07             	cmp    $0x7,%ecx
+80103369:	7f 19                	jg     80103384 <mpinit+0x194>
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-80103dbb:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
-80103dc1:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
+8010336b:	69 f9 b0 00 00 00    	imul   $0xb0,%ecx,%edi
+80103371:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
         ncpu++;
-80103dc5:	83 c1 01             	add    $0x1,%ecx
-80103dc8:	89 0d 00 47 11 80    	mov    %ecx,0x80114700
+80103375:	83 c1 01             	add    $0x1,%ecx
+80103378:	89 0d 00 2d 11 80    	mov    %ecx,0x80112d00
         cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-80103dce:	88 9f 80 41 11 80    	mov    %bl,-0x7feebe80(%edi)
+8010337e:	88 9f 80 27 11 80    	mov    %bl,-0x7feed880(%edi)
       p += sizeof(struct mpproc);
-80103dd4:	83 c0 14             	add    $0x14,%eax
+80103384:	83 c0 14             	add    $0x14,%eax
       continue;
-80103dd7:	e9 54 ff ff ff       	jmp    80103d30 <mpinit+0xf0>
-80103ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103387:	e9 54 ff ff ff       	jmp    801032e0 <mpinit+0xf0>
+8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return mpsearch1(0xF0000, 0x10000);
-80103de0:	ba 00 00 01 00       	mov    $0x10000,%edx
-80103de5:	b8 00 00 0f 00       	mov    $0xf0000,%eax
-80103dea:	e8 d1 fd ff ff       	call   80103bc0 <mpsearch1>
-80103def:	89 c6                	mov    %eax,%esi
+80103390:	ba 00 00 01 00       	mov    $0x10000,%edx
+80103395:	b8 00 00 0f 00       	mov    $0xf0000,%eax
+8010339a:	e8 d1 fd ff ff       	call   80103170 <mpsearch1>
+8010339f:	89 c6                	mov    %eax,%esi
   if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-80103df1:	85 c0                	test   %eax,%eax
-80103df3:	0f 85 9b fe ff ff    	jne    80103c94 <mpinit+0x54>
-80103df9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801033a1:	85 c0                	test   %eax,%eax
+801033a3:	0f 85 9b fe ff ff    	jne    80103244 <mpinit+0x54>
+801033a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
-80103e00:	83 ec 0c             	sub    $0xc,%esp
-80103e03:	68 c2 80 10 80       	push   $0x801080c2
-80103e08:	e8 83 c5 ff ff       	call   80100390 <panic>
+801033b0:	83 ec 0c             	sub    $0xc,%esp
+801033b3:	68 e2 75 10 80       	push   $0x801075e2
+801033b8:	e8 d3 cf ff ff       	call   80100390 <panic>
     panic("Didn't find a suitable machine");
-80103e0d:	83 ec 0c             	sub    $0xc,%esp
-80103e10:	68 dc 80 10 80       	push   $0x801080dc
-80103e15:	e8 76 c5 ff ff       	call   80100390 <panic>
-80103e1a:	66 90                	xchg   %ax,%ax
-80103e1c:	66 90                	xchg   %ax,%ax
-80103e1e:	66 90                	xchg   %ax,%ax
+801033bd:	83 ec 0c             	sub    $0xc,%esp
+801033c0:	68 fc 75 10 80       	push   $0x801075fc
+801033c5:	e8 c6 cf ff ff       	call   80100390 <panic>
+801033ca:	66 90                	xchg   %ax,%ax
+801033cc:	66 90                	xchg   %ax,%ax
+801033ce:	66 90                	xchg   %ax,%ax
 
-80103e20 <picinit>:
+801033d0 <picinit>:
 #define IO_PIC2         0xA0    // Slave (IRQs 8-15)
 
 // Don't use the 8259A interrupt controllers.  Xv6 assumes SMP hardware.
 void
 picinit(void)
 {
-80103e20:	f3 0f 1e fb          	endbr32 
-80103e24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103e29:	ba 21 00 00 00       	mov    $0x21,%edx
-80103e2e:	ee                   	out    %al,(%dx)
-80103e2f:	ba a1 00 00 00       	mov    $0xa1,%edx
-80103e34:	ee                   	out    %al,(%dx)
+801033d0:	f3 0f 1e fb          	endbr32 
+801033d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801033d9:	ba 21 00 00 00       	mov    $0x21,%edx
+801033de:	ee                   	out    %al,(%dx)
+801033df:	ba a1 00 00 00       	mov    $0xa1,%edx
+801033e4:	ee                   	out    %al,(%dx)
   // mask all interrupts
   outb(IO_PIC1+1, 0xFF);
   outb(IO_PIC2+1, 0xFF);
 }
-80103e35:	c3                   	ret    
-80103e36:	66 90                	xchg   %ax,%ax
-80103e38:	66 90                	xchg   %ax,%ax
-80103e3a:	66 90                	xchg   %ax,%ax
-80103e3c:	66 90                	xchg   %ax,%ax
-80103e3e:	66 90                	xchg   %ax,%ax
+801033e5:	c3                   	ret    
+801033e6:	66 90                	xchg   %ax,%ax
+801033e8:	66 90                	xchg   %ax,%ax
+801033ea:	66 90                	xchg   %ax,%ax
+801033ec:	66 90                	xchg   %ax,%ax
+801033ee:	66 90                	xchg   %ax,%ax
 
-80103e40 <pipealloc>:
+801033f0 <pipealloc>:
   int writeopen;  // write fd is still open
 };
 
 int
 pipealloc(struct file **f0, struct file **f1)
 {
-80103e40:	f3 0f 1e fb          	endbr32 
-80103e44:	55                   	push   %ebp
-80103e45:	89 e5                	mov    %esp,%ebp
-80103e47:	57                   	push   %edi
-80103e48:	56                   	push   %esi
-80103e49:	53                   	push   %ebx
-80103e4a:	83 ec 0c             	sub    $0xc,%esp
-80103e4d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103e50:	8b 75 0c             	mov    0xc(%ebp),%esi
+801033f0:	f3 0f 1e fb          	endbr32 
+801033f4:	55                   	push   %ebp
+801033f5:	89 e5                	mov    %esp,%ebp
+801033f7:	57                   	push   %edi
+801033f8:	56                   	push   %esi
+801033f9:	53                   	push   %ebx
+801033fa:	83 ec 0c             	sub    $0xc,%esp
+801033fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80103400:	8b 75 0c             	mov    0xc(%ebp),%esi
   struct pipe *p;
 
   p = 0;
   *f0 = *f1 = 0;
-80103e53:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103e59:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103403:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103409:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-80103e5f:	e8 ec d9 ff ff       	call   80101850 <filealloc>
-80103e64:	89 03                	mov    %eax,(%ebx)
-80103e66:	85 c0                	test   %eax,%eax
-80103e68:	0f 84 ac 00 00 00    	je     80103f1a <pipealloc+0xda>
-80103e6e:	e8 dd d9 ff ff       	call   80101850 <filealloc>
-80103e73:	89 06                	mov    %eax,(%esi)
-80103e75:	85 c0                	test   %eax,%eax
-80103e77:	0f 84 8b 00 00 00    	je     80103f08 <pipealloc+0xc8>
+8010340f:	e8 ec d9 ff ff       	call   80100e00 <filealloc>
+80103414:	89 03                	mov    %eax,(%ebx)
+80103416:	85 c0                	test   %eax,%eax
+80103418:	0f 84 ac 00 00 00    	je     801034ca <pipealloc+0xda>
+8010341e:	e8 dd d9 ff ff       	call   80100e00 <filealloc>
+80103423:	89 06                	mov    %eax,(%esi)
+80103425:	85 c0                	test   %eax,%eax
+80103427:	0f 84 8b 00 00 00    	je     801034b8 <pipealloc+0xc8>
     goto bad;
   if((p = (struct pipe*)kalloc()) == 0)
-80103e7d:	e8 fe f1 ff ff       	call   80103080 <kalloc>
-80103e82:	89 c7                	mov    %eax,%edi
-80103e84:	85 c0                	test   %eax,%eax
-80103e86:	0f 84 b4 00 00 00    	je     80103f40 <pipealloc+0x100>
+8010342d:	e8 fe f1 ff ff       	call   80102630 <kalloc>
+80103432:	89 c7                	mov    %eax,%edi
+80103434:	85 c0                	test   %eax,%eax
+80103436:	0f 84 b4 00 00 00    	je     801034f0 <pipealloc+0x100>
     goto bad;
   p->readopen = 1;
-80103e8c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-80103e93:	00 00 00 
+8010343c:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
+80103443:	00 00 00 
   p->writeopen = 1;
   p->nwrite = 0;
   p->nread = 0;
   initlock(&p->lock, "pipe");
-80103e96:	83 ec 08             	sub    $0x8,%esp
+80103446:	83 ec 08             	sub    $0x8,%esp
   p->writeopen = 1;
-80103e99:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-80103ea0:	00 00 00 
+80103449:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
+80103450:	00 00 00 
   p->nwrite = 0;
-80103ea3:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-80103eaa:	00 00 00 
+80103453:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
+8010345a:	00 00 00 
   p->nread = 0;
-80103ead:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-80103eb4:	00 00 00 
+8010345d:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
+80103464:	00 00 00 
   initlock(&p->lock, "pipe");
-80103eb7:	68 fb 80 10 80       	push   $0x801080fb
-80103ebc:	50                   	push   %eax
-80103ebd:	e8 6e 0f 00 00       	call   80104e30 <initlock>
+80103467:	68 1b 76 10 80       	push   $0x8010761b
+8010346c:	50                   	push   %eax
+8010346d:	e8 6e 0f 00 00       	call   801043e0 <initlock>
   (*f0)->type = FD_PIPE;
-80103ec2:	8b 03                	mov    (%ebx),%eax
+80103472:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
   (*f1)->type = FD_PIPE;
   (*f1)->readable = 0;
   (*f1)->writable = 1;
   (*f1)->pipe = p;
   return 0;
-80103ec4:	83 c4 10             	add    $0x10,%esp
+80103474:	83 c4 10             	add    $0x10,%esp
   (*f0)->type = FD_PIPE;
-80103ec7:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+80103477:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f0)->readable = 1;
-80103ecd:	8b 03                	mov    (%ebx),%eax
-80103ecf:	c6 40 08 01          	movb   $0x1,0x8(%eax)
+8010347d:	8b 03                	mov    (%ebx),%eax
+8010347f:	c6 40 08 01          	movb   $0x1,0x8(%eax)
   (*f0)->writable = 0;
-80103ed3:	8b 03                	mov    (%ebx),%eax
-80103ed5:	c6 40 09 00          	movb   $0x0,0x9(%eax)
+80103483:	8b 03                	mov    (%ebx),%eax
+80103485:	c6 40 09 00          	movb   $0x0,0x9(%eax)
   (*f0)->pipe = p;
-80103ed9:	8b 03                	mov    (%ebx),%eax
-80103edb:	89 78 0c             	mov    %edi,0xc(%eax)
+80103489:	8b 03                	mov    (%ebx),%eax
+8010348b:	89 78 0c             	mov    %edi,0xc(%eax)
   (*f1)->type = FD_PIPE;
-80103ede:	8b 06                	mov    (%esi),%eax
-80103ee0:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+8010348e:	8b 06                	mov    (%esi),%eax
+80103490:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   (*f1)->readable = 0;
-80103ee6:	8b 06                	mov    (%esi),%eax
-80103ee8:	c6 40 08 00          	movb   $0x0,0x8(%eax)
+80103496:	8b 06                	mov    (%esi),%eax
+80103498:	c6 40 08 00          	movb   $0x0,0x8(%eax)
   (*f1)->writable = 1;
-80103eec:	8b 06                	mov    (%esi),%eax
-80103eee:	c6 40 09 01          	movb   $0x1,0x9(%eax)
+8010349c:	8b 06                	mov    (%esi),%eax
+8010349e:	c6 40 09 01          	movb   $0x1,0x9(%eax)
   (*f1)->pipe = p;
-80103ef2:	8b 06                	mov    (%esi),%eax
-80103ef4:	89 78 0c             	mov    %edi,0xc(%eax)
+801034a2:	8b 06                	mov    (%esi),%eax
+801034a4:	89 78 0c             	mov    %edi,0xc(%eax)
   if(*f0)
     fileclose(*f0);
   if(*f1)
     fileclose(*f1);
   return -1;
 }
-80103ef7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801034a7:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80103efa:	31 c0                	xor    %eax,%eax
+801034aa:	31 c0                	xor    %eax,%eax
 }
-80103efc:	5b                   	pop    %ebx
-80103efd:	5e                   	pop    %esi
-80103efe:	5f                   	pop    %edi
-80103eff:	5d                   	pop    %ebp
-80103f00:	c3                   	ret    
-80103f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034ac:	5b                   	pop    %ebx
+801034ad:	5e                   	pop    %esi
+801034ae:	5f                   	pop    %edi
+801034af:	5d                   	pop    %ebp
+801034b0:	c3                   	ret    
+801034b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(*f0)
-80103f08:	8b 03                	mov    (%ebx),%eax
-80103f0a:	85 c0                	test   %eax,%eax
-80103f0c:	74 1e                	je     80103f2c <pipealloc+0xec>
+801034b8:	8b 03                	mov    (%ebx),%eax
+801034ba:	85 c0                	test   %eax,%eax
+801034bc:	74 1e                	je     801034dc <pipealloc+0xec>
     fileclose(*f0);
-80103f0e:	83 ec 0c             	sub    $0xc,%esp
-80103f11:	50                   	push   %eax
-80103f12:	e8 f9 d9 ff ff       	call   80101910 <fileclose>
-80103f17:	83 c4 10             	add    $0x10,%esp
+801034be:	83 ec 0c             	sub    $0xc,%esp
+801034c1:	50                   	push   %eax
+801034c2:	e8 f9 d9 ff ff       	call   80100ec0 <fileclose>
+801034c7:	83 c4 10             	add    $0x10,%esp
   if(*f1)
-80103f1a:	8b 06                	mov    (%esi),%eax
-80103f1c:	85 c0                	test   %eax,%eax
-80103f1e:	74 0c                	je     80103f2c <pipealloc+0xec>
+801034ca:	8b 06                	mov    (%esi),%eax
+801034cc:	85 c0                	test   %eax,%eax
+801034ce:	74 0c                	je     801034dc <pipealloc+0xec>
     fileclose(*f1);
-80103f20:	83 ec 0c             	sub    $0xc,%esp
-80103f23:	50                   	push   %eax
-80103f24:	e8 e7 d9 ff ff       	call   80101910 <fileclose>
-80103f29:	83 c4 10             	add    $0x10,%esp
+801034d0:	83 ec 0c             	sub    $0xc,%esp
+801034d3:	50                   	push   %eax
+801034d4:	e8 e7 d9 ff ff       	call   80100ec0 <fileclose>
+801034d9:	83 c4 10             	add    $0x10,%esp
 }
-80103f2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801034dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return -1;
-80103f2f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801034df:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80103f34:	5b                   	pop    %ebx
-80103f35:	5e                   	pop    %esi
-80103f36:	5f                   	pop    %edi
-80103f37:	5d                   	pop    %ebp
-80103f38:	c3                   	ret    
-80103f39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034e4:	5b                   	pop    %ebx
+801034e5:	5e                   	pop    %esi
+801034e6:	5f                   	pop    %edi
+801034e7:	5d                   	pop    %ebp
+801034e8:	c3                   	ret    
+801034e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(*f0)
-80103f40:	8b 03                	mov    (%ebx),%eax
-80103f42:	85 c0                	test   %eax,%eax
-80103f44:	75 c8                	jne    80103f0e <pipealloc+0xce>
-80103f46:	eb d2                	jmp    80103f1a <pipealloc+0xda>
-80103f48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103f4f:	90                   	nop
+801034f0:	8b 03                	mov    (%ebx),%eax
+801034f2:	85 c0                	test   %eax,%eax
+801034f4:	75 c8                	jne    801034be <pipealloc+0xce>
+801034f6:	eb d2                	jmp    801034ca <pipealloc+0xda>
+801034f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801034ff:	90                   	nop
 
-80103f50 <pipeclose>:
+80103500 <pipeclose>:
 
 void
 pipeclose(struct pipe *p, int writable)
 {
-80103f50:	f3 0f 1e fb          	endbr32 
-80103f54:	55                   	push   %ebp
-80103f55:	89 e5                	mov    %esp,%ebp
-80103f57:	56                   	push   %esi
-80103f58:	53                   	push   %ebx
-80103f59:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103f5c:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103500:	f3 0f 1e fb          	endbr32 
+80103504:	55                   	push   %ebp
+80103505:	89 e5                	mov    %esp,%ebp
+80103507:	56                   	push   %esi
+80103508:	53                   	push   %ebx
+80103509:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010350c:	8b 75 0c             	mov    0xc(%ebp),%esi
   acquire(&p->lock);
-80103f5f:	83 ec 0c             	sub    $0xc,%esp
-80103f62:	53                   	push   %ebx
-80103f63:	e8 48 10 00 00       	call   80104fb0 <acquire>
+8010350f:	83 ec 0c             	sub    $0xc,%esp
+80103512:	53                   	push   %ebx
+80103513:	e8 48 10 00 00       	call   80104560 <acquire>
   if(writable){
-80103f68:	83 c4 10             	add    $0x10,%esp
-80103f6b:	85 f6                	test   %esi,%esi
-80103f6d:	74 41                	je     80103fb0 <pipeclose+0x60>
+80103518:	83 c4 10             	add    $0x10,%esp
+8010351b:	85 f6                	test   %esi,%esi
+8010351d:	74 41                	je     80103560 <pipeclose+0x60>
     p->writeopen = 0;
     wakeup(&p->nread);
-80103f6f:	83 ec 0c             	sub    $0xc,%esp
-80103f72:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+8010351f:	83 ec 0c             	sub    $0xc,%esp
+80103522:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
     p->writeopen = 0;
-80103f78:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
-80103f7f:	00 00 00 
+80103528:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
+8010352f:	00 00 00 
     wakeup(&p->nread);
-80103f82:	50                   	push   %eax
-80103f83:	e8 a8 0b 00 00       	call   80104b30 <wakeup>
-80103f88:	83 c4 10             	add    $0x10,%esp
+80103532:	50                   	push   %eax
+80103533:	e8 a8 0b 00 00       	call   801040e0 <wakeup>
+80103538:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
     wakeup(&p->nwrite);
   }
   if(p->readopen == 0 && p->writeopen == 0){
-80103f8b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
-80103f91:	85 d2                	test   %edx,%edx
-80103f93:	75 0a                	jne    80103f9f <pipeclose+0x4f>
-80103f95:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
-80103f9b:	85 c0                	test   %eax,%eax
-80103f9d:	74 31                	je     80103fd0 <pipeclose+0x80>
+8010353b:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
+80103541:	85 d2                	test   %edx,%edx
+80103543:	75 0a                	jne    8010354f <pipeclose+0x4f>
+80103545:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
+8010354b:	85 c0                	test   %eax,%eax
+8010354d:	74 31                	je     80103580 <pipeclose+0x80>
     release(&p->lock);
     kfree((char*)p);
   } else
     release(&p->lock);
-80103f9f:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010354f:	89 5d 08             	mov    %ebx,0x8(%ebp)
 }
-80103fa2:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103fa5:	5b                   	pop    %ebx
-80103fa6:	5e                   	pop    %esi
-80103fa7:	5d                   	pop    %ebp
+80103552:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103555:	5b                   	pop    %ebx
+80103556:	5e                   	pop    %esi
+80103557:	5d                   	pop    %ebp
     release(&p->lock);
-80103fa8:	e9 c3 10 00 00       	jmp    80105070 <release>
-80103fad:	8d 76 00             	lea    0x0(%esi),%esi
+80103558:	e9 c3 10 00 00       	jmp    80104620 <release>
+8010355d:	8d 76 00             	lea    0x0(%esi),%esi
     wakeup(&p->nwrite);
-80103fb0:	83 ec 0c             	sub    $0xc,%esp
-80103fb3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
+80103560:	83 ec 0c             	sub    $0xc,%esp
+80103563:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
     p->readopen = 0;
-80103fb9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
-80103fc0:	00 00 00 
+80103569:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
+80103570:	00 00 00 
     wakeup(&p->nwrite);
-80103fc3:	50                   	push   %eax
-80103fc4:	e8 67 0b 00 00       	call   80104b30 <wakeup>
-80103fc9:	83 c4 10             	add    $0x10,%esp
-80103fcc:	eb bd                	jmp    80103f8b <pipeclose+0x3b>
-80103fce:	66 90                	xchg   %ax,%ax
+80103573:	50                   	push   %eax
+80103574:	e8 67 0b 00 00       	call   801040e0 <wakeup>
+80103579:	83 c4 10             	add    $0x10,%esp
+8010357c:	eb bd                	jmp    8010353b <pipeclose+0x3b>
+8010357e:	66 90                	xchg   %ax,%ax
     release(&p->lock);
-80103fd0:	83 ec 0c             	sub    $0xc,%esp
-80103fd3:	53                   	push   %ebx
-80103fd4:	e8 97 10 00 00       	call   80105070 <release>
+80103580:	83 ec 0c             	sub    $0xc,%esp
+80103583:	53                   	push   %ebx
+80103584:	e8 97 10 00 00       	call   80104620 <release>
     kfree((char*)p);
-80103fd9:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80103fdc:	83 c4 10             	add    $0x10,%esp
+80103589:	89 5d 08             	mov    %ebx,0x8(%ebp)
+8010358c:	83 c4 10             	add    $0x10,%esp
 }
-80103fdf:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103fe2:	5b                   	pop    %ebx
-80103fe3:	5e                   	pop    %esi
-80103fe4:	5d                   	pop    %ebp
+8010358f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103592:	5b                   	pop    %ebx
+80103593:	5e                   	pop    %esi
+80103594:	5d                   	pop    %ebp
     kfree((char*)p);
-80103fe5:	e9 d6 ee ff ff       	jmp    80102ec0 <kfree>
-80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103595:	e9 d6 ee ff ff       	jmp    80102470 <kfree>
+8010359a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80103ff0 <pipewrite>:
+801035a0 <pipewrite>:
 
 //PAGEBREAK: 40
 int
 pipewrite(struct pipe *p, char *addr, int n)
 {
-80103ff0:	f3 0f 1e fb          	endbr32 
-80103ff4:	55                   	push   %ebp
-80103ff5:	89 e5                	mov    %esp,%ebp
-80103ff7:	57                   	push   %edi
-80103ff8:	56                   	push   %esi
-80103ff9:	53                   	push   %ebx
-80103ffa:	83 ec 28             	sub    $0x28,%esp
-80103ffd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801035a0:	f3 0f 1e fb          	endbr32 
+801035a4:	55                   	push   %ebp
+801035a5:	89 e5                	mov    %esp,%ebp
+801035a7:	57                   	push   %edi
+801035a8:	56                   	push   %esi
+801035a9:	53                   	push   %ebx
+801035aa:	83 ec 28             	sub    $0x28,%esp
+801035ad:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int i;
 
   acquire(&p->lock);
-80104000:	53                   	push   %ebx
-80104001:	e8 aa 0f 00 00       	call   80104fb0 <acquire>
+801035b0:	53                   	push   %ebx
+801035b1:	e8 aa 0f 00 00       	call   80104560 <acquire>
   for(i = 0; i < n; i++){
-80104006:	8b 45 10             	mov    0x10(%ebp),%eax
-80104009:	83 c4 10             	add    $0x10,%esp
-8010400c:	85 c0                	test   %eax,%eax
-8010400e:	0f 8e bc 00 00 00    	jle    801040d0 <pipewrite+0xe0>
-80104014:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104017:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
+801035b6:	8b 45 10             	mov    0x10(%ebp),%eax
+801035b9:	83 c4 10             	add    $0x10,%esp
+801035bc:	85 c0                	test   %eax,%eax
+801035be:	0f 8e bc 00 00 00    	jle    80103680 <pipewrite+0xe0>
+801035c4:	8b 45 0c             	mov    0xc(%ebp),%eax
+801035c7:	8b 8b 38 02 00 00    	mov    0x238(%ebx),%ecx
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
       if(p->readopen == 0 || myproc()->killed){
         release(&p->lock);
         return -1;
       }
       wakeup(&p->nread);
-8010401d:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
-80104023:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80104026:	03 45 10             	add    0x10(%ebp),%eax
-80104029:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801035cd:	8d bb 34 02 00 00    	lea    0x234(%ebx),%edi
+801035d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801035d6:	03 45 10             	add    0x10(%ebp),%eax
+801035d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-8010402c:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+801035dc:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-80104032:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
+801035e2:	8d b3 38 02 00 00    	lea    0x238(%ebx),%esi
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80104038:	89 ca                	mov    %ecx,%edx
-8010403a:	05 00 02 00 00       	add    $0x200,%eax
-8010403f:	39 c1                	cmp    %eax,%ecx
-80104041:	74 3b                	je     8010407e <pipewrite+0x8e>
-80104043:	eb 63                	jmp    801040a8 <pipewrite+0xb8>
-80104045:	8d 76 00             	lea    0x0(%esi),%esi
+801035e8:	89 ca                	mov    %ecx,%edx
+801035ea:	05 00 02 00 00       	add    $0x200,%eax
+801035ef:	39 c1                	cmp    %eax,%ecx
+801035f1:	74 3b                	je     8010362e <pipewrite+0x8e>
+801035f3:	eb 63                	jmp    80103658 <pipewrite+0xb8>
+801035f5:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->readopen == 0 || myproc()->killed){
-80104048:	e8 63 03 00 00       	call   801043b0 <myproc>
-8010404d:	8b 48 24             	mov    0x24(%eax),%ecx
-80104050:	85 c9                	test   %ecx,%ecx
-80104052:	75 34                	jne    80104088 <pipewrite+0x98>
+801035f8:	e8 63 03 00 00       	call   80103960 <myproc>
+801035fd:	8b 48 24             	mov    0x24(%eax),%ecx
+80103600:	85 c9                	test   %ecx,%ecx
+80103602:	75 34                	jne    80103638 <pipewrite+0x98>
       wakeup(&p->nread);
-80104054:	83 ec 0c             	sub    $0xc,%esp
-80104057:	57                   	push   %edi
-80104058:	e8 d3 0a 00 00       	call   80104b30 <wakeup>
+80103604:	83 ec 0c             	sub    $0xc,%esp
+80103607:	57                   	push   %edi
+80103608:	e8 d3 0a 00 00       	call   801040e0 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-8010405d:	58                   	pop    %eax
-8010405e:	5a                   	pop    %edx
-8010405f:	53                   	push   %ebx
-80104060:	56                   	push   %esi
-80104061:	e8 0a 09 00 00       	call   80104970 <sleep>
+8010360d:	58                   	pop    %eax
+8010360e:	5a                   	pop    %edx
+8010360f:	53                   	push   %ebx
+80103610:	56                   	push   %esi
+80103611:	e8 0a 09 00 00       	call   80103f20 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80104066:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-8010406c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
-80104072:	83 c4 10             	add    $0x10,%esp
-80104075:	05 00 02 00 00       	add    $0x200,%eax
-8010407a:	39 c2                	cmp    %eax,%edx
-8010407c:	75 2a                	jne    801040a8 <pipewrite+0xb8>
+80103616:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
+8010361c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
+80103622:	83 c4 10             	add    $0x10,%esp
+80103625:	05 00 02 00 00       	add    $0x200,%eax
+8010362a:	39 c2                	cmp    %eax,%edx
+8010362c:	75 2a                	jne    80103658 <pipewrite+0xb8>
       if(p->readopen == 0 || myproc()->killed){
-8010407e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-80104084:	85 c0                	test   %eax,%eax
-80104086:	75 c0                	jne    80104048 <pipewrite+0x58>
+8010362e:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
+80103634:	85 c0                	test   %eax,%eax
+80103636:	75 c0                	jne    801035f8 <pipewrite+0x58>
         release(&p->lock);
-80104088:	83 ec 0c             	sub    $0xc,%esp
-8010408b:	53                   	push   %ebx
-8010408c:	e8 df 0f 00 00       	call   80105070 <release>
+80103638:	83 ec 0c             	sub    $0xc,%esp
+8010363b:	53                   	push   %ebx
+8010363c:	e8 df 0f 00 00       	call   80104620 <release>
         return -1;
-80104091:	83 c4 10             	add    $0x10,%esp
-80104094:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103641:	83 c4 10             	add    $0x10,%esp
+80103644:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
   }
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
   release(&p->lock);
   return n;
 }
-80104099:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010409c:	5b                   	pop    %ebx
-8010409d:	5e                   	pop    %esi
-8010409e:	5f                   	pop    %edi
-8010409f:	5d                   	pop    %ebp
-801040a0:	c3                   	ret    
-801040a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103649:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010364c:	5b                   	pop    %ebx
+8010364d:	5e                   	pop    %esi
+8010364e:	5f                   	pop    %edi
+8010364f:	5d                   	pop    %ebp
+80103650:	c3                   	ret    
+80103651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     p->data[p->nwrite++ % PIPESIZE] = addr[i];
-801040a8:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-801040ab:	8d 4a 01             	lea    0x1(%edx),%ecx
-801040ae:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-801040b4:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
-801040ba:	0f b6 06             	movzbl (%esi),%eax
-801040bd:	83 c6 01             	add    $0x1,%esi
-801040c0:	89 75 e4             	mov    %esi,-0x1c(%ebp)
-801040c3:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
+80103658:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+8010365b:	8d 4a 01             	lea    0x1(%edx),%ecx
+8010365e:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
+80103664:	89 8b 38 02 00 00    	mov    %ecx,0x238(%ebx)
+8010366a:	0f b6 06             	movzbl (%esi),%eax
+8010366d:	83 c6 01             	add    $0x1,%esi
+80103670:	89 75 e4             	mov    %esi,-0x1c(%ebp)
+80103673:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
   for(i = 0; i < n; i++){
-801040c7:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-801040ca:	0f 85 5c ff ff ff    	jne    8010402c <pipewrite+0x3c>
+80103677:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+8010367a:	0f 85 5c ff ff ff    	jne    801035dc <pipewrite+0x3c>
   wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-801040d0:	83 ec 0c             	sub    $0xc,%esp
-801040d3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-801040d9:	50                   	push   %eax
-801040da:	e8 51 0a 00 00       	call   80104b30 <wakeup>
+80103680:	83 ec 0c             	sub    $0xc,%esp
+80103683:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
+80103689:	50                   	push   %eax
+8010368a:	e8 51 0a 00 00       	call   801040e0 <wakeup>
   release(&p->lock);
-801040df:	89 1c 24             	mov    %ebx,(%esp)
-801040e2:	e8 89 0f 00 00       	call   80105070 <release>
+8010368f:	89 1c 24             	mov    %ebx,(%esp)
+80103692:	e8 89 0f 00 00       	call   80104620 <release>
   return n;
-801040e7:	8b 45 10             	mov    0x10(%ebp),%eax
-801040ea:	83 c4 10             	add    $0x10,%esp
-801040ed:	eb aa                	jmp    80104099 <pipewrite+0xa9>
-801040ef:	90                   	nop
+80103697:	8b 45 10             	mov    0x10(%ebp),%eax
+8010369a:	83 c4 10             	add    $0x10,%esp
+8010369d:	eb aa                	jmp    80103649 <pipewrite+0xa9>
+8010369f:	90                   	nop
 
-801040f0 <piperead>:
+801036a0 <piperead>:
 
 int
 piperead(struct pipe *p, char *addr, int n)
 {
-801040f0:	f3 0f 1e fb          	endbr32 
-801040f4:	55                   	push   %ebp
-801040f5:	89 e5                	mov    %esp,%ebp
-801040f7:	57                   	push   %edi
-801040f8:	56                   	push   %esi
-801040f9:	53                   	push   %ebx
-801040fa:	83 ec 18             	sub    $0x18,%esp
-801040fd:	8b 75 08             	mov    0x8(%ebp),%esi
-80104100:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801036a0:	f3 0f 1e fb          	endbr32 
+801036a4:	55                   	push   %ebp
+801036a5:	89 e5                	mov    %esp,%ebp
+801036a7:	57                   	push   %edi
+801036a8:	56                   	push   %esi
+801036a9:	53                   	push   %ebx
+801036aa:	83 ec 18             	sub    $0x18,%esp
+801036ad:	8b 75 08             	mov    0x8(%ebp),%esi
+801036b0:	8b 7d 0c             	mov    0xc(%ebp),%edi
   int i;
 
   acquire(&p->lock);
-80104103:	56                   	push   %esi
-80104104:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-8010410a:	e8 a1 0e 00 00       	call   80104fb0 <acquire>
+801036b3:	56                   	push   %esi
+801036b4:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
+801036ba:	e8 a1 0e 00 00       	call   80104560 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-8010410f:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80104115:	83 c4 10             	add    $0x10,%esp
-80104118:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
-8010411e:	74 33                	je     80104153 <piperead+0x63>
-80104120:	eb 3b                	jmp    8010415d <piperead+0x6d>
-80104122:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801036bf:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+801036c5:	83 c4 10             	add    $0x10,%esp
+801036c8:	39 86 38 02 00 00    	cmp    %eax,0x238(%esi)
+801036ce:	74 33                	je     80103703 <piperead+0x63>
+801036d0:	eb 3b                	jmp    8010370d <piperead+0x6d>
+801036d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(myproc()->killed){
-80104128:	e8 83 02 00 00       	call   801043b0 <myproc>
-8010412d:	8b 48 24             	mov    0x24(%eax),%ecx
-80104130:	85 c9                	test   %ecx,%ecx
-80104132:	0f 85 88 00 00 00    	jne    801041c0 <piperead+0xd0>
+801036d8:	e8 83 02 00 00       	call   80103960 <myproc>
+801036dd:	8b 48 24             	mov    0x24(%eax),%ecx
+801036e0:	85 c9                	test   %ecx,%ecx
+801036e2:	0f 85 88 00 00 00    	jne    80103770 <piperead+0xd0>
       release(&p->lock);
       return -1;
     }
     sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-80104138:	83 ec 08             	sub    $0x8,%esp
-8010413b:	56                   	push   %esi
-8010413c:	53                   	push   %ebx
-8010413d:	e8 2e 08 00 00       	call   80104970 <sleep>
+801036e8:	83 ec 08             	sub    $0x8,%esp
+801036eb:	56                   	push   %esi
+801036ec:	53                   	push   %ebx
+801036ed:	e8 2e 08 00 00       	call   80103f20 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-80104142:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
-80104148:	83 c4 10             	add    $0x10,%esp
-8010414b:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
-80104151:	75 0a                	jne    8010415d <piperead+0x6d>
-80104153:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
-80104159:	85 c0                	test   %eax,%eax
-8010415b:	75 cb                	jne    80104128 <piperead+0x38>
+801036f2:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
+801036f8:	83 c4 10             	add    $0x10,%esp
+801036fb:	39 86 34 02 00 00    	cmp    %eax,0x234(%esi)
+80103701:	75 0a                	jne    8010370d <piperead+0x6d>
+80103703:	8b 86 40 02 00 00    	mov    0x240(%esi),%eax
+80103709:	85 c0                	test   %eax,%eax
+8010370b:	75 cb                	jne    801036d8 <piperead+0x38>
   }
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-8010415d:	8b 55 10             	mov    0x10(%ebp),%edx
-80104160:	31 db                	xor    %ebx,%ebx
-80104162:	85 d2                	test   %edx,%edx
-80104164:	7f 28                	jg     8010418e <piperead+0x9e>
-80104166:	eb 34                	jmp    8010419c <piperead+0xac>
-80104168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010416f:	90                   	nop
+8010370d:	8b 55 10             	mov    0x10(%ebp),%edx
+80103710:	31 db                	xor    %ebx,%ebx
+80103712:	85 d2                	test   %edx,%edx
+80103714:	7f 28                	jg     8010373e <piperead+0x9e>
+80103716:	eb 34                	jmp    8010374c <piperead+0xac>
+80103718:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010371f:	90                   	nop
     if(p->nread == p->nwrite)
       break;
     addr[i] = p->data[p->nread++ % PIPESIZE];
-80104170:	8d 48 01             	lea    0x1(%eax),%ecx
-80104173:	25 ff 01 00 00       	and    $0x1ff,%eax
-80104178:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
-8010417e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
-80104183:	88 04 1f             	mov    %al,(%edi,%ebx,1)
+80103720:	8d 48 01             	lea    0x1(%eax),%ecx
+80103723:	25 ff 01 00 00       	and    $0x1ff,%eax
+80103728:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
+8010372e:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
+80103733:	88 04 1f             	mov    %al,(%edi,%ebx,1)
   for(i = 0; i < n; i++){  //DOC: piperead-copy
-80104186:	83 c3 01             	add    $0x1,%ebx
-80104189:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-8010418c:	74 0e                	je     8010419c <piperead+0xac>
+80103736:	83 c3 01             	add    $0x1,%ebx
+80103739:	39 5d 10             	cmp    %ebx,0x10(%ebp)
+8010373c:	74 0e                	je     8010374c <piperead+0xac>
     if(p->nread == p->nwrite)
-8010418e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80104194:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-8010419a:	75 d4                	jne    80104170 <piperead+0x80>
+8010373e:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
+80103744:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
+8010374a:	75 d4                	jne    80103720 <piperead+0x80>
   }
   wakeup(&p->nwrite);  //DOC: piperead-wakeup
-8010419c:	83 ec 0c             	sub    $0xc,%esp
-8010419f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
-801041a5:	50                   	push   %eax
-801041a6:	e8 85 09 00 00       	call   80104b30 <wakeup>
+8010374c:	83 ec 0c             	sub    $0xc,%esp
+8010374f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
+80103755:	50                   	push   %eax
+80103756:	e8 85 09 00 00       	call   801040e0 <wakeup>
   release(&p->lock);
-801041ab:	89 34 24             	mov    %esi,(%esp)
-801041ae:	e8 bd 0e 00 00       	call   80105070 <release>
+8010375b:	89 34 24             	mov    %esi,(%esp)
+8010375e:	e8 bd 0e 00 00       	call   80104620 <release>
   return i;
-801041b3:	83 c4 10             	add    $0x10,%esp
+80103763:	83 c4 10             	add    $0x10,%esp
 }
-801041b6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801041b9:	89 d8                	mov    %ebx,%eax
-801041bb:	5b                   	pop    %ebx
-801041bc:	5e                   	pop    %esi
-801041bd:	5f                   	pop    %edi
-801041be:	5d                   	pop    %ebp
-801041bf:	c3                   	ret    
+80103766:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103769:	89 d8                	mov    %ebx,%eax
+8010376b:	5b                   	pop    %ebx
+8010376c:	5e                   	pop    %esi
+8010376d:	5f                   	pop    %edi
+8010376e:	5d                   	pop    %ebp
+8010376f:	c3                   	ret    
       release(&p->lock);
-801041c0:	83 ec 0c             	sub    $0xc,%esp
+80103770:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-801041c3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103773:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
-801041c8:	56                   	push   %esi
-801041c9:	e8 a2 0e 00 00       	call   80105070 <release>
+80103778:	56                   	push   %esi
+80103779:	e8 a2 0e 00 00       	call   80104620 <release>
       return -1;
-801041ce:	83 c4 10             	add    $0x10,%esp
+8010377e:	83 c4 10             	add    $0x10,%esp
 }
-801041d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801041d4:	89 d8                	mov    %ebx,%eax
-801041d6:	5b                   	pop    %ebx
-801041d7:	5e                   	pop    %esi
-801041d8:	5f                   	pop    %edi
-801041d9:	5d                   	pop    %ebp
-801041da:	c3                   	ret    
-801041db:	66 90                	xchg   %ax,%ax
-801041dd:	66 90                	xchg   %ax,%ax
-801041df:	90                   	nop
+80103781:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103784:	89 d8                	mov    %ebx,%eax
+80103786:	5b                   	pop    %ebx
+80103787:	5e                   	pop    %esi
+80103788:	5f                   	pop    %edi
+80103789:	5d                   	pop    %ebp
+8010378a:	c3                   	ret    
+8010378b:	66 90                	xchg   %ax,%ax
+8010378d:	66 90                	xchg   %ax,%ax
+8010378f:	90                   	nop
 
-801041e0 <allocproc>:
+80103790 <allocproc>:
 // If found, change state to EMBRYO and initialize
 // state required to run in the kernel.
 // Otherwise return 0.
 static struct proc*
 allocproc(void)
 {
-801041e0:	55                   	push   %ebp
-801041e1:	89 e5                	mov    %esp,%ebp
-801041e3:	53                   	push   %ebx
+80103790:	55                   	push   %ebp
+80103791:	89 e5                	mov    %esp,%ebp
+80103793:	53                   	push   %ebx
   struct proc *p;
   char *sp;
 
   acquire(&ptable.lock);
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801041e4:	bb 54 47 11 80       	mov    $0x80114754,%ebx
+80103794:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
 {
-801041e9:	83 ec 10             	sub    $0x10,%esp
+80103799:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
-801041ec:	68 20 47 11 80       	push   $0x80114720
-801041f1:	e8 ba 0d 00 00       	call   80104fb0 <acquire>
-801041f6:	83 c4 10             	add    $0x10,%esp
-801041f9:	eb 10                	jmp    8010420b <allocproc+0x2b>
-801041fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801041ff:	90                   	nop
+8010379c:	68 20 2d 11 80       	push   $0x80112d20
+801037a1:	e8 ba 0d 00 00       	call   80104560 <acquire>
+801037a6:	83 c4 10             	add    $0x10,%esp
+801037a9:	eb 10                	jmp    801037bb <allocproc+0x2b>
+801037ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801037af:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104200:	83 c3 7c             	add    $0x7c,%ebx
-80104203:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
-80104209:	74 75                	je     80104280 <allocproc+0xa0>
+801037b0:	83 c3 7c             	add    $0x7c,%ebx
+801037b3:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+801037b9:	74 75                	je     80103830 <allocproc+0xa0>
     if(p->state == UNUSED)
-8010420b:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010420e:	85 c0                	test   %eax,%eax
-80104210:	75 ee                	jne    80104200 <allocproc+0x20>
+801037bb:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037be:	85 c0                	test   %eax,%eax
+801037c0:	75 ee                	jne    801037b0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-80104212:	a1 04 b0 10 80       	mov    0x8010b004,%eax
+801037c2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
 
   release(&ptable.lock);
-80104217:	83 ec 0c             	sub    $0xc,%esp
+801037c7:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-8010421a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037ca:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
   p->pid = nextpid++;
-80104221:	89 43 10             	mov    %eax,0x10(%ebx)
-80104224:	8d 50 01             	lea    0x1(%eax),%edx
+801037d1:	89 43 10             	mov    %eax,0x10(%ebx)
+801037d4:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
-80104227:	68 20 47 11 80       	push   $0x80114720
+801037d7:	68 20 2d 11 80       	push   $0x80112d20
   p->pid = nextpid++;
-8010422c:	89 15 04 b0 10 80    	mov    %edx,0x8010b004
+801037dc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
-80104232:	e8 39 0e 00 00       	call   80105070 <release>
+801037e2:	e8 39 0e 00 00       	call   80104620 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-80104237:	e8 44 ee ff ff       	call   80103080 <kalloc>
-8010423c:	83 c4 10             	add    $0x10,%esp
-8010423f:	89 43 08             	mov    %eax,0x8(%ebx)
-80104242:	85 c0                	test   %eax,%eax
-80104244:	74 53                	je     80104299 <allocproc+0xb9>
+801037e7:	e8 44 ee ff ff       	call   80102630 <kalloc>
+801037ec:	83 c4 10             	add    $0x10,%esp
+801037ef:	89 43 08             	mov    %eax,0x8(%ebx)
+801037f2:	85 c0                	test   %eax,%eax
+801037f4:	74 53                	je     80103849 <allocproc+0xb9>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-80104246:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+801037f6:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-8010424c:	83 ec 04             	sub    $0x4,%esp
+801037fc:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-8010424f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+801037ff:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80104254:	89 53 18             	mov    %edx,0x18(%ebx)
+80103804:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80104257:	c7 40 14 2f 63 10 80 	movl   $0x8010632f,0x14(%eax)
+80103807:	c7 40 14 86 58 10 80 	movl   $0x80105886,0x14(%eax)
   p->context = (struct context*)sp;
-8010425e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+8010380e:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80104261:	6a 14                	push   $0x14
-80104263:	6a 00                	push   $0x0
-80104265:	50                   	push   %eax
-80104266:	e8 55 0e 00 00       	call   801050c0 <memset>
+80103811:	6a 14                	push   $0x14
+80103813:	6a 00                	push   $0x0
+80103815:	50                   	push   %eax
+80103816:	e8 55 0e 00 00       	call   80104670 <memset>
   p->context->eip = (uint)forkret;
-8010426b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010381b:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010426e:	83 c4 10             	add    $0x10,%esp
+8010381e:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80104271:	c7 40 10 b0 42 10 80 	movl   $0x801042b0,0x10(%eax)
+80103821:	c7 40 10 60 38 10 80 	movl   $0x80103860,0x10(%eax)
 }
-80104278:	89 d8                	mov    %ebx,%eax
-8010427a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010427d:	c9                   	leave  
-8010427e:	c3                   	ret    
-8010427f:	90                   	nop
+80103828:	89 d8                	mov    %ebx,%eax
+8010382a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010382d:	c9                   	leave  
+8010382e:	c3                   	ret    
+8010382f:	90                   	nop
   release(&ptable.lock);
-80104280:	83 ec 0c             	sub    $0xc,%esp
+80103830:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80104283:	31 db                	xor    %ebx,%ebx
+80103833:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80104285:	68 20 47 11 80       	push   $0x80114720
-8010428a:	e8 e1 0d 00 00       	call   80105070 <release>
+80103835:	68 20 2d 11 80       	push   $0x80112d20
+8010383a:	e8 e1 0d 00 00       	call   80104620 <release>
 }
-8010428f:	89 d8                	mov    %ebx,%eax
+8010383f:	89 d8                	mov    %ebx,%eax
   return 0;
-80104291:	83 c4 10             	add    $0x10,%esp
+80103841:	83 c4 10             	add    $0x10,%esp
 }
-80104294:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104297:	c9                   	leave  
-80104298:	c3                   	ret    
+80103844:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103847:	c9                   	leave  
+80103848:	c3                   	ret    
     p->state = UNUSED;
-80104299:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103849:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-801042a0:	31 db                	xor    %ebx,%ebx
+80103850:	31 db                	xor    %ebx,%ebx
 }
-801042a2:	89 d8                	mov    %ebx,%eax
-801042a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042a7:	c9                   	leave  
-801042a8:	c3                   	ret    
-801042a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103852:	89 d8                	mov    %ebx,%eax
+80103854:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103857:	c9                   	leave  
+80103858:	c3                   	ret    
+80103859:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801042b0 <forkret>:
+80103860 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-801042b0:	f3 0f 1e fb          	endbr32 
-801042b4:	55                   	push   %ebp
-801042b5:	89 e5                	mov    %esp,%ebp
-801042b7:	83 ec 14             	sub    $0x14,%esp
+80103860:	f3 0f 1e fb          	endbr32 
+80103864:	55                   	push   %ebp
+80103865:	89 e5                	mov    %esp,%ebp
+80103867:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-801042ba:	68 20 47 11 80       	push   $0x80114720
-801042bf:	e8 ac 0d 00 00       	call   80105070 <release>
+8010386a:	68 20 2d 11 80       	push   $0x80112d20
+8010386f:	e8 ac 0d 00 00       	call   80104620 <release>
 
   if (first) {
-801042c4:	a1 00 b0 10 80       	mov    0x8010b000,%eax
-801042c9:	83 c4 10             	add    $0x10,%esp
-801042cc:	85 c0                	test   %eax,%eax
-801042ce:	75 08                	jne    801042d8 <forkret+0x28>
+80103874:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+80103879:	83 c4 10             	add    $0x10,%esp
+8010387c:	85 c0                	test   %eax,%eax
+8010387e:	75 08                	jne    80103888 <forkret+0x28>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-801042d0:	c9                   	leave  
-801042d1:	c3                   	ret    
-801042d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103880:	c9                   	leave  
+80103881:	c3                   	ret    
+80103882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     first = 0;
-801042d8:	c7 05 00 b0 10 80 00 	movl   $0x0,0x8010b000
-801042df:	00 00 00 
+80103888:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+8010388f:	00 00 00 
     iinit(ROOTDEV);
-801042e2:	83 ec 0c             	sub    $0xc,%esp
-801042e5:	6a 01                	push   $0x1
-801042e7:	e8 a4 dc ff ff       	call   80101f90 <iinit>
+80103892:	83 ec 0c             	sub    $0xc,%esp
+80103895:	6a 01                	push   $0x1
+80103897:	e8 a4 dc ff ff       	call   80101540 <iinit>
     initlog(ROOTDEV);
-801042ec:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801042f3:	e8 e8 f3 ff ff       	call   801036e0 <initlog>
+8010389c:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038a3:	e8 e8 f3 ff ff       	call   80102c90 <initlog>
 }
-801042f8:	83 c4 10             	add    $0x10,%esp
-801042fb:	c9                   	leave  
-801042fc:	c3                   	ret    
-801042fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104300 <pinit>:
-{
-80104300:	f3 0f 1e fb          	endbr32 
-80104304:	55                   	push   %ebp
-80104305:	89 e5                	mov    %esp,%ebp
-80104307:	83 ec 10             	sub    $0x10,%esp
+801038a8:	83 c4 10             	add    $0x10,%esp
+801038ab:	c9                   	leave  
+801038ac:	c3                   	ret    
+801038ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+801038b0 <pinit>:
+{
+801038b0:	f3 0f 1e fb          	endbr32 
+801038b4:	55                   	push   %ebp
+801038b5:	89 e5                	mov    %esp,%ebp
+801038b7:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-8010430a:	68 00 81 10 80       	push   $0x80108100
-8010430f:	68 20 47 11 80       	push   $0x80114720
-80104314:	e8 17 0b 00 00       	call   80104e30 <initlock>
-}
-80104319:	83 c4 10             	add    $0x10,%esp
-8010431c:	c9                   	leave  
-8010431d:	c3                   	ret    
-8010431e:	66 90                	xchg   %ax,%ax
-
-80104320 <mycpu>:
-{
-80104320:	f3 0f 1e fb          	endbr32 
-80104324:	55                   	push   %ebp
-80104325:	89 e5                	mov    %esp,%ebp
-80104327:	56                   	push   %esi
-80104328:	53                   	push   %ebx
+801038ba:	68 20 76 10 80       	push   $0x80107620
+801038bf:	68 20 2d 11 80       	push   $0x80112d20
+801038c4:	e8 17 0b 00 00       	call   801043e0 <initlock>
+}
+801038c9:	83 c4 10             	add    $0x10,%esp
+801038cc:	c9                   	leave  
+801038cd:	c3                   	ret    
+801038ce:	66 90                	xchg   %ax,%ax
+
+801038d0 <mycpu>:
+{
+801038d0:	f3 0f 1e fb          	endbr32 
+801038d4:	55                   	push   %ebp
+801038d5:	89 e5                	mov    %esp,%ebp
+801038d7:	56                   	push   %esi
+801038d8:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80104329:	9c                   	pushf  
-8010432a:	58                   	pop    %eax
+801038d9:	9c                   	pushf  
+801038da:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-8010432b:	f6 c4 02             	test   $0x2,%ah
-8010432e:	75 4a                	jne    8010437a <mycpu+0x5a>
+801038db:	f6 c4 02             	test   $0x2,%ah
+801038de:	75 4a                	jne    8010392a <mycpu+0x5a>
   apicid = lapicid();
-80104330:	e8 bb ef ff ff       	call   801032f0 <lapicid>
+801038e0:	e8 bb ef ff ff       	call   801028a0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80104335:	8b 35 00 47 11 80    	mov    0x80114700,%esi
+801038e5:	8b 35 00 2d 11 80    	mov    0x80112d00,%esi
   apicid = lapicid();
-8010433b:	89 c3                	mov    %eax,%ebx
+801038eb:	89 c3                	mov    %eax,%ebx
   for (i = 0; i < ncpu; ++i) {
-8010433d:	85 f6                	test   %esi,%esi
-8010433f:	7e 2c                	jle    8010436d <mycpu+0x4d>
-80104341:	31 d2                	xor    %edx,%edx
-80104343:	eb 0a                	jmp    8010434f <mycpu+0x2f>
-80104345:	8d 76 00             	lea    0x0(%esi),%esi
-80104348:	83 c2 01             	add    $0x1,%edx
-8010434b:	39 f2                	cmp    %esi,%edx
-8010434d:	74 1e                	je     8010436d <mycpu+0x4d>
+801038ed:	85 f6                	test   %esi,%esi
+801038ef:	7e 2c                	jle    8010391d <mycpu+0x4d>
+801038f1:	31 d2                	xor    %edx,%edx
+801038f3:	eb 0a                	jmp    801038ff <mycpu+0x2f>
+801038f5:	8d 76 00             	lea    0x0(%esi),%esi
+801038f8:	83 c2 01             	add    $0x1,%edx
+801038fb:	39 f2                	cmp    %esi,%edx
+801038fd:	74 1e                	je     8010391d <mycpu+0x4d>
     if (cpus[i].apicid == apicid)
-8010434f:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-80104355:	0f b6 81 80 41 11 80 	movzbl -0x7feebe80(%ecx),%eax
-8010435c:	39 d8                	cmp    %ebx,%eax
-8010435e:	75 e8                	jne    80104348 <mycpu+0x28>
+801038ff:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+80103905:	0f b6 81 80 27 11 80 	movzbl -0x7feed880(%ecx),%eax
+8010390c:	39 d8                	cmp    %ebx,%eax
+8010390e:	75 e8                	jne    801038f8 <mycpu+0x28>
 }
-80104360:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103910:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-80104363:	8d 81 80 41 11 80    	lea    -0x7feebe80(%ecx),%eax
+80103913:	8d 81 80 27 11 80    	lea    -0x7feed880(%ecx),%eax
 }
-80104369:	5b                   	pop    %ebx
-8010436a:	5e                   	pop    %esi
-8010436b:	5d                   	pop    %ebp
-8010436c:	c3                   	ret    
+80103919:	5b                   	pop    %ebx
+8010391a:	5e                   	pop    %esi
+8010391b:	5d                   	pop    %ebp
+8010391c:	c3                   	ret    
   panic("unknown apicid\n");
-8010436d:	83 ec 0c             	sub    $0xc,%esp
-80104370:	68 07 81 10 80       	push   $0x80108107
-80104375:	e8 16 c0 ff ff       	call   80100390 <panic>
+8010391d:	83 ec 0c             	sub    $0xc,%esp
+80103920:	68 27 76 10 80       	push   $0x80107627
+80103925:	e8 66 ca ff ff       	call   80100390 <panic>
     panic("mycpu called with interrupts enabled\n");
-8010437a:	83 ec 0c             	sub    $0xc,%esp
-8010437d:	68 e4 81 10 80       	push   $0x801081e4
-80104382:	e8 09 c0 ff ff       	call   80100390 <panic>
-80104387:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010438e:	66 90                	xchg   %ax,%ax
+8010392a:	83 ec 0c             	sub    $0xc,%esp
+8010392d:	68 04 77 10 80       	push   $0x80107704
+80103932:	e8 59 ca ff ff       	call   80100390 <panic>
+80103937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010393e:	66 90                	xchg   %ax,%ax
 
-80104390 <cpuid>:
+80103940 <cpuid>:
 cpuid() {
-80104390:	f3 0f 1e fb          	endbr32 
-80104394:	55                   	push   %ebp
-80104395:	89 e5                	mov    %esp,%ebp
-80104397:	83 ec 08             	sub    $0x8,%esp
+80103940:	f3 0f 1e fb          	endbr32 
+80103944:	55                   	push   %ebp
+80103945:	89 e5                	mov    %esp,%ebp
+80103947:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-8010439a:	e8 81 ff ff ff       	call   80104320 <mycpu>
+8010394a:	e8 81 ff ff ff       	call   801038d0 <mycpu>
 }
-8010439f:	c9                   	leave  
+8010394f:	c9                   	leave  
   return mycpu()-cpus;
-801043a0:	2d 80 41 11 80       	sub    $0x80114180,%eax
-801043a5:	c1 f8 04             	sar    $0x4,%eax
-801043a8:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+80103950:	2d 80 27 11 80       	sub    $0x80112780,%eax
+80103955:	c1 f8 04             	sar    $0x4,%eax
+80103958:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
 }
-801043ae:	c3                   	ret    
-801043af:	90                   	nop
+8010395e:	c3                   	ret    
+8010395f:	90                   	nop
 
-801043b0 <myproc>:
+80103960 <myproc>:
 myproc(void) {
-801043b0:	f3 0f 1e fb          	endbr32 
-801043b4:	55                   	push   %ebp
-801043b5:	89 e5                	mov    %esp,%ebp
-801043b7:	53                   	push   %ebx
-801043b8:	83 ec 04             	sub    $0x4,%esp
+80103960:	f3 0f 1e fb          	endbr32 
+80103964:	55                   	push   %ebp
+80103965:	89 e5                	mov    %esp,%ebp
+80103967:	53                   	push   %ebx
+80103968:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-801043bb:	e8 f0 0a 00 00       	call   80104eb0 <pushcli>
+8010396b:	e8 f0 0a 00 00       	call   80104460 <pushcli>
   c = mycpu();
-801043c0:	e8 5b ff ff ff       	call   80104320 <mycpu>
+80103970:	e8 5b ff ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-801043c5:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103975:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801043cb:	e8 30 0b 00 00       	call   80104f00 <popcli>
+8010397b:	e8 30 0b 00 00       	call   801044b0 <popcli>
 }
-801043d0:	83 c4 04             	add    $0x4,%esp
-801043d3:	89 d8                	mov    %ebx,%eax
-801043d5:	5b                   	pop    %ebx
-801043d6:	5d                   	pop    %ebp
-801043d7:	c3                   	ret    
-801043d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801043df:	90                   	nop
-
-801043e0 <userinit>:
-{
-801043e0:	f3 0f 1e fb          	endbr32 
-801043e4:	55                   	push   %ebp
-801043e5:	89 e5                	mov    %esp,%ebp
-801043e7:	53                   	push   %ebx
-801043e8:	83 ec 04             	sub    $0x4,%esp
+80103980:	83 c4 04             	add    $0x4,%esp
+80103983:	89 d8                	mov    %ebx,%eax
+80103985:	5b                   	pop    %ebx
+80103986:	5d                   	pop    %ebp
+80103987:	c3                   	ret    
+80103988:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010398f:	90                   	nop
+
+80103990 <userinit>:
+{
+80103990:	f3 0f 1e fb          	endbr32 
+80103994:	55                   	push   %ebp
+80103995:	89 e5                	mov    %esp,%ebp
+80103997:	53                   	push   %ebx
+80103998:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-801043eb:	e8 f0 fd ff ff       	call   801041e0 <allocproc>
-801043f0:	89 c3                	mov    %eax,%ebx
+8010399b:	e8 f0 fd ff ff       	call   80103790 <allocproc>
+801039a0:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801043f2:	a3 b8 b5 10 80       	mov    %eax,0x8010b5b8
+801039a2:	a3 b8 a5 10 80       	mov    %eax,0x8010a5b8
   if((p->pgdir = setupkvm()) == 0)
-801043f7:	e8 f4 34 00 00       	call   801078f0 <setupkvm>
-801043fc:	89 43 04             	mov    %eax,0x4(%ebx)
-801043ff:	85 c0                	test   %eax,%eax
-80104401:	0f 84 bd 00 00 00    	je     801044c4 <userinit+0xe4>
+801039a7:	e8 a4 34 00 00       	call   80106e50 <setupkvm>
+801039ac:	89 43 04             	mov    %eax,0x4(%ebx)
+801039af:	85 c0                	test   %eax,%eax
+801039b1:	0f 84 bd 00 00 00    	je     80103a74 <userinit+0xe4>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-80104407:	83 ec 04             	sub    $0x4,%esp
-8010440a:	68 2c 00 00 00       	push   $0x2c
-8010440f:	68 60 b4 10 80       	push   $0x8010b460
-80104414:	50                   	push   %eax
-80104415:	e8 a6 31 00 00       	call   801075c0 <inituvm>
+801039b7:	83 ec 04             	sub    $0x4,%esp
+801039ba:	68 2c 00 00 00       	push   $0x2c
+801039bf:	68 60 a4 10 80       	push   $0x8010a460
+801039c4:	50                   	push   %eax
+801039c5:	e8 56 31 00 00       	call   80106b20 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-8010441a:	83 c4 0c             	add    $0xc,%esp
+801039ca:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-8010441d:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+801039cd:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-80104423:	6a 4c                	push   $0x4c
-80104425:	6a 00                	push   $0x0
-80104427:	ff 73 18             	pushl  0x18(%ebx)
-8010442a:	e8 91 0c 00 00       	call   801050c0 <memset>
+801039d3:	6a 4c                	push   $0x4c
+801039d5:	6a 00                	push   $0x0
+801039d7:	ff 73 18             	pushl  0x18(%ebx)
+801039da:	e8 91 0c 00 00       	call   80104670 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-8010442f:	8b 43 18             	mov    0x18(%ebx),%eax
-80104432:	ba 1b 00 00 00       	mov    $0x1b,%edx
+801039df:	8b 43 18             	mov    0x18(%ebx),%eax
+801039e2:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80104437:	83 c4 0c             	add    $0xc,%esp
+801039e7:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-8010443a:	b9 23 00 00 00       	mov    $0x23,%ecx
+801039ea:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-8010443f:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+801039ef:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80104443:	8b 43 18             	mov    0x18(%ebx),%eax
-80104446:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+801039f3:	8b 43 18             	mov    0x18(%ebx),%eax
+801039f6:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-8010444a:	8b 43 18             	mov    0x18(%ebx),%eax
-8010444d:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80104451:	66 89 50 28          	mov    %dx,0x28(%eax)
+801039fa:	8b 43 18             	mov    0x18(%ebx),%eax
+801039fd:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a01:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80104455:	8b 43 18             	mov    0x18(%ebx),%eax
-80104458:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-8010445c:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103a05:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a08:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a0c:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80104460:	8b 43 18             	mov    0x18(%ebx),%eax
-80104463:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103a10:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a13:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-8010446a:	8b 43 18             	mov    0x18(%ebx),%eax
-8010446d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103a1a:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a1d:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80104474:	8b 43 18             	mov    0x18(%ebx),%eax
-80104477:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103a24:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a27:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-8010447e:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80104481:	6a 10                	push   $0x10
-80104483:	68 30 81 10 80       	push   $0x80108130
-80104488:	50                   	push   %eax
-80104489:	e8 f2 0d 00 00       	call   80105280 <safestrcpy>
+80103a2e:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a31:	6a 10                	push   $0x10
+80103a33:	68 50 76 10 80       	push   $0x80107650
+80103a38:	50                   	push   %eax
+80103a39:	e8 f2 0d 00 00       	call   80104830 <safestrcpy>
   p->cwd = namei("/");
-8010448e:	c7 04 24 39 81 10 80 	movl   $0x80108139,(%esp)
-80104495:	e8 e6 e5 ff ff       	call   80102a80 <namei>
-8010449a:	89 43 68             	mov    %eax,0x68(%ebx)
+80103a3e:	c7 04 24 59 76 10 80 	movl   $0x80107659,(%esp)
+80103a45:	e8 e6 e5 ff ff       	call   80102030 <namei>
+80103a4a:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-8010449d:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-801044a4:	e8 07 0b 00 00       	call   80104fb0 <acquire>
+80103a4d:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a54:	e8 07 0b 00 00       	call   80104560 <acquire>
   p->state = RUNNABLE;
-801044a9:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103a59:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-801044b0:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-801044b7:	e8 b4 0b 00 00       	call   80105070 <release>
+80103a60:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103a67:	e8 b4 0b 00 00       	call   80104620 <release>
 }
-801044bc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801044bf:	83 c4 10             	add    $0x10,%esp
-801044c2:	c9                   	leave  
-801044c3:	c3                   	ret    
+80103a6c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103a6f:	83 c4 10             	add    $0x10,%esp
+80103a72:	c9                   	leave  
+80103a73:	c3                   	ret    
     panic("userinit: out of memory?");
-801044c4:	83 ec 0c             	sub    $0xc,%esp
-801044c7:	68 17 81 10 80       	push   $0x80108117
-801044cc:	e8 bf be ff ff       	call   80100390 <panic>
-801044d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801044df:	90                   	nop
-
-801044e0 <growproc>:
-{
-801044e0:	f3 0f 1e fb          	endbr32 
-801044e4:	55                   	push   %ebp
-801044e5:	89 e5                	mov    %esp,%ebp
-801044e7:	56                   	push   %esi
-801044e8:	53                   	push   %ebx
-801044e9:	8b 75 08             	mov    0x8(%ebp),%esi
+80103a74:	83 ec 0c             	sub    $0xc,%esp
+80103a77:	68 37 76 10 80       	push   $0x80107637
+80103a7c:	e8 0f c9 ff ff       	call   80100390 <panic>
+80103a81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103a8f:	90                   	nop
+
+80103a90 <growproc>:
+{
+80103a90:	f3 0f 1e fb          	endbr32 
+80103a94:	55                   	push   %ebp
+80103a95:	89 e5                	mov    %esp,%ebp
+80103a97:	56                   	push   %esi
+80103a98:	53                   	push   %ebx
+80103a99:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-801044ec:	e8 bf 09 00 00       	call   80104eb0 <pushcli>
+80103a9c:	e8 bf 09 00 00       	call   80104460 <pushcli>
   c = mycpu();
-801044f1:	e8 2a fe ff ff       	call   80104320 <mycpu>
+80103aa1:	e8 2a fe ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-801044f6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103aa6:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-801044fc:	e8 ff 09 00 00       	call   80104f00 <popcli>
+80103aac:	e8 ff 09 00 00       	call   801044b0 <popcli>
   sz = curproc->sz;
-80104501:	8b 03                	mov    (%ebx),%eax
+80103ab1:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80104503:	85 f6                	test   %esi,%esi
-80104505:	7f 19                	jg     80104520 <growproc+0x40>
+80103ab3:	85 f6                	test   %esi,%esi
+80103ab5:	7f 19                	jg     80103ad0 <growproc+0x40>
   } else if(n < 0){
-80104507:	75 37                	jne    80104540 <growproc+0x60>
+80103ab7:	75 37                	jne    80103af0 <growproc+0x60>
   switchuvm(curproc);
-80104509:	83 ec 0c             	sub    $0xc,%esp
+80103ab9:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-8010450c:	89 03                	mov    %eax,(%ebx)
+80103abc:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-8010450e:	53                   	push   %ebx
-8010450f:	e8 9c 2f 00 00       	call   801074b0 <switchuvm>
+80103abe:	53                   	push   %ebx
+80103abf:	e8 4c 2f 00 00       	call   80106a10 <switchuvm>
   return 0;
-80104514:	83 c4 10             	add    $0x10,%esp
-80104517:	31 c0                	xor    %eax,%eax
+80103ac4:	83 c4 10             	add    $0x10,%esp
+80103ac7:	31 c0                	xor    %eax,%eax
 }
-80104519:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010451c:	5b                   	pop    %ebx
-8010451d:	5e                   	pop    %esi
-8010451e:	5d                   	pop    %ebp
-8010451f:	c3                   	ret    
+80103ac9:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103acc:	5b                   	pop    %ebx
+80103acd:	5e                   	pop    %esi
+80103ace:	5d                   	pop    %ebp
+80103acf:	c3                   	ret    
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80104520:	83 ec 04             	sub    $0x4,%esp
-80104523:	01 c6                	add    %eax,%esi
-80104525:	56                   	push   %esi
-80104526:	50                   	push   %eax
-80104527:	ff 73 04             	pushl  0x4(%ebx)
-8010452a:	e8 e1 31 00 00       	call   80107710 <allocuvm>
-8010452f:	83 c4 10             	add    $0x10,%esp
-80104532:	85 c0                	test   %eax,%eax
-80104534:	75 d3                	jne    80104509 <growproc+0x29>
+80103ad0:	83 ec 04             	sub    $0x4,%esp
+80103ad3:	01 c6                	add    %eax,%esi
+80103ad5:	56                   	push   %esi
+80103ad6:	50                   	push   %eax
+80103ad7:	ff 73 04             	pushl  0x4(%ebx)
+80103ada:	e8 91 31 00 00       	call   80106c70 <allocuvm>
+80103adf:	83 c4 10             	add    $0x10,%esp
+80103ae2:	85 c0                	test   %eax,%eax
+80103ae4:	75 d3                	jne    80103ab9 <growproc+0x29>
       return -1;
-80104536:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010453b:	eb dc                	jmp    80104519 <growproc+0x39>
-8010453d:	8d 76 00             	lea    0x0(%esi),%esi
+80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103aeb:	eb dc                	jmp    80103ac9 <growproc+0x39>
+80103aed:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80104540:	83 ec 04             	sub    $0x4,%esp
-80104543:	01 c6                	add    %eax,%esi
-80104545:	56                   	push   %esi
-80104546:	50                   	push   %eax
-80104547:	ff 73 04             	pushl  0x4(%ebx)
-8010454a:	e8 f1 32 00 00       	call   80107840 <deallocuvm>
-8010454f:	83 c4 10             	add    $0x10,%esp
-80104552:	85 c0                	test   %eax,%eax
-80104554:	75 b3                	jne    80104509 <growproc+0x29>
-80104556:	eb de                	jmp    80104536 <growproc+0x56>
-80104558:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010455f:	90                   	nop
-
-80104560 <fork>:
-{
-80104560:	f3 0f 1e fb          	endbr32 
-80104564:	55                   	push   %ebp
-80104565:	89 e5                	mov    %esp,%ebp
-80104567:	57                   	push   %edi
-80104568:	56                   	push   %esi
-80104569:	53                   	push   %ebx
-8010456a:	83 ec 1c             	sub    $0x1c,%esp
+80103af0:	83 ec 04             	sub    $0x4,%esp
+80103af3:	01 c6                	add    %eax,%esi
+80103af5:	56                   	push   %esi
+80103af6:	50                   	push   %eax
+80103af7:	ff 73 04             	pushl  0x4(%ebx)
+80103afa:	e8 a1 32 00 00       	call   80106da0 <deallocuvm>
+80103aff:	83 c4 10             	add    $0x10,%esp
+80103b02:	85 c0                	test   %eax,%eax
+80103b04:	75 b3                	jne    80103ab9 <growproc+0x29>
+80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
+80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b0f:	90                   	nop
+
+80103b10 <fork>:
+{
+80103b10:	f3 0f 1e fb          	endbr32 
+80103b14:	55                   	push   %ebp
+80103b15:	89 e5                	mov    %esp,%ebp
+80103b17:	57                   	push   %edi
+80103b18:	56                   	push   %esi
+80103b19:	53                   	push   %ebx
+80103b1a:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-8010456d:	e8 3e 09 00 00       	call   80104eb0 <pushcli>
+80103b1d:	e8 3e 09 00 00       	call   80104460 <pushcli>
   c = mycpu();
-80104572:	e8 a9 fd ff ff       	call   80104320 <mycpu>
+80103b22:	e8 a9 fd ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-80104577:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103b27:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010457d:	e8 7e 09 00 00       	call   80104f00 <popcli>
+80103b2d:	e8 7e 09 00 00       	call   801044b0 <popcli>
   if((np = allocproc()) == 0){
-80104582:	e8 59 fc ff ff       	call   801041e0 <allocproc>
-80104587:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010458a:	85 c0                	test   %eax,%eax
-8010458c:	0f 84 bb 00 00 00    	je     8010464d <fork+0xed>
+80103b32:	e8 59 fc ff ff       	call   80103790 <allocproc>
+80103b37:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103b3a:	85 c0                	test   %eax,%eax
+80103b3c:	0f 84 bb 00 00 00    	je     80103bfd <fork+0xed>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80104592:	83 ec 08             	sub    $0x8,%esp
-80104595:	ff 33                	pushl  (%ebx)
-80104597:	89 c7                	mov    %eax,%edi
-80104599:	ff 73 04             	pushl  0x4(%ebx)
-8010459c:	e8 1f 34 00 00       	call   801079c0 <copyuvm>
-801045a1:	83 c4 10             	add    $0x10,%esp
-801045a4:	89 47 04             	mov    %eax,0x4(%edi)
-801045a7:	85 c0                	test   %eax,%eax
-801045a9:	0f 84 a5 00 00 00    	je     80104654 <fork+0xf4>
+80103b42:	83 ec 08             	sub    $0x8,%esp
+80103b45:	ff 33                	pushl  (%ebx)
+80103b47:	89 c7                	mov    %eax,%edi
+80103b49:	ff 73 04             	pushl  0x4(%ebx)
+80103b4c:	e8 cf 33 00 00       	call   80106f20 <copyuvm>
+80103b51:	83 c4 10             	add    $0x10,%esp
+80103b54:	89 47 04             	mov    %eax,0x4(%edi)
+80103b57:	85 c0                	test   %eax,%eax
+80103b59:	0f 84 a5 00 00 00    	je     80103c04 <fork+0xf4>
   np->sz = curproc->sz;
-801045af:	8b 03                	mov    (%ebx),%eax
-801045b1:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801045b4:	89 01                	mov    %eax,(%ecx)
+80103b5f:	8b 03                	mov    (%ebx),%eax
+80103b61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103b64:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-801045b6:	8b 79 18             	mov    0x18(%ecx),%edi
+80103b66:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-801045b9:	89 c8                	mov    %ecx,%eax
-801045bb:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103b69:	89 c8                	mov    %ecx,%eax
+80103b6b:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-801045be:	b9 13 00 00 00       	mov    $0x13,%ecx
-801045c3:	8b 73 18             	mov    0x18(%ebx),%esi
-801045c6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+80103b6e:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103b73:	8b 73 18             	mov    0x18(%ebx),%esi
+80103b76:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-801045c8:	31 f6                	xor    %esi,%esi
+80103b78:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-801045ca:	8b 40 18             	mov    0x18(%eax),%eax
-801045cd:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103b7a:	8b 40 18             	mov    0x18(%eax),%eax
+80103b7d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   for(i = 0; i < NOFILE; i++)
-801045d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103b84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[i])
-801045d8:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-801045dc:	85 c0                	test   %eax,%eax
-801045de:	74 13                	je     801045f3 <fork+0x93>
+80103b88:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103b8c:	85 c0                	test   %eax,%eax
+80103b8e:	74 13                	je     80103ba3 <fork+0x93>
       np->ofile[i] = filedup(curproc->ofile[i]);
-801045e0:	83 ec 0c             	sub    $0xc,%esp
-801045e3:	50                   	push   %eax
-801045e4:	e8 d7 d2 ff ff       	call   801018c0 <filedup>
-801045e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-801045ec:	83 c4 10             	add    $0x10,%esp
-801045ef:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103b90:	83 ec 0c             	sub    $0xc,%esp
+80103b93:	50                   	push   %eax
+80103b94:	e8 d7 d2 ff ff       	call   80100e70 <filedup>
+80103b99:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103b9c:	83 c4 10             	add    $0x10,%esp
+80103b9f:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-801045f3:	83 c6 01             	add    $0x1,%esi
-801045f6:	83 fe 10             	cmp    $0x10,%esi
-801045f9:	75 dd                	jne    801045d8 <fork+0x78>
+80103ba3:	83 c6 01             	add    $0x1,%esi
+80103ba6:	83 fe 10             	cmp    $0x10,%esi
+80103ba9:	75 dd                	jne    80103b88 <fork+0x78>
   np->cwd = idup(curproc->cwd);
-801045fb:	83 ec 0c             	sub    $0xc,%esp
-801045fe:	ff 73 68             	pushl  0x68(%ebx)
+80103bab:	83 ec 0c             	sub    $0xc,%esp
+80103bae:	ff 73 68             	pushl  0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80104601:	83 c3 6c             	add    $0x6c,%ebx
+80103bb1:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80104604:	e8 77 db ff ff       	call   80102180 <idup>
-80104609:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103bb4:	e8 77 db ff ff       	call   80101730 <idup>
+80103bb9:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-8010460c:	83 c4 0c             	add    $0xc,%esp
+80103bbc:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-8010460f:	89 47 68             	mov    %eax,0x68(%edi)
+80103bbf:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80104612:	8d 47 6c             	lea    0x6c(%edi),%eax
-80104615:	6a 10                	push   $0x10
-80104617:	53                   	push   %ebx
-80104618:	50                   	push   %eax
-80104619:	e8 62 0c 00 00       	call   80105280 <safestrcpy>
+80103bc2:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103bc5:	6a 10                	push   $0x10
+80103bc7:	53                   	push   %ebx
+80103bc8:	50                   	push   %eax
+80103bc9:	e8 62 0c 00 00       	call   80104830 <safestrcpy>
   pid = np->pid;
-8010461e:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103bce:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80104621:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-80104628:	e8 83 09 00 00       	call   80104fb0 <acquire>
+80103bd1:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103bd8:	e8 83 09 00 00       	call   80104560 <acquire>
   np->state = RUNNABLE;
-8010462d:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103bdd:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80104634:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-8010463b:	e8 30 0a 00 00       	call   80105070 <release>
+80103be4:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103beb:	e8 30 0a 00 00       	call   80104620 <release>
   return pid;
-80104640:	83 c4 10             	add    $0x10,%esp
+80103bf0:	83 c4 10             	add    $0x10,%esp
 }
-80104643:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104646:	89 d8                	mov    %ebx,%eax
-80104648:	5b                   	pop    %ebx
-80104649:	5e                   	pop    %esi
-8010464a:	5f                   	pop    %edi
-8010464b:	5d                   	pop    %ebp
-8010464c:	c3                   	ret    
+80103bf3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bf6:	89 d8                	mov    %ebx,%eax
+80103bf8:	5b                   	pop    %ebx
+80103bf9:	5e                   	pop    %esi
+80103bfa:	5f                   	pop    %edi
+80103bfb:	5d                   	pop    %ebp
+80103bfc:	c3                   	ret    
     return -1;
-8010464d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80104652:	eb ef                	jmp    80104643 <fork+0xe3>
+80103bfd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c02:	eb ef                	jmp    80103bf3 <fork+0xe3>
     kfree(np->kstack);
-80104654:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80104657:	83 ec 0c             	sub    $0xc,%esp
-8010465a:	ff 73 08             	pushl  0x8(%ebx)
-8010465d:	e8 5e e8 ff ff       	call   80102ec0 <kfree>
+80103c04:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103c07:	83 ec 0c             	sub    $0xc,%esp
+80103c0a:	ff 73 08             	pushl  0x8(%ebx)
+80103c0d:	e8 5e e8 ff ff       	call   80102470 <kfree>
     np->kstack = 0;
-80104662:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103c12:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80104669:	83 c4 10             	add    $0x10,%esp
+80103c19:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-8010466c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103c1c:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80104673:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80104678:	eb c9                	jmp    80104643 <fork+0xe3>
-8010467a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104680 <scheduler>:
-{
-80104680:	f3 0f 1e fb          	endbr32 
-80104684:	55                   	push   %ebp
-80104685:	89 e5                	mov    %esp,%ebp
-80104687:	57                   	push   %edi
-80104688:	56                   	push   %esi
-80104689:	53                   	push   %ebx
-8010468a:	83 ec 0c             	sub    $0xc,%esp
+80103c23:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c28:	eb c9                	jmp    80103bf3 <fork+0xe3>
+80103c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103c30 <scheduler>:
+{
+80103c30:	f3 0f 1e fb          	endbr32 
+80103c34:	55                   	push   %ebp
+80103c35:	89 e5                	mov    %esp,%ebp
+80103c37:	57                   	push   %edi
+80103c38:	56                   	push   %esi
+80103c39:	53                   	push   %ebx
+80103c3a:	83 ec 0c             	sub    $0xc,%esp
   struct cpu *c = mycpu();
-8010468d:	e8 8e fc ff ff       	call   80104320 <mycpu>
+80103c3d:	e8 8e fc ff ff       	call   801038d0 <mycpu>
   c->proc = 0;
-80104692:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80104699:	00 00 00 
+80103c42:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103c49:	00 00 00 
   struct cpu *c = mycpu();
-8010469c:	89 c6                	mov    %eax,%esi
+80103c4c:	89 c6                	mov    %eax,%esi
   c->proc = 0;
-8010469e:	8d 78 04             	lea    0x4(%eax),%edi
-801046a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c4e:	8d 78 04             	lea    0x4(%eax),%edi
+80103c51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("sti");
-801046a8:	fb                   	sti    
+80103c58:	fb                   	sti    
     acquire(&ptable.lock);
-801046a9:	83 ec 0c             	sub    $0xc,%esp
+80103c59:	83 ec 0c             	sub    $0xc,%esp
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801046ac:	bb 54 47 11 80       	mov    $0x80114754,%ebx
+80103c5c:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
     acquire(&ptable.lock);
-801046b1:	68 20 47 11 80       	push   $0x80114720
-801046b6:	e8 f5 08 00 00       	call   80104fb0 <acquire>
-801046bb:	83 c4 10             	add    $0x10,%esp
-801046be:	66 90                	xchg   %ax,%ax
+80103c61:	68 20 2d 11 80       	push   $0x80112d20
+80103c66:	e8 f5 08 00 00       	call   80104560 <acquire>
+80103c6b:	83 c4 10             	add    $0x10,%esp
+80103c6e:	66 90                	xchg   %ax,%ax
       if(p->state != RUNNABLE)
-801046c0:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-801046c4:	75 33                	jne    801046f9 <scheduler+0x79>
+80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
+80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
       switchuvm(p);
-801046c6:	83 ec 0c             	sub    $0xc,%esp
+80103c76:	83 ec 0c             	sub    $0xc,%esp
       c->proc = p;
-801046c9:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
+80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
       switchuvm(p);
-801046cf:	53                   	push   %ebx
-801046d0:	e8 db 2d 00 00       	call   801074b0 <switchuvm>
+80103c7f:	53                   	push   %ebx
+80103c80:	e8 8b 2d 00 00       	call   80106a10 <switchuvm>
       swtch(&(c->scheduler), p->context);
-801046d5:	58                   	pop    %eax
-801046d6:	5a                   	pop    %edx
-801046d7:	ff 73 1c             	pushl  0x1c(%ebx)
-801046da:	57                   	push   %edi
+80103c85:	58                   	pop    %eax
+80103c86:	5a                   	pop    %edx
+80103c87:	ff 73 1c             	pushl  0x1c(%ebx)
+80103c8a:	57                   	push   %edi
       p->state = RUNNING;
-801046db:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
+80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
       swtch(&(c->scheduler), p->context);
-801046e2:	e8 fc 0b 00 00       	call   801052e3 <swtch>
+80103c92:	e8 fc 0b 00 00       	call   80104893 <swtch>
       switchkvm();
-801046e7:	e8 a4 2d 00 00       	call   80107490 <switchkvm>
+80103c97:	e8 54 2d 00 00       	call   801069f0 <switchkvm>
       c->proc = 0;
-801046ec:	83 c4 10             	add    $0x10,%esp
-801046ef:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-801046f6:	00 00 00 
+80103c9c:	83 c4 10             	add    $0x10,%esp
+80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
+80103ca6:	00 00 00 
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801046f9:	83 c3 7c             	add    $0x7c,%ebx
-801046fc:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
-80104702:	75 bc                	jne    801046c0 <scheduler+0x40>
+80103ca9:	83 c3 7c             	add    $0x7c,%ebx
+80103cac:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
     release(&ptable.lock);
-80104704:	83 ec 0c             	sub    $0xc,%esp
-80104707:	68 20 47 11 80       	push   $0x80114720
-8010470c:	e8 5f 09 00 00       	call   80105070 <release>
+80103cb4:	83 ec 0c             	sub    $0xc,%esp
+80103cb7:	68 20 2d 11 80       	push   $0x80112d20
+80103cbc:	e8 5f 09 00 00       	call   80104620 <release>
     sti();
-80104711:	83 c4 10             	add    $0x10,%esp
-80104714:	eb 92                	jmp    801046a8 <scheduler+0x28>
-80104716:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010471d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104720 <sched>:
-{
-80104720:	f3 0f 1e fb          	endbr32 
-80104724:	55                   	push   %ebp
-80104725:	89 e5                	mov    %esp,%ebp
-80104727:	56                   	push   %esi
-80104728:	53                   	push   %ebx
+80103cc1:	83 c4 10             	add    $0x10,%esp
+80103cc4:	eb 92                	jmp    80103c58 <scheduler+0x28>
+80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103cd0 <sched>:
+{
+80103cd0:	f3 0f 1e fb          	endbr32 
+80103cd4:	55                   	push   %ebp
+80103cd5:	89 e5                	mov    %esp,%ebp
+80103cd7:	56                   	push   %esi
+80103cd8:	53                   	push   %ebx
   pushcli();
-80104729:	e8 82 07 00 00       	call   80104eb0 <pushcli>
+80103cd9:	e8 82 07 00 00       	call   80104460 <pushcli>
   c = mycpu();
-8010472e:	e8 ed fb ff ff       	call   80104320 <mycpu>
+80103cde:	e8 ed fb ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-80104733:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103ce3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104739:	e8 c2 07 00 00       	call   80104f00 <popcli>
+80103ce9:	e8 c2 07 00 00       	call   801044b0 <popcli>
   if(!holding(&ptable.lock))
-8010473e:	83 ec 0c             	sub    $0xc,%esp
-80104741:	68 20 47 11 80       	push   $0x80114720
-80104746:	e8 15 08 00 00       	call   80104f60 <holding>
-8010474b:	83 c4 10             	add    $0x10,%esp
-8010474e:	85 c0                	test   %eax,%eax
-80104750:	74 4f                	je     801047a1 <sched+0x81>
+80103cee:	83 ec 0c             	sub    $0xc,%esp
+80103cf1:	68 20 2d 11 80       	push   $0x80112d20
+80103cf6:	e8 15 08 00 00       	call   80104510 <holding>
+80103cfb:	83 c4 10             	add    $0x10,%esp
+80103cfe:	85 c0                	test   %eax,%eax
+80103d00:	74 4f                	je     80103d51 <sched+0x81>
   if(mycpu()->ncli != 1)
-80104752:	e8 c9 fb ff ff       	call   80104320 <mycpu>
-80104757:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-8010475e:	75 68                	jne    801047c8 <sched+0xa8>
+80103d02:	e8 c9 fb ff ff       	call   801038d0 <mycpu>
+80103d07:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103d0e:	75 68                	jne    80103d78 <sched+0xa8>
   if(p->state == RUNNING)
-80104760:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80104764:	74 55                	je     801047bb <sched+0x9b>
+80103d10:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103d14:	74 55                	je     80103d6b <sched+0x9b>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80104766:	9c                   	pushf  
-80104767:	58                   	pop    %eax
+80103d16:	9c                   	pushf  
+80103d17:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80104768:	f6 c4 02             	test   $0x2,%ah
-8010476b:	75 41                	jne    801047ae <sched+0x8e>
+80103d18:	f6 c4 02             	test   $0x2,%ah
+80103d1b:	75 41                	jne    80103d5e <sched+0x8e>
   intena = mycpu()->intena;
-8010476d:	e8 ae fb ff ff       	call   80104320 <mycpu>
+80103d1d:	e8 ae fb ff ff       	call   801038d0 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80104772:	83 c3 1c             	add    $0x1c,%ebx
+80103d22:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80104775:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80103d25:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-8010477b:	e8 a0 fb ff ff       	call   80104320 <mycpu>
-80104780:	83 ec 08             	sub    $0x8,%esp
-80104783:	ff 70 04             	pushl  0x4(%eax)
-80104786:	53                   	push   %ebx
-80104787:	e8 57 0b 00 00       	call   801052e3 <swtch>
+80103d2b:	e8 a0 fb ff ff       	call   801038d0 <mycpu>
+80103d30:	83 ec 08             	sub    $0x8,%esp
+80103d33:	ff 70 04             	pushl  0x4(%eax)
+80103d36:	53                   	push   %ebx
+80103d37:	e8 57 0b 00 00       	call   80104893 <swtch>
   mycpu()->intena = intena;
-8010478c:	e8 8f fb ff ff       	call   80104320 <mycpu>
+80103d3c:	e8 8f fb ff ff       	call   801038d0 <mycpu>
 }
-80104791:	83 c4 10             	add    $0x10,%esp
+80103d41:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80104794:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80103d44:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-8010479a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010479d:	5b                   	pop    %ebx
-8010479e:	5e                   	pop    %esi
-8010479f:	5d                   	pop    %ebp
-801047a0:	c3                   	ret    
+80103d4a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103d4d:	5b                   	pop    %ebx
+80103d4e:	5e                   	pop    %esi
+80103d4f:	5d                   	pop    %ebp
+80103d50:	c3                   	ret    
     panic("sched ptable.lock");
-801047a1:	83 ec 0c             	sub    $0xc,%esp
-801047a4:	68 3b 81 10 80       	push   $0x8010813b
-801047a9:	e8 e2 bb ff ff       	call   80100390 <panic>
+80103d51:	83 ec 0c             	sub    $0xc,%esp
+80103d54:	68 5b 76 10 80       	push   $0x8010765b
+80103d59:	e8 32 c6 ff ff       	call   80100390 <panic>
     panic("sched interruptible");
-801047ae:	83 ec 0c             	sub    $0xc,%esp
-801047b1:	68 67 81 10 80       	push   $0x80108167
-801047b6:	e8 d5 bb ff ff       	call   80100390 <panic>
+80103d5e:	83 ec 0c             	sub    $0xc,%esp
+80103d61:	68 87 76 10 80       	push   $0x80107687
+80103d66:	e8 25 c6 ff ff       	call   80100390 <panic>
     panic("sched running");
-801047bb:	83 ec 0c             	sub    $0xc,%esp
-801047be:	68 59 81 10 80       	push   $0x80108159
-801047c3:	e8 c8 bb ff ff       	call   80100390 <panic>
+80103d6b:	83 ec 0c             	sub    $0xc,%esp
+80103d6e:	68 79 76 10 80       	push   $0x80107679
+80103d73:	e8 18 c6 ff ff       	call   80100390 <panic>
     panic("sched locks");
-801047c8:	83 ec 0c             	sub    $0xc,%esp
-801047cb:	68 4d 81 10 80       	push   $0x8010814d
-801047d0:	e8 bb bb ff ff       	call   80100390 <panic>
-801047d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801047e0 <exit>:
-{
-801047e0:	f3 0f 1e fb          	endbr32 
-801047e4:	55                   	push   %ebp
-801047e5:	89 e5                	mov    %esp,%ebp
-801047e7:	57                   	push   %edi
-801047e8:	56                   	push   %esi
-801047e9:	53                   	push   %ebx
-801047ea:	83 ec 0c             	sub    $0xc,%esp
+80103d78:	83 ec 0c             	sub    $0xc,%esp
+80103d7b:	68 6d 76 10 80       	push   $0x8010766d
+80103d80:	e8 0b c6 ff ff       	call   80100390 <panic>
+80103d85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103d8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80103d90 <exit>:
+{
+80103d90:	f3 0f 1e fb          	endbr32 
+80103d94:	55                   	push   %ebp
+80103d95:	89 e5                	mov    %esp,%ebp
+80103d97:	57                   	push   %edi
+80103d98:	56                   	push   %esi
+80103d99:	53                   	push   %ebx
+80103d9a:	83 ec 0c             	sub    $0xc,%esp
   pushcli();
-801047ed:	e8 be 06 00 00       	call   80104eb0 <pushcli>
+80103d9d:	e8 be 06 00 00       	call   80104460 <pushcli>
   c = mycpu();
-801047f2:	e8 29 fb ff ff       	call   80104320 <mycpu>
+80103da2:	e8 29 fb ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-801047f7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80103da7:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-801047fd:	e8 fe 06 00 00       	call   80104f00 <popcli>
+80103dad:	e8 fe 06 00 00       	call   801044b0 <popcli>
   if(curproc == initproc)
-80104802:	8d 5e 28             	lea    0x28(%esi),%ebx
-80104805:	8d 7e 68             	lea    0x68(%esi),%edi
-80104808:	39 35 b8 b5 10 80    	cmp    %esi,0x8010b5b8
-8010480e:	0f 84 f3 00 00 00    	je     80104907 <exit+0x127>
-80104814:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103db2:	8d 5e 28             	lea    0x28(%esi),%ebx
+80103db5:	8d 7e 68             	lea    0x68(%esi),%edi
+80103db8:	39 35 b8 a5 10 80    	cmp    %esi,0x8010a5b8
+80103dbe:	0f 84 f3 00 00 00    	je     80103eb7 <exit+0x127>
+80103dc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd]){
-80104818:	8b 03                	mov    (%ebx),%eax
-8010481a:	85 c0                	test   %eax,%eax
-8010481c:	74 12                	je     80104830 <exit+0x50>
+80103dc8:	8b 03                	mov    (%ebx),%eax
+80103dca:	85 c0                	test   %eax,%eax
+80103dcc:	74 12                	je     80103de0 <exit+0x50>
       fileclose(curproc->ofile[fd]);
-8010481e:	83 ec 0c             	sub    $0xc,%esp
-80104821:	50                   	push   %eax
-80104822:	e8 e9 d0 ff ff       	call   80101910 <fileclose>
+80103dce:	83 ec 0c             	sub    $0xc,%esp
+80103dd1:	50                   	push   %eax
+80103dd2:	e8 e9 d0 ff ff       	call   80100ec0 <fileclose>
       curproc->ofile[fd] = 0;
-80104827:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-8010482d:	83 c4 10             	add    $0x10,%esp
+80103dd7:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80103ddd:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80104830:	83 c3 04             	add    $0x4,%ebx
-80104833:	39 df                	cmp    %ebx,%edi
-80104835:	75 e1                	jne    80104818 <exit+0x38>
+80103de0:	83 c3 04             	add    $0x4,%ebx
+80103de3:	39 df                	cmp    %ebx,%edi
+80103de5:	75 e1                	jne    80103dc8 <exit+0x38>
   begin_op();
-80104837:	e8 44 ef ff ff       	call   80103780 <begin_op>
+80103de7:	e8 44 ef ff ff       	call   80102d30 <begin_op>
   iput(curproc->cwd);
-8010483c:	83 ec 0c             	sub    $0xc,%esp
-8010483f:	ff 76 68             	pushl  0x68(%esi)
-80104842:	e8 99 da ff ff       	call   801022e0 <iput>
+80103dec:	83 ec 0c             	sub    $0xc,%esp
+80103def:	ff 76 68             	pushl  0x68(%esi)
+80103df2:	e8 99 da ff ff       	call   80101890 <iput>
   end_op();
-80104847:	e8 a4 ef ff ff       	call   801037f0 <end_op>
+80103df7:	e8 a4 ef ff ff       	call   80102da0 <end_op>
   curproc->cwd = 0;
-8010484c:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
+80103dfc:	c7 46 68 00 00 00 00 	movl   $0x0,0x68(%esi)
   acquire(&ptable.lock);
-80104853:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-8010485a:	e8 51 07 00 00       	call   80104fb0 <acquire>
+80103e03:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103e0a:	e8 51 07 00 00       	call   80104560 <acquire>
   wakeup1(curproc->parent);
-8010485f:	8b 56 14             	mov    0x14(%esi),%edx
-80104862:	83 c4 10             	add    $0x10,%esp
+80103e0f:	8b 56 14             	mov    0x14(%esi),%edx
+80103e12:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104865:	b8 54 47 11 80       	mov    $0x80114754,%eax
-8010486a:	eb 0e                	jmp    8010487a <exit+0x9a>
-8010486c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104870:	83 c0 7c             	add    $0x7c,%eax
-80104873:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-80104878:	74 1c                	je     80104896 <exit+0xb6>
+80103e15:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103e1a:	eb 0e                	jmp    80103e2a <exit+0x9a>
+80103e1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e20:	83 c0 7c             	add    $0x7c,%eax
+80103e23:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e28:	74 1c                	je     80103e46 <exit+0xb6>
     if(p->state == SLEEPING && p->chan == chan)
-8010487a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-8010487e:	75 f0                	jne    80104870 <exit+0x90>
-80104880:	3b 50 20             	cmp    0x20(%eax),%edx
-80104883:	75 eb                	jne    80104870 <exit+0x90>
+80103e2a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e2e:	75 f0                	jne    80103e20 <exit+0x90>
+80103e30:	3b 50 20             	cmp    0x20(%eax),%edx
+80103e33:	75 eb                	jne    80103e20 <exit+0x90>
       p->state = RUNNABLE;
-80104885:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e35:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010488c:	83 c0 7c             	add    $0x7c,%eax
-8010488f:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-80104894:	75 e4                	jne    8010487a <exit+0x9a>
+80103e3c:	83 c0 7c             	add    $0x7c,%eax
+80103e3f:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e44:	75 e4                	jne    80103e2a <exit+0x9a>
       p->parent = initproc;
-80104896:	8b 0d b8 b5 10 80    	mov    0x8010b5b8,%ecx
+80103e46:	8b 0d b8 a5 10 80    	mov    0x8010a5b8,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-8010489c:	ba 54 47 11 80       	mov    $0x80114754,%edx
-801048a1:	eb 10                	jmp    801048b3 <exit+0xd3>
-801048a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801048a7:	90                   	nop
-801048a8:	83 c2 7c             	add    $0x7c,%edx
-801048ab:	81 fa 54 66 11 80    	cmp    $0x80116654,%edx
-801048b1:	74 3b                	je     801048ee <exit+0x10e>
+80103e4c:	ba 54 2d 11 80       	mov    $0x80112d54,%edx
+80103e51:	eb 10                	jmp    80103e63 <exit+0xd3>
+80103e53:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103e57:	90                   	nop
+80103e58:	83 c2 7c             	add    $0x7c,%edx
+80103e5b:	81 fa 54 4c 11 80    	cmp    $0x80114c54,%edx
+80103e61:	74 3b                	je     80103e9e <exit+0x10e>
     if(p->parent == curproc){
-801048b3:	39 72 14             	cmp    %esi,0x14(%edx)
-801048b6:	75 f0                	jne    801048a8 <exit+0xc8>
+80103e63:	39 72 14             	cmp    %esi,0x14(%edx)
+80103e66:	75 f0                	jne    80103e58 <exit+0xc8>
       if(p->state == ZOMBIE)
-801048b8:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80103e68:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-801048bc:	89 4a 14             	mov    %ecx,0x14(%edx)
+80103e6c:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-801048bf:	75 e7                	jne    801048a8 <exit+0xc8>
+80103e6f:	75 e7                	jne    80103e58 <exit+0xc8>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801048c1:	b8 54 47 11 80       	mov    $0x80114754,%eax
-801048c6:	eb 12                	jmp    801048da <exit+0xfa>
-801048c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048cf:	90                   	nop
-801048d0:	83 c0 7c             	add    $0x7c,%eax
-801048d3:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-801048d8:	74 ce                	je     801048a8 <exit+0xc8>
+80103e71:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80103e76:	eb 12                	jmp    80103e8a <exit+0xfa>
+80103e78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e7f:	90                   	nop
+80103e80:	83 c0 7c             	add    $0x7c,%eax
+80103e83:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80103e88:	74 ce                	je     80103e58 <exit+0xc8>
     if(p->state == SLEEPING && p->chan == chan)
-801048da:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-801048de:	75 f0                	jne    801048d0 <exit+0xf0>
-801048e0:	3b 48 20             	cmp    0x20(%eax),%ecx
-801048e3:	75 eb                	jne    801048d0 <exit+0xf0>
+80103e8a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103e8e:	75 f0                	jne    80103e80 <exit+0xf0>
+80103e90:	3b 48 20             	cmp    0x20(%eax),%ecx
+80103e93:	75 eb                	jne    80103e80 <exit+0xf0>
       p->state = RUNNABLE;
-801048e5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-801048ec:	eb e2                	jmp    801048d0 <exit+0xf0>
+80103e95:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103e9c:	eb e2                	jmp    80103e80 <exit+0xf0>
   curproc->state = ZOMBIE;
-801048ee:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
+80103e9e:	c7 46 0c 05 00 00 00 	movl   $0x5,0xc(%esi)
   sched();
-801048f5:	e8 26 fe ff ff       	call   80104720 <sched>
+80103ea5:	e8 26 fe ff ff       	call   80103cd0 <sched>
   panic("zombie exit");
-801048fa:	83 ec 0c             	sub    $0xc,%esp
-801048fd:	68 88 81 10 80       	push   $0x80108188
-80104902:	e8 89 ba ff ff       	call   80100390 <panic>
+80103eaa:	83 ec 0c             	sub    $0xc,%esp
+80103ead:	68 a8 76 10 80       	push   $0x801076a8
+80103eb2:	e8 d9 c4 ff ff       	call   80100390 <panic>
     panic("init exiting");
-80104907:	83 ec 0c             	sub    $0xc,%esp
-8010490a:	68 7b 81 10 80       	push   $0x8010817b
-8010490f:	e8 7c ba ff ff       	call   80100390 <panic>
-80104914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010491b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010491f:	90                   	nop
-
-80104920 <yield>:
-{
-80104920:	f3 0f 1e fb          	endbr32 
-80104924:	55                   	push   %ebp
-80104925:	89 e5                	mov    %esp,%ebp
-80104927:	53                   	push   %ebx
-80104928:	83 ec 10             	sub    $0x10,%esp
+80103eb7:	83 ec 0c             	sub    $0xc,%esp
+80103eba:	68 9b 76 10 80       	push   $0x8010769b
+80103ebf:	e8 cc c4 ff ff       	call   80100390 <panic>
+80103ec4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ecf:	90                   	nop
+
+80103ed0 <yield>:
+{
+80103ed0:	f3 0f 1e fb          	endbr32 
+80103ed4:	55                   	push   %ebp
+80103ed5:	89 e5                	mov    %esp,%ebp
+80103ed7:	53                   	push   %ebx
+80103ed8:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-8010492b:	68 20 47 11 80       	push   $0x80114720
-80104930:	e8 7b 06 00 00       	call   80104fb0 <acquire>
+80103edb:	68 20 2d 11 80       	push   $0x80112d20
+80103ee0:	e8 7b 06 00 00       	call   80104560 <acquire>
   pushcli();
-80104935:	e8 76 05 00 00       	call   80104eb0 <pushcli>
+80103ee5:	e8 76 05 00 00       	call   80104460 <pushcli>
   c = mycpu();
-8010493a:	e8 e1 f9 ff ff       	call   80104320 <mycpu>
+80103eea:	e8 e1 f9 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-8010493f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103eef:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104945:	e8 b6 05 00 00       	call   80104f00 <popcli>
+80103ef5:	e8 b6 05 00 00       	call   801044b0 <popcli>
   myproc()->state = RUNNABLE;
-8010494a:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103efa:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-80104951:	e8 ca fd ff ff       	call   80104720 <sched>
+80103f01:	e8 ca fd ff ff       	call   80103cd0 <sched>
   release(&ptable.lock);
-80104956:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-8010495d:	e8 0e 07 00 00       	call   80105070 <release>
+80103f06:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103f0d:	e8 0e 07 00 00       	call   80104620 <release>
 }
-80104962:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104965:	83 c4 10             	add    $0x10,%esp
-80104968:	c9                   	leave  
-80104969:	c3                   	ret    
-8010496a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104970 <sleep>:
-{
-80104970:	f3 0f 1e fb          	endbr32 
-80104974:	55                   	push   %ebp
-80104975:	89 e5                	mov    %esp,%ebp
-80104977:	57                   	push   %edi
-80104978:	56                   	push   %esi
-80104979:	53                   	push   %ebx
-8010497a:	83 ec 0c             	sub    $0xc,%esp
-8010497d:	8b 7d 08             	mov    0x8(%ebp),%edi
-80104980:	8b 75 0c             	mov    0xc(%ebp),%esi
+80103f12:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103f15:	83 c4 10             	add    $0x10,%esp
+80103f18:	c9                   	leave  
+80103f19:	c3                   	ret    
+80103f1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103f20 <sleep>:
+{
+80103f20:	f3 0f 1e fb          	endbr32 
+80103f24:	55                   	push   %ebp
+80103f25:	89 e5                	mov    %esp,%ebp
+80103f27:	57                   	push   %edi
+80103f28:	56                   	push   %esi
+80103f29:	53                   	push   %ebx
+80103f2a:	83 ec 0c             	sub    $0xc,%esp
+80103f2d:	8b 7d 08             	mov    0x8(%ebp),%edi
+80103f30:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-80104983:	e8 28 05 00 00       	call   80104eb0 <pushcli>
+80103f33:	e8 28 05 00 00       	call   80104460 <pushcli>
   c = mycpu();
-80104988:	e8 93 f9 ff ff       	call   80104320 <mycpu>
+80103f38:	e8 93 f9 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-8010498d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103f3d:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104993:	e8 68 05 00 00       	call   80104f00 <popcli>
+80103f43:	e8 68 05 00 00       	call   801044b0 <popcli>
   if(p == 0)
-80104998:	85 db                	test   %ebx,%ebx
-8010499a:	0f 84 83 00 00 00    	je     80104a23 <sleep+0xb3>
+80103f48:	85 db                	test   %ebx,%ebx
+80103f4a:	0f 84 83 00 00 00    	je     80103fd3 <sleep+0xb3>
   if(lk == 0)
-801049a0:	85 f6                	test   %esi,%esi
-801049a2:	74 72                	je     80104a16 <sleep+0xa6>
+80103f50:	85 f6                	test   %esi,%esi
+80103f52:	74 72                	je     80103fc6 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-801049a4:	81 fe 20 47 11 80    	cmp    $0x80114720,%esi
-801049aa:	74 4c                	je     801049f8 <sleep+0x88>
+80103f54:	81 fe 20 2d 11 80    	cmp    $0x80112d20,%esi
+80103f5a:	74 4c                	je     80103fa8 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-801049ac:	83 ec 0c             	sub    $0xc,%esp
-801049af:	68 20 47 11 80       	push   $0x80114720
-801049b4:	e8 f7 05 00 00       	call   80104fb0 <acquire>
+80103f5c:	83 ec 0c             	sub    $0xc,%esp
+80103f5f:	68 20 2d 11 80       	push   $0x80112d20
+80103f64:	e8 f7 05 00 00       	call   80104560 <acquire>
     release(lk);
-801049b9:	89 34 24             	mov    %esi,(%esp)
-801049bc:	e8 af 06 00 00       	call   80105070 <release>
+80103f69:	89 34 24             	mov    %esi,(%esp)
+80103f6c:	e8 af 06 00 00       	call   80104620 <release>
   p->chan = chan;
-801049c1:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103f71:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801049c4:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103f74:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-801049cb:	e8 50 fd ff ff       	call   80104720 <sched>
+80103f7b:	e8 50 fd ff ff       	call   80103cd0 <sched>
   p->chan = 0;
-801049d0:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103f80:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-801049d7:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
-801049de:	e8 8d 06 00 00       	call   80105070 <release>
+80103f87:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
+80103f8e:	e8 8d 06 00 00       	call   80104620 <release>
     acquire(lk);
-801049e3:	89 75 08             	mov    %esi,0x8(%ebp)
-801049e6:	83 c4 10             	add    $0x10,%esp
+80103f93:	89 75 08             	mov    %esi,0x8(%ebp)
+80103f96:	83 c4 10             	add    $0x10,%esp
 }
-801049e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801049ec:	5b                   	pop    %ebx
-801049ed:	5e                   	pop    %esi
-801049ee:	5f                   	pop    %edi
-801049ef:	5d                   	pop    %ebp
+80103f99:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103f9c:	5b                   	pop    %ebx
+80103f9d:	5e                   	pop    %esi
+80103f9e:	5f                   	pop    %edi
+80103f9f:	5d                   	pop    %ebp
     acquire(lk);
-801049f0:	e9 bb 05 00 00       	jmp    80104fb0 <acquire>
-801049f5:	8d 76 00             	lea    0x0(%esi),%esi
+80103fa0:	e9 bb 05 00 00       	jmp    80104560 <acquire>
+80103fa5:	8d 76 00             	lea    0x0(%esi),%esi
   p->chan = chan;
-801049f8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80103fa8:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801049fb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80103fab:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80104a02:	e8 19 fd ff ff       	call   80104720 <sched>
+80103fb2:	e8 19 fd ff ff       	call   80103cd0 <sched>
   p->chan = 0;
-80104a07:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80103fb7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80104a0e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104a11:	5b                   	pop    %ebx
-80104a12:	5e                   	pop    %esi
-80104a13:	5f                   	pop    %edi
-80104a14:	5d                   	pop    %ebp
-80104a15:	c3                   	ret    
+80103fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103fc1:	5b                   	pop    %ebx
+80103fc2:	5e                   	pop    %esi
+80103fc3:	5f                   	pop    %edi
+80103fc4:	5d                   	pop    %ebp
+80103fc5:	c3                   	ret    
     panic("sleep without lk");
-80104a16:	83 ec 0c             	sub    $0xc,%esp
-80104a19:	68 9a 81 10 80       	push   $0x8010819a
-80104a1e:	e8 6d b9 ff ff       	call   80100390 <panic>
+80103fc6:	83 ec 0c             	sub    $0xc,%esp
+80103fc9:	68 ba 76 10 80       	push   $0x801076ba
+80103fce:	e8 bd c3 ff ff       	call   80100390 <panic>
     panic("sleep");
-80104a23:	83 ec 0c             	sub    $0xc,%esp
-80104a26:	68 94 81 10 80       	push   $0x80108194
-80104a2b:	e8 60 b9 ff ff       	call   80100390 <panic>
-
-80104a30 <wait>:
-{
-80104a30:	f3 0f 1e fb          	endbr32 
-80104a34:	55                   	push   %ebp
-80104a35:	89 e5                	mov    %esp,%ebp
-80104a37:	56                   	push   %esi
-80104a38:	53                   	push   %ebx
+80103fd3:	83 ec 0c             	sub    $0xc,%esp
+80103fd6:	68 b4 76 10 80       	push   $0x801076b4
+80103fdb:	e8 b0 c3 ff ff       	call   80100390 <panic>
+
+80103fe0 <wait>:
+{
+80103fe0:	f3 0f 1e fb          	endbr32 
+80103fe4:	55                   	push   %ebp
+80103fe5:	89 e5                	mov    %esp,%ebp
+80103fe7:	56                   	push   %esi
+80103fe8:	53                   	push   %ebx
   pushcli();
-80104a39:	e8 72 04 00 00       	call   80104eb0 <pushcli>
+80103fe9:	e8 72 04 00 00       	call   80104460 <pushcli>
   c = mycpu();
-80104a3e:	e8 dd f8 ff ff       	call   80104320 <mycpu>
+80103fee:	e8 dd f8 ff ff       	call   801038d0 <mycpu>
   p = c->proc;
-80104a43:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+80103ff3:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80104a49:	e8 b2 04 00 00       	call   80104f00 <popcli>
+80103ff9:	e8 b2 04 00 00       	call   801044b0 <popcli>
   acquire(&ptable.lock);
-80104a4e:	83 ec 0c             	sub    $0xc,%esp
-80104a51:	68 20 47 11 80       	push   $0x80114720
-80104a56:	e8 55 05 00 00       	call   80104fb0 <acquire>
-80104a5b:	83 c4 10             	add    $0x10,%esp
+80103ffe:	83 ec 0c             	sub    $0xc,%esp
+80104001:	68 20 2d 11 80       	push   $0x80112d20
+80104006:	e8 55 05 00 00       	call   80104560 <acquire>
+8010400b:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-80104a5e:	31 c0                	xor    %eax,%eax
+8010400e:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104a60:	bb 54 47 11 80       	mov    $0x80114754,%ebx
-80104a65:	eb 14                	jmp    80104a7b <wait+0x4b>
-80104a67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a6e:	66 90                	xchg   %ax,%ax
-80104a70:	83 c3 7c             	add    $0x7c,%ebx
-80104a73:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
-80104a79:	74 1b                	je     80104a96 <wait+0x66>
+80104010:	bb 54 2d 11 80       	mov    $0x80112d54,%ebx
+80104015:	eb 14                	jmp    8010402b <wait+0x4b>
+80104017:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010401e:	66 90                	xchg   %ax,%ax
+80104020:	83 c3 7c             	add    $0x7c,%ebx
+80104023:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80104029:	74 1b                	je     80104046 <wait+0x66>
       if(p->parent != curproc)
-80104a7b:	39 73 14             	cmp    %esi,0x14(%ebx)
-80104a7e:	75 f0                	jne    80104a70 <wait+0x40>
+8010402b:	39 73 14             	cmp    %esi,0x14(%ebx)
+8010402e:	75 f0                	jne    80104020 <wait+0x40>
       if(p->state == ZOMBIE){
-80104a80:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80104a84:	74 32                	je     80104ab8 <wait+0x88>
+80104030:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+80104034:	74 32                	je     80104068 <wait+0x88>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104a86:	83 c3 7c             	add    $0x7c,%ebx
+80104036:	83 c3 7c             	add    $0x7c,%ebx
       havekids = 1;
-80104a89:	b8 01 00 00 00       	mov    $0x1,%eax
+80104039:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104a8e:	81 fb 54 66 11 80    	cmp    $0x80116654,%ebx
-80104a94:	75 e5                	jne    80104a7b <wait+0x4b>
+8010403e:	81 fb 54 4c 11 80    	cmp    $0x80114c54,%ebx
+80104044:	75 e5                	jne    8010402b <wait+0x4b>
     if(!havekids || curproc->killed){
-80104a96:	85 c0                	test   %eax,%eax
-80104a98:	74 74                	je     80104b0e <wait+0xde>
-80104a9a:	8b 46 24             	mov    0x24(%esi),%eax
-80104a9d:	85 c0                	test   %eax,%eax
-80104a9f:	75 6d                	jne    80104b0e <wait+0xde>
+80104046:	85 c0                	test   %eax,%eax
+80104048:	74 74                	je     801040be <wait+0xde>
+8010404a:	8b 46 24             	mov    0x24(%esi),%eax
+8010404d:	85 c0                	test   %eax,%eax
+8010404f:	75 6d                	jne    801040be <wait+0xde>
     sleep(curproc, &ptable.lock);  //DOC: wait-sleep
-80104aa1:	83 ec 08             	sub    $0x8,%esp
-80104aa4:	68 20 47 11 80       	push   $0x80114720
-80104aa9:	56                   	push   %esi
-80104aaa:	e8 c1 fe ff ff       	call   80104970 <sleep>
+80104051:	83 ec 08             	sub    $0x8,%esp
+80104054:	68 20 2d 11 80       	push   $0x80112d20
+80104059:	56                   	push   %esi
+8010405a:	e8 c1 fe ff ff       	call   80103f20 <sleep>
     havekids = 0;
-80104aaf:	83 c4 10             	add    $0x10,%esp
-80104ab2:	eb aa                	jmp    80104a5e <wait+0x2e>
-80104ab4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010405f:	83 c4 10             	add    $0x10,%esp
+80104062:	eb aa                	jmp    8010400e <wait+0x2e>
+80104064:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         kfree(p->kstack);
-80104ab8:	83 ec 0c             	sub    $0xc,%esp
-80104abb:	ff 73 08             	pushl  0x8(%ebx)
+80104068:	83 ec 0c             	sub    $0xc,%esp
+8010406b:	ff 73 08             	pushl  0x8(%ebx)
         pid = p->pid;
-80104abe:	8b 73 10             	mov    0x10(%ebx),%esi
+8010406e:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80104ac1:	e8 fa e3 ff ff       	call   80102ec0 <kfree>
+80104071:	e8 fa e3 ff ff       	call   80102470 <kfree>
         freevm(p->pgdir);
-80104ac6:	5a                   	pop    %edx
-80104ac7:	ff 73 04             	pushl  0x4(%ebx)
+80104076:	5a                   	pop    %edx
+80104077:	ff 73 04             	pushl  0x4(%ebx)
         p->kstack = 0;
-80104aca:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+8010407a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80104ad1:	e8 9a 2d 00 00       	call   80107870 <freevm>
+80104081:	e8 4a 2d 00 00       	call   80106dd0 <freevm>
         release(&ptable.lock);
-80104ad6:	c7 04 24 20 47 11 80 	movl   $0x80114720,(%esp)
+80104086:	c7 04 24 20 2d 11 80 	movl   $0x80112d20,(%esp)
         p->pid = 0;
-80104add:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+8010408d:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80104ae4:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80104094:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80104aeb:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+8010409b:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80104aef:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+8010409f:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80104af6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801040a6:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80104afd:	e8 6e 05 00 00       	call   80105070 <release>
+801040ad:	e8 6e 05 00 00       	call   80104620 <release>
         return pid;
-80104b02:	83 c4 10             	add    $0x10,%esp
+801040b2:	83 c4 10             	add    $0x10,%esp
 }
-80104b05:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104b08:	89 f0                	mov    %esi,%eax
-80104b0a:	5b                   	pop    %ebx
-80104b0b:	5e                   	pop    %esi
-80104b0c:	5d                   	pop    %ebp
-80104b0d:	c3                   	ret    
+801040b5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801040b8:	89 f0                	mov    %esi,%eax
+801040ba:	5b                   	pop    %ebx
+801040bb:	5e                   	pop    %esi
+801040bc:	5d                   	pop    %ebp
+801040bd:	c3                   	ret    
       release(&ptable.lock);
-80104b0e:	83 ec 0c             	sub    $0xc,%esp
+801040be:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80104b11:	be ff ff ff ff       	mov    $0xffffffff,%esi
+801040c1:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80104b16:	68 20 47 11 80       	push   $0x80114720
-80104b1b:	e8 50 05 00 00       	call   80105070 <release>
+801040c6:	68 20 2d 11 80       	push   $0x80112d20
+801040cb:	e8 50 05 00 00       	call   80104620 <release>
       return -1;
-80104b20:	83 c4 10             	add    $0x10,%esp
-80104b23:	eb e0                	jmp    80104b05 <wait+0xd5>
-80104b25:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801040d0:	83 c4 10             	add    $0x10,%esp
+801040d3:	eb e0                	jmp    801040b5 <wait+0xd5>
+801040d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801040dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80104b30 <wakeup>:
+801040e0 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80104b30:	f3 0f 1e fb          	endbr32 
-80104b34:	55                   	push   %ebp
-80104b35:	89 e5                	mov    %esp,%ebp
-80104b37:	53                   	push   %ebx
-80104b38:	83 ec 10             	sub    $0x10,%esp
-80104b3b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801040e0:	f3 0f 1e fb          	endbr32 
+801040e4:	55                   	push   %ebp
+801040e5:	89 e5                	mov    %esp,%ebp
+801040e7:	53                   	push   %ebx
+801040e8:	83 ec 10             	sub    $0x10,%esp
+801040eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-80104b3e:	68 20 47 11 80       	push   $0x80114720
-80104b43:	e8 68 04 00 00       	call   80104fb0 <acquire>
-80104b48:	83 c4 10             	add    $0x10,%esp
+801040ee:	68 20 2d 11 80       	push   $0x80112d20
+801040f3:	e8 68 04 00 00       	call   80104560 <acquire>
+801040f8:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104b4b:	b8 54 47 11 80       	mov    $0x80114754,%eax
-80104b50:	eb 10                	jmp    80104b62 <wakeup+0x32>
-80104b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104b58:	83 c0 7c             	add    $0x7c,%eax
-80104b5b:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-80104b60:	74 1c                	je     80104b7e <wakeup+0x4e>
+801040fb:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104100:	eb 10                	jmp    80104112 <wakeup+0x32>
+80104102:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104108:	83 c0 7c             	add    $0x7c,%eax
+8010410b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104110:	74 1c                	je     8010412e <wakeup+0x4e>
     if(p->state == SLEEPING && p->chan == chan)
-80104b62:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80104b66:	75 f0                	jne    80104b58 <wakeup+0x28>
-80104b68:	3b 58 20             	cmp    0x20(%eax),%ebx
-80104b6b:	75 eb                	jne    80104b58 <wakeup+0x28>
+80104112:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104116:	75 f0                	jne    80104108 <wakeup+0x28>
+80104118:	3b 58 20             	cmp    0x20(%eax),%ebx
+8010411b:	75 eb                	jne    80104108 <wakeup+0x28>
       p->state = RUNNABLE;
-80104b6d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010411d:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104b74:	83 c0 7c             	add    $0x7c,%eax
-80104b77:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-80104b7c:	75 e4                	jne    80104b62 <wakeup+0x32>
+80104124:	83 c0 7c             	add    $0x7c,%eax
+80104127:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+8010412c:	75 e4                	jne    80104112 <wakeup+0x32>
   wakeup1(chan);
   release(&ptable.lock);
-80104b7e:	c7 45 08 20 47 11 80 	movl   $0x80114720,0x8(%ebp)
+8010412e:	c7 45 08 20 2d 11 80 	movl   $0x80112d20,0x8(%ebp)
 }
-80104b85:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104b88:	c9                   	leave  
+80104135:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104138:	c9                   	leave  
   release(&ptable.lock);
-80104b89:	e9 e2 04 00 00       	jmp    80105070 <release>
-80104b8e:	66 90                	xchg   %ax,%ax
+80104139:	e9 e2 04 00 00       	jmp    80104620 <release>
+8010413e:	66 90                	xchg   %ax,%ax
 
-80104b90 <kill>:
+80104140 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104b90:	f3 0f 1e fb          	endbr32 
-80104b94:	55                   	push   %ebp
-80104b95:	89 e5                	mov    %esp,%ebp
-80104b97:	53                   	push   %ebx
-80104b98:	83 ec 10             	sub    $0x10,%esp
-80104b9b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104140:	f3 0f 1e fb          	endbr32 
+80104144:	55                   	push   %ebp
+80104145:	89 e5                	mov    %esp,%ebp
+80104147:	53                   	push   %ebx
+80104148:	83 ec 10             	sub    $0x10,%esp
+8010414b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-80104b9e:	68 20 47 11 80       	push   $0x80114720
-80104ba3:	e8 08 04 00 00       	call   80104fb0 <acquire>
-80104ba8:	83 c4 10             	add    $0x10,%esp
+8010414e:	68 20 2d 11 80       	push   $0x80112d20
+80104153:	e8 08 04 00 00       	call   80104560 <acquire>
+80104158:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104bab:	b8 54 47 11 80       	mov    $0x80114754,%eax
-80104bb0:	eb 10                	jmp    80104bc2 <kill+0x32>
-80104bb2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104bb8:	83 c0 7c             	add    $0x7c,%eax
-80104bbb:	3d 54 66 11 80       	cmp    $0x80116654,%eax
-80104bc0:	74 36                	je     80104bf8 <kill+0x68>
+8010415b:	b8 54 2d 11 80       	mov    $0x80112d54,%eax
+80104160:	eb 10                	jmp    80104172 <kill+0x32>
+80104162:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104168:	83 c0 7c             	add    $0x7c,%eax
+8010416b:	3d 54 4c 11 80       	cmp    $0x80114c54,%eax
+80104170:	74 36                	je     801041a8 <kill+0x68>
     if(p->pid == pid){
-80104bc2:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104bc5:	75 f1                	jne    80104bb8 <kill+0x28>
+80104172:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104175:	75 f1                	jne    80104168 <kill+0x28>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-80104bc7:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104177:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-80104bcb:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+8010417b:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-80104bd2:	75 07                	jne    80104bdb <kill+0x4b>
+80104182:	75 07                	jne    8010418b <kill+0x4b>
         p->state = RUNNABLE;
-80104bd4:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104184:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-80104bdb:	83 ec 0c             	sub    $0xc,%esp
-80104bde:	68 20 47 11 80       	push   $0x80114720
-80104be3:	e8 88 04 00 00       	call   80105070 <release>
+8010418b:	83 ec 0c             	sub    $0xc,%esp
+8010418e:	68 20 2d 11 80       	push   $0x80112d20
+80104193:	e8 88 04 00 00       	call   80104620 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-80104be8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-80104beb:	83 c4 10             	add    $0x10,%esp
-80104bee:	31 c0                	xor    %eax,%eax
+8010419b:	83 c4 10             	add    $0x10,%esp
+8010419e:	31 c0                	xor    %eax,%eax
 }
-80104bf0:	c9                   	leave  
-80104bf1:	c3                   	ret    
-80104bf2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801041a0:	c9                   	leave  
+801041a1:	c3                   	ret    
+801041a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-80104bf8:	83 ec 0c             	sub    $0xc,%esp
-80104bfb:	68 20 47 11 80       	push   $0x80114720
-80104c00:	e8 6b 04 00 00       	call   80105070 <release>
+801041a8:	83 ec 0c             	sub    $0xc,%esp
+801041ab:	68 20 2d 11 80       	push   $0x80112d20
+801041b0:	e8 6b 04 00 00       	call   80104620 <release>
 }
-80104c05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-80104c08:	83 c4 10             	add    $0x10,%esp
-80104c0b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801041b8:	83 c4 10             	add    $0x10,%esp
+801041bb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80104c10:	c9                   	leave  
-80104c11:	c3                   	ret    
-80104c12:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041c0:	c9                   	leave  
+801041c1:	c3                   	ret    
+801041c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104c20 <procdump>:
+801041d0 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-80104c20:	f3 0f 1e fb          	endbr32 
-80104c24:	55                   	push   %ebp
-80104c25:	89 e5                	mov    %esp,%ebp
-80104c27:	57                   	push   %edi
-80104c28:	56                   	push   %esi
-80104c29:	8d 75 e8             	lea    -0x18(%ebp),%esi
-80104c2c:	53                   	push   %ebx
-80104c2d:	bb c0 47 11 80       	mov    $0x801147c0,%ebx
-80104c32:	83 ec 3c             	sub    $0x3c,%esp
-80104c35:	eb 28                	jmp    80104c5f <procdump+0x3f>
-80104c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c3e:	66 90                	xchg   %ax,%ax
+801041d0:	f3 0f 1e fb          	endbr32 
+801041d4:	55                   	push   %ebp
+801041d5:	89 e5                	mov    %esp,%ebp
+801041d7:	57                   	push   %edi
+801041d8:	56                   	push   %esi
+801041d9:	8d 75 e8             	lea    -0x18(%ebp),%esi
+801041dc:	53                   	push   %ebx
+801041dd:	bb c0 2d 11 80       	mov    $0x80112dc0,%ebx
+801041e2:	83 ec 3c             	sub    $0x3c,%esp
+801041e5:	eb 28                	jmp    8010420f <procdump+0x3f>
+801041e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041ee:	66 90                	xchg   %ax,%ax
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-80104c40:	83 ec 0c             	sub    $0xc,%esp
-80104c43:	68 1b 85 10 80       	push   $0x8010851b
-80104c48:	e8 a3 ba ff ff       	call   801006f0 <cprintf>
-80104c4d:	83 c4 10             	add    $0x10,%esp
+801041f0:	83 ec 0c             	sub    $0xc,%esp
+801041f3:	68 37 7a 10 80       	push   $0x80107a37
+801041f8:	e8 b3 c4 ff ff       	call   801006b0 <cprintf>
+801041fd:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104c50:	83 c3 7c             	add    $0x7c,%ebx
-80104c53:	81 fb c0 66 11 80    	cmp    $0x801166c0,%ebx
-80104c59:	0f 84 81 00 00 00    	je     80104ce0 <procdump+0xc0>
+80104200:	83 c3 7c             	add    $0x7c,%ebx
+80104203:	81 fb c0 4c 11 80    	cmp    $0x80114cc0,%ebx
+80104209:	0f 84 81 00 00 00    	je     80104290 <procdump+0xc0>
     if(p->state == UNUSED)
-80104c5f:	8b 43 a0             	mov    -0x60(%ebx),%eax
-80104c62:	85 c0                	test   %eax,%eax
-80104c64:	74 ea                	je     80104c50 <procdump+0x30>
+8010420f:	8b 43 a0             	mov    -0x60(%ebx),%eax
+80104212:	85 c0                	test   %eax,%eax
+80104214:	74 ea                	je     80104200 <procdump+0x30>
       state = "???";
-80104c66:	ba ab 81 10 80       	mov    $0x801081ab,%edx
+80104216:	ba cb 76 10 80       	mov    $0x801076cb,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104c6b:	83 f8 05             	cmp    $0x5,%eax
-80104c6e:	77 11                	ja     80104c81 <procdump+0x61>
-80104c70:	8b 14 85 0c 82 10 80 	mov    -0x7fef7df4(,%eax,4),%edx
+8010421b:	83 f8 05             	cmp    $0x5,%eax
+8010421e:	77 11                	ja     80104231 <procdump+0x61>
+80104220:	8b 14 85 2c 77 10 80 	mov    -0x7fef88d4(,%eax,4),%edx
       state = "???";
-80104c77:	b8 ab 81 10 80       	mov    $0x801081ab,%eax
-80104c7c:	85 d2                	test   %edx,%edx
-80104c7e:	0f 44 d0             	cmove  %eax,%edx
+80104227:	b8 cb 76 10 80       	mov    $0x801076cb,%eax
+8010422c:	85 d2                	test   %edx,%edx
+8010422e:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104c81:	53                   	push   %ebx
-80104c82:	52                   	push   %edx
-80104c83:	ff 73 a4             	pushl  -0x5c(%ebx)
-80104c86:	68 af 81 10 80       	push   $0x801081af
-80104c8b:	e8 60 ba ff ff       	call   801006f0 <cprintf>
+80104231:	53                   	push   %ebx
+80104232:	52                   	push   %edx
+80104233:	ff 73 a4             	pushl  -0x5c(%ebx)
+80104236:	68 cf 76 10 80       	push   $0x801076cf
+8010423b:	e8 70 c4 ff ff       	call   801006b0 <cprintf>
     if(p->state == SLEEPING){
-80104c90:	83 c4 10             	add    $0x10,%esp
-80104c93:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-80104c97:	75 a7                	jne    80104c40 <procdump+0x20>
+80104240:	83 c4 10             	add    $0x10,%esp
+80104243:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+80104247:	75 a7                	jne    801041f0 <procdump+0x20>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104c99:	83 ec 08             	sub    $0x8,%esp
-80104c9c:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104c9f:	8d 7d c0             	lea    -0x40(%ebp),%edi
-80104ca2:	50                   	push   %eax
-80104ca3:	8b 43 b0             	mov    -0x50(%ebx),%eax
-80104ca6:	8b 40 0c             	mov    0xc(%eax),%eax
-80104ca9:	83 c0 08             	add    $0x8,%eax
-80104cac:	50                   	push   %eax
-80104cad:	e8 9e 01 00 00       	call   80104e50 <getcallerpcs>
+80104249:	83 ec 08             	sub    $0x8,%esp
+8010424c:	8d 45 c0             	lea    -0x40(%ebp),%eax
+8010424f:	8d 7d c0             	lea    -0x40(%ebp),%edi
+80104252:	50                   	push   %eax
+80104253:	8b 43 b0             	mov    -0x50(%ebx),%eax
+80104256:	8b 40 0c             	mov    0xc(%eax),%eax
+80104259:	83 c0 08             	add    $0x8,%eax
+8010425c:	50                   	push   %eax
+8010425d:	e8 9e 01 00 00       	call   80104400 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104cb2:	83 c4 10             	add    $0x10,%esp
-80104cb5:	8d 76 00             	lea    0x0(%esi),%esi
-80104cb8:	8b 17                	mov    (%edi),%edx
-80104cba:	85 d2                	test   %edx,%edx
-80104cbc:	74 82                	je     80104c40 <procdump+0x20>
+80104262:	83 c4 10             	add    $0x10,%esp
+80104265:	8d 76 00             	lea    0x0(%esi),%esi
+80104268:	8b 17                	mov    (%edi),%edx
+8010426a:	85 d2                	test   %edx,%edx
+8010426c:	74 82                	je     801041f0 <procdump+0x20>
         cprintf(" %p", pc[i]);
-80104cbe:	83 ec 08             	sub    $0x8,%esp
-80104cc1:	83 c7 04             	add    $0x4,%edi
-80104cc4:	52                   	push   %edx
-80104cc5:	68 c1 7b 10 80       	push   $0x80107bc1
-80104cca:	e8 21 ba ff ff       	call   801006f0 <cprintf>
+8010426e:	83 ec 08             	sub    $0x8,%esp
+80104271:	83 c7 04             	add    $0x4,%edi
+80104274:	52                   	push   %edx
+80104275:	68 21 71 10 80       	push   $0x80107121
+8010427a:	e8 31 c4 ff ff       	call   801006b0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104ccf:	83 c4 10             	add    $0x10,%esp
-80104cd2:	39 fe                	cmp    %edi,%esi
-80104cd4:	75 e2                	jne    80104cb8 <procdump+0x98>
-80104cd6:	e9 65 ff ff ff       	jmp    80104c40 <procdump+0x20>
-80104cdb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104cdf:	90                   	nop
-  }
-}
-80104ce0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104ce3:	5b                   	pop    %ebx
-80104ce4:	5e                   	pop    %esi
-80104ce5:	5f                   	pop    %edi
-80104ce6:	5d                   	pop    %ebp
-80104ce7:	c3                   	ret    
-80104ce8:	66 90                	xchg   %ax,%ax
-80104cea:	66 90                	xchg   %ax,%ax
-80104cec:	66 90                	xchg   %ax,%ax
-80104cee:	66 90                	xchg   %ax,%ax
+8010427f:	83 c4 10             	add    $0x10,%esp
+80104282:	39 fe                	cmp    %edi,%esi
+80104284:	75 e2                	jne    80104268 <procdump+0x98>
+80104286:	e9 65 ff ff ff       	jmp    801041f0 <procdump+0x20>
+8010428b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010428f:	90                   	nop
+  }
+}
+80104290:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104293:	5b                   	pop    %ebx
+80104294:	5e                   	pop    %esi
+80104295:	5f                   	pop    %edi
+80104296:	5d                   	pop    %ebp
+80104297:	c3                   	ret    
+80104298:	66 90                	xchg   %ax,%ax
+8010429a:	66 90                	xchg   %ax,%ax
+8010429c:	66 90                	xchg   %ax,%ax
+8010429e:	66 90                	xchg   %ax,%ax
 
-80104cf0 <initsleeplock>:
+801042a0 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-80104cf0:	f3 0f 1e fb          	endbr32 
-80104cf4:	55                   	push   %ebp
-80104cf5:	89 e5                	mov    %esp,%ebp
-80104cf7:	53                   	push   %ebx
-80104cf8:	83 ec 0c             	sub    $0xc,%esp
-80104cfb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801042a0:	f3 0f 1e fb          	endbr32 
+801042a4:	55                   	push   %ebp
+801042a5:	89 e5                	mov    %esp,%ebp
+801042a7:	53                   	push   %ebx
+801042a8:	83 ec 0c             	sub    $0xc,%esp
+801042ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-80104cfe:	68 24 82 10 80       	push   $0x80108224
-80104d03:	8d 43 04             	lea    0x4(%ebx),%eax
-80104d06:	50                   	push   %eax
-80104d07:	e8 24 01 00 00       	call   80104e30 <initlock>
+801042ae:	68 44 77 10 80       	push   $0x80107744
+801042b3:	8d 43 04             	lea    0x4(%ebx),%eax
+801042b6:	50                   	push   %eax
+801042b7:	e8 24 01 00 00       	call   801043e0 <initlock>
   lk->name = name;
-80104d0c:	8b 45 0c             	mov    0xc(%ebp),%eax
+801042bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-80104d0f:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801042bf:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-80104d15:	83 c4 10             	add    $0x10,%esp
+801042c5:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-80104d18:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801042c8:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-80104d1f:	89 43 38             	mov    %eax,0x38(%ebx)
+801042cf:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-80104d22:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104d25:	c9                   	leave  
-80104d26:	c3                   	ret    
-80104d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104d2e:	66 90                	xchg   %ax,%ax
+801042d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042d5:	c9                   	leave  
+801042d6:	c3                   	ret    
+801042d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042de:	66 90                	xchg   %ax,%ax
 
-80104d30 <acquiresleep>:
+801042e0 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-80104d30:	f3 0f 1e fb          	endbr32 
-80104d34:	55                   	push   %ebp
-80104d35:	89 e5                	mov    %esp,%ebp
-80104d37:	56                   	push   %esi
-80104d38:	53                   	push   %ebx
-80104d39:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801042e0:	f3 0f 1e fb          	endbr32 
+801042e4:	55                   	push   %ebp
+801042e5:	89 e5                	mov    %esp,%ebp
+801042e7:	56                   	push   %esi
+801042e8:	53                   	push   %ebx
+801042e9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-80104d3c:	8d 73 04             	lea    0x4(%ebx),%esi
-80104d3f:	83 ec 0c             	sub    $0xc,%esp
-80104d42:	56                   	push   %esi
-80104d43:	e8 68 02 00 00       	call   80104fb0 <acquire>
+801042ec:	8d 73 04             	lea    0x4(%ebx),%esi
+801042ef:	83 ec 0c             	sub    $0xc,%esp
+801042f2:	56                   	push   %esi
+801042f3:	e8 68 02 00 00       	call   80104560 <acquire>
   while (lk->locked) {
-80104d48:	8b 13                	mov    (%ebx),%edx
-80104d4a:	83 c4 10             	add    $0x10,%esp
-80104d4d:	85 d2                	test   %edx,%edx
-80104d4f:	74 1a                	je     80104d6b <acquiresleep+0x3b>
-80104d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801042f8:	8b 13                	mov    (%ebx),%edx
+801042fa:	83 c4 10             	add    $0x10,%esp
+801042fd:	85 d2                	test   %edx,%edx
+801042ff:	74 1a                	je     8010431b <acquiresleep+0x3b>
+80104301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     sleep(lk, &lk->lk);
-80104d58:	83 ec 08             	sub    $0x8,%esp
-80104d5b:	56                   	push   %esi
-80104d5c:	53                   	push   %ebx
-80104d5d:	e8 0e fc ff ff       	call   80104970 <sleep>
+80104308:	83 ec 08             	sub    $0x8,%esp
+8010430b:	56                   	push   %esi
+8010430c:	53                   	push   %ebx
+8010430d:	e8 0e fc ff ff       	call   80103f20 <sleep>
   while (lk->locked) {
-80104d62:	8b 03                	mov    (%ebx),%eax
-80104d64:	83 c4 10             	add    $0x10,%esp
-80104d67:	85 c0                	test   %eax,%eax
-80104d69:	75 ed                	jne    80104d58 <acquiresleep+0x28>
+80104312:	8b 03                	mov    (%ebx),%eax
+80104314:	83 c4 10             	add    $0x10,%esp
+80104317:	85 c0                	test   %eax,%eax
+80104319:	75 ed                	jne    80104308 <acquiresleep+0x28>
   }
   lk->locked = 1;
-80104d6b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+8010431b:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104d71:	e8 3a f6 ff ff       	call   801043b0 <myproc>
-80104d76:	8b 40 10             	mov    0x10(%eax),%eax
-80104d79:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104321:	e8 3a f6 ff ff       	call   80103960 <myproc>
+80104326:	8b 40 10             	mov    0x10(%eax),%eax
+80104329:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104d7c:	89 75 08             	mov    %esi,0x8(%ebp)
+8010432c:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104d7f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d82:	5b                   	pop    %ebx
-80104d83:	5e                   	pop    %esi
-80104d84:	5d                   	pop    %ebp
+8010432f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104332:	5b                   	pop    %ebx
+80104333:	5e                   	pop    %esi
+80104334:	5d                   	pop    %ebp
   release(&lk->lk);
-80104d85:	e9 e6 02 00 00       	jmp    80105070 <release>
-80104d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104335:	e9 e6 02 00 00       	jmp    80104620 <release>
+8010433a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104d90 <releasesleep>:
+80104340 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104d90:	f3 0f 1e fb          	endbr32 
-80104d94:	55                   	push   %ebp
-80104d95:	89 e5                	mov    %esp,%ebp
-80104d97:	56                   	push   %esi
-80104d98:	53                   	push   %ebx
-80104d99:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104340:	f3 0f 1e fb          	endbr32 
+80104344:	55                   	push   %ebp
+80104345:	89 e5                	mov    %esp,%ebp
+80104347:	56                   	push   %esi
+80104348:	53                   	push   %ebx
+80104349:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-80104d9c:	8d 73 04             	lea    0x4(%ebx),%esi
-80104d9f:	83 ec 0c             	sub    $0xc,%esp
-80104da2:	56                   	push   %esi
-80104da3:	e8 08 02 00 00       	call   80104fb0 <acquire>
+8010434c:	8d 73 04             	lea    0x4(%ebx),%esi
+8010434f:	83 ec 0c             	sub    $0xc,%esp
+80104352:	56                   	push   %esi
+80104353:	e8 08 02 00 00       	call   80104560 <acquire>
   lk->locked = 0;
-80104da8:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80104358:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-80104dae:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+8010435e:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104db5:	89 1c 24             	mov    %ebx,(%esp)
-80104db8:	e8 73 fd ff ff       	call   80104b30 <wakeup>
+80104365:	89 1c 24             	mov    %ebx,(%esp)
+80104368:	e8 73 fd ff ff       	call   801040e0 <wakeup>
   release(&lk->lk);
-80104dbd:	89 75 08             	mov    %esi,0x8(%ebp)
-80104dc0:	83 c4 10             	add    $0x10,%esp
+8010436d:	89 75 08             	mov    %esi,0x8(%ebp)
+80104370:	83 c4 10             	add    $0x10,%esp
 }
-80104dc3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104dc6:	5b                   	pop    %ebx
-80104dc7:	5e                   	pop    %esi
-80104dc8:	5d                   	pop    %ebp
+80104373:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104376:	5b                   	pop    %ebx
+80104377:	5e                   	pop    %esi
+80104378:	5d                   	pop    %ebp
   release(&lk->lk);
-80104dc9:	e9 a2 02 00 00       	jmp    80105070 <release>
-80104dce:	66 90                	xchg   %ax,%ax
+80104379:	e9 a2 02 00 00       	jmp    80104620 <release>
+8010437e:	66 90                	xchg   %ax,%ax
 
-80104dd0 <holdingsleep>:
+80104380 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104dd0:	f3 0f 1e fb          	endbr32 
-80104dd4:	55                   	push   %ebp
-80104dd5:	89 e5                	mov    %esp,%ebp
-80104dd7:	57                   	push   %edi
-80104dd8:	31 ff                	xor    %edi,%edi
-80104dda:	56                   	push   %esi
-80104ddb:	53                   	push   %ebx
-80104ddc:	83 ec 18             	sub    $0x18,%esp
-80104ddf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104380:	f3 0f 1e fb          	endbr32 
+80104384:	55                   	push   %ebp
+80104385:	89 e5                	mov    %esp,%ebp
+80104387:	57                   	push   %edi
+80104388:	31 ff                	xor    %edi,%edi
+8010438a:	56                   	push   %esi
+8010438b:	53                   	push   %ebx
+8010438c:	83 ec 18             	sub    $0x18,%esp
+8010438f:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-80104de2:	8d 73 04             	lea    0x4(%ebx),%esi
-80104de5:	56                   	push   %esi
-80104de6:	e8 c5 01 00 00       	call   80104fb0 <acquire>
+80104392:	8d 73 04             	lea    0x4(%ebx),%esi
+80104395:	56                   	push   %esi
+80104396:	e8 c5 01 00 00       	call   80104560 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-80104deb:	8b 03                	mov    (%ebx),%eax
-80104ded:	83 c4 10             	add    $0x10,%esp
-80104df0:	85 c0                	test   %eax,%eax
-80104df2:	75 1c                	jne    80104e10 <holdingsleep+0x40>
+8010439b:	8b 03                	mov    (%ebx),%eax
+8010439d:	83 c4 10             	add    $0x10,%esp
+801043a0:	85 c0                	test   %eax,%eax
+801043a2:	75 1c                	jne    801043c0 <holdingsleep+0x40>
   release(&lk->lk);
-80104df4:	83 ec 0c             	sub    $0xc,%esp
-80104df7:	56                   	push   %esi
-80104df8:	e8 73 02 00 00       	call   80105070 <release>
+801043a4:	83 ec 0c             	sub    $0xc,%esp
+801043a7:	56                   	push   %esi
+801043a8:	e8 73 02 00 00       	call   80104620 <release>
   return r;
 }
-80104dfd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104e00:	89 f8                	mov    %edi,%eax
-80104e02:	5b                   	pop    %ebx
-80104e03:	5e                   	pop    %esi
-80104e04:	5f                   	pop    %edi
-80104e05:	5d                   	pop    %ebp
-80104e06:	c3                   	ret    
-80104e07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e0e:	66 90                	xchg   %ax,%ax
+801043ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801043b0:	89 f8                	mov    %edi,%eax
+801043b2:	5b                   	pop    %ebx
+801043b3:	5e                   	pop    %esi
+801043b4:	5f                   	pop    %edi
+801043b5:	5d                   	pop    %ebp
+801043b6:	c3                   	ret    
+801043b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801043be:	66 90                	xchg   %ax,%ax
   r = lk->locked && (lk->pid == myproc()->pid);
-80104e10:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-80104e13:	e8 98 f5 ff ff       	call   801043b0 <myproc>
-80104e18:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104e1b:	0f 94 c0             	sete   %al
-80104e1e:	0f b6 c0             	movzbl %al,%eax
-80104e21:	89 c7                	mov    %eax,%edi
-80104e23:	eb cf                	jmp    80104df4 <holdingsleep+0x24>
-80104e25:	66 90                	xchg   %ax,%ax
-80104e27:	66 90                	xchg   %ax,%ax
-80104e29:	66 90                	xchg   %ax,%ax
-80104e2b:	66 90                	xchg   %ax,%ax
-80104e2d:	66 90                	xchg   %ax,%ax
-80104e2f:	90                   	nop
+801043c0:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+801043c3:	e8 98 f5 ff ff       	call   80103960 <myproc>
+801043c8:	39 58 10             	cmp    %ebx,0x10(%eax)
+801043cb:	0f 94 c0             	sete   %al
+801043ce:	0f b6 c0             	movzbl %al,%eax
+801043d1:	89 c7                	mov    %eax,%edi
+801043d3:	eb cf                	jmp    801043a4 <holdingsleep+0x24>
+801043d5:	66 90                	xchg   %ax,%ax
+801043d7:	66 90                	xchg   %ax,%ax
+801043d9:	66 90                	xchg   %ax,%ax
+801043db:	66 90                	xchg   %ax,%ax
+801043dd:	66 90                	xchg   %ax,%ax
+801043df:	90                   	nop
 
-80104e30 <initlock>:
+801043e0 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-80104e30:	f3 0f 1e fb          	endbr32 
-80104e34:	55                   	push   %ebp
-80104e35:	89 e5                	mov    %esp,%ebp
-80104e37:	8b 45 08             	mov    0x8(%ebp),%eax
+801043e0:	f3 0f 1e fb          	endbr32 
+801043e4:	55                   	push   %ebp
+801043e5:	89 e5                	mov    %esp,%ebp
+801043e7:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-80104e3a:	8b 55 0c             	mov    0xc(%ebp),%edx
+801043ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-80104e3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801043ed:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-80104e43:	89 50 04             	mov    %edx,0x4(%eax)
+801043f3:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-80104e46:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+801043f6:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-80104e4d:	5d                   	pop    %ebp
-80104e4e:	c3                   	ret    
-80104e4f:	90                   	nop
+801043fd:	5d                   	pop    %ebp
+801043fe:	c3                   	ret    
+801043ff:	90                   	nop
 
-80104e50 <getcallerpcs>:
+80104400 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-80104e50:	f3 0f 1e fb          	endbr32 
-80104e54:	55                   	push   %ebp
+80104400:	f3 0f 1e fb          	endbr32 
+80104404:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-80104e55:	31 d2                	xor    %edx,%edx
+80104405:	31 d2                	xor    %edx,%edx
 {
-80104e57:	89 e5                	mov    %esp,%ebp
-80104e59:	53                   	push   %ebx
+80104407:	89 e5                	mov    %esp,%ebp
+80104409:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-80104e5a:	8b 45 08             	mov    0x8(%ebp),%eax
+8010440a:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-80104e5d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+8010440d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-80104e60:	83 e8 08             	sub    $0x8,%eax
+80104410:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-80104e63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104e67:	90                   	nop
+80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104417:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104e68:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-80104e6e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-80104e74:	77 1a                	ja     80104e90 <getcallerpcs+0x40>
+80104418:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+8010441e:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+80104424:	77 1a                	ja     80104440 <getcallerpcs+0x40>
       break;
     pcs[i] = ebp[1];     // saved %eip
-80104e76:	8b 58 04             	mov    0x4(%eax),%ebx
-80104e79:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+80104426:	8b 58 04             	mov    0x4(%eax),%ebx
+80104429:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-80104e7c:	83 c2 01             	add    $0x1,%edx
+8010442c:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-80104e7f:	8b 00                	mov    (%eax),%eax
+8010442f:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104e81:	83 fa 0a             	cmp    $0xa,%edx
-80104e84:	75 e2                	jne    80104e68 <getcallerpcs+0x18>
+80104431:	83 fa 0a             	cmp    $0xa,%edx
+80104434:	75 e2                	jne    80104418 <getcallerpcs+0x18>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-80104e86:	5b                   	pop    %ebx
-80104e87:	5d                   	pop    %ebp
-80104e88:	c3                   	ret    
-80104e89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104436:	5b                   	pop    %ebx
+80104437:	5d                   	pop    %ebp
+80104438:	c3                   	ret    
+80104439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104e90:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-80104e93:	8d 51 28             	lea    0x28(%ecx),%edx
-80104e96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104e9d:	8d 76 00             	lea    0x0(%esi),%esi
+80104440:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+80104443:	8d 51 28             	lea    0x28(%ecx),%edx
+80104446:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010444d:	8d 76 00             	lea    0x0(%esi),%esi
     pcs[i] = 0;
-80104ea0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104450:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104ea6:	83 c0 04             	add    $0x4,%eax
-80104ea9:	39 d0                	cmp    %edx,%eax
-80104eab:	75 f3                	jne    80104ea0 <getcallerpcs+0x50>
-}
-80104ead:	5b                   	pop    %ebx
-80104eae:	5d                   	pop    %ebp
-80104eaf:	c3                   	ret    
+80104456:	83 c0 04             	add    $0x4,%eax
+80104459:	39 d0                	cmp    %edx,%eax
+8010445b:	75 f3                	jne    80104450 <getcallerpcs+0x50>
+}
+8010445d:	5b                   	pop    %ebx
+8010445e:	5d                   	pop    %ebp
+8010445f:	c3                   	ret    
 
-80104eb0 <pushcli>:
+80104460 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104eb0:	f3 0f 1e fb          	endbr32 
-80104eb4:	55                   	push   %ebp
-80104eb5:	89 e5                	mov    %esp,%ebp
-80104eb7:	53                   	push   %ebx
-80104eb8:	83 ec 04             	sub    $0x4,%esp
-80104ebb:	9c                   	pushf  
-80104ebc:	5b                   	pop    %ebx
+80104460:	f3 0f 1e fb          	endbr32 
+80104464:	55                   	push   %ebp
+80104465:	89 e5                	mov    %esp,%ebp
+80104467:	53                   	push   %ebx
+80104468:	83 ec 04             	sub    $0x4,%esp
+8010446b:	9c                   	pushf  
+8010446c:	5b                   	pop    %ebx
   asm volatile("cli");
-80104ebd:	fa                   	cli    
+8010446d:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-80104ebe:	e8 5d f4 ff ff       	call   80104320 <mycpu>
-80104ec3:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104ec9:	85 c0                	test   %eax,%eax
-80104ecb:	74 13                	je     80104ee0 <pushcli+0x30>
+8010446e:	e8 5d f4 ff ff       	call   801038d0 <mycpu>
+80104473:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+80104479:	85 c0                	test   %eax,%eax
+8010447b:	74 13                	je     80104490 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-80104ecd:	e8 4e f4 ff ff       	call   80104320 <mycpu>
-80104ed2:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+8010447d:	e8 4e f4 ff ff       	call   801038d0 <mycpu>
+80104482:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104ed9:	83 c4 04             	add    $0x4,%esp
-80104edc:	5b                   	pop    %ebx
-80104edd:	5d                   	pop    %ebp
-80104ede:	c3                   	ret    
-80104edf:	90                   	nop
+80104489:	83 c4 04             	add    $0x4,%esp
+8010448c:	5b                   	pop    %ebx
+8010448d:	5d                   	pop    %ebp
+8010448e:	c3                   	ret    
+8010448f:	90                   	nop
     mycpu()->intena = eflags & FL_IF;
-80104ee0:	e8 3b f4 ff ff       	call   80104320 <mycpu>
-80104ee5:	81 e3 00 02 00 00    	and    $0x200,%ebx
-80104eeb:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-80104ef1:	eb da                	jmp    80104ecd <pushcli+0x1d>
-80104ef3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104efa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104490:	e8 3b f4 ff ff       	call   801038d0 <mycpu>
+80104495:	81 e3 00 02 00 00    	and    $0x200,%ebx
+8010449b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801044a1:	eb da                	jmp    8010447d <pushcli+0x1d>
+801044a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801044aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104f00 <popcli>:
+801044b0 <popcli>:
 
 void
 popcli(void)
 {
-80104f00:	f3 0f 1e fb          	endbr32 
-80104f04:	55                   	push   %ebp
-80104f05:	89 e5                	mov    %esp,%ebp
-80104f07:	83 ec 08             	sub    $0x8,%esp
+801044b0:	f3 0f 1e fb          	endbr32 
+801044b4:	55                   	push   %ebp
+801044b5:	89 e5                	mov    %esp,%ebp
+801044b7:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80104f0a:	9c                   	pushf  
-80104f0b:	58                   	pop    %eax
+801044ba:	9c                   	pushf  
+801044bb:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80104f0c:	f6 c4 02             	test   $0x2,%ah
-80104f0f:	75 31                	jne    80104f42 <popcli+0x42>
+801044bc:	f6 c4 02             	test   $0x2,%ah
+801044bf:	75 31                	jne    801044f2 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-80104f11:	e8 0a f4 ff ff       	call   80104320 <mycpu>
-80104f16:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-80104f1d:	78 30                	js     80104f4f <popcli+0x4f>
+801044c1:	e8 0a f4 ff ff       	call   801038d0 <mycpu>
+801044c6:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+801044cd:	78 30                	js     801044ff <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-80104f1f:	e8 fc f3 ff ff       	call   80104320 <mycpu>
-80104f24:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-80104f2a:	85 d2                	test   %edx,%edx
-80104f2c:	74 02                	je     80104f30 <popcli+0x30>
+801044cf:	e8 fc f3 ff ff       	call   801038d0 <mycpu>
+801044d4:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+801044da:	85 d2                	test   %edx,%edx
+801044dc:	74 02                	je     801044e0 <popcli+0x30>
     sti();
 }
-80104f2e:	c9                   	leave  
-80104f2f:	c3                   	ret    
+801044de:	c9                   	leave  
+801044df:	c3                   	ret    
   if(mycpu()->ncli == 0 && mycpu()->intena)
-80104f30:	e8 eb f3 ff ff       	call   80104320 <mycpu>
-80104f35:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-80104f3b:	85 c0                	test   %eax,%eax
-80104f3d:	74 ef                	je     80104f2e <popcli+0x2e>
+801044e0:	e8 eb f3 ff ff       	call   801038d0 <mycpu>
+801044e5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+801044eb:	85 c0                	test   %eax,%eax
+801044ed:	74 ef                	je     801044de <popcli+0x2e>
   asm volatile("sti");
-80104f3f:	fb                   	sti    
+801044ef:	fb                   	sti    
 }
-80104f40:	c9                   	leave  
-80104f41:	c3                   	ret    
+801044f0:	c9                   	leave  
+801044f1:	c3                   	ret    
     panic("popcli - interruptible");
-80104f42:	83 ec 0c             	sub    $0xc,%esp
-80104f45:	68 2f 82 10 80       	push   $0x8010822f
-80104f4a:	e8 41 b4 ff ff       	call   80100390 <panic>
+801044f2:	83 ec 0c             	sub    $0xc,%esp
+801044f5:	68 4f 77 10 80       	push   $0x8010774f
+801044fa:	e8 91 be ff ff       	call   80100390 <panic>
     panic("popcli");
-80104f4f:	83 ec 0c             	sub    $0xc,%esp
-80104f52:	68 46 82 10 80       	push   $0x80108246
-80104f57:	e8 34 b4 ff ff       	call   80100390 <panic>
-80104f5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104f60 <holding>:
-{
-80104f60:	f3 0f 1e fb          	endbr32 
-80104f64:	55                   	push   %ebp
-80104f65:	89 e5                	mov    %esp,%ebp
-80104f67:	56                   	push   %esi
-80104f68:	53                   	push   %ebx
-80104f69:	8b 75 08             	mov    0x8(%ebp),%esi
-80104f6c:	31 db                	xor    %ebx,%ebx
+801044ff:	83 ec 0c             	sub    $0xc,%esp
+80104502:	68 66 77 10 80       	push   $0x80107766
+80104507:	e8 84 be ff ff       	call   80100390 <panic>
+8010450c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104510 <holding>:
+{
+80104510:	f3 0f 1e fb          	endbr32 
+80104514:	55                   	push   %ebp
+80104515:	89 e5                	mov    %esp,%ebp
+80104517:	56                   	push   %esi
+80104518:	53                   	push   %ebx
+80104519:	8b 75 08             	mov    0x8(%ebp),%esi
+8010451c:	31 db                	xor    %ebx,%ebx
   pushcli();
-80104f6e:	e8 3d ff ff ff       	call   80104eb0 <pushcli>
+8010451e:	e8 3d ff ff ff       	call   80104460 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-80104f73:	8b 06                	mov    (%esi),%eax
-80104f75:	85 c0                	test   %eax,%eax
-80104f77:	75 0f                	jne    80104f88 <holding+0x28>
+80104523:	8b 06                	mov    (%esi),%eax
+80104525:	85 c0                	test   %eax,%eax
+80104527:	75 0f                	jne    80104538 <holding+0x28>
   popcli();
-80104f79:	e8 82 ff ff ff       	call   80104f00 <popcli>
+80104529:	e8 82 ff ff ff       	call   801044b0 <popcli>
 }
-80104f7e:	89 d8                	mov    %ebx,%eax
-80104f80:	5b                   	pop    %ebx
-80104f81:	5e                   	pop    %esi
-80104f82:	5d                   	pop    %ebp
-80104f83:	c3                   	ret    
-80104f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010452e:	89 d8                	mov    %ebx,%eax
+80104530:	5b                   	pop    %ebx
+80104531:	5e                   	pop    %esi
+80104532:	5d                   	pop    %ebp
+80104533:	c3                   	ret    
+80104534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104f88:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104f8b:	e8 90 f3 ff ff       	call   80104320 <mycpu>
-80104f90:	39 c3                	cmp    %eax,%ebx
-80104f92:	0f 94 c3             	sete   %bl
+80104538:	8b 5e 08             	mov    0x8(%esi),%ebx
+8010453b:	e8 90 f3 ff ff       	call   801038d0 <mycpu>
+80104540:	39 c3                	cmp    %eax,%ebx
+80104542:	0f 94 c3             	sete   %bl
   popcli();
-80104f95:	e8 66 ff ff ff       	call   80104f00 <popcli>
+80104545:	e8 66 ff ff ff       	call   801044b0 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-80104f9a:	0f b6 db             	movzbl %bl,%ebx
+8010454a:	0f b6 db             	movzbl %bl,%ebx
 }
-80104f9d:	89 d8                	mov    %ebx,%eax
-80104f9f:	5b                   	pop    %ebx
-80104fa0:	5e                   	pop    %esi
-80104fa1:	5d                   	pop    %ebp
-80104fa2:	c3                   	ret    
-80104fa3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104faa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104fb0 <acquire>:
-{
-80104fb0:	f3 0f 1e fb          	endbr32 
-80104fb4:	55                   	push   %ebp
-80104fb5:	89 e5                	mov    %esp,%ebp
-80104fb7:	56                   	push   %esi
-80104fb8:	53                   	push   %ebx
+8010454d:	89 d8                	mov    %ebx,%eax
+8010454f:	5b                   	pop    %ebx
+80104550:	5e                   	pop    %esi
+80104551:	5d                   	pop    %ebp
+80104552:	c3                   	ret    
+80104553:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104560 <acquire>:
+{
+80104560:	f3 0f 1e fb          	endbr32 
+80104564:	55                   	push   %ebp
+80104565:	89 e5                	mov    %esp,%ebp
+80104567:	56                   	push   %esi
+80104568:	53                   	push   %ebx
   pushcli(); // disable interrupts to avoid deadlock.
-80104fb9:	e8 f2 fe ff ff       	call   80104eb0 <pushcli>
+80104569:	e8 f2 fe ff ff       	call   80104460 <pushcli>
   if(holding(lk))
-80104fbe:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104fc1:	83 ec 0c             	sub    $0xc,%esp
-80104fc4:	53                   	push   %ebx
-80104fc5:	e8 96 ff ff ff       	call   80104f60 <holding>
-80104fca:	83 c4 10             	add    $0x10,%esp
-80104fcd:	85 c0                	test   %eax,%eax
-80104fcf:	0f 85 7f 00 00 00    	jne    80105054 <acquire+0xa4>
-80104fd5:	89 c6                	mov    %eax,%esi
+8010456e:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104571:	83 ec 0c             	sub    $0xc,%esp
+80104574:	53                   	push   %ebx
+80104575:	e8 96 ff ff ff       	call   80104510 <holding>
+8010457a:	83 c4 10             	add    $0x10,%esp
+8010457d:	85 c0                	test   %eax,%eax
+8010457f:	0f 85 7f 00 00 00    	jne    80104604 <acquire+0xa4>
+80104585:	89 c6                	mov    %eax,%esi
   asm volatile("lock; xchgl %0, %1" :
-80104fd7:	ba 01 00 00 00       	mov    $0x1,%edx
-80104fdc:	eb 05                	jmp    80104fe3 <acquire+0x33>
-80104fde:	66 90                	xchg   %ax,%ax
-80104fe0:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104fe3:	89 d0                	mov    %edx,%eax
-80104fe5:	f0 87 03             	lock xchg %eax,(%ebx)
+80104587:	ba 01 00 00 00       	mov    $0x1,%edx
+8010458c:	eb 05                	jmp    80104593 <acquire+0x33>
+8010458e:	66 90                	xchg   %ax,%ax
+80104590:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104593:	89 d0                	mov    %edx,%eax
+80104595:	f0 87 03             	lock xchg %eax,(%ebx)
   while(xchg(&lk->locked, 1) != 0)
-80104fe8:	85 c0                	test   %eax,%eax
-80104fea:	75 f4                	jne    80104fe0 <acquire+0x30>
+80104598:	85 c0                	test   %eax,%eax
+8010459a:	75 f4                	jne    80104590 <acquire+0x30>
   __sync_synchronize();
-80104fec:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+8010459c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-80104ff1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80104ff4:	e8 27 f3 ff ff       	call   80104320 <mycpu>
-80104ff9:	89 43 08             	mov    %eax,0x8(%ebx)
+801045a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801045a4:	e8 27 f3 ff ff       	call   801038d0 <mycpu>
+801045a9:	89 43 08             	mov    %eax,0x8(%ebx)
   ebp = (uint*)v - 2;
-80104ffc:	89 e8                	mov    %ebp,%eax
-80104ffe:	66 90                	xchg   %ax,%ax
+801045ac:	89 e8                	mov    %ebp,%eax
+801045ae:	66 90                	xchg   %ax,%ax
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80105000:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
-80105006:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
-8010500c:	77 22                	ja     80105030 <acquire+0x80>
+801045b0:	8d 90 00 00 00 80    	lea    -0x80000000(%eax),%edx
+801045b6:	81 fa fe ff ff 7f    	cmp    $0x7ffffffe,%edx
+801045bc:	77 22                	ja     801045e0 <acquire+0x80>
     pcs[i] = ebp[1];     // saved %eip
-8010500e:	8b 50 04             	mov    0x4(%eax),%edx
-80105011:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
+801045be:	8b 50 04             	mov    0x4(%eax),%edx
+801045c1:	89 54 b3 0c          	mov    %edx,0xc(%ebx,%esi,4)
   for(i = 0; i < 10; i++){
-80105015:	83 c6 01             	add    $0x1,%esi
+801045c5:	83 c6 01             	add    $0x1,%esi
     ebp = (uint*)ebp[0]; // saved %ebp
-80105018:	8b 00                	mov    (%eax),%eax
+801045c8:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-8010501a:	83 fe 0a             	cmp    $0xa,%esi
-8010501d:	75 e1                	jne    80105000 <acquire+0x50>
+801045ca:	83 fe 0a             	cmp    $0xa,%esi
+801045cd:	75 e1                	jne    801045b0 <acquire+0x50>
 }
-8010501f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105022:	5b                   	pop    %ebx
-80105023:	5e                   	pop    %esi
-80105024:	5d                   	pop    %ebp
-80105025:	c3                   	ret    
-80105026:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010502d:	8d 76 00             	lea    0x0(%esi),%esi
+801045cf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801045d2:	5b                   	pop    %ebx
+801045d3:	5e                   	pop    %esi
+801045d4:	5d                   	pop    %ebp
+801045d5:	c3                   	ret    
+801045d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045dd:	8d 76 00             	lea    0x0(%esi),%esi
   for(; i < 10; i++)
-80105030:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
-80105034:	83 c3 34             	add    $0x34,%ebx
-80105037:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010503e:	66 90                	xchg   %ax,%ax
+801045e0:	8d 44 b3 0c          	lea    0xc(%ebx,%esi,4),%eax
+801045e4:	83 c3 34             	add    $0x34,%ebx
+801045e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801045ee:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-80105040:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+801045f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80105046:	83 c0 04             	add    $0x4,%eax
-80105049:	39 d8                	cmp    %ebx,%eax
-8010504b:	75 f3                	jne    80105040 <acquire+0x90>
-}
-8010504d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105050:	5b                   	pop    %ebx
-80105051:	5e                   	pop    %esi
-80105052:	5d                   	pop    %ebp
-80105053:	c3                   	ret    
+801045f6:	83 c0 04             	add    $0x4,%eax
+801045f9:	39 d8                	cmp    %ebx,%eax
+801045fb:	75 f3                	jne    801045f0 <acquire+0x90>
+}
+801045fd:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104600:	5b                   	pop    %ebx
+80104601:	5e                   	pop    %esi
+80104602:	5d                   	pop    %ebp
+80104603:	c3                   	ret    
     panic("acquire");
-80105054:	83 ec 0c             	sub    $0xc,%esp
-80105057:	68 4d 82 10 80       	push   $0x8010824d
-8010505c:	e8 2f b3 ff ff       	call   80100390 <panic>
-80105061:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105068:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010506f:	90                   	nop
-
-80105070 <release>:
-{
-80105070:	f3 0f 1e fb          	endbr32 
-80105074:	55                   	push   %ebp
-80105075:	89 e5                	mov    %esp,%ebp
-80105077:	53                   	push   %ebx
-80105078:	83 ec 10             	sub    $0x10,%esp
-8010507b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104604:	83 ec 0c             	sub    $0xc,%esp
+80104607:	68 6d 77 10 80       	push   $0x8010776d
+8010460c:	e8 7f bd ff ff       	call   80100390 <panic>
+80104611:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104618:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010461f:	90                   	nop
+
+80104620 <release>:
+{
+80104620:	f3 0f 1e fb          	endbr32 
+80104624:	55                   	push   %ebp
+80104625:	89 e5                	mov    %esp,%ebp
+80104627:	53                   	push   %ebx
+80104628:	83 ec 10             	sub    $0x10,%esp
+8010462b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(!holding(lk))
-8010507e:	53                   	push   %ebx
-8010507f:	e8 dc fe ff ff       	call   80104f60 <holding>
-80105084:	83 c4 10             	add    $0x10,%esp
-80105087:	85 c0                	test   %eax,%eax
-80105089:	74 22                	je     801050ad <release+0x3d>
+8010462e:	53                   	push   %ebx
+8010462f:	e8 dc fe ff ff       	call   80104510 <holding>
+80104634:	83 c4 10             	add    $0x10,%esp
+80104637:	85 c0                	test   %eax,%eax
+80104639:	74 22                	je     8010465d <release+0x3d>
   lk->pcs[0] = 0;
-8010508b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+8010463b:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80105092:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80104642:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80105099:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104649:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010509e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010464e:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-801050a4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801050a7:	c9                   	leave  
+80104654:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104657:	c9                   	leave  
   popcli();
-801050a8:	e9 53 fe ff ff       	jmp    80104f00 <popcli>
+80104658:	e9 53 fe ff ff       	jmp    801044b0 <popcli>
     panic("release");
-801050ad:	83 ec 0c             	sub    $0xc,%esp
-801050b0:	68 55 82 10 80       	push   $0x80108255
-801050b5:	e8 d6 b2 ff ff       	call   80100390 <panic>
-801050ba:	66 90                	xchg   %ax,%ax
-801050bc:	66 90                	xchg   %ax,%ax
-801050be:	66 90                	xchg   %ax,%ax
+8010465d:	83 ec 0c             	sub    $0xc,%esp
+80104660:	68 75 77 10 80       	push   $0x80107775
+80104665:	e8 26 bd ff ff       	call   80100390 <panic>
+8010466a:	66 90                	xchg   %ax,%ax
+8010466c:	66 90                	xchg   %ax,%ax
+8010466e:	66 90                	xchg   %ax,%ax
 
-801050c0 <memset>:
+80104670 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-801050c0:	f3 0f 1e fb          	endbr32 
-801050c4:	55                   	push   %ebp
-801050c5:	89 e5                	mov    %esp,%ebp
-801050c7:	57                   	push   %edi
-801050c8:	8b 55 08             	mov    0x8(%ebp),%edx
-801050cb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-801050ce:	53                   	push   %ebx
-801050cf:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104670:	f3 0f 1e fb          	endbr32 
+80104674:	55                   	push   %ebp
+80104675:	89 e5                	mov    %esp,%ebp
+80104677:	57                   	push   %edi
+80104678:	8b 55 08             	mov    0x8(%ebp),%edx
+8010467b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010467e:	53                   	push   %ebx
+8010467f:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-801050d2:	89 d7                	mov    %edx,%edi
-801050d4:	09 cf                	or     %ecx,%edi
-801050d6:	83 e7 03             	and    $0x3,%edi
-801050d9:	75 25                	jne    80105100 <memset+0x40>
+80104682:	89 d7                	mov    %edx,%edi
+80104684:	09 cf                	or     %ecx,%edi
+80104686:	83 e7 03             	and    $0x3,%edi
+80104689:	75 25                	jne    801046b0 <memset+0x40>
     c &= 0xFF;
-801050db:	0f b6 f8             	movzbl %al,%edi
+8010468b:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-801050de:	c1 e0 18             	shl    $0x18,%eax
-801050e1:	89 fb                	mov    %edi,%ebx
-801050e3:	c1 e9 02             	shr    $0x2,%ecx
-801050e6:	c1 e3 10             	shl    $0x10,%ebx
-801050e9:	09 d8                	or     %ebx,%eax
-801050eb:	09 f8                	or     %edi,%eax
-801050ed:	c1 e7 08             	shl    $0x8,%edi
-801050f0:	09 f8                	or     %edi,%eax
+8010468e:	c1 e0 18             	shl    $0x18,%eax
+80104691:	89 fb                	mov    %edi,%ebx
+80104693:	c1 e9 02             	shr    $0x2,%ecx
+80104696:	c1 e3 10             	shl    $0x10,%ebx
+80104699:	09 d8                	or     %ebx,%eax
+8010469b:	09 f8                	or     %edi,%eax
+8010469d:	c1 e7 08             	shl    $0x8,%edi
+801046a0:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-801050f2:	89 d7                	mov    %edx,%edi
-801050f4:	fc                   	cld    
-801050f5:	f3 ab                	rep stos %eax,%es:(%edi)
+801046a2:	89 d7                	mov    %edx,%edi
+801046a4:	fc                   	cld    
+801046a5:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-801050f7:	5b                   	pop    %ebx
-801050f8:	89 d0                	mov    %edx,%eax
-801050fa:	5f                   	pop    %edi
-801050fb:	5d                   	pop    %ebp
-801050fc:	c3                   	ret    
-801050fd:	8d 76 00             	lea    0x0(%esi),%esi
+801046a7:	5b                   	pop    %ebx
+801046a8:	89 d0                	mov    %edx,%eax
+801046aa:	5f                   	pop    %edi
+801046ab:	5d                   	pop    %ebp
+801046ac:	c3                   	ret    
+801046ad:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("cld; rep stosb" :
-80105100:	89 d7                	mov    %edx,%edi
-80105102:	fc                   	cld    
-80105103:	f3 aa                	rep stos %al,%es:(%edi)
-80105105:	5b                   	pop    %ebx
-80105106:	89 d0                	mov    %edx,%eax
-80105108:	5f                   	pop    %edi
-80105109:	5d                   	pop    %ebp
-8010510a:	c3                   	ret    
-8010510b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010510f:	90                   	nop
+801046b0:	89 d7                	mov    %edx,%edi
+801046b2:	fc                   	cld    
+801046b3:	f3 aa                	rep stos %al,%es:(%edi)
+801046b5:	5b                   	pop    %ebx
+801046b6:	89 d0                	mov    %edx,%eax
+801046b8:	5f                   	pop    %edi
+801046b9:	5d                   	pop    %ebp
+801046ba:	c3                   	ret    
+801046bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801046bf:	90                   	nop
 
-80105110 <memcmp>:
+801046c0 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-80105110:	f3 0f 1e fb          	endbr32 
-80105114:	55                   	push   %ebp
-80105115:	89 e5                	mov    %esp,%ebp
-80105117:	56                   	push   %esi
-80105118:	8b 75 10             	mov    0x10(%ebp),%esi
-8010511b:	8b 55 08             	mov    0x8(%ebp),%edx
-8010511e:	53                   	push   %ebx
-8010511f:	8b 45 0c             	mov    0xc(%ebp),%eax
+801046c0:	f3 0f 1e fb          	endbr32 
+801046c4:	55                   	push   %ebp
+801046c5:	89 e5                	mov    %esp,%ebp
+801046c7:	56                   	push   %esi
+801046c8:	8b 75 10             	mov    0x10(%ebp),%esi
+801046cb:	8b 55 08             	mov    0x8(%ebp),%edx
+801046ce:	53                   	push   %ebx
+801046cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-80105122:	85 f6                	test   %esi,%esi
-80105124:	74 2a                	je     80105150 <memcmp+0x40>
-80105126:	01 c6                	add    %eax,%esi
-80105128:	eb 10                	jmp    8010513a <memcmp+0x2a>
-8010512a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046d2:	85 f6                	test   %esi,%esi
+801046d4:	74 2a                	je     80104700 <memcmp+0x40>
+801046d6:	01 c6                	add    %eax,%esi
+801046d8:	eb 10                	jmp    801046ea <memcmp+0x2a>
+801046da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-80105130:	83 c0 01             	add    $0x1,%eax
-80105133:	83 c2 01             	add    $0x1,%edx
+801046e0:	83 c0 01             	add    $0x1,%eax
+801046e3:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-80105136:	39 f0                	cmp    %esi,%eax
-80105138:	74 16                	je     80105150 <memcmp+0x40>
+801046e6:	39 f0                	cmp    %esi,%eax
+801046e8:	74 16                	je     80104700 <memcmp+0x40>
     if(*s1 != *s2)
-8010513a:	0f b6 0a             	movzbl (%edx),%ecx
-8010513d:	0f b6 18             	movzbl (%eax),%ebx
-80105140:	38 d9                	cmp    %bl,%cl
-80105142:	74 ec                	je     80105130 <memcmp+0x20>
+801046ea:	0f b6 0a             	movzbl (%edx),%ecx
+801046ed:	0f b6 18             	movzbl (%eax),%ebx
+801046f0:	38 d9                	cmp    %bl,%cl
+801046f2:	74 ec                	je     801046e0 <memcmp+0x20>
       return *s1 - *s2;
-80105144:	0f b6 c1             	movzbl %cl,%eax
-80105147:	29 d8                	sub    %ebx,%eax
+801046f4:	0f b6 c1             	movzbl %cl,%eax
+801046f7:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-80105149:	5b                   	pop    %ebx
-8010514a:	5e                   	pop    %esi
-8010514b:	5d                   	pop    %ebp
-8010514c:	c3                   	ret    
-8010514d:	8d 76 00             	lea    0x0(%esi),%esi
-80105150:	5b                   	pop    %ebx
+801046f9:	5b                   	pop    %ebx
+801046fa:	5e                   	pop    %esi
+801046fb:	5d                   	pop    %ebp
+801046fc:	c3                   	ret    
+801046fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104700:	5b                   	pop    %ebx
   return 0;
-80105151:	31 c0                	xor    %eax,%eax
+80104701:	31 c0                	xor    %eax,%eax
 }
-80105153:	5e                   	pop    %esi
-80105154:	5d                   	pop    %ebp
-80105155:	c3                   	ret    
-80105156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010515d:	8d 76 00             	lea    0x0(%esi),%esi
+80104703:	5e                   	pop    %esi
+80104704:	5d                   	pop    %ebp
+80104705:	c3                   	ret    
+80104706:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010470d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105160 <memmove>:
+80104710 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80105160:	f3 0f 1e fb          	endbr32 
-80105164:	55                   	push   %ebp
-80105165:	89 e5                	mov    %esp,%ebp
-80105167:	57                   	push   %edi
-80105168:	8b 55 08             	mov    0x8(%ebp),%edx
-8010516b:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010516e:	56                   	push   %esi
-8010516f:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104710:	f3 0f 1e fb          	endbr32 
+80104714:	55                   	push   %ebp
+80104715:	89 e5                	mov    %esp,%ebp
+80104717:	57                   	push   %edi
+80104718:	8b 55 08             	mov    0x8(%ebp),%edx
+8010471b:	8b 4d 10             	mov    0x10(%ebp),%ecx
+8010471e:	56                   	push   %esi
+8010471f:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-80105172:	39 d6                	cmp    %edx,%esi
-80105174:	73 2a                	jae    801051a0 <memmove+0x40>
-80105176:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80105179:	39 fa                	cmp    %edi,%edx
-8010517b:	73 23                	jae    801051a0 <memmove+0x40>
-8010517d:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104722:	39 d6                	cmp    %edx,%esi
+80104724:	73 2a                	jae    80104750 <memmove+0x40>
+80104726:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104729:	39 fa                	cmp    %edi,%edx
+8010472b:	73 23                	jae    80104750 <memmove+0x40>
+8010472d:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-80105180:	85 c9                	test   %ecx,%ecx
-80105182:	74 13                	je     80105197 <memmove+0x37>
-80105184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104730:	85 c9                	test   %ecx,%ecx
+80104732:	74 13                	je     80104747 <memmove+0x37>
+80104734:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       *--d = *--s;
-80105188:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-8010518c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104738:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+8010473c:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-8010518f:	83 e8 01             	sub    $0x1,%eax
-80105192:	83 f8 ff             	cmp    $0xffffffff,%eax
-80105195:	75 f1                	jne    80105188 <memmove+0x28>
+8010473f:	83 e8 01             	sub    $0x1,%eax
+80104742:	83 f8 ff             	cmp    $0xffffffff,%eax
+80104745:	75 f1                	jne    80104738 <memmove+0x28>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-80105197:	5e                   	pop    %esi
-80105198:	89 d0                	mov    %edx,%eax
-8010519a:	5f                   	pop    %edi
-8010519b:	5d                   	pop    %ebp
-8010519c:	c3                   	ret    
-8010519d:	8d 76 00             	lea    0x0(%esi),%esi
+80104747:	5e                   	pop    %esi
+80104748:	89 d0                	mov    %edx,%eax
+8010474a:	5f                   	pop    %edi
+8010474b:	5d                   	pop    %ebp
+8010474c:	c3                   	ret    
+8010474d:	8d 76 00             	lea    0x0(%esi),%esi
     while(n-- > 0)
-801051a0:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-801051a3:	89 d7                	mov    %edx,%edi
-801051a5:	85 c9                	test   %ecx,%ecx
-801051a7:	74 ee                	je     80105197 <memmove+0x37>
-801051a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104750:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104753:	89 d7                	mov    %edx,%edi
+80104755:	85 c9                	test   %ecx,%ecx
+80104757:	74 ee                	je     80104747 <memmove+0x37>
+80104759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-801051b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104760:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-801051b1:	39 f0                	cmp    %esi,%eax
-801051b3:	75 fb                	jne    801051b0 <memmove+0x50>
+80104761:	39 f0                	cmp    %esi,%eax
+80104763:	75 fb                	jne    80104760 <memmove+0x50>
 }
-801051b5:	5e                   	pop    %esi
-801051b6:	89 d0                	mov    %edx,%eax
-801051b8:	5f                   	pop    %edi
-801051b9:	5d                   	pop    %ebp
-801051ba:	c3                   	ret    
-801051bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801051bf:	90                   	nop
+80104765:	5e                   	pop    %esi
+80104766:	89 d0                	mov    %edx,%eax
+80104768:	5f                   	pop    %edi
+80104769:	5d                   	pop    %ebp
+8010476a:	c3                   	ret    
+8010476b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010476f:	90                   	nop
 
-801051c0 <memcpy>:
+80104770 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
-801051c0:	f3 0f 1e fb          	endbr32 
+80104770:	f3 0f 1e fb          	endbr32 
   return memmove(dst, src, n);
-801051c4:	eb 9a                	jmp    80105160 <memmove>
-801051c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801051cd:	8d 76 00             	lea    0x0(%esi),%esi
+80104774:	eb 9a                	jmp    80104710 <memmove>
+80104776:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010477d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801051d0 <strncmp>:
+80104780 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-801051d0:	f3 0f 1e fb          	endbr32 
-801051d4:	55                   	push   %ebp
-801051d5:	89 e5                	mov    %esp,%ebp
-801051d7:	56                   	push   %esi
-801051d8:	8b 75 10             	mov    0x10(%ebp),%esi
-801051db:	8b 4d 08             	mov    0x8(%ebp),%ecx
-801051de:	53                   	push   %ebx
-801051df:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104780:	f3 0f 1e fb          	endbr32 
+80104784:	55                   	push   %ebp
+80104785:	89 e5                	mov    %esp,%ebp
+80104787:	56                   	push   %esi
+80104788:	8b 75 10             	mov    0x10(%ebp),%esi
+8010478b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+8010478e:	53                   	push   %ebx
+8010478f:	8b 45 0c             	mov    0xc(%ebp),%eax
   while(n > 0 && *p && *p == *q)
-801051e2:	85 f6                	test   %esi,%esi
-801051e4:	74 32                	je     80105218 <strncmp+0x48>
-801051e6:	01 c6                	add    %eax,%esi
-801051e8:	eb 14                	jmp    801051fe <strncmp+0x2e>
-801051ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801051f0:	38 da                	cmp    %bl,%dl
-801051f2:	75 14                	jne    80105208 <strncmp+0x38>
+80104792:	85 f6                	test   %esi,%esi
+80104794:	74 32                	je     801047c8 <strncmp+0x48>
+80104796:	01 c6                	add    %eax,%esi
+80104798:	eb 14                	jmp    801047ae <strncmp+0x2e>
+8010479a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801047a0:	38 da                	cmp    %bl,%dl
+801047a2:	75 14                	jne    801047b8 <strncmp+0x38>
     n--, p++, q++;
-801051f4:	83 c0 01             	add    $0x1,%eax
-801051f7:	83 c1 01             	add    $0x1,%ecx
+801047a4:	83 c0 01             	add    $0x1,%eax
+801047a7:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-801051fa:	39 f0                	cmp    %esi,%eax
-801051fc:	74 1a                	je     80105218 <strncmp+0x48>
-801051fe:	0f b6 11             	movzbl (%ecx),%edx
-80105201:	0f b6 18             	movzbl (%eax),%ebx
-80105204:	84 d2                	test   %dl,%dl
-80105206:	75 e8                	jne    801051f0 <strncmp+0x20>
+801047aa:	39 f0                	cmp    %esi,%eax
+801047ac:	74 1a                	je     801047c8 <strncmp+0x48>
+801047ae:	0f b6 11             	movzbl (%ecx),%edx
+801047b1:	0f b6 18             	movzbl (%eax),%ebx
+801047b4:	84 d2                	test   %dl,%dl
+801047b6:	75 e8                	jne    801047a0 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-80105208:	0f b6 c2             	movzbl %dl,%eax
-8010520b:	29 d8                	sub    %ebx,%eax
+801047b8:	0f b6 c2             	movzbl %dl,%eax
+801047bb:	29 d8                	sub    %ebx,%eax
 }
-8010520d:	5b                   	pop    %ebx
-8010520e:	5e                   	pop    %esi
-8010520f:	5d                   	pop    %ebp
-80105210:	c3                   	ret    
-80105211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105218:	5b                   	pop    %ebx
+801047bd:	5b                   	pop    %ebx
+801047be:	5e                   	pop    %esi
+801047bf:	5d                   	pop    %ebp
+801047c0:	c3                   	ret    
+801047c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047c8:	5b                   	pop    %ebx
     return 0;
-80105219:	31 c0                	xor    %eax,%eax
+801047c9:	31 c0                	xor    %eax,%eax
 }
-8010521b:	5e                   	pop    %esi
-8010521c:	5d                   	pop    %ebp
-8010521d:	c3                   	ret    
-8010521e:	66 90                	xchg   %ax,%ax
+801047cb:	5e                   	pop    %esi
+801047cc:	5d                   	pop    %ebp
+801047cd:	c3                   	ret    
+801047ce:	66 90                	xchg   %ax,%ax
 
-80105220 <strncpy>:
+801047d0 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-80105220:	f3 0f 1e fb          	endbr32 
-80105224:	55                   	push   %ebp
-80105225:	89 e5                	mov    %esp,%ebp
-80105227:	57                   	push   %edi
-80105228:	56                   	push   %esi
-80105229:	8b 75 08             	mov    0x8(%ebp),%esi
-8010522c:	53                   	push   %ebx
-8010522d:	8b 45 10             	mov    0x10(%ebp),%eax
+801047d0:	f3 0f 1e fb          	endbr32 
+801047d4:	55                   	push   %ebp
+801047d5:	89 e5                	mov    %esp,%ebp
+801047d7:	57                   	push   %edi
+801047d8:	56                   	push   %esi
+801047d9:	8b 75 08             	mov    0x8(%ebp),%esi
+801047dc:	53                   	push   %ebx
+801047dd:	8b 45 10             	mov    0x10(%ebp),%eax
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-80105230:	89 f2                	mov    %esi,%edx
-80105232:	eb 1b                	jmp    8010524f <strncpy+0x2f>
-80105234:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105238:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-8010523c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-8010523f:	83 c2 01             	add    $0x1,%edx
-80105242:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
-80105246:	89 f9                	mov    %edi,%ecx
-80105248:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010524b:	84 c9                	test   %cl,%cl
-8010524d:	74 09                	je     80105258 <strncpy+0x38>
-8010524f:	89 c3                	mov    %eax,%ebx
-80105251:	83 e8 01             	sub    $0x1,%eax
-80105254:	85 db                	test   %ebx,%ebx
-80105256:	7f e0                	jg     80105238 <strncpy+0x18>
+801047e0:	89 f2                	mov    %esi,%edx
+801047e2:	eb 1b                	jmp    801047ff <strncpy+0x2f>
+801047e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801047e8:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+801047ec:	8b 7d 0c             	mov    0xc(%ebp),%edi
+801047ef:	83 c2 01             	add    $0x1,%edx
+801047f2:	0f b6 7f ff          	movzbl -0x1(%edi),%edi
+801047f6:	89 f9                	mov    %edi,%ecx
+801047f8:	88 4a ff             	mov    %cl,-0x1(%edx)
+801047fb:	84 c9                	test   %cl,%cl
+801047fd:	74 09                	je     80104808 <strncpy+0x38>
+801047ff:	89 c3                	mov    %eax,%ebx
+80104801:	83 e8 01             	sub    $0x1,%eax
+80104804:	85 db                	test   %ebx,%ebx
+80104806:	7f e0                	jg     801047e8 <strncpy+0x18>
     ;
   while(n-- > 0)
-80105258:	89 d1                	mov    %edx,%ecx
-8010525a:	85 c0                	test   %eax,%eax
-8010525c:	7e 15                	jle    80105273 <strncpy+0x53>
-8010525e:	66 90                	xchg   %ax,%ax
+80104808:	89 d1                	mov    %edx,%ecx
+8010480a:	85 c0                	test   %eax,%eax
+8010480c:	7e 15                	jle    80104823 <strncpy+0x53>
+8010480e:	66 90                	xchg   %ax,%ax
     *s++ = 0;
-80105260:	83 c1 01             	add    $0x1,%ecx
-80105263:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
+80104810:	83 c1 01             	add    $0x1,%ecx
+80104813:	c6 41 ff 00          	movb   $0x0,-0x1(%ecx)
   while(n-- > 0)
-80105267:	89 c8                	mov    %ecx,%eax
-80105269:	f7 d0                	not    %eax
-8010526b:	01 d0                	add    %edx,%eax
-8010526d:	01 d8                	add    %ebx,%eax
-8010526f:	85 c0                	test   %eax,%eax
-80105271:	7f ed                	jg     80105260 <strncpy+0x40>
+80104817:	89 c8                	mov    %ecx,%eax
+80104819:	f7 d0                	not    %eax
+8010481b:	01 d0                	add    %edx,%eax
+8010481d:	01 d8                	add    %ebx,%eax
+8010481f:	85 c0                	test   %eax,%eax
+80104821:	7f ed                	jg     80104810 <strncpy+0x40>
   return os;
 }
-80105273:	5b                   	pop    %ebx
-80105274:	89 f0                	mov    %esi,%eax
-80105276:	5e                   	pop    %esi
-80105277:	5f                   	pop    %edi
-80105278:	5d                   	pop    %ebp
-80105279:	c3                   	ret    
-8010527a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104823:	5b                   	pop    %ebx
+80104824:	89 f0                	mov    %esi,%eax
+80104826:	5e                   	pop    %esi
+80104827:	5f                   	pop    %edi
+80104828:	5d                   	pop    %ebp
+80104829:	c3                   	ret    
+8010482a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80105280 <safestrcpy>:
+80104830 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80105280:	f3 0f 1e fb          	endbr32 
-80105284:	55                   	push   %ebp
-80105285:	89 e5                	mov    %esp,%ebp
-80105287:	56                   	push   %esi
-80105288:	8b 55 10             	mov    0x10(%ebp),%edx
-8010528b:	8b 75 08             	mov    0x8(%ebp),%esi
-8010528e:	53                   	push   %ebx
-8010528f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104830:	f3 0f 1e fb          	endbr32 
+80104834:	55                   	push   %ebp
+80104835:	89 e5                	mov    %esp,%ebp
+80104837:	56                   	push   %esi
+80104838:	8b 55 10             	mov    0x10(%ebp),%edx
+8010483b:	8b 75 08             	mov    0x8(%ebp),%esi
+8010483e:	53                   	push   %ebx
+8010483f:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-80105292:	85 d2                	test   %edx,%edx
-80105294:	7e 21                	jle    801052b7 <safestrcpy+0x37>
-80105296:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-8010529a:	89 f2                	mov    %esi,%edx
-8010529c:	eb 12                	jmp    801052b0 <safestrcpy+0x30>
-8010529e:	66 90                	xchg   %ax,%ax
+80104842:	85 d2                	test   %edx,%edx
+80104844:	7e 21                	jle    80104867 <safestrcpy+0x37>
+80104846:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+8010484a:	89 f2                	mov    %esi,%edx
+8010484c:	eb 12                	jmp    80104860 <safestrcpy+0x30>
+8010484e:	66 90                	xchg   %ax,%ax
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-801052a0:	0f b6 08             	movzbl (%eax),%ecx
-801052a3:	83 c0 01             	add    $0x1,%eax
-801052a6:	83 c2 01             	add    $0x1,%edx
-801052a9:	88 4a ff             	mov    %cl,-0x1(%edx)
-801052ac:	84 c9                	test   %cl,%cl
-801052ae:	74 04                	je     801052b4 <safestrcpy+0x34>
-801052b0:	39 d8                	cmp    %ebx,%eax
-801052b2:	75 ec                	jne    801052a0 <safestrcpy+0x20>
+80104850:	0f b6 08             	movzbl (%eax),%ecx
+80104853:	83 c0 01             	add    $0x1,%eax
+80104856:	83 c2 01             	add    $0x1,%edx
+80104859:	88 4a ff             	mov    %cl,-0x1(%edx)
+8010485c:	84 c9                	test   %cl,%cl
+8010485e:	74 04                	je     80104864 <safestrcpy+0x34>
+80104860:	39 d8                	cmp    %ebx,%eax
+80104862:	75 ec                	jne    80104850 <safestrcpy+0x20>
     ;
   *s = 0;
-801052b4:	c6 02 00             	movb   $0x0,(%edx)
+80104864:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-801052b7:	89 f0                	mov    %esi,%eax
-801052b9:	5b                   	pop    %ebx
-801052ba:	5e                   	pop    %esi
-801052bb:	5d                   	pop    %ebp
-801052bc:	c3                   	ret    
-801052bd:	8d 76 00             	lea    0x0(%esi),%esi
+80104867:	89 f0                	mov    %esi,%eax
+80104869:	5b                   	pop    %ebx
+8010486a:	5e                   	pop    %esi
+8010486b:	5d                   	pop    %ebp
+8010486c:	c3                   	ret    
+8010486d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801052c0 <strlen>:
+80104870 <strlen>:
 
 int
 strlen(const char *s)
 {
-801052c0:	f3 0f 1e fb          	endbr32 
-801052c4:	55                   	push   %ebp
+80104870:	f3 0f 1e fb          	endbr32 
+80104874:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-801052c5:	31 c0                	xor    %eax,%eax
+80104875:	31 c0                	xor    %eax,%eax
 {
-801052c7:	89 e5                	mov    %esp,%ebp
-801052c9:	8b 55 08             	mov    0x8(%ebp),%edx
+80104877:	89 e5                	mov    %esp,%ebp
+80104879:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-801052cc:	80 3a 00             	cmpb   $0x0,(%edx)
-801052cf:	74 10                	je     801052e1 <strlen+0x21>
-801052d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801052d8:	83 c0 01             	add    $0x1,%eax
-801052db:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-801052df:	75 f7                	jne    801052d8 <strlen+0x18>
+8010487c:	80 3a 00             	cmpb   $0x0,(%edx)
+8010487f:	74 10                	je     80104891 <strlen+0x21>
+80104881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104888:	83 c0 01             	add    $0x1,%eax
+8010488b:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+8010488f:	75 f7                	jne    80104888 <strlen+0x18>
     ;
   return n;
 }
-801052e1:	5d                   	pop    %ebp
-801052e2:	c3                   	ret    
+80104891:	5d                   	pop    %ebp
+80104892:	c3                   	ret    
 
-801052e3 <swtch>:
+80104893 <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-801052e3:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104893:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-801052e7:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104897:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-801052eb:	55                   	push   %ebp
+8010489b:	55                   	push   %ebp
   pushl %ebx
-801052ec:	53                   	push   %ebx
+8010489c:	53                   	push   %ebx
   pushl %esi
-801052ed:	56                   	push   %esi
+8010489d:	56                   	push   %esi
   pushl %edi
-801052ee:	57                   	push   %edi
+8010489e:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-801052ef:	89 20                	mov    %esp,(%eax)
+8010489f:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-801052f1:	89 d4                	mov    %edx,%esp
+801048a1:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-801052f3:	5f                   	pop    %edi
+801048a3:	5f                   	pop    %edi
   popl %esi
-801052f4:	5e                   	pop    %esi
+801048a4:	5e                   	pop    %esi
   popl %ebx
-801052f5:	5b                   	pop    %ebx
+801048a5:	5b                   	pop    %ebx
   popl %ebp
-801052f6:	5d                   	pop    %ebp
+801048a6:	5d                   	pop    %ebp
   ret
-801052f7:	c3                   	ret    
-801052f8:	66 90                	xchg   %ax,%ax
-801052fa:	66 90                	xchg   %ax,%ax
-801052fc:	66 90                	xchg   %ax,%ax
-801052fe:	66 90                	xchg   %ax,%ax
+801048a7:	c3                   	ret    
+801048a8:	66 90                	xchg   %ax,%ax
+801048aa:	66 90                	xchg   %ax,%ax
+801048ac:	66 90                	xchg   %ax,%ax
+801048ae:	66 90                	xchg   %ax,%ax
 
-80105300 <fetchint>:
+801048b0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-80105300:	f3 0f 1e fb          	endbr32 
-80105304:	55                   	push   %ebp
-80105305:	89 e5                	mov    %esp,%ebp
-80105307:	53                   	push   %ebx
-80105308:	83 ec 04             	sub    $0x4,%esp
-8010530b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048b0:	f3 0f 1e fb          	endbr32 
+801048b4:	55                   	push   %ebp
+801048b5:	89 e5                	mov    %esp,%ebp
+801048b7:	53                   	push   %ebx
+801048b8:	83 ec 04             	sub    $0x4,%esp
+801048bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-8010530e:	e8 9d f0 ff ff       	call   801043b0 <myproc>
+801048be:	e8 9d f0 ff ff       	call   80103960 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80105313:	8b 00                	mov    (%eax),%eax
-80105315:	39 d8                	cmp    %ebx,%eax
-80105317:	76 17                	jbe    80105330 <fetchint+0x30>
-80105319:	8d 53 04             	lea    0x4(%ebx),%edx
-8010531c:	39 d0                	cmp    %edx,%eax
-8010531e:	72 10                	jb     80105330 <fetchint+0x30>
+801048c3:	8b 00                	mov    (%eax),%eax
+801048c5:	39 d8                	cmp    %ebx,%eax
+801048c7:	76 17                	jbe    801048e0 <fetchint+0x30>
+801048c9:	8d 53 04             	lea    0x4(%ebx),%edx
+801048cc:	39 d0                	cmp    %edx,%eax
+801048ce:	72 10                	jb     801048e0 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-80105320:	8b 45 0c             	mov    0xc(%ebp),%eax
-80105323:	8b 13                	mov    (%ebx),%edx
-80105325:	89 10                	mov    %edx,(%eax)
+801048d0:	8b 45 0c             	mov    0xc(%ebp),%eax
+801048d3:	8b 13                	mov    (%ebx),%edx
+801048d5:	89 10                	mov    %edx,(%eax)
   return 0;
-80105327:	31 c0                	xor    %eax,%eax
+801048d7:	31 c0                	xor    %eax,%eax
 }
-80105329:	83 c4 04             	add    $0x4,%esp
-8010532c:	5b                   	pop    %ebx
-8010532d:	5d                   	pop    %ebp
-8010532e:	c3                   	ret    
-8010532f:	90                   	nop
-    return -1;
-80105330:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105335:	eb f2                	jmp    80105329 <fetchint+0x29>
-80105337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010533e:	66 90                	xchg   %ax,%ax
+801048d9:	83 c4 04             	add    $0x4,%esp
+801048dc:	5b                   	pop    %ebx
+801048dd:	5d                   	pop    %ebp
+801048de:	c3                   	ret    
+801048df:	90                   	nop
+    return -1;
+801048e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801048e5:	eb f2                	jmp    801048d9 <fetchint+0x29>
+801048e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801048ee:	66 90                	xchg   %ax,%ax
 
-80105340 <fetchstr>:
+801048f0 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-80105340:	f3 0f 1e fb          	endbr32 
-80105344:	55                   	push   %ebp
-80105345:	89 e5                	mov    %esp,%ebp
-80105347:	53                   	push   %ebx
-80105348:	83 ec 04             	sub    $0x4,%esp
-8010534b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048f0:	f3 0f 1e fb          	endbr32 
+801048f4:	55                   	push   %ebp
+801048f5:	89 e5                	mov    %esp,%ebp
+801048f7:	53                   	push   %ebx
+801048f8:	83 ec 04             	sub    $0x4,%esp
+801048fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-8010534e:	e8 5d f0 ff ff       	call   801043b0 <myproc>
+801048fe:	e8 5d f0 ff ff       	call   80103960 <myproc>
 
   if(addr >= curproc->sz)
-80105353:	39 18                	cmp    %ebx,(%eax)
-80105355:	76 31                	jbe    80105388 <fetchstr+0x48>
+80104903:	39 18                	cmp    %ebx,(%eax)
+80104905:	76 31                	jbe    80104938 <fetchstr+0x48>
     return -1;
   *pp = (char*)addr;
-80105357:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010535a:	89 1a                	mov    %ebx,(%edx)
+80104907:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010490a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-8010535c:	8b 10                	mov    (%eax),%edx
+8010490c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-8010535e:	39 d3                	cmp    %edx,%ebx
-80105360:	73 26                	jae    80105388 <fetchstr+0x48>
-80105362:	89 d8                	mov    %ebx,%eax
-80105364:	eb 11                	jmp    80105377 <fetchstr+0x37>
-80105366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010536d:	8d 76 00             	lea    0x0(%esi),%esi
-80105370:	83 c0 01             	add    $0x1,%eax
-80105373:	39 c2                	cmp    %eax,%edx
-80105375:	76 11                	jbe    80105388 <fetchstr+0x48>
+8010490e:	39 d3                	cmp    %edx,%ebx
+80104910:	73 26                	jae    80104938 <fetchstr+0x48>
+80104912:	89 d8                	mov    %ebx,%eax
+80104914:	eb 11                	jmp    80104927 <fetchstr+0x37>
+80104916:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010491d:	8d 76 00             	lea    0x0(%esi),%esi
+80104920:	83 c0 01             	add    $0x1,%eax
+80104923:	39 c2                	cmp    %eax,%edx
+80104925:	76 11                	jbe    80104938 <fetchstr+0x48>
     if(*s == 0)
-80105377:	80 38 00             	cmpb   $0x0,(%eax)
-8010537a:	75 f4                	jne    80105370 <fetchstr+0x30>
+80104927:	80 38 00             	cmpb   $0x0,(%eax)
+8010492a:	75 f4                	jne    80104920 <fetchstr+0x30>
       return s - *pp;
   }
   return -1;
 }
-8010537c:	83 c4 04             	add    $0x4,%esp
+8010492c:	83 c4 04             	add    $0x4,%esp
       return s - *pp;
-8010537f:	29 d8                	sub    %ebx,%eax
-}
-80105381:	5b                   	pop    %ebx
-80105382:	5d                   	pop    %ebp
-80105383:	c3                   	ret    
-80105384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105388:	83 c4 04             	add    $0x4,%esp
-    return -1;
-8010538b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010492f:	29 d8                	sub    %ebx,%eax
 }
-80105390:	5b                   	pop    %ebx
-80105391:	5d                   	pop    %ebp
-80105392:	c3                   	ret    
-80105393:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010539a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104931:	5b                   	pop    %ebx
+80104932:	5d                   	pop    %ebp
+80104933:	c3                   	ret    
+80104934:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104938:	83 c4 04             	add    $0x4,%esp
+    return -1;
+8010493b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104940:	5b                   	pop    %ebx
+80104941:	5d                   	pop    %ebp
+80104942:	c3                   	ret    
+80104943:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801053a0 <argint>:
+80104950 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-801053a0:	f3 0f 1e fb          	endbr32 
-801053a4:	55                   	push   %ebp
-801053a5:	89 e5                	mov    %esp,%ebp
-801053a7:	56                   	push   %esi
-801053a8:	53                   	push   %ebx
+80104950:	f3 0f 1e fb          	endbr32 
+80104954:	55                   	push   %ebp
+80104955:	89 e5                	mov    %esp,%ebp
+80104957:	56                   	push   %esi
+80104958:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801053a9:	e8 02 f0 ff ff       	call   801043b0 <myproc>
-801053ae:	8b 55 08             	mov    0x8(%ebp),%edx
-801053b1:	8b 40 18             	mov    0x18(%eax),%eax
-801053b4:	8b 40 44             	mov    0x44(%eax),%eax
-801053b7:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104959:	e8 02 f0 ff ff       	call   80103960 <myproc>
+8010495e:	8b 55 08             	mov    0x8(%ebp),%edx
+80104961:	8b 40 18             	mov    0x18(%eax),%eax
+80104964:	8b 40 44             	mov    0x44(%eax),%eax
+80104967:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-801053ba:	e8 f1 ef ff ff       	call   801043b0 <myproc>
+8010496a:	e8 f1 ef ff ff       	call   80103960 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801053bf:	8d 73 04             	lea    0x4(%ebx),%esi
+8010496f:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801053c2:	8b 00                	mov    (%eax),%eax
-801053c4:	39 c6                	cmp    %eax,%esi
-801053c6:	73 18                	jae    801053e0 <argint+0x40>
-801053c8:	8d 53 08             	lea    0x8(%ebx),%edx
-801053cb:	39 d0                	cmp    %edx,%eax
-801053cd:	72 11                	jb     801053e0 <argint+0x40>
+80104972:	8b 00                	mov    (%eax),%eax
+80104974:	39 c6                	cmp    %eax,%esi
+80104976:	73 18                	jae    80104990 <argint+0x40>
+80104978:	8d 53 08             	lea    0x8(%ebx),%edx
+8010497b:	39 d0                	cmp    %edx,%eax
+8010497d:	72 11                	jb     80104990 <argint+0x40>
   *ip = *(int*)(addr);
-801053cf:	8b 45 0c             	mov    0xc(%ebp),%eax
-801053d2:	8b 53 04             	mov    0x4(%ebx),%edx
-801053d5:	89 10                	mov    %edx,(%eax)
+8010497f:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104982:	8b 53 04             	mov    0x4(%ebx),%edx
+80104985:	89 10                	mov    %edx,(%eax)
   return 0;
-801053d7:	31 c0                	xor    %eax,%eax
+80104987:	31 c0                	xor    %eax,%eax
 }
-801053d9:	5b                   	pop    %ebx
-801053da:	5e                   	pop    %esi
-801053db:	5d                   	pop    %ebp
-801053dc:	c3                   	ret    
-801053dd:	8d 76 00             	lea    0x0(%esi),%esi
+80104989:	5b                   	pop    %ebx
+8010498a:	5e                   	pop    %esi
+8010498b:	5d                   	pop    %ebp
+8010498c:	c3                   	ret    
+8010498d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-801053e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104990:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801053e5:	eb f2                	jmp    801053d9 <argint+0x39>
-801053e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801053ee:	66 90                	xchg   %ax,%ax
+80104995:	eb f2                	jmp    80104989 <argint+0x39>
+80104997:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010499e:	66 90                	xchg   %ax,%ax
 
-801053f0 <argptr>:
+801049a0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-801053f0:	f3 0f 1e fb          	endbr32 
-801053f4:	55                   	push   %ebp
-801053f5:	89 e5                	mov    %esp,%ebp
-801053f7:	56                   	push   %esi
-801053f8:	53                   	push   %ebx
-801053f9:	83 ec 10             	sub    $0x10,%esp
-801053fc:	8b 5d 10             	mov    0x10(%ebp),%ebx
+801049a0:	f3 0f 1e fb          	endbr32 
+801049a4:	55                   	push   %ebp
+801049a5:	89 e5                	mov    %esp,%ebp
+801049a7:	56                   	push   %esi
+801049a8:	53                   	push   %ebx
+801049a9:	83 ec 10             	sub    $0x10,%esp
+801049ac:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int i;
   struct proc *curproc = myproc();
-801053ff:	e8 ac ef ff ff       	call   801043b0 <myproc>
+801049af:	e8 ac ef ff ff       	call   80103960 <myproc>
  
   if(argint(n, &i) < 0)
-80105404:	83 ec 08             	sub    $0x8,%esp
+801049b4:	83 ec 08             	sub    $0x8,%esp
   struct proc *curproc = myproc();
-80105407:	89 c6                	mov    %eax,%esi
+801049b7:	89 c6                	mov    %eax,%esi
   if(argint(n, &i) < 0)
-80105409:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010540c:	50                   	push   %eax
-8010540d:	ff 75 08             	pushl  0x8(%ebp)
-80105410:	e8 8b ff ff ff       	call   801053a0 <argint>
+801049b9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801049bc:	50                   	push   %eax
+801049bd:	ff 75 08             	pushl  0x8(%ebp)
+801049c0:	e8 8b ff ff ff       	call   80104950 <argint>
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80105415:	83 c4 10             	add    $0x10,%esp
-80105418:	85 c0                	test   %eax,%eax
-8010541a:	78 24                	js     80105440 <argptr+0x50>
-8010541c:	85 db                	test   %ebx,%ebx
-8010541e:	78 20                	js     80105440 <argptr+0x50>
-80105420:	8b 16                	mov    (%esi),%edx
-80105422:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105425:	39 c2                	cmp    %eax,%edx
-80105427:	76 17                	jbe    80105440 <argptr+0x50>
-80105429:	01 c3                	add    %eax,%ebx
-8010542b:	39 da                	cmp    %ebx,%edx
-8010542d:	72 11                	jb     80105440 <argptr+0x50>
+801049c5:	83 c4 10             	add    $0x10,%esp
+801049c8:	85 c0                	test   %eax,%eax
+801049ca:	78 24                	js     801049f0 <argptr+0x50>
+801049cc:	85 db                	test   %ebx,%ebx
+801049ce:	78 20                	js     801049f0 <argptr+0x50>
+801049d0:	8b 16                	mov    (%esi),%edx
+801049d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801049d5:	39 c2                	cmp    %eax,%edx
+801049d7:	76 17                	jbe    801049f0 <argptr+0x50>
+801049d9:	01 c3                	add    %eax,%ebx
+801049db:	39 da                	cmp    %ebx,%edx
+801049dd:	72 11                	jb     801049f0 <argptr+0x50>
     return -1;
   *pp = (char*)i;
-8010542f:	8b 55 0c             	mov    0xc(%ebp),%edx
-80105432:	89 02                	mov    %eax,(%edx)
+801049df:	8b 55 0c             	mov    0xc(%ebp),%edx
+801049e2:	89 02                	mov    %eax,(%edx)
   return 0;
-80105434:	31 c0                	xor    %eax,%eax
+801049e4:	31 c0                	xor    %eax,%eax
 }
-80105436:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105439:	5b                   	pop    %ebx
-8010543a:	5e                   	pop    %esi
-8010543b:	5d                   	pop    %ebp
-8010543c:	c3                   	ret    
-8010543d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105440:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105445:	eb ef                	jmp    80105436 <argptr+0x46>
-80105447:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010544e:	66 90                	xchg   %ax,%ax
+801049e6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801049e9:	5b                   	pop    %ebx
+801049ea:	5e                   	pop    %esi
+801049eb:	5d                   	pop    %ebp
+801049ec:	c3                   	ret    
+801049ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+801049f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801049f5:	eb ef                	jmp    801049e6 <argptr+0x46>
+801049f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049fe:	66 90                	xchg   %ax,%ax
 
-80105450 <argstr>:
+80104a00 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-80105450:	f3 0f 1e fb          	endbr32 
-80105454:	55                   	push   %ebp
-80105455:	89 e5                	mov    %esp,%ebp
-80105457:	83 ec 20             	sub    $0x20,%esp
+80104a00:	f3 0f 1e fb          	endbr32 
+80104a04:	55                   	push   %ebp
+80104a05:	89 e5                	mov    %esp,%ebp
+80104a07:	83 ec 20             	sub    $0x20,%esp
   int addr;
   if(argint(n, &addr) < 0)
-8010545a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010545d:	50                   	push   %eax
-8010545e:	ff 75 08             	pushl  0x8(%ebp)
-80105461:	e8 3a ff ff ff       	call   801053a0 <argint>
-80105466:	83 c4 10             	add    $0x10,%esp
-80105469:	85 c0                	test   %eax,%eax
-8010546b:	78 13                	js     80105480 <argstr+0x30>
+80104a0a:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104a0d:	50                   	push   %eax
+80104a0e:	ff 75 08             	pushl  0x8(%ebp)
+80104a11:	e8 3a ff ff ff       	call   80104950 <argint>
+80104a16:	83 c4 10             	add    $0x10,%esp
+80104a19:	85 c0                	test   %eax,%eax
+80104a1b:	78 13                	js     80104a30 <argstr+0x30>
     return -1;
   return fetchstr(addr, pp);
-8010546d:	83 ec 08             	sub    $0x8,%esp
-80105470:	ff 75 0c             	pushl  0xc(%ebp)
-80105473:	ff 75 f4             	pushl  -0xc(%ebp)
-80105476:	e8 c5 fe ff ff       	call   80105340 <fetchstr>
-8010547b:	83 c4 10             	add    $0x10,%esp
-}
-8010547e:	c9                   	leave  
-8010547f:	c3                   	ret    
-80105480:	c9                   	leave  
-    return -1;
-80105481:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105486:	c3                   	ret    
-80105487:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010548e:	66 90                	xchg   %ax,%ax
+80104a1d:	83 ec 08             	sub    $0x8,%esp
+80104a20:	ff 75 0c             	pushl  0xc(%ebp)
+80104a23:	ff 75 f4             	pushl  -0xc(%ebp)
+80104a26:	e8 c5 fe ff ff       	call   801048f0 <fetchstr>
+80104a2b:	83 c4 10             	add    $0x10,%esp
+}
+80104a2e:	c9                   	leave  
+80104a2f:	c3                   	ret    
+80104a30:	c9                   	leave  
+    return -1;
+80104a31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104a36:	c3                   	ret    
+80104a37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a3e:	66 90                	xchg   %ax,%ax
 
-80105490 <syscall>:
-[SYS_history]    sys_history,
+80104a40 <syscall>:
+[SYS_close]   sys_close,
 };
 
 void
 syscall(void)
 {
-80105490:	f3 0f 1e fb          	endbr32 
-80105494:	55                   	push   %ebp
-80105495:	89 e5                	mov    %esp,%ebp
-80105497:	53                   	push   %ebx
-80105498:	83 ec 04             	sub    $0x4,%esp
+80104a40:	f3 0f 1e fb          	endbr32 
+80104a44:	55                   	push   %ebp
+80104a45:	89 e5                	mov    %esp,%ebp
+80104a47:	53                   	push   %ebx
+80104a48:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-8010549b:	e8 10 ef ff ff       	call   801043b0 <myproc>
-801054a0:	89 c3                	mov    %eax,%ebx
+80104a4b:	e8 10 ef ff ff       	call   80103960 <myproc>
+80104a50:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-801054a2:	8b 40 18             	mov    0x18(%eax),%eax
-801054a5:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104a52:	8b 40 18             	mov    0x18(%eax),%eax
+80104a55:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-801054a8:	8d 50 ff             	lea    -0x1(%eax),%edx
-801054ab:	83 fa 15             	cmp    $0x15,%edx
-801054ae:	77 20                	ja     801054d0 <syscall+0x40>
-801054b0:	8b 14 85 80 82 10 80 	mov    -0x7fef7d80(,%eax,4),%edx
-801054b7:	85 d2                	test   %edx,%edx
-801054b9:	74 15                	je     801054d0 <syscall+0x40>
+80104a58:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104a5b:	83 fa 14             	cmp    $0x14,%edx
+80104a5e:	77 20                	ja     80104a80 <syscall+0x40>
+80104a60:	8b 14 85 a0 77 10 80 	mov    -0x7fef8860(,%eax,4),%edx
+80104a67:	85 d2                	test   %edx,%edx
+80104a69:	74 15                	je     80104a80 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-801054bb:	ff d2                	call   *%edx
-801054bd:	89 c2                	mov    %eax,%edx
-801054bf:	8b 43 18             	mov    0x18(%ebx),%eax
-801054c2:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104a6b:	ff d2                	call   *%edx
+80104a6d:	89 c2                	mov    %eax,%edx
+80104a6f:	8b 43 18             	mov    0x18(%ebx),%eax
+80104a72:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-801054c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801054c8:	c9                   	leave  
-801054c9:	c3                   	ret    
-801054ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a75:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104a78:	c9                   	leave  
+80104a79:	c3                   	ret    
+80104a7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-801054d0:	50                   	push   %eax
+80104a80:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-801054d1:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104a81:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-801054d4:	50                   	push   %eax
-801054d5:	ff 73 10             	pushl  0x10(%ebx)
-801054d8:	68 5d 82 10 80       	push   $0x8010825d
-801054dd:	e8 0e b2 ff ff       	call   801006f0 <cprintf>
+80104a84:	50                   	push   %eax
+80104a85:	ff 73 10             	pushl  0x10(%ebx)
+80104a88:	68 7d 77 10 80       	push   $0x8010777d
+80104a8d:	e8 1e bc ff ff       	call   801006b0 <cprintf>
     curproc->tf->eax = -1;
-801054e2:	8b 43 18             	mov    0x18(%ebx),%eax
-801054e5:	83 c4 10             	add    $0x10,%esp
-801054e8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-801054ef:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801054f2:	c9                   	leave  
-801054f3:	c3                   	ret    
-801054f4:	66 90                	xchg   %ax,%ax
-801054f6:	66 90                	xchg   %ax,%ax
-801054f8:	66 90                	xchg   %ax,%ax
-801054fa:	66 90                	xchg   %ax,%ax
-801054fc:	66 90                	xchg   %ax,%ax
-801054fe:	66 90                	xchg   %ax,%ax
+80104a92:	8b 43 18             	mov    0x18(%ebx),%eax
+80104a95:	83 c4 10             	add    $0x10,%esp
+80104a98:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104a9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104aa2:	c9                   	leave  
+80104aa3:	c3                   	ret    
+80104aa4:	66 90                	xchg   %ax,%ax
+80104aa6:	66 90                	xchg   %ax,%ax
+80104aa8:	66 90                	xchg   %ax,%ax
+80104aaa:	66 90                	xchg   %ax,%ax
+80104aac:	66 90                	xchg   %ax,%ax
+80104aae:	66 90                	xchg   %ax,%ax
 
-80105500 <create>:
+80104ab0 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80105500:	55                   	push   %ebp
-80105501:	89 e5                	mov    %esp,%ebp
-80105503:	57                   	push   %edi
-80105504:	56                   	push   %esi
+80104ab0:	55                   	push   %ebp
+80104ab1:	89 e5                	mov    %esp,%ebp
+80104ab3:	57                   	push   %edi
+80104ab4:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80105505:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104ab5:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80105508:	53                   	push   %ebx
-80105509:	83 ec 34             	sub    $0x34,%esp
-8010550c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-8010550f:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104ab8:	53                   	push   %ebx
+80104ab9:	83 ec 34             	sub    $0x34,%esp
+80104abc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104abf:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80105512:	57                   	push   %edi
-80105513:	50                   	push   %eax
+80104ac2:	57                   	push   %edi
+80104ac3:	50                   	push   %eax
 {
-80105514:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80105517:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104ac4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104ac7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-8010551a:	e8 81 d5 ff ff       	call   80102aa0 <nameiparent>
-8010551f:	83 c4 10             	add    $0x10,%esp
-80105522:	85 c0                	test   %eax,%eax
-80105524:	0f 84 46 01 00 00    	je     80105670 <create+0x170>
+80104aca:	e8 81 d5 ff ff       	call   80102050 <nameiparent>
+80104acf:	83 c4 10             	add    $0x10,%esp
+80104ad2:	85 c0                	test   %eax,%eax
+80104ad4:	0f 84 46 01 00 00    	je     80104c20 <create+0x170>
     return 0;
   ilock(dp);
-8010552a:	83 ec 0c             	sub    $0xc,%esp
-8010552d:	89 c3                	mov    %eax,%ebx
-8010552f:	50                   	push   %eax
-80105530:	e8 7b cc ff ff       	call   801021b0 <ilock>
+80104ada:	83 ec 0c             	sub    $0xc,%esp
+80104add:	89 c3                	mov    %eax,%ebx
+80104adf:	50                   	push   %eax
+80104ae0:	e8 7b cc ff ff       	call   80101760 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80105535:	83 c4 0c             	add    $0xc,%esp
-80105538:	6a 00                	push   $0x0
-8010553a:	57                   	push   %edi
-8010553b:	53                   	push   %ebx
-8010553c:	e8 bf d1 ff ff       	call   80102700 <dirlookup>
-80105541:	83 c4 10             	add    $0x10,%esp
-80105544:	89 c6                	mov    %eax,%esi
-80105546:	85 c0                	test   %eax,%eax
-80105548:	74 56                	je     801055a0 <create+0xa0>
+80104ae5:	83 c4 0c             	add    $0xc,%esp
+80104ae8:	6a 00                	push   $0x0
+80104aea:	57                   	push   %edi
+80104aeb:	53                   	push   %ebx
+80104aec:	e8 bf d1 ff ff       	call   80101cb0 <dirlookup>
+80104af1:	83 c4 10             	add    $0x10,%esp
+80104af4:	89 c6                	mov    %eax,%esi
+80104af6:	85 c0                	test   %eax,%eax
+80104af8:	74 56                	je     80104b50 <create+0xa0>
     iunlockput(dp);
-8010554a:	83 ec 0c             	sub    $0xc,%esp
-8010554d:	53                   	push   %ebx
-8010554e:	e8 fd ce ff ff       	call   80102450 <iunlockput>
+80104afa:	83 ec 0c             	sub    $0xc,%esp
+80104afd:	53                   	push   %ebx
+80104afe:	e8 fd ce ff ff       	call   80101a00 <iunlockput>
     ilock(ip);
-80105553:	89 34 24             	mov    %esi,(%esp)
-80105556:	e8 55 cc ff ff       	call   801021b0 <ilock>
+80104b03:	89 34 24             	mov    %esi,(%esp)
+80104b06:	e8 55 cc ff ff       	call   80101760 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-8010555b:	83 c4 10             	add    $0x10,%esp
-8010555e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80105563:	75 1b                	jne    80105580 <create+0x80>
-80105565:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-8010556a:	75 14                	jne    80105580 <create+0x80>
+80104b0b:	83 c4 10             	add    $0x10,%esp
+80104b0e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104b13:	75 1b                	jne    80104b30 <create+0x80>
+80104b15:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104b1a:	75 14                	jne    80104b30 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-8010556c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010556f:	89 f0                	mov    %esi,%eax
-80105571:	5b                   	pop    %ebx
-80105572:	5e                   	pop    %esi
-80105573:	5f                   	pop    %edi
-80105574:	5d                   	pop    %ebp
-80105575:	c3                   	ret    
-80105576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010557d:	8d 76 00             	lea    0x0(%esi),%esi
+80104b1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104b1f:	89 f0                	mov    %esi,%eax
+80104b21:	5b                   	pop    %ebx
+80104b22:	5e                   	pop    %esi
+80104b23:	5f                   	pop    %edi
+80104b24:	5d                   	pop    %ebp
+80104b25:	c3                   	ret    
+80104b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b2d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105580:	83 ec 0c             	sub    $0xc,%esp
-80105583:	56                   	push   %esi
+80104b30:	83 ec 0c             	sub    $0xc,%esp
+80104b33:	56                   	push   %esi
     return 0;
-80105584:	31 f6                	xor    %esi,%esi
+80104b34:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80105586:	e8 c5 ce ff ff       	call   80102450 <iunlockput>
+80104b36:	e8 c5 ce ff ff       	call   80101a00 <iunlockput>
     return 0;
-8010558b:	83 c4 10             	add    $0x10,%esp
+80104b3b:	83 c4 10             	add    $0x10,%esp
 }
-8010558e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105591:	89 f0                	mov    %esi,%eax
-80105593:	5b                   	pop    %ebx
-80105594:	5e                   	pop    %esi
-80105595:	5f                   	pop    %edi
-80105596:	5d                   	pop    %ebp
-80105597:	c3                   	ret    
-80105598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010559f:	90                   	nop
+80104b3e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104b41:	89 f0                	mov    %esi,%eax
+80104b43:	5b                   	pop    %ebx
+80104b44:	5e                   	pop    %esi
+80104b45:	5f                   	pop    %edi
+80104b46:	5d                   	pop    %ebp
+80104b47:	c3                   	ret    
+80104b48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b4f:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-801055a0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-801055a4:	83 ec 08             	sub    $0x8,%esp
-801055a7:	50                   	push   %eax
-801055a8:	ff 33                	pushl  (%ebx)
-801055aa:	e8 81 ca ff ff       	call   80102030 <ialloc>
-801055af:	83 c4 10             	add    $0x10,%esp
-801055b2:	89 c6                	mov    %eax,%esi
-801055b4:	85 c0                	test   %eax,%eax
-801055b6:	0f 84 cd 00 00 00    	je     80105689 <create+0x189>
+80104b50:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104b54:	83 ec 08             	sub    $0x8,%esp
+80104b57:	50                   	push   %eax
+80104b58:	ff 33                	pushl  (%ebx)
+80104b5a:	e8 81 ca ff ff       	call   801015e0 <ialloc>
+80104b5f:	83 c4 10             	add    $0x10,%esp
+80104b62:	89 c6                	mov    %eax,%esi
+80104b64:	85 c0                	test   %eax,%eax
+80104b66:	0f 84 cd 00 00 00    	je     80104c39 <create+0x189>
   ilock(ip);
-801055bc:	83 ec 0c             	sub    $0xc,%esp
-801055bf:	50                   	push   %eax
-801055c0:	e8 eb cb ff ff       	call   801021b0 <ilock>
+80104b6c:	83 ec 0c             	sub    $0xc,%esp
+80104b6f:	50                   	push   %eax
+80104b70:	e8 eb cb ff ff       	call   80101760 <ilock>
   ip->major = major;
-801055c5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-801055c9:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104b75:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104b79:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-801055cd:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-801055d1:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104b7d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104b81:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-801055d5:	b8 01 00 00 00       	mov    $0x1,%eax
-801055da:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104b85:	b8 01 00 00 00       	mov    $0x1,%eax
+80104b8a:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-801055de:	89 34 24             	mov    %esi,(%esp)
-801055e1:	e8 0a cb ff ff       	call   801020f0 <iupdate>
+80104b8e:	89 34 24             	mov    %esi,(%esp)
+80104b91:	e8 0a cb ff ff       	call   801016a0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-801055e6:	83 c4 10             	add    $0x10,%esp
-801055e9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-801055ee:	74 30                	je     80105620 <create+0x120>
+80104b96:	83 c4 10             	add    $0x10,%esp
+80104b99:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104b9e:	74 30                	je     80104bd0 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-801055f0:	83 ec 04             	sub    $0x4,%esp
-801055f3:	ff 76 04             	pushl  0x4(%esi)
-801055f6:	57                   	push   %edi
-801055f7:	53                   	push   %ebx
-801055f8:	e8 c3 d3 ff ff       	call   801029c0 <dirlink>
-801055fd:	83 c4 10             	add    $0x10,%esp
-80105600:	85 c0                	test   %eax,%eax
-80105602:	78 78                	js     8010567c <create+0x17c>
+80104ba0:	83 ec 04             	sub    $0x4,%esp
+80104ba3:	ff 76 04             	pushl  0x4(%esi)
+80104ba6:	57                   	push   %edi
+80104ba7:	53                   	push   %ebx
+80104ba8:	e8 c3 d3 ff ff       	call   80101f70 <dirlink>
+80104bad:	83 c4 10             	add    $0x10,%esp
+80104bb0:	85 c0                	test   %eax,%eax
+80104bb2:	78 78                	js     80104c2c <create+0x17c>
   iunlockput(dp);
-80105604:	83 ec 0c             	sub    $0xc,%esp
-80105607:	53                   	push   %ebx
-80105608:	e8 43 ce ff ff       	call   80102450 <iunlockput>
+80104bb4:	83 ec 0c             	sub    $0xc,%esp
+80104bb7:	53                   	push   %ebx
+80104bb8:	e8 43 ce ff ff       	call   80101a00 <iunlockput>
   return ip;
-8010560d:	83 c4 10             	add    $0x10,%esp
+80104bbd:	83 c4 10             	add    $0x10,%esp
 }
-80105610:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105613:	89 f0                	mov    %esi,%eax
-80105615:	5b                   	pop    %ebx
-80105616:	5e                   	pop    %esi
-80105617:	5f                   	pop    %edi
-80105618:	5d                   	pop    %ebp
-80105619:	c3                   	ret    
-8010561a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104bc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104bc3:	89 f0                	mov    %esi,%eax
+80104bc5:	5b                   	pop    %ebx
+80104bc6:	5e                   	pop    %esi
+80104bc7:	5f                   	pop    %edi
+80104bc8:	5d                   	pop    %ebp
+80104bc9:	c3                   	ret    
+80104bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80105620:	83 ec 0c             	sub    $0xc,%esp
+80104bd0:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80105623:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104bd3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80105628:	53                   	push   %ebx
-80105629:	e8 c2 ca ff ff       	call   801020f0 <iupdate>
+80104bd8:	53                   	push   %ebx
+80104bd9:	e8 c2 ca ff ff       	call   801016a0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-8010562e:	83 c4 0c             	add    $0xc,%esp
-80105631:	ff 76 04             	pushl  0x4(%esi)
-80105634:	68 f8 82 10 80       	push   $0x801082f8
-80105639:	56                   	push   %esi
-8010563a:	e8 81 d3 ff ff       	call   801029c0 <dirlink>
-8010563f:	83 c4 10             	add    $0x10,%esp
-80105642:	85 c0                	test   %eax,%eax
-80105644:	78 18                	js     8010565e <create+0x15e>
-80105646:	83 ec 04             	sub    $0x4,%esp
-80105649:	ff 73 04             	pushl  0x4(%ebx)
-8010564c:	68 f7 82 10 80       	push   $0x801082f7
-80105651:	56                   	push   %esi
-80105652:	e8 69 d3 ff ff       	call   801029c0 <dirlink>
-80105657:	83 c4 10             	add    $0x10,%esp
-8010565a:	85 c0                	test   %eax,%eax
-8010565c:	79 92                	jns    801055f0 <create+0xf0>
+80104bde:	83 c4 0c             	add    $0xc,%esp
+80104be1:	ff 76 04             	pushl  0x4(%esi)
+80104be4:	68 14 78 10 80       	push   $0x80107814
+80104be9:	56                   	push   %esi
+80104bea:	e8 81 d3 ff ff       	call   80101f70 <dirlink>
+80104bef:	83 c4 10             	add    $0x10,%esp
+80104bf2:	85 c0                	test   %eax,%eax
+80104bf4:	78 18                	js     80104c0e <create+0x15e>
+80104bf6:	83 ec 04             	sub    $0x4,%esp
+80104bf9:	ff 73 04             	pushl  0x4(%ebx)
+80104bfc:	68 13 78 10 80       	push   $0x80107813
+80104c01:	56                   	push   %esi
+80104c02:	e8 69 d3 ff ff       	call   80101f70 <dirlink>
+80104c07:	83 c4 10             	add    $0x10,%esp
+80104c0a:	85 c0                	test   %eax,%eax
+80104c0c:	79 92                	jns    80104ba0 <create+0xf0>
       panic("create dots");
-8010565e:	83 ec 0c             	sub    $0xc,%esp
-80105661:	68 eb 82 10 80       	push   $0x801082eb
-80105666:	e8 25 ad ff ff       	call   80100390 <panic>
-8010566b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010566f:	90                   	nop
+80104c0e:	83 ec 0c             	sub    $0xc,%esp
+80104c11:	68 07 78 10 80       	push   $0x80107807
+80104c16:	e8 75 b7 ff ff       	call   80100390 <panic>
+80104c1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c1f:	90                   	nop
 }
-80105670:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104c20:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80105673:	31 f6                	xor    %esi,%esi
+80104c23:	31 f6                	xor    %esi,%esi
 }
-80105675:	5b                   	pop    %ebx
-80105676:	89 f0                	mov    %esi,%eax
-80105678:	5e                   	pop    %esi
-80105679:	5f                   	pop    %edi
-8010567a:	5d                   	pop    %ebp
-8010567b:	c3                   	ret    
+80104c25:	5b                   	pop    %ebx
+80104c26:	89 f0                	mov    %esi,%eax
+80104c28:	5e                   	pop    %esi
+80104c29:	5f                   	pop    %edi
+80104c2a:	5d                   	pop    %ebp
+80104c2b:	c3                   	ret    
     panic("create: dirlink");
-8010567c:	83 ec 0c             	sub    $0xc,%esp
-8010567f:	68 fa 82 10 80       	push   $0x801082fa
-80105684:	e8 07 ad ff ff       	call   80100390 <panic>
+80104c2c:	83 ec 0c             	sub    $0xc,%esp
+80104c2f:	68 16 78 10 80       	push   $0x80107816
+80104c34:	e8 57 b7 ff ff       	call   80100390 <panic>
     panic("create: ialloc");
-80105689:	83 ec 0c             	sub    $0xc,%esp
-8010568c:	68 dc 82 10 80       	push   $0x801082dc
-80105691:	e8 fa ac ff ff       	call   80100390 <panic>
-80105696:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010569d:	8d 76 00             	lea    0x0(%esi),%esi
+80104c39:	83 ec 0c             	sub    $0xc,%esp
+80104c3c:	68 f8 77 10 80       	push   $0x801077f8
+80104c41:	e8 4a b7 ff ff       	call   80100390 <panic>
+80104c46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c4d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801056a0 <argfd.constprop.0>:
+80104c50 <argfd.constprop.0>:
 argfd(int n, int *pfd, struct file **pf)
-801056a0:	55                   	push   %ebp
-801056a1:	89 e5                	mov    %esp,%ebp
-801056a3:	56                   	push   %esi
-801056a4:	89 d6                	mov    %edx,%esi
-801056a6:	53                   	push   %ebx
-801056a7:	89 c3                	mov    %eax,%ebx
+80104c50:	55                   	push   %ebp
+80104c51:	89 e5                	mov    %esp,%ebp
+80104c53:	56                   	push   %esi
+80104c54:	89 d6                	mov    %edx,%esi
+80104c56:	53                   	push   %ebx
+80104c57:	89 c3                	mov    %eax,%ebx
   if(argint(n, &fd) < 0)
-801056a9:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104c59:	8d 45 f4             	lea    -0xc(%ebp),%eax
 argfd(int n, int *pfd, struct file **pf)
-801056ac:	83 ec 18             	sub    $0x18,%esp
+80104c5c:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-801056af:	50                   	push   %eax
-801056b0:	6a 00                	push   $0x0
-801056b2:	e8 e9 fc ff ff       	call   801053a0 <argint>
-801056b7:	83 c4 10             	add    $0x10,%esp
-801056ba:	85 c0                	test   %eax,%eax
-801056bc:	78 2a                	js     801056e8 <argfd.constprop.0+0x48>
+80104c5f:	50                   	push   %eax
+80104c60:	6a 00                	push   $0x0
+80104c62:	e8 e9 fc ff ff       	call   80104950 <argint>
+80104c67:	83 c4 10             	add    $0x10,%esp
+80104c6a:	85 c0                	test   %eax,%eax
+80104c6c:	78 2a                	js     80104c98 <argfd.constprop.0+0x48>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-801056be:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-801056c2:	77 24                	ja     801056e8 <argfd.constprop.0+0x48>
-801056c4:	e8 e7 ec ff ff       	call   801043b0 <myproc>
-801056c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
-801056cc:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
-801056d0:	85 c0                	test   %eax,%eax
-801056d2:	74 14                	je     801056e8 <argfd.constprop.0+0x48>
+80104c6e:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104c72:	77 24                	ja     80104c98 <argfd.constprop.0+0x48>
+80104c74:	e8 e7 ec ff ff       	call   80103960 <myproc>
+80104c79:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104c7c:	8b 44 90 28          	mov    0x28(%eax,%edx,4),%eax
+80104c80:	85 c0                	test   %eax,%eax
+80104c82:	74 14                	je     80104c98 <argfd.constprop.0+0x48>
   if(pfd)
-801056d4:	85 db                	test   %ebx,%ebx
-801056d6:	74 02                	je     801056da <argfd.constprop.0+0x3a>
+80104c84:	85 db                	test   %ebx,%ebx
+80104c86:	74 02                	je     80104c8a <argfd.constprop.0+0x3a>
     *pfd = fd;
-801056d8:	89 13                	mov    %edx,(%ebx)
+80104c88:	89 13                	mov    %edx,(%ebx)
     *pf = f;
-801056da:	89 06                	mov    %eax,(%esi)
+80104c8a:	89 06                	mov    %eax,(%esi)
   return 0;
-801056dc:	31 c0                	xor    %eax,%eax
+80104c8c:	31 c0                	xor    %eax,%eax
 }
-801056de:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801056e1:	5b                   	pop    %ebx
-801056e2:	5e                   	pop    %esi
-801056e3:	5d                   	pop    %ebp
-801056e4:	c3                   	ret    
-801056e5:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801056e8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801056ed:	eb ef                	jmp    801056de <argfd.constprop.0+0x3e>
-801056ef:	90                   	nop
+80104c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104c91:	5b                   	pop    %ebx
+80104c92:	5e                   	pop    %esi
+80104c93:	5d                   	pop    %ebp
+80104c94:	c3                   	ret    
+80104c95:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80104c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c9d:	eb ef                	jmp    80104c8e <argfd.constprop.0+0x3e>
+80104c9f:	90                   	nop
 
-801056f0 <sys_dup>:
+80104ca0 <sys_dup>:
 {
-801056f0:	f3 0f 1e fb          	endbr32 
-801056f4:	55                   	push   %ebp
+80104ca0:	f3 0f 1e fb          	endbr32 
+80104ca4:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0)
-801056f5:	31 c0                	xor    %eax,%eax
+80104ca5:	31 c0                	xor    %eax,%eax
 {
-801056f7:	89 e5                	mov    %esp,%ebp
-801056f9:	56                   	push   %esi
-801056fa:	53                   	push   %ebx
+80104ca7:	89 e5                	mov    %esp,%ebp
+80104ca9:	56                   	push   %esi
+80104caa:	53                   	push   %ebx
   if(argfd(0, 0, &f) < 0)
-801056fb:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104cab:	8d 55 f4             	lea    -0xc(%ebp),%edx
 {
-801056fe:	83 ec 10             	sub    $0x10,%esp
+80104cae:	83 ec 10             	sub    $0x10,%esp
   if(argfd(0, 0, &f) < 0)
-80105701:	e8 9a ff ff ff       	call   801056a0 <argfd.constprop.0>
-80105706:	85 c0                	test   %eax,%eax
-80105708:	78 1e                	js     80105728 <sys_dup+0x38>
+80104cb1:	e8 9a ff ff ff       	call   80104c50 <argfd.constprop.0>
+80104cb6:	85 c0                	test   %eax,%eax
+80104cb8:	78 1e                	js     80104cd8 <sys_dup+0x38>
   if((fd=fdalloc(f)) < 0)
-8010570a:	8b 75 f4             	mov    -0xc(%ebp),%esi
+80104cba:	8b 75 f4             	mov    -0xc(%ebp),%esi
   for(fd = 0; fd < NOFILE; fd++){
-8010570d:	31 db                	xor    %ebx,%ebx
+80104cbd:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-8010570f:	e8 9c ec ff ff       	call   801043b0 <myproc>
+80104cbf:	e8 9c ec ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105714:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105718:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-8010571c:	85 d2                	test   %edx,%edx
-8010571e:	74 20                	je     80105740 <sys_dup+0x50>
+80104cc8:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80104ccc:	85 d2                	test   %edx,%edx
+80104cce:	74 20                	je     80104cf0 <sys_dup+0x50>
   for(fd = 0; fd < NOFILE; fd++){
-80105720:	83 c3 01             	add    $0x1,%ebx
-80105723:	83 fb 10             	cmp    $0x10,%ebx
-80105726:	75 f0                	jne    80105718 <sys_dup+0x28>
-}
-80105728:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-8010572b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80105730:	89 d8                	mov    %ebx,%eax
-80105732:	5b                   	pop    %ebx
-80105733:	5e                   	pop    %esi
-80105734:	5d                   	pop    %ebp
-80105735:	c3                   	ret    
-80105736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010573d:	8d 76 00             	lea    0x0(%esi),%esi
+80104cd0:	83 c3 01             	add    $0x1,%ebx
+80104cd3:	83 fb 10             	cmp    $0x10,%ebx
+80104cd6:	75 f0                	jne    80104cc8 <sys_dup+0x28>
+}
+80104cd8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80104cdb:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80104ce0:	89 d8                	mov    %ebx,%eax
+80104ce2:	5b                   	pop    %ebx
+80104ce3:	5e                   	pop    %esi
+80104ce4:	5d                   	pop    %ebp
+80104ce5:	c3                   	ret    
+80104ce6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ced:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80105740:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80104cf0:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80105744:	83 ec 0c             	sub    $0xc,%esp
-80105747:	ff 75 f4             	pushl  -0xc(%ebp)
-8010574a:	e8 71 c1 ff ff       	call   801018c0 <filedup>
+80104cf4:	83 ec 0c             	sub    $0xc,%esp
+80104cf7:	ff 75 f4             	pushl  -0xc(%ebp)
+80104cfa:	e8 71 c1 ff ff       	call   80100e70 <filedup>
   return fd;
-8010574f:	83 c4 10             	add    $0x10,%esp
+80104cff:	83 c4 10             	add    $0x10,%esp
 }
-80105752:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105755:	89 d8                	mov    %ebx,%eax
-80105757:	5b                   	pop    %ebx
-80105758:	5e                   	pop    %esi
-80105759:	5d                   	pop    %ebp
-8010575a:	c3                   	ret    
-8010575b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010575f:	90                   	nop
+80104d02:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104d05:	89 d8                	mov    %ebx,%eax
+80104d07:	5b                   	pop    %ebx
+80104d08:	5e                   	pop    %esi
+80104d09:	5d                   	pop    %ebp
+80104d0a:	c3                   	ret    
+80104d0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d0f:	90                   	nop
 
-80105760 <sys_read>:
+80104d10 <sys_read>:
 {
-80105760:	f3 0f 1e fb          	endbr32 
-80105764:	55                   	push   %ebp
+80104d10:	f3 0f 1e fb          	endbr32 
+80104d14:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80105765:	31 c0                	xor    %eax,%eax
+80104d15:	31 c0                	xor    %eax,%eax
 {
-80105767:	89 e5                	mov    %esp,%ebp
-80105769:	83 ec 18             	sub    $0x18,%esp
+80104d17:	89 e5                	mov    %esp,%ebp
+80104d19:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-8010576c:	8d 55 ec             	lea    -0x14(%ebp),%edx
-8010576f:	e8 2c ff ff ff       	call   801056a0 <argfd.constprop.0>
-80105774:	85 c0                	test   %eax,%eax
-80105776:	78 48                	js     801057c0 <sys_read+0x60>
-80105778:	83 ec 08             	sub    $0x8,%esp
-8010577b:	8d 45 f0             	lea    -0x10(%ebp),%eax
-8010577e:	50                   	push   %eax
-8010577f:	6a 02                	push   $0x2
-80105781:	e8 1a fc ff ff       	call   801053a0 <argint>
-80105786:	83 c4 10             	add    $0x10,%esp
-80105789:	85 c0                	test   %eax,%eax
-8010578b:	78 33                	js     801057c0 <sys_read+0x60>
-8010578d:	83 ec 04             	sub    $0x4,%esp
-80105790:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105793:	ff 75 f0             	pushl  -0x10(%ebp)
-80105796:	50                   	push   %eax
-80105797:	6a 01                	push   $0x1
-80105799:	e8 52 fc ff ff       	call   801053f0 <argptr>
-8010579e:	83 c4 10             	add    $0x10,%esp
-801057a1:	85 c0                	test   %eax,%eax
-801057a3:	78 1b                	js     801057c0 <sys_read+0x60>
+80104d1c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104d1f:	e8 2c ff ff ff       	call   80104c50 <argfd.constprop.0>
+80104d24:	85 c0                	test   %eax,%eax
+80104d26:	78 48                	js     80104d70 <sys_read+0x60>
+80104d28:	83 ec 08             	sub    $0x8,%esp
+80104d2b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104d2e:	50                   	push   %eax
+80104d2f:	6a 02                	push   $0x2
+80104d31:	e8 1a fc ff ff       	call   80104950 <argint>
+80104d36:	83 c4 10             	add    $0x10,%esp
+80104d39:	85 c0                	test   %eax,%eax
+80104d3b:	78 33                	js     80104d70 <sys_read+0x60>
+80104d3d:	83 ec 04             	sub    $0x4,%esp
+80104d40:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104d43:	ff 75 f0             	pushl  -0x10(%ebp)
+80104d46:	50                   	push   %eax
+80104d47:	6a 01                	push   $0x1
+80104d49:	e8 52 fc ff ff       	call   801049a0 <argptr>
+80104d4e:	83 c4 10             	add    $0x10,%esp
+80104d51:	85 c0                	test   %eax,%eax
+80104d53:	78 1b                	js     80104d70 <sys_read+0x60>
   return fileread(f, p, n);
-801057a5:	83 ec 04             	sub    $0x4,%esp
-801057a8:	ff 75 f0             	pushl  -0x10(%ebp)
-801057ab:	ff 75 f4             	pushl  -0xc(%ebp)
-801057ae:	ff 75 ec             	pushl  -0x14(%ebp)
-801057b1:	e8 8a c2 ff ff       	call   80101a40 <fileread>
-801057b6:	83 c4 10             	add    $0x10,%esp
-}
-801057b9:	c9                   	leave  
-801057ba:	c3                   	ret    
-801057bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801057bf:	90                   	nop
-801057c0:	c9                   	leave  
-    return -1;
-801057c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801057c6:	c3                   	ret    
-801057c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801057ce:	66 90                	xchg   %ax,%ax
+80104d55:	83 ec 04             	sub    $0x4,%esp
+80104d58:	ff 75 f0             	pushl  -0x10(%ebp)
+80104d5b:	ff 75 f4             	pushl  -0xc(%ebp)
+80104d5e:	ff 75 ec             	pushl  -0x14(%ebp)
+80104d61:	e8 8a c2 ff ff       	call   80100ff0 <fileread>
+80104d66:	83 c4 10             	add    $0x10,%esp
+}
+80104d69:	c9                   	leave  
+80104d6a:	c3                   	ret    
+80104d6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104d6f:	90                   	nop
+80104d70:	c9                   	leave  
+    return -1;
+80104d71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104d76:	c3                   	ret    
+80104d77:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d7e:	66 90                	xchg   %ax,%ax
 
-801057d0 <sys_write>:
+80104d80 <sys_write>:
 {
-801057d0:	f3 0f 1e fb          	endbr32 
-801057d4:	55                   	push   %ebp
+80104d80:	f3 0f 1e fb          	endbr32 
+80104d84:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-801057d5:	31 c0                	xor    %eax,%eax
+80104d85:	31 c0                	xor    %eax,%eax
 {
-801057d7:	89 e5                	mov    %esp,%ebp
-801057d9:	83 ec 18             	sub    $0x18,%esp
+80104d87:	89 e5                	mov    %esp,%ebp
+80104d89:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-801057dc:	8d 55 ec             	lea    -0x14(%ebp),%edx
-801057df:	e8 bc fe ff ff       	call   801056a0 <argfd.constprop.0>
-801057e4:	85 c0                	test   %eax,%eax
-801057e6:	78 48                	js     80105830 <sys_write+0x60>
-801057e8:	83 ec 08             	sub    $0x8,%esp
-801057eb:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801057ee:	50                   	push   %eax
-801057ef:	6a 02                	push   $0x2
-801057f1:	e8 aa fb ff ff       	call   801053a0 <argint>
-801057f6:	83 c4 10             	add    $0x10,%esp
-801057f9:	85 c0                	test   %eax,%eax
-801057fb:	78 33                	js     80105830 <sys_write+0x60>
-801057fd:	83 ec 04             	sub    $0x4,%esp
-80105800:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105803:	ff 75 f0             	pushl  -0x10(%ebp)
-80105806:	50                   	push   %eax
-80105807:	6a 01                	push   $0x1
-80105809:	e8 e2 fb ff ff       	call   801053f0 <argptr>
-8010580e:	83 c4 10             	add    $0x10,%esp
-80105811:	85 c0                	test   %eax,%eax
-80105813:	78 1b                	js     80105830 <sys_write+0x60>
+80104d8c:	8d 55 ec             	lea    -0x14(%ebp),%edx
+80104d8f:	e8 bc fe ff ff       	call   80104c50 <argfd.constprop.0>
+80104d94:	85 c0                	test   %eax,%eax
+80104d96:	78 48                	js     80104de0 <sys_write+0x60>
+80104d98:	83 ec 08             	sub    $0x8,%esp
+80104d9b:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104d9e:	50                   	push   %eax
+80104d9f:	6a 02                	push   $0x2
+80104da1:	e8 aa fb ff ff       	call   80104950 <argint>
+80104da6:	83 c4 10             	add    $0x10,%esp
+80104da9:	85 c0                	test   %eax,%eax
+80104dab:	78 33                	js     80104de0 <sys_write+0x60>
+80104dad:	83 ec 04             	sub    $0x4,%esp
+80104db0:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104db3:	ff 75 f0             	pushl  -0x10(%ebp)
+80104db6:	50                   	push   %eax
+80104db7:	6a 01                	push   $0x1
+80104db9:	e8 e2 fb ff ff       	call   801049a0 <argptr>
+80104dbe:	83 c4 10             	add    $0x10,%esp
+80104dc1:	85 c0                	test   %eax,%eax
+80104dc3:	78 1b                	js     80104de0 <sys_write+0x60>
   return filewrite(f, p, n);
-80105815:	83 ec 04             	sub    $0x4,%esp
-80105818:	ff 75 f0             	pushl  -0x10(%ebp)
-8010581b:	ff 75 f4             	pushl  -0xc(%ebp)
-8010581e:	ff 75 ec             	pushl  -0x14(%ebp)
-80105821:	e8 ba c2 ff ff       	call   80101ae0 <filewrite>
-80105826:	83 c4 10             	add    $0x10,%esp
-}
-80105829:	c9                   	leave  
-8010582a:	c3                   	ret    
-8010582b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010582f:	90                   	nop
-80105830:	c9                   	leave  
-    return -1;
-80105831:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105836:	c3                   	ret    
-80105837:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010583e:	66 90                	xchg   %ax,%ax
-
-80105840 <sys_close>:
-{
-80105840:	f3 0f 1e fb          	endbr32 
-80105844:	55                   	push   %ebp
-80105845:	89 e5                	mov    %esp,%ebp
-80105847:	83 ec 18             	sub    $0x18,%esp
+80104dc5:	83 ec 04             	sub    $0x4,%esp
+80104dc8:	ff 75 f0             	pushl  -0x10(%ebp)
+80104dcb:	ff 75 f4             	pushl  -0xc(%ebp)
+80104dce:	ff 75 ec             	pushl  -0x14(%ebp)
+80104dd1:	e8 ba c2 ff ff       	call   80101090 <filewrite>
+80104dd6:	83 c4 10             	add    $0x10,%esp
+}
+80104dd9:	c9                   	leave  
+80104dda:	c3                   	ret    
+80104ddb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104ddf:	90                   	nop
+80104de0:	c9                   	leave  
+    return -1;
+80104de1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104de6:	c3                   	ret    
+80104de7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104dee:	66 90                	xchg   %ax,%ax
+
+80104df0 <sys_close>:
+{
+80104df0:	f3 0f 1e fb          	endbr32 
+80104df4:	55                   	push   %ebp
+80104df5:	89 e5                	mov    %esp,%ebp
+80104df7:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, &fd, &f) < 0)
-8010584a:	8d 55 f4             	lea    -0xc(%ebp),%edx
-8010584d:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105850:	e8 4b fe ff ff       	call   801056a0 <argfd.constprop.0>
-80105855:	85 c0                	test   %eax,%eax
-80105857:	78 27                	js     80105880 <sys_close+0x40>
+80104dfa:	8d 55 f4             	lea    -0xc(%ebp),%edx
+80104dfd:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80104e00:	e8 4b fe ff ff       	call   80104c50 <argfd.constprop.0>
+80104e05:	85 c0                	test   %eax,%eax
+80104e07:	78 27                	js     80104e30 <sys_close+0x40>
   myproc()->ofile[fd] = 0;
-80105859:	e8 52 eb ff ff       	call   801043b0 <myproc>
-8010585e:	8b 55 f0             	mov    -0x10(%ebp),%edx
+80104e09:	e8 52 eb ff ff       	call   80103960 <myproc>
+80104e0e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   fileclose(f);
-80105861:	83 ec 0c             	sub    $0xc,%esp
+80104e11:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80105864:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
-8010586b:	00 
+80104e14:	c7 44 90 28 00 00 00 	movl   $0x0,0x28(%eax,%edx,4)
+80104e1b:	00 
   fileclose(f);
-8010586c:	ff 75 f4             	pushl  -0xc(%ebp)
-8010586f:	e8 9c c0 ff ff       	call   80101910 <fileclose>
+80104e1c:	ff 75 f4             	pushl  -0xc(%ebp)
+80104e1f:	e8 9c c0 ff ff       	call   80100ec0 <fileclose>
   return 0;
-80105874:	83 c4 10             	add    $0x10,%esp
-80105877:	31 c0                	xor    %eax,%eax
+80104e24:	83 c4 10             	add    $0x10,%esp
+80104e27:	31 c0                	xor    %eax,%eax
 }
-80105879:	c9                   	leave  
-8010587a:	c3                   	ret    
-8010587b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010587f:	90                   	nop
-80105880:	c9                   	leave  
+80104e29:	c9                   	leave  
+80104e2a:	c3                   	ret    
+80104e2b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104e2f:	90                   	nop
+80104e30:	c9                   	leave  
     return -1;
-80105881:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104e31:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105886:	c3                   	ret    
-80105887:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010588e:	66 90                	xchg   %ax,%ax
+80104e36:	c3                   	ret    
+80104e37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e3e:	66 90                	xchg   %ax,%ax
 
-80105890 <sys_fstat>:
+80104e40 <sys_fstat>:
 {
-80105890:	f3 0f 1e fb          	endbr32 
-80105894:	55                   	push   %ebp
+80104e40:	f3 0f 1e fb          	endbr32 
+80104e44:	55                   	push   %ebp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80105895:	31 c0                	xor    %eax,%eax
+80104e45:	31 c0                	xor    %eax,%eax
 {
-80105897:	89 e5                	mov    %esp,%ebp
-80105899:	83 ec 18             	sub    $0x18,%esp
+80104e47:	89 e5                	mov    %esp,%ebp
+80104e49:	83 ec 18             	sub    $0x18,%esp
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-8010589c:	8d 55 f0             	lea    -0x10(%ebp),%edx
-8010589f:	e8 fc fd ff ff       	call   801056a0 <argfd.constprop.0>
-801058a4:	85 c0                	test   %eax,%eax
-801058a6:	78 30                	js     801058d8 <sys_fstat+0x48>
-801058a8:	83 ec 04             	sub    $0x4,%esp
-801058ab:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801058ae:	6a 14                	push   $0x14
-801058b0:	50                   	push   %eax
-801058b1:	6a 01                	push   $0x1
-801058b3:	e8 38 fb ff ff       	call   801053f0 <argptr>
-801058b8:	83 c4 10             	add    $0x10,%esp
-801058bb:	85 c0                	test   %eax,%eax
-801058bd:	78 19                	js     801058d8 <sys_fstat+0x48>
+80104e4c:	8d 55 f0             	lea    -0x10(%ebp),%edx
+80104e4f:	e8 fc fd ff ff       	call   80104c50 <argfd.constprop.0>
+80104e54:	85 c0                	test   %eax,%eax
+80104e56:	78 30                	js     80104e88 <sys_fstat+0x48>
+80104e58:	83 ec 04             	sub    $0x4,%esp
+80104e5b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104e5e:	6a 14                	push   $0x14
+80104e60:	50                   	push   %eax
+80104e61:	6a 01                	push   $0x1
+80104e63:	e8 38 fb ff ff       	call   801049a0 <argptr>
+80104e68:	83 c4 10             	add    $0x10,%esp
+80104e6b:	85 c0                	test   %eax,%eax
+80104e6d:	78 19                	js     80104e88 <sys_fstat+0x48>
   return filestat(f, st);
-801058bf:	83 ec 08             	sub    $0x8,%esp
-801058c2:	ff 75 f4             	pushl  -0xc(%ebp)
-801058c5:	ff 75 f0             	pushl  -0x10(%ebp)
-801058c8:	e8 23 c1 ff ff       	call   801019f0 <filestat>
-801058cd:	83 c4 10             	add    $0x10,%esp
-}
-801058d0:	c9                   	leave  
-801058d1:	c3                   	ret    
-801058d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801058d8:	c9                   	leave  
-    return -1;
-801058d9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801058de:	c3                   	ret    
-801058df:	90                   	nop
-
-801058e0 <sys_link>:
-{
-801058e0:	f3 0f 1e fb          	endbr32 
-801058e4:	55                   	push   %ebp
-801058e5:	89 e5                	mov    %esp,%ebp
-801058e7:	57                   	push   %edi
-801058e8:	56                   	push   %esi
+80104e6f:	83 ec 08             	sub    $0x8,%esp
+80104e72:	ff 75 f4             	pushl  -0xc(%ebp)
+80104e75:	ff 75 f0             	pushl  -0x10(%ebp)
+80104e78:	e8 23 c1 ff ff       	call   80100fa0 <filestat>
+80104e7d:	83 c4 10             	add    $0x10,%esp
+}
+80104e80:	c9                   	leave  
+80104e81:	c3                   	ret    
+80104e82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104e88:	c9                   	leave  
+    return -1;
+80104e89:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104e8e:	c3                   	ret    
+80104e8f:	90                   	nop
+
+80104e90 <sys_link>:
+{
+80104e90:	f3 0f 1e fb          	endbr32 
+80104e94:	55                   	push   %ebp
+80104e95:	89 e5                	mov    %esp,%ebp
+80104e97:	57                   	push   %edi
+80104e98:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-801058e9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80104e99:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-801058ec:	53                   	push   %ebx
-801058ed:	83 ec 34             	sub    $0x34,%esp
+80104e9c:	53                   	push   %ebx
+80104e9d:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-801058f0:	50                   	push   %eax
-801058f1:	6a 00                	push   $0x0
-801058f3:	e8 58 fb ff ff       	call   80105450 <argstr>
-801058f8:	83 c4 10             	add    $0x10,%esp
-801058fb:	85 c0                	test   %eax,%eax
-801058fd:	0f 88 ff 00 00 00    	js     80105a02 <sys_link+0x122>
-80105903:	83 ec 08             	sub    $0x8,%esp
-80105906:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80105909:	50                   	push   %eax
-8010590a:	6a 01                	push   $0x1
-8010590c:	e8 3f fb ff ff       	call   80105450 <argstr>
-80105911:	83 c4 10             	add    $0x10,%esp
-80105914:	85 c0                	test   %eax,%eax
-80105916:	0f 88 e6 00 00 00    	js     80105a02 <sys_link+0x122>
+80104ea0:	50                   	push   %eax
+80104ea1:	6a 00                	push   $0x0
+80104ea3:	e8 58 fb ff ff       	call   80104a00 <argstr>
+80104ea8:	83 c4 10             	add    $0x10,%esp
+80104eab:	85 c0                	test   %eax,%eax
+80104ead:	0f 88 ff 00 00 00    	js     80104fb2 <sys_link+0x122>
+80104eb3:	83 ec 08             	sub    $0x8,%esp
+80104eb6:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80104eb9:	50                   	push   %eax
+80104eba:	6a 01                	push   $0x1
+80104ebc:	e8 3f fb ff ff       	call   80104a00 <argstr>
+80104ec1:	83 c4 10             	add    $0x10,%esp
+80104ec4:	85 c0                	test   %eax,%eax
+80104ec6:	0f 88 e6 00 00 00    	js     80104fb2 <sys_link+0x122>
   begin_op();
-8010591c:	e8 5f de ff ff       	call   80103780 <begin_op>
+80104ecc:	e8 5f de ff ff       	call   80102d30 <begin_op>
   if((ip = namei(old)) == 0){
-80105921:	83 ec 0c             	sub    $0xc,%esp
-80105924:	ff 75 d4             	pushl  -0x2c(%ebp)
-80105927:	e8 54 d1 ff ff       	call   80102a80 <namei>
-8010592c:	83 c4 10             	add    $0x10,%esp
-8010592f:	89 c3                	mov    %eax,%ebx
-80105931:	85 c0                	test   %eax,%eax
-80105933:	0f 84 e8 00 00 00    	je     80105a21 <sys_link+0x141>
+80104ed1:	83 ec 0c             	sub    $0xc,%esp
+80104ed4:	ff 75 d4             	pushl  -0x2c(%ebp)
+80104ed7:	e8 54 d1 ff ff       	call   80102030 <namei>
+80104edc:	83 c4 10             	add    $0x10,%esp
+80104edf:	89 c3                	mov    %eax,%ebx
+80104ee1:	85 c0                	test   %eax,%eax
+80104ee3:	0f 84 e8 00 00 00    	je     80104fd1 <sys_link+0x141>
   ilock(ip);
-80105939:	83 ec 0c             	sub    $0xc,%esp
-8010593c:	50                   	push   %eax
-8010593d:	e8 6e c8 ff ff       	call   801021b0 <ilock>
+80104ee9:	83 ec 0c             	sub    $0xc,%esp
+80104eec:	50                   	push   %eax
+80104eed:	e8 6e c8 ff ff       	call   80101760 <ilock>
   if(ip->type == T_DIR){
-80105942:	83 c4 10             	add    $0x10,%esp
-80105945:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010594a:	0f 84 b9 00 00 00    	je     80105a09 <sys_link+0x129>
+80104ef2:	83 c4 10             	add    $0x10,%esp
+80104ef5:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80104efa:	0f 84 b9 00 00 00    	je     80104fb9 <sys_link+0x129>
   iupdate(ip);
-80105950:	83 ec 0c             	sub    $0xc,%esp
+80104f00:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80105953:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104f03:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80105958:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104f08:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-8010595b:	53                   	push   %ebx
-8010595c:	e8 8f c7 ff ff       	call   801020f0 <iupdate>
+80104f0b:	53                   	push   %ebx
+80104f0c:	e8 8f c7 ff ff       	call   801016a0 <iupdate>
   iunlock(ip);
-80105961:	89 1c 24             	mov    %ebx,(%esp)
-80105964:	e8 27 c9 ff ff       	call   80102290 <iunlock>
+80104f11:	89 1c 24             	mov    %ebx,(%esp)
+80104f14:	e8 27 c9 ff ff       	call   80101840 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80105969:	58                   	pop    %eax
-8010596a:	5a                   	pop    %edx
-8010596b:	57                   	push   %edi
-8010596c:	ff 75 d0             	pushl  -0x30(%ebp)
-8010596f:	e8 2c d1 ff ff       	call   80102aa0 <nameiparent>
-80105974:	83 c4 10             	add    $0x10,%esp
-80105977:	89 c6                	mov    %eax,%esi
-80105979:	85 c0                	test   %eax,%eax
-8010597b:	74 5f                	je     801059dc <sys_link+0xfc>
+80104f19:	58                   	pop    %eax
+80104f1a:	5a                   	pop    %edx
+80104f1b:	57                   	push   %edi
+80104f1c:	ff 75 d0             	pushl  -0x30(%ebp)
+80104f1f:	e8 2c d1 ff ff       	call   80102050 <nameiparent>
+80104f24:	83 c4 10             	add    $0x10,%esp
+80104f27:	89 c6                	mov    %eax,%esi
+80104f29:	85 c0                	test   %eax,%eax
+80104f2b:	74 5f                	je     80104f8c <sys_link+0xfc>
   ilock(dp);
-8010597d:	83 ec 0c             	sub    $0xc,%esp
-80105980:	50                   	push   %eax
-80105981:	e8 2a c8 ff ff       	call   801021b0 <ilock>
+80104f2d:	83 ec 0c             	sub    $0xc,%esp
+80104f30:	50                   	push   %eax
+80104f31:	e8 2a c8 ff ff       	call   80101760 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80105986:	8b 03                	mov    (%ebx),%eax
-80105988:	83 c4 10             	add    $0x10,%esp
-8010598b:	39 06                	cmp    %eax,(%esi)
-8010598d:	75 41                	jne    801059d0 <sys_link+0xf0>
-8010598f:	83 ec 04             	sub    $0x4,%esp
-80105992:	ff 73 04             	pushl  0x4(%ebx)
-80105995:	57                   	push   %edi
-80105996:	56                   	push   %esi
-80105997:	e8 24 d0 ff ff       	call   801029c0 <dirlink>
-8010599c:	83 c4 10             	add    $0x10,%esp
-8010599f:	85 c0                	test   %eax,%eax
-801059a1:	78 2d                	js     801059d0 <sys_link+0xf0>
+80104f36:	8b 03                	mov    (%ebx),%eax
+80104f38:	83 c4 10             	add    $0x10,%esp
+80104f3b:	39 06                	cmp    %eax,(%esi)
+80104f3d:	75 41                	jne    80104f80 <sys_link+0xf0>
+80104f3f:	83 ec 04             	sub    $0x4,%esp
+80104f42:	ff 73 04             	pushl  0x4(%ebx)
+80104f45:	57                   	push   %edi
+80104f46:	56                   	push   %esi
+80104f47:	e8 24 d0 ff ff       	call   80101f70 <dirlink>
+80104f4c:	83 c4 10             	add    $0x10,%esp
+80104f4f:	85 c0                	test   %eax,%eax
+80104f51:	78 2d                	js     80104f80 <sys_link+0xf0>
   iunlockput(dp);
-801059a3:	83 ec 0c             	sub    $0xc,%esp
-801059a6:	56                   	push   %esi
-801059a7:	e8 a4 ca ff ff       	call   80102450 <iunlockput>
+80104f53:	83 ec 0c             	sub    $0xc,%esp
+80104f56:	56                   	push   %esi
+80104f57:	e8 a4 ca ff ff       	call   80101a00 <iunlockput>
   iput(ip);
-801059ac:	89 1c 24             	mov    %ebx,(%esp)
-801059af:	e8 2c c9 ff ff       	call   801022e0 <iput>
+80104f5c:	89 1c 24             	mov    %ebx,(%esp)
+80104f5f:	e8 2c c9 ff ff       	call   80101890 <iput>
   end_op();
-801059b4:	e8 37 de ff ff       	call   801037f0 <end_op>
+80104f64:	e8 37 de ff ff       	call   80102da0 <end_op>
   return 0;
-801059b9:	83 c4 10             	add    $0x10,%esp
-801059bc:	31 c0                	xor    %eax,%eax
+80104f69:	83 c4 10             	add    $0x10,%esp
+80104f6c:	31 c0                	xor    %eax,%eax
 }
-801059be:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801059c1:	5b                   	pop    %ebx
-801059c2:	5e                   	pop    %esi
-801059c3:	5f                   	pop    %edi
-801059c4:	5d                   	pop    %ebp
-801059c5:	c3                   	ret    
-801059c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059cd:	8d 76 00             	lea    0x0(%esi),%esi
+80104f6e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f71:	5b                   	pop    %ebx
+80104f72:	5e                   	pop    %esi
+80104f73:	5f                   	pop    %edi
+80104f74:	5d                   	pop    %ebp
+80104f75:	c3                   	ret    
+80104f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104f7d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(dp);
-801059d0:	83 ec 0c             	sub    $0xc,%esp
-801059d3:	56                   	push   %esi
-801059d4:	e8 77 ca ff ff       	call   80102450 <iunlockput>
+80104f80:	83 ec 0c             	sub    $0xc,%esp
+80104f83:	56                   	push   %esi
+80104f84:	e8 77 ca ff ff       	call   80101a00 <iunlockput>
     goto bad;
-801059d9:	83 c4 10             	add    $0x10,%esp
+80104f89:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-801059dc:	83 ec 0c             	sub    $0xc,%esp
-801059df:	53                   	push   %ebx
-801059e0:	e8 cb c7 ff ff       	call   801021b0 <ilock>
+80104f8c:	83 ec 0c             	sub    $0xc,%esp
+80104f8f:	53                   	push   %ebx
+80104f90:	e8 cb c7 ff ff       	call   80101760 <ilock>
   ip->nlink--;
-801059e5:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80104f95:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-801059ea:	89 1c 24             	mov    %ebx,(%esp)
-801059ed:	e8 fe c6 ff ff       	call   801020f0 <iupdate>
+80104f9a:	89 1c 24             	mov    %ebx,(%esp)
+80104f9d:	e8 fe c6 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-801059f2:	89 1c 24             	mov    %ebx,(%esp)
-801059f5:	e8 56 ca ff ff       	call   80102450 <iunlockput>
+80104fa2:	89 1c 24             	mov    %ebx,(%esp)
+80104fa5:	e8 56 ca ff ff       	call   80101a00 <iunlockput>
   end_op();
-801059fa:	e8 f1 dd ff ff       	call   801037f0 <end_op>
+80104faa:	e8 f1 dd ff ff       	call   80102da0 <end_op>
   return -1;
-801059ff:	83 c4 10             	add    $0x10,%esp
-80105a02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a07:	eb b5                	jmp    801059be <sys_link+0xde>
+80104faf:	83 c4 10             	add    $0x10,%esp
+80104fb2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104fb7:	eb b5                	jmp    80104f6e <sys_link+0xde>
     iunlockput(ip);
-80105a09:	83 ec 0c             	sub    $0xc,%esp
-80105a0c:	53                   	push   %ebx
-80105a0d:	e8 3e ca ff ff       	call   80102450 <iunlockput>
+80104fb9:	83 ec 0c             	sub    $0xc,%esp
+80104fbc:	53                   	push   %ebx
+80104fbd:	e8 3e ca ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105a12:	e8 d9 dd ff ff       	call   801037f0 <end_op>
+80104fc2:	e8 d9 dd ff ff       	call   80102da0 <end_op>
     return -1;
-80105a17:	83 c4 10             	add    $0x10,%esp
-80105a1a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a1f:	eb 9d                	jmp    801059be <sys_link+0xde>
+80104fc7:	83 c4 10             	add    $0x10,%esp
+80104fca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104fcf:	eb 9d                	jmp    80104f6e <sys_link+0xde>
     end_op();
-80105a21:	e8 ca dd ff ff       	call   801037f0 <end_op>
+80104fd1:	e8 ca dd ff ff       	call   80102da0 <end_op>
     return -1;
-80105a26:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105a2b:	eb 91                	jmp    801059be <sys_link+0xde>
-80105a2d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80105a30 <sys_unlink>:
-{
-80105a30:	f3 0f 1e fb          	endbr32 
-80105a34:	55                   	push   %ebp
-80105a35:	89 e5                	mov    %esp,%ebp
-80105a37:	57                   	push   %edi
-80105a38:	56                   	push   %esi
+80104fd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104fdb:	eb 91                	jmp    80104f6e <sys_link+0xde>
+80104fdd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104fe0 <sys_unlink>:
+{
+80104fe0:	f3 0f 1e fb          	endbr32 
+80104fe4:	55                   	push   %ebp
+80104fe5:	89 e5                	mov    %esp,%ebp
+80104fe7:	57                   	push   %edi
+80104fe8:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80105a39:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80104fe9:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80105a3c:	53                   	push   %ebx
-80105a3d:	83 ec 54             	sub    $0x54,%esp
+80104fec:	53                   	push   %ebx
+80104fed:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-80105a40:	50                   	push   %eax
-80105a41:	6a 00                	push   $0x0
-80105a43:	e8 08 fa ff ff       	call   80105450 <argstr>
-80105a48:	83 c4 10             	add    $0x10,%esp
-80105a4b:	85 c0                	test   %eax,%eax
-80105a4d:	0f 88 7d 01 00 00    	js     80105bd0 <sys_unlink+0x1a0>
+80104ff0:	50                   	push   %eax
+80104ff1:	6a 00                	push   $0x0
+80104ff3:	e8 08 fa ff ff       	call   80104a00 <argstr>
+80104ff8:	83 c4 10             	add    $0x10,%esp
+80104ffb:	85 c0                	test   %eax,%eax
+80104ffd:	0f 88 7d 01 00 00    	js     80105180 <sys_unlink+0x1a0>
   begin_op();
-80105a53:	e8 28 dd ff ff       	call   80103780 <begin_op>
+80105003:	e8 28 dd ff ff       	call   80102d30 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105a58:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80105a5b:	83 ec 08             	sub    $0x8,%esp
-80105a5e:	53                   	push   %ebx
-80105a5f:	ff 75 c0             	pushl  -0x40(%ebp)
-80105a62:	e8 39 d0 ff ff       	call   80102aa0 <nameiparent>
-80105a67:	83 c4 10             	add    $0x10,%esp
-80105a6a:	89 c6                	mov    %eax,%esi
-80105a6c:	85 c0                	test   %eax,%eax
-80105a6e:	0f 84 66 01 00 00    	je     80105bda <sys_unlink+0x1aa>
+80105008:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+8010500b:	83 ec 08             	sub    $0x8,%esp
+8010500e:	53                   	push   %ebx
+8010500f:	ff 75 c0             	pushl  -0x40(%ebp)
+80105012:	e8 39 d0 ff ff       	call   80102050 <nameiparent>
+80105017:	83 c4 10             	add    $0x10,%esp
+8010501a:	89 c6                	mov    %eax,%esi
+8010501c:	85 c0                	test   %eax,%eax
+8010501e:	0f 84 66 01 00 00    	je     8010518a <sys_unlink+0x1aa>
   ilock(dp);
-80105a74:	83 ec 0c             	sub    $0xc,%esp
-80105a77:	50                   	push   %eax
-80105a78:	e8 33 c7 ff ff       	call   801021b0 <ilock>
+80105024:	83 ec 0c             	sub    $0xc,%esp
+80105027:	50                   	push   %eax
+80105028:	e8 33 c7 ff ff       	call   80101760 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-80105a7d:	58                   	pop    %eax
-80105a7e:	5a                   	pop    %edx
-80105a7f:	68 f8 82 10 80       	push   $0x801082f8
-80105a84:	53                   	push   %ebx
-80105a85:	e8 56 cc ff ff       	call   801026e0 <namecmp>
-80105a8a:	83 c4 10             	add    $0x10,%esp
-80105a8d:	85 c0                	test   %eax,%eax
-80105a8f:	0f 84 03 01 00 00    	je     80105b98 <sys_unlink+0x168>
-80105a95:	83 ec 08             	sub    $0x8,%esp
-80105a98:	68 f7 82 10 80       	push   $0x801082f7
-80105a9d:	53                   	push   %ebx
-80105a9e:	e8 3d cc ff ff       	call   801026e0 <namecmp>
-80105aa3:	83 c4 10             	add    $0x10,%esp
-80105aa6:	85 c0                	test   %eax,%eax
-80105aa8:	0f 84 ea 00 00 00    	je     80105b98 <sys_unlink+0x168>
+8010502d:	58                   	pop    %eax
+8010502e:	5a                   	pop    %edx
+8010502f:	68 14 78 10 80       	push   $0x80107814
+80105034:	53                   	push   %ebx
+80105035:	e8 56 cc ff ff       	call   80101c90 <namecmp>
+8010503a:	83 c4 10             	add    $0x10,%esp
+8010503d:	85 c0                	test   %eax,%eax
+8010503f:	0f 84 03 01 00 00    	je     80105148 <sys_unlink+0x168>
+80105045:	83 ec 08             	sub    $0x8,%esp
+80105048:	68 13 78 10 80       	push   $0x80107813
+8010504d:	53                   	push   %ebx
+8010504e:	e8 3d cc ff ff       	call   80101c90 <namecmp>
+80105053:	83 c4 10             	add    $0x10,%esp
+80105056:	85 c0                	test   %eax,%eax
+80105058:	0f 84 ea 00 00 00    	je     80105148 <sys_unlink+0x168>
   if((ip = dirlookup(dp, name, &off)) == 0)
-80105aae:	83 ec 04             	sub    $0x4,%esp
-80105ab1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105ab4:	50                   	push   %eax
-80105ab5:	53                   	push   %ebx
-80105ab6:	56                   	push   %esi
-80105ab7:	e8 44 cc ff ff       	call   80102700 <dirlookup>
-80105abc:	83 c4 10             	add    $0x10,%esp
-80105abf:	89 c3                	mov    %eax,%ebx
-80105ac1:	85 c0                	test   %eax,%eax
-80105ac3:	0f 84 cf 00 00 00    	je     80105b98 <sys_unlink+0x168>
+8010505e:	83 ec 04             	sub    $0x4,%esp
+80105061:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+80105064:	50                   	push   %eax
+80105065:	53                   	push   %ebx
+80105066:	56                   	push   %esi
+80105067:	e8 44 cc ff ff       	call   80101cb0 <dirlookup>
+8010506c:	83 c4 10             	add    $0x10,%esp
+8010506f:	89 c3                	mov    %eax,%ebx
+80105071:	85 c0                	test   %eax,%eax
+80105073:	0f 84 cf 00 00 00    	je     80105148 <sys_unlink+0x168>
   ilock(ip);
-80105ac9:	83 ec 0c             	sub    $0xc,%esp
-80105acc:	50                   	push   %eax
-80105acd:	e8 de c6 ff ff       	call   801021b0 <ilock>
+80105079:	83 ec 0c             	sub    $0xc,%esp
+8010507c:	50                   	push   %eax
+8010507d:	e8 de c6 ff ff       	call   80101760 <ilock>
   if(ip->nlink < 1)
-80105ad2:	83 c4 10             	add    $0x10,%esp
-80105ad5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-80105ada:	0f 8e 23 01 00 00    	jle    80105c03 <sys_unlink+0x1d3>
+80105082:	83 c4 10             	add    $0x10,%esp
+80105085:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010508a:	0f 8e 23 01 00 00    	jle    801051b3 <sys_unlink+0x1d3>
   if(ip->type == T_DIR && !isdirempty(ip)){
-80105ae0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105ae5:	8d 7d d8             	lea    -0x28(%ebp),%edi
-80105ae8:	74 66                	je     80105b50 <sys_unlink+0x120>
+80105090:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105095:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105098:	74 66                	je     80105100 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-80105aea:	83 ec 04             	sub    $0x4,%esp
-80105aed:	6a 10                	push   $0x10
-80105aef:	6a 00                	push   $0x0
-80105af1:	57                   	push   %edi
-80105af2:	e8 c9 f5 ff ff       	call   801050c0 <memset>
+8010509a:	83 ec 04             	sub    $0x4,%esp
+8010509d:	6a 10                	push   $0x10
+8010509f:	6a 00                	push   $0x0
+801050a1:	57                   	push   %edi
+801050a2:	e8 c9 f5 ff ff       	call   80104670 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105af7:	6a 10                	push   $0x10
-80105af9:	ff 75 c4             	pushl  -0x3c(%ebp)
-80105afc:	57                   	push   %edi
-80105afd:	56                   	push   %esi
-80105afe:	e8 ad ca ff ff       	call   801025b0 <writei>
-80105b03:	83 c4 20             	add    $0x20,%esp
-80105b06:	83 f8 10             	cmp    $0x10,%eax
-80105b09:	0f 85 e7 00 00 00    	jne    80105bf6 <sys_unlink+0x1c6>
+801050a7:	6a 10                	push   $0x10
+801050a9:	ff 75 c4             	pushl  -0x3c(%ebp)
+801050ac:	57                   	push   %edi
+801050ad:	56                   	push   %esi
+801050ae:	e8 ad ca ff ff       	call   80101b60 <writei>
+801050b3:	83 c4 20             	add    $0x20,%esp
+801050b6:	83 f8 10             	cmp    $0x10,%eax
+801050b9:	0f 85 e7 00 00 00    	jne    801051a6 <sys_unlink+0x1c6>
   if(ip->type == T_DIR){
-80105b0f:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105b14:	0f 84 96 00 00 00    	je     80105bb0 <sys_unlink+0x180>
+801050bf:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801050c4:	0f 84 96 00 00 00    	je     80105160 <sys_unlink+0x180>
   iunlockput(dp);
-80105b1a:	83 ec 0c             	sub    $0xc,%esp
-80105b1d:	56                   	push   %esi
-80105b1e:	e8 2d c9 ff ff       	call   80102450 <iunlockput>
+801050ca:	83 ec 0c             	sub    $0xc,%esp
+801050cd:	56                   	push   %esi
+801050ce:	e8 2d c9 ff ff       	call   80101a00 <iunlockput>
   ip->nlink--;
-80105b23:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+801050d3:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80105b28:	89 1c 24             	mov    %ebx,(%esp)
-80105b2b:	e8 c0 c5 ff ff       	call   801020f0 <iupdate>
+801050d8:	89 1c 24             	mov    %ebx,(%esp)
+801050db:	e8 c0 c5 ff ff       	call   801016a0 <iupdate>
   iunlockput(ip);
-80105b30:	89 1c 24             	mov    %ebx,(%esp)
-80105b33:	e8 18 c9 ff ff       	call   80102450 <iunlockput>
+801050e0:	89 1c 24             	mov    %ebx,(%esp)
+801050e3:	e8 18 c9 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105b38:	e8 b3 dc ff ff       	call   801037f0 <end_op>
+801050e8:	e8 b3 dc ff ff       	call   80102da0 <end_op>
   return 0;
-80105b3d:	83 c4 10             	add    $0x10,%esp
-80105b40:	31 c0                	xor    %eax,%eax
+801050ed:	83 c4 10             	add    $0x10,%esp
+801050f0:	31 c0                	xor    %eax,%eax
 }
-80105b42:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b45:	5b                   	pop    %ebx
-80105b46:	5e                   	pop    %esi
-80105b47:	5f                   	pop    %edi
-80105b48:	5d                   	pop    %ebp
-80105b49:	c3                   	ret    
-80105b4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801050f2:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801050f5:	5b                   	pop    %ebx
+801050f6:	5e                   	pop    %esi
+801050f7:	5f                   	pop    %edi
+801050f8:	5d                   	pop    %ebp
+801050f9:	c3                   	ret    
+801050fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105b50:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105b54:	76 94                	jbe    80105aea <sys_unlink+0xba>
-80105b56:	ba 20 00 00 00       	mov    $0x20,%edx
-80105b5b:	eb 0b                	jmp    80105b68 <sys_unlink+0x138>
-80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
-80105b60:	83 c2 10             	add    $0x10,%edx
-80105b63:	39 53 58             	cmp    %edx,0x58(%ebx)
-80105b66:	76 82                	jbe    80105aea <sys_unlink+0xba>
+80105100:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105104:	76 94                	jbe    8010509a <sys_unlink+0xba>
+80105106:	ba 20 00 00 00       	mov    $0x20,%edx
+8010510b:	eb 0b                	jmp    80105118 <sys_unlink+0x138>
+8010510d:	8d 76 00             	lea    0x0(%esi),%esi
+80105110:	83 c2 10             	add    $0x10,%edx
+80105113:	39 53 58             	cmp    %edx,0x58(%ebx)
+80105116:	76 82                	jbe    8010509a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105b68:	6a 10                	push   $0x10
-80105b6a:	52                   	push   %edx
-80105b6b:	57                   	push   %edi
-80105b6c:	53                   	push   %ebx
-80105b6d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
-80105b70:	e8 3b c9 ff ff       	call   801024b0 <readi>
-80105b75:	83 c4 10             	add    $0x10,%esp
-80105b78:	8b 55 b4             	mov    -0x4c(%ebp),%edx
-80105b7b:	83 f8 10             	cmp    $0x10,%eax
-80105b7e:	75 69                	jne    80105be9 <sys_unlink+0x1b9>
+80105118:	6a 10                	push   $0x10
+8010511a:	52                   	push   %edx
+8010511b:	57                   	push   %edi
+8010511c:	53                   	push   %ebx
+8010511d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
+80105120:	e8 3b c9 ff ff       	call   80101a60 <readi>
+80105125:	83 c4 10             	add    $0x10,%esp
+80105128:	8b 55 b4             	mov    -0x4c(%ebp),%edx
+8010512b:	83 f8 10             	cmp    $0x10,%eax
+8010512e:	75 69                	jne    80105199 <sys_unlink+0x1b9>
     if(de.inum != 0)
-80105b80:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80105b85:	74 d9                	je     80105b60 <sys_unlink+0x130>
+80105130:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+80105135:	74 d9                	je     80105110 <sys_unlink+0x130>
     iunlockput(ip);
-80105b87:	83 ec 0c             	sub    $0xc,%esp
-80105b8a:	53                   	push   %ebx
-80105b8b:	e8 c0 c8 ff ff       	call   80102450 <iunlockput>
+80105137:	83 ec 0c             	sub    $0xc,%esp
+8010513a:	53                   	push   %ebx
+8010513b:	e8 c0 c8 ff ff       	call   80101a00 <iunlockput>
     goto bad;
-80105b90:	83 c4 10             	add    $0x10,%esp
-80105b93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105b97:	90                   	nop
+80105140:	83 c4 10             	add    $0x10,%esp
+80105143:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105147:	90                   	nop
   iunlockput(dp);
-80105b98:	83 ec 0c             	sub    $0xc,%esp
-80105b9b:	56                   	push   %esi
-80105b9c:	e8 af c8 ff ff       	call   80102450 <iunlockput>
+80105148:	83 ec 0c             	sub    $0xc,%esp
+8010514b:	56                   	push   %esi
+8010514c:	e8 af c8 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105ba1:	e8 4a dc ff ff       	call   801037f0 <end_op>
+80105151:	e8 4a dc ff ff       	call   80102da0 <end_op>
   return -1;
-80105ba6:	83 c4 10             	add    $0x10,%esp
-80105ba9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105bae:	eb 92                	jmp    80105b42 <sys_unlink+0x112>
+80105156:	83 c4 10             	add    $0x10,%esp
+80105159:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010515e:	eb 92                	jmp    801050f2 <sys_unlink+0x112>
     iupdate(dp);
-80105bb0:	83 ec 0c             	sub    $0xc,%esp
+80105160:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105bb3:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
+80105163:	66 83 6e 56 01       	subw   $0x1,0x56(%esi)
     iupdate(dp);
-80105bb8:	56                   	push   %esi
-80105bb9:	e8 32 c5 ff ff       	call   801020f0 <iupdate>
-80105bbe:	83 c4 10             	add    $0x10,%esp
-80105bc1:	e9 54 ff ff ff       	jmp    80105b1a <sys_unlink+0xea>
-80105bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bcd:	8d 76 00             	lea    0x0(%esi),%esi
+80105168:	56                   	push   %esi
+80105169:	e8 32 c5 ff ff       	call   801016a0 <iupdate>
+8010516e:	83 c4 10             	add    $0x10,%esp
+80105171:	e9 54 ff ff ff       	jmp    801050ca <sys_unlink+0xea>
+80105176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010517d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105bd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105bd5:	e9 68 ff ff ff       	jmp    80105b42 <sys_unlink+0x112>
+80105180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105185:	e9 68 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
     end_op();
-80105bda:	e8 11 dc ff ff       	call   801037f0 <end_op>
+8010518a:	e8 11 dc ff ff       	call   80102da0 <end_op>
     return -1;
-80105bdf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105be4:	e9 59 ff ff ff       	jmp    80105b42 <sys_unlink+0x112>
+8010518f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105194:	e9 59 ff ff ff       	jmp    801050f2 <sys_unlink+0x112>
       panic("isdirempty: readi");
-80105be9:	83 ec 0c             	sub    $0xc,%esp
-80105bec:	68 1c 83 10 80       	push   $0x8010831c
-80105bf1:	e8 9a a7 ff ff       	call   80100390 <panic>
+80105199:	83 ec 0c             	sub    $0xc,%esp
+8010519c:	68 38 78 10 80       	push   $0x80107838
+801051a1:	e8 ea b1 ff ff       	call   80100390 <panic>
     panic("unlink: writei");
-80105bf6:	83 ec 0c             	sub    $0xc,%esp
-80105bf9:	68 2e 83 10 80       	push   $0x8010832e
-80105bfe:	e8 8d a7 ff ff       	call   80100390 <panic>
+801051a6:	83 ec 0c             	sub    $0xc,%esp
+801051a9:	68 4a 78 10 80       	push   $0x8010784a
+801051ae:	e8 dd b1 ff ff       	call   80100390 <panic>
     panic("unlink: nlink < 1");
-80105c03:	83 ec 0c             	sub    $0xc,%esp
-80105c06:	68 0a 83 10 80       	push   $0x8010830a
-80105c0b:	e8 80 a7 ff ff       	call   80100390 <panic>
+801051b3:	83 ec 0c             	sub    $0xc,%esp
+801051b6:	68 26 78 10 80       	push   $0x80107826
+801051bb:	e8 d0 b1 ff ff       	call   80100390 <panic>
 
-80105c10 <sys_open>:
+801051c0 <sys_open>:
 
 int
 sys_open(void)
 {
-80105c10:	f3 0f 1e fb          	endbr32 
-80105c14:	55                   	push   %ebp
-80105c15:	89 e5                	mov    %esp,%ebp
-80105c17:	57                   	push   %edi
-80105c18:	56                   	push   %esi
+801051c0:	f3 0f 1e fb          	endbr32 
+801051c4:	55                   	push   %ebp
+801051c5:	89 e5                	mov    %esp,%ebp
+801051c7:	57                   	push   %edi
+801051c8:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80105c19:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801051c9:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-80105c1c:	53                   	push   %ebx
-80105c1d:	83 ec 24             	sub    $0x24,%esp
+801051cc:	53                   	push   %ebx
+801051cd:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-80105c20:	50                   	push   %eax
-80105c21:	6a 00                	push   $0x0
-80105c23:	e8 28 f8 ff ff       	call   80105450 <argstr>
-80105c28:	83 c4 10             	add    $0x10,%esp
-80105c2b:	85 c0                	test   %eax,%eax
-80105c2d:	0f 88 8a 00 00 00    	js     80105cbd <sys_open+0xad>
-80105c33:	83 ec 08             	sub    $0x8,%esp
-80105c36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105c39:	50                   	push   %eax
-80105c3a:	6a 01                	push   $0x1
-80105c3c:	e8 5f f7 ff ff       	call   801053a0 <argint>
-80105c41:	83 c4 10             	add    $0x10,%esp
-80105c44:	85 c0                	test   %eax,%eax
-80105c46:	78 75                	js     80105cbd <sys_open+0xad>
+801051d0:	50                   	push   %eax
+801051d1:	6a 00                	push   $0x0
+801051d3:	e8 28 f8 ff ff       	call   80104a00 <argstr>
+801051d8:	83 c4 10             	add    $0x10,%esp
+801051db:	85 c0                	test   %eax,%eax
+801051dd:	0f 88 8a 00 00 00    	js     8010526d <sys_open+0xad>
+801051e3:	83 ec 08             	sub    $0x8,%esp
+801051e6:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801051e9:	50                   	push   %eax
+801051ea:	6a 01                	push   $0x1
+801051ec:	e8 5f f7 ff ff       	call   80104950 <argint>
+801051f1:	83 c4 10             	add    $0x10,%esp
+801051f4:	85 c0                	test   %eax,%eax
+801051f6:	78 75                	js     8010526d <sys_open+0xad>
     return -1;
 
   begin_op();
-80105c48:	e8 33 db ff ff       	call   80103780 <begin_op>
+801051f8:	e8 33 db ff ff       	call   80102d30 <begin_op>
 
   if(omode & O_CREATE){
-80105c4d:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-80105c51:	75 75                	jne    80105cc8 <sys_open+0xb8>
+801051fd:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+80105201:	75 75                	jne    80105278 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-80105c53:	83 ec 0c             	sub    $0xc,%esp
-80105c56:	ff 75 e0             	pushl  -0x20(%ebp)
-80105c59:	e8 22 ce ff ff       	call   80102a80 <namei>
-80105c5e:	83 c4 10             	add    $0x10,%esp
-80105c61:	89 c6                	mov    %eax,%esi
-80105c63:	85 c0                	test   %eax,%eax
-80105c65:	74 7e                	je     80105ce5 <sys_open+0xd5>
+80105203:	83 ec 0c             	sub    $0xc,%esp
+80105206:	ff 75 e0             	pushl  -0x20(%ebp)
+80105209:	e8 22 ce ff ff       	call   80102030 <namei>
+8010520e:	83 c4 10             	add    $0x10,%esp
+80105211:	89 c6                	mov    %eax,%esi
+80105213:	85 c0                	test   %eax,%eax
+80105215:	74 7e                	je     80105295 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105c67:	83 ec 0c             	sub    $0xc,%esp
-80105c6a:	50                   	push   %eax
-80105c6b:	e8 40 c5 ff ff       	call   801021b0 <ilock>
+80105217:	83 ec 0c             	sub    $0xc,%esp
+8010521a:	50                   	push   %eax
+8010521b:	e8 40 c5 ff ff       	call   80101760 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105c70:	83 c4 10             	add    $0x10,%esp
-80105c73:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105c78:	0f 84 c2 00 00 00    	je     80105d40 <sys_open+0x130>
+80105220:	83 c4 10             	add    $0x10,%esp
+80105223:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+80105228:	0f 84 c2 00 00 00    	je     801052f0 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-80105c7e:	e8 cd bb ff ff       	call   80101850 <filealloc>
-80105c83:	89 c7                	mov    %eax,%edi
-80105c85:	85 c0                	test   %eax,%eax
-80105c87:	74 23                	je     80105cac <sys_open+0x9c>
+8010522e:	e8 cd bb ff ff       	call   80100e00 <filealloc>
+80105233:	89 c7                	mov    %eax,%edi
+80105235:	85 c0                	test   %eax,%eax
+80105237:	74 23                	je     8010525c <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105c89:	e8 22 e7 ff ff       	call   801043b0 <myproc>
+80105239:	e8 22 e7 ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80105c8e:	31 db                	xor    %ebx,%ebx
+8010523e:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105c90:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105c94:	85 d2                	test   %edx,%edx
-80105c96:	74 60                	je     80105cf8 <sys_open+0xe8>
+80105240:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105244:	85 d2                	test   %edx,%edx
+80105246:	74 60                	je     801052a8 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105c98:	83 c3 01             	add    $0x1,%ebx
-80105c9b:	83 fb 10             	cmp    $0x10,%ebx
-80105c9e:	75 f0                	jne    80105c90 <sys_open+0x80>
+80105248:	83 c3 01             	add    $0x1,%ebx
+8010524b:	83 fb 10             	cmp    $0x10,%ebx
+8010524e:	75 f0                	jne    80105240 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105ca0:	83 ec 0c             	sub    $0xc,%esp
-80105ca3:	57                   	push   %edi
-80105ca4:	e8 67 bc ff ff       	call   80101910 <fileclose>
-80105ca9:	83 c4 10             	add    $0x10,%esp
+80105250:	83 ec 0c             	sub    $0xc,%esp
+80105253:	57                   	push   %edi
+80105254:	e8 67 bc ff ff       	call   80100ec0 <fileclose>
+80105259:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-80105cac:	83 ec 0c             	sub    $0xc,%esp
-80105caf:	56                   	push   %esi
-80105cb0:	e8 9b c7 ff ff       	call   80102450 <iunlockput>
+8010525c:	83 ec 0c             	sub    $0xc,%esp
+8010525f:	56                   	push   %esi
+80105260:	e8 9b c7 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105cb5:	e8 36 db ff ff       	call   801037f0 <end_op>
+80105265:	e8 36 db ff ff       	call   80102da0 <end_op>
     return -1;
-80105cba:	83 c4 10             	add    $0x10,%esp
-80105cbd:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105cc2:	eb 6d                	jmp    80105d31 <sys_open+0x121>
-80105cc4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010526a:	83 c4 10             	add    $0x10,%esp
+8010526d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105272:	eb 6d                	jmp    801052e1 <sys_open+0x121>
+80105274:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-80105cc8:	83 ec 0c             	sub    $0xc,%esp
-80105ccb:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80105cce:	31 c9                	xor    %ecx,%ecx
-80105cd0:	ba 02 00 00 00       	mov    $0x2,%edx
-80105cd5:	6a 00                	push   $0x0
-80105cd7:	e8 24 f8 ff ff       	call   80105500 <create>
+80105278:	83 ec 0c             	sub    $0xc,%esp
+8010527b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010527e:	31 c9                	xor    %ecx,%ecx
+80105280:	ba 02 00 00 00       	mov    $0x2,%edx
+80105285:	6a 00                	push   $0x0
+80105287:	e8 24 f8 ff ff       	call   80104ab0 <create>
     if(ip == 0){
-80105cdc:	83 c4 10             	add    $0x10,%esp
+8010528c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-80105cdf:	89 c6                	mov    %eax,%esi
+8010528f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-80105ce1:	85 c0                	test   %eax,%eax
-80105ce3:	75 99                	jne    80105c7e <sys_open+0x6e>
+80105291:	85 c0                	test   %eax,%eax
+80105293:	75 99                	jne    8010522e <sys_open+0x6e>
       end_op();
-80105ce5:	e8 06 db ff ff       	call   801037f0 <end_op>
+80105295:	e8 06 db ff ff       	call   80102da0 <end_op>
       return -1;
-80105cea:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105cef:	eb 40                	jmp    80105d31 <sys_open+0x121>
-80105cf1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010529a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010529f:	eb 40                	jmp    801052e1 <sys_open+0x121>
+801052a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-80105cf8:	83 ec 0c             	sub    $0xc,%esp
+801052a8:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-80105cfb:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+801052ab:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-80105cff:	56                   	push   %esi
-80105d00:	e8 8b c5 ff ff       	call   80102290 <iunlock>
+801052af:	56                   	push   %esi
+801052b0:	e8 8b c5 ff ff       	call   80101840 <iunlock>
   end_op();
-80105d05:	e8 e6 da ff ff       	call   801037f0 <end_op>
+801052b5:	e8 e6 da ff ff       	call   80102da0 <end_op>
 
   f->type = FD_INODE;
-80105d0a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+801052ba:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-80105d10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+801052c0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105d13:	83 c4 10             	add    $0x10,%esp
+801052c3:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-80105d16:	89 77 10             	mov    %esi,0x10(%edi)
+801052c6:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-80105d19:	89 d0                	mov    %edx,%eax
+801052c9:	89 d0                	mov    %edx,%eax
   f->off = 0;
-80105d1b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+801052cb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-80105d22:	f7 d0                	not    %eax
-80105d24:	83 e0 01             	and    $0x1,%eax
+801052d2:	f7 d0                	not    %eax
+801052d4:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105d27:	83 e2 03             	and    $0x3,%edx
+801052d7:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-80105d2a:	88 47 08             	mov    %al,0x8(%edi)
+801052da:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105d2d:	0f 95 47 09          	setne  0x9(%edi)
+801052dd:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-80105d31:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105d34:	89 d8                	mov    %ebx,%eax
-80105d36:	5b                   	pop    %ebx
-80105d37:	5e                   	pop    %esi
-80105d38:	5f                   	pop    %edi
-80105d39:	5d                   	pop    %ebp
-80105d3a:	c3                   	ret    
-80105d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105d3f:	90                   	nop
+801052e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052e4:	89 d8                	mov    %ebx,%eax
+801052e6:	5b                   	pop    %ebx
+801052e7:	5e                   	pop    %esi
+801052e8:	5f                   	pop    %edi
+801052e9:	5d                   	pop    %ebp
+801052ea:	c3                   	ret    
+801052eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801052ef:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105d40:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105d43:	85 c9                	test   %ecx,%ecx
-80105d45:	0f 84 33 ff ff ff    	je     80105c7e <sys_open+0x6e>
-80105d4b:	e9 5c ff ff ff       	jmp    80105cac <sys_open+0x9c>
+801052f0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+801052f3:	85 c9                	test   %ecx,%ecx
+801052f5:	0f 84 33 ff ff ff    	je     8010522e <sys_open+0x6e>
+801052fb:	e9 5c ff ff ff       	jmp    8010525c <sys_open+0x9c>
 
-80105d50 <sys_mkdir>:
+80105300 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105d50:	f3 0f 1e fb          	endbr32 
-80105d54:	55                   	push   %ebp
-80105d55:	89 e5                	mov    %esp,%ebp
-80105d57:	83 ec 18             	sub    $0x18,%esp
+80105300:	f3 0f 1e fb          	endbr32 
+80105304:	55                   	push   %ebp
+80105305:	89 e5                	mov    %esp,%ebp
+80105307:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105d5a:	e8 21 da ff ff       	call   80103780 <begin_op>
+8010530a:	e8 21 da ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-80105d5f:	83 ec 08             	sub    $0x8,%esp
-80105d62:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105d65:	50                   	push   %eax
-80105d66:	6a 00                	push   $0x0
-80105d68:	e8 e3 f6 ff ff       	call   80105450 <argstr>
-80105d6d:	83 c4 10             	add    $0x10,%esp
-80105d70:	85 c0                	test   %eax,%eax
-80105d72:	78 34                	js     80105da8 <sys_mkdir+0x58>
-80105d74:	83 ec 0c             	sub    $0xc,%esp
-80105d77:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105d7a:	31 c9                	xor    %ecx,%ecx
-80105d7c:	ba 01 00 00 00       	mov    $0x1,%edx
-80105d81:	6a 00                	push   $0x0
-80105d83:	e8 78 f7 ff ff       	call   80105500 <create>
-80105d88:	83 c4 10             	add    $0x10,%esp
-80105d8b:	85 c0                	test   %eax,%eax
-80105d8d:	74 19                	je     80105da8 <sys_mkdir+0x58>
+8010530f:	83 ec 08             	sub    $0x8,%esp
+80105312:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105315:	50                   	push   %eax
+80105316:	6a 00                	push   $0x0
+80105318:	e8 e3 f6 ff ff       	call   80104a00 <argstr>
+8010531d:	83 c4 10             	add    $0x10,%esp
+80105320:	85 c0                	test   %eax,%eax
+80105322:	78 34                	js     80105358 <sys_mkdir+0x58>
+80105324:	83 ec 0c             	sub    $0xc,%esp
+80105327:	8b 45 f4             	mov    -0xc(%ebp),%eax
+8010532a:	31 c9                	xor    %ecx,%ecx
+8010532c:	ba 01 00 00 00       	mov    $0x1,%edx
+80105331:	6a 00                	push   $0x0
+80105333:	e8 78 f7 ff ff       	call   80104ab0 <create>
+80105338:	83 c4 10             	add    $0x10,%esp
+8010533b:	85 c0                	test   %eax,%eax
+8010533d:	74 19                	je     80105358 <sys_mkdir+0x58>
     end_op();
     return -1;
   }
   iunlockput(ip);
-80105d8f:	83 ec 0c             	sub    $0xc,%esp
-80105d92:	50                   	push   %eax
-80105d93:	e8 b8 c6 ff ff       	call   80102450 <iunlockput>
+8010533f:	83 ec 0c             	sub    $0xc,%esp
+80105342:	50                   	push   %eax
+80105343:	e8 b8 c6 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105d98:	e8 53 da ff ff       	call   801037f0 <end_op>
+80105348:	e8 53 da ff ff       	call   80102da0 <end_op>
   return 0;
-80105d9d:	83 c4 10             	add    $0x10,%esp
-80105da0:	31 c0                	xor    %eax,%eax
+8010534d:	83 c4 10             	add    $0x10,%esp
+80105350:	31 c0                	xor    %eax,%eax
 }
-80105da2:	c9                   	leave  
-80105da3:	c3                   	ret    
-80105da4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105352:	c9                   	leave  
+80105353:	c3                   	ret    
+80105354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     end_op();
-80105da8:	e8 43 da ff ff       	call   801037f0 <end_op>
+80105358:	e8 43 da ff ff       	call   80102da0 <end_op>
     return -1;
-80105dad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010535d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105db2:	c9                   	leave  
-80105db3:	c3                   	ret    
-80105db4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105dbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105dbf:	90                   	nop
+80105362:	c9                   	leave  
+80105363:	c3                   	ret    
+80105364:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010536b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010536f:	90                   	nop
 
-80105dc0 <sys_mknod>:
+80105370 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105dc0:	f3 0f 1e fb          	endbr32 
-80105dc4:	55                   	push   %ebp
-80105dc5:	89 e5                	mov    %esp,%ebp
-80105dc7:	83 ec 18             	sub    $0x18,%esp
+80105370:	f3 0f 1e fb          	endbr32 
+80105374:	55                   	push   %ebp
+80105375:	89 e5                	mov    %esp,%ebp
+80105377:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-80105dca:	e8 b1 d9 ff ff       	call   80103780 <begin_op>
+8010537a:	e8 b1 d9 ff ff       	call   80102d30 <begin_op>
   if((argstr(0, &path)) < 0 ||
-80105dcf:	83 ec 08             	sub    $0x8,%esp
-80105dd2:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105dd5:	50                   	push   %eax
-80105dd6:	6a 00                	push   $0x0
-80105dd8:	e8 73 f6 ff ff       	call   80105450 <argstr>
-80105ddd:	83 c4 10             	add    $0x10,%esp
-80105de0:	85 c0                	test   %eax,%eax
-80105de2:	78 64                	js     80105e48 <sys_mknod+0x88>
+8010537f:	83 ec 08             	sub    $0x8,%esp
+80105382:	8d 45 ec             	lea    -0x14(%ebp),%eax
+80105385:	50                   	push   %eax
+80105386:	6a 00                	push   $0x0
+80105388:	e8 73 f6 ff ff       	call   80104a00 <argstr>
+8010538d:	83 c4 10             	add    $0x10,%esp
+80105390:	85 c0                	test   %eax,%eax
+80105392:	78 64                	js     801053f8 <sys_mknod+0x88>
      argint(1, &major) < 0 ||
-80105de4:	83 ec 08             	sub    $0x8,%esp
-80105de7:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105dea:	50                   	push   %eax
-80105deb:	6a 01                	push   $0x1
-80105ded:	e8 ae f5 ff ff       	call   801053a0 <argint>
+80105394:	83 ec 08             	sub    $0x8,%esp
+80105397:	8d 45 f0             	lea    -0x10(%ebp),%eax
+8010539a:	50                   	push   %eax
+8010539b:	6a 01                	push   $0x1
+8010539d:	e8 ae f5 ff ff       	call   80104950 <argint>
   if((argstr(0, &path)) < 0 ||
-80105df2:	83 c4 10             	add    $0x10,%esp
-80105df5:	85 c0                	test   %eax,%eax
-80105df7:	78 4f                	js     80105e48 <sys_mknod+0x88>
+801053a2:	83 c4 10             	add    $0x10,%esp
+801053a5:	85 c0                	test   %eax,%eax
+801053a7:	78 4f                	js     801053f8 <sys_mknod+0x88>
      argint(2, &minor) < 0 ||
-80105df9:	83 ec 08             	sub    $0x8,%esp
-80105dfc:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105dff:	50                   	push   %eax
-80105e00:	6a 02                	push   $0x2
-80105e02:	e8 99 f5 ff ff       	call   801053a0 <argint>
+801053a9:	83 ec 08             	sub    $0x8,%esp
+801053ac:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801053af:	50                   	push   %eax
+801053b0:	6a 02                	push   $0x2
+801053b2:	e8 99 f5 ff ff       	call   80104950 <argint>
      argint(1, &major) < 0 ||
-80105e07:	83 c4 10             	add    $0x10,%esp
-80105e0a:	85 c0                	test   %eax,%eax
-80105e0c:	78 3a                	js     80105e48 <sys_mknod+0x88>
+801053b7:	83 c4 10             	add    $0x10,%esp
+801053ba:	85 c0                	test   %eax,%eax
+801053bc:	78 3a                	js     801053f8 <sys_mknod+0x88>
      (ip = create(path, T_DEV, major, minor)) == 0){
-80105e0e:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-80105e12:	83 ec 0c             	sub    $0xc,%esp
-80105e15:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-80105e19:	ba 03 00 00 00       	mov    $0x3,%edx
-80105e1e:	50                   	push   %eax
-80105e1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
-80105e22:	e8 d9 f6 ff ff       	call   80105500 <create>
+801053be:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+801053c2:	83 ec 0c             	sub    $0xc,%esp
+801053c5:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+801053c9:	ba 03 00 00 00       	mov    $0x3,%edx
+801053ce:	50                   	push   %eax
+801053cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
+801053d2:	e8 d9 f6 ff ff       	call   80104ab0 <create>
      argint(2, &minor) < 0 ||
-80105e27:	83 c4 10             	add    $0x10,%esp
-80105e2a:	85 c0                	test   %eax,%eax
-80105e2c:	74 1a                	je     80105e48 <sys_mknod+0x88>
+801053d7:	83 c4 10             	add    $0x10,%esp
+801053da:	85 c0                	test   %eax,%eax
+801053dc:	74 1a                	je     801053f8 <sys_mknod+0x88>
     end_op();
     return -1;
   }
   iunlockput(ip);
-80105e2e:	83 ec 0c             	sub    $0xc,%esp
-80105e31:	50                   	push   %eax
-80105e32:	e8 19 c6 ff ff       	call   80102450 <iunlockput>
+801053de:	83 ec 0c             	sub    $0xc,%esp
+801053e1:	50                   	push   %eax
+801053e2:	e8 19 c6 ff ff       	call   80101a00 <iunlockput>
   end_op();
-80105e37:	e8 b4 d9 ff ff       	call   801037f0 <end_op>
+801053e7:	e8 b4 d9 ff ff       	call   80102da0 <end_op>
   return 0;
-80105e3c:	83 c4 10             	add    $0x10,%esp
-80105e3f:	31 c0                	xor    %eax,%eax
+801053ec:	83 c4 10             	add    $0x10,%esp
+801053ef:	31 c0                	xor    %eax,%eax
 }
-80105e41:	c9                   	leave  
-80105e42:	c3                   	ret    
-80105e43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105e47:	90                   	nop
+801053f1:	c9                   	leave  
+801053f2:	c3                   	ret    
+801053f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801053f7:	90                   	nop
     end_op();
-80105e48:	e8 a3 d9 ff ff       	call   801037f0 <end_op>
+801053f8:	e8 a3 d9 ff ff       	call   80102da0 <end_op>
     return -1;
-80105e4d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801053fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105e52:	c9                   	leave  
-80105e53:	c3                   	ret    
-80105e54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105e5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105e5f:	90                   	nop
+80105402:	c9                   	leave  
+80105403:	c3                   	ret    
+80105404:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010540b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010540f:	90                   	nop
 
-80105e60 <sys_chdir>:
+80105410 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105e60:	f3 0f 1e fb          	endbr32 
-80105e64:	55                   	push   %ebp
-80105e65:	89 e5                	mov    %esp,%ebp
-80105e67:	56                   	push   %esi
-80105e68:	53                   	push   %ebx
-80105e69:	83 ec 10             	sub    $0x10,%esp
+80105410:	f3 0f 1e fb          	endbr32 
+80105414:	55                   	push   %ebp
+80105415:	89 e5                	mov    %esp,%ebp
+80105417:	56                   	push   %esi
+80105418:	53                   	push   %ebx
+80105419:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105e6c:	e8 3f e5 ff ff       	call   801043b0 <myproc>
-80105e71:	89 c6                	mov    %eax,%esi
+8010541c:	e8 3f e5 ff ff       	call   80103960 <myproc>
+80105421:	89 c6                	mov    %eax,%esi
   
   begin_op();
-80105e73:	e8 08 d9 ff ff       	call   80103780 <begin_op>
+80105423:	e8 08 d9 ff ff       	call   80102d30 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105e78:	83 ec 08             	sub    $0x8,%esp
-80105e7b:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105e7e:	50                   	push   %eax
-80105e7f:	6a 00                	push   $0x0
-80105e81:	e8 ca f5 ff ff       	call   80105450 <argstr>
-80105e86:	83 c4 10             	add    $0x10,%esp
-80105e89:	85 c0                	test   %eax,%eax
-80105e8b:	78 73                	js     80105f00 <sys_chdir+0xa0>
-80105e8d:	83 ec 0c             	sub    $0xc,%esp
-80105e90:	ff 75 f4             	pushl  -0xc(%ebp)
-80105e93:	e8 e8 cb ff ff       	call   80102a80 <namei>
-80105e98:	83 c4 10             	add    $0x10,%esp
-80105e9b:	89 c3                	mov    %eax,%ebx
-80105e9d:	85 c0                	test   %eax,%eax
-80105e9f:	74 5f                	je     80105f00 <sys_chdir+0xa0>
+80105428:	83 ec 08             	sub    $0x8,%esp
+8010542b:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010542e:	50                   	push   %eax
+8010542f:	6a 00                	push   $0x0
+80105431:	e8 ca f5 ff ff       	call   80104a00 <argstr>
+80105436:	83 c4 10             	add    $0x10,%esp
+80105439:	85 c0                	test   %eax,%eax
+8010543b:	78 73                	js     801054b0 <sys_chdir+0xa0>
+8010543d:	83 ec 0c             	sub    $0xc,%esp
+80105440:	ff 75 f4             	pushl  -0xc(%ebp)
+80105443:	e8 e8 cb ff ff       	call   80102030 <namei>
+80105448:	83 c4 10             	add    $0x10,%esp
+8010544b:	89 c3                	mov    %eax,%ebx
+8010544d:	85 c0                	test   %eax,%eax
+8010544f:	74 5f                	je     801054b0 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-80105ea1:	83 ec 0c             	sub    $0xc,%esp
-80105ea4:	50                   	push   %eax
-80105ea5:	e8 06 c3 ff ff       	call   801021b0 <ilock>
+80105451:	83 ec 0c             	sub    $0xc,%esp
+80105454:	50                   	push   %eax
+80105455:	e8 06 c3 ff ff       	call   80101760 <ilock>
   if(ip->type != T_DIR){
-80105eaa:	83 c4 10             	add    $0x10,%esp
-80105ead:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105eb2:	75 2c                	jne    80105ee0 <sys_chdir+0x80>
+8010545a:	83 c4 10             	add    $0x10,%esp
+8010545d:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105462:	75 2c                	jne    80105490 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105eb4:	83 ec 0c             	sub    $0xc,%esp
-80105eb7:	53                   	push   %ebx
-80105eb8:	e8 d3 c3 ff ff       	call   80102290 <iunlock>
+80105464:	83 ec 0c             	sub    $0xc,%esp
+80105467:	53                   	push   %ebx
+80105468:	e8 d3 c3 ff ff       	call   80101840 <iunlock>
   iput(curproc->cwd);
-80105ebd:	58                   	pop    %eax
-80105ebe:	ff 76 68             	pushl  0x68(%esi)
-80105ec1:	e8 1a c4 ff ff       	call   801022e0 <iput>
+8010546d:	58                   	pop    %eax
+8010546e:	ff 76 68             	pushl  0x68(%esi)
+80105471:	e8 1a c4 ff ff       	call   80101890 <iput>
   end_op();
-80105ec6:	e8 25 d9 ff ff       	call   801037f0 <end_op>
+80105476:	e8 25 d9 ff ff       	call   80102da0 <end_op>
   curproc->cwd = ip;
-80105ecb:	89 5e 68             	mov    %ebx,0x68(%esi)
+8010547b:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-80105ece:	83 c4 10             	add    $0x10,%esp
-80105ed1:	31 c0                	xor    %eax,%eax
+8010547e:	83 c4 10             	add    $0x10,%esp
+80105481:	31 c0                	xor    %eax,%eax
 }
-80105ed3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105ed6:	5b                   	pop    %ebx
-80105ed7:	5e                   	pop    %esi
-80105ed8:	5d                   	pop    %ebp
-80105ed9:	c3                   	ret    
-80105eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105483:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105486:	5b                   	pop    %ebx
+80105487:	5e                   	pop    %esi
+80105488:	5d                   	pop    %ebp
+80105489:	c3                   	ret    
+8010548a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(ip);
-80105ee0:	83 ec 0c             	sub    $0xc,%esp
-80105ee3:	53                   	push   %ebx
-80105ee4:	e8 67 c5 ff ff       	call   80102450 <iunlockput>
+80105490:	83 ec 0c             	sub    $0xc,%esp
+80105493:	53                   	push   %ebx
+80105494:	e8 67 c5 ff ff       	call   80101a00 <iunlockput>
     end_op();
-80105ee9:	e8 02 d9 ff ff       	call   801037f0 <end_op>
+80105499:	e8 02 d9 ff ff       	call   80102da0 <end_op>
     return -1;
-80105eee:	83 c4 10             	add    $0x10,%esp
-80105ef1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105ef6:	eb db                	jmp    80105ed3 <sys_chdir+0x73>
-80105ef8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105eff:	90                   	nop
+8010549e:	83 c4 10             	add    $0x10,%esp
+801054a1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054a6:	eb db                	jmp    80105483 <sys_chdir+0x73>
+801054a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801054af:	90                   	nop
     end_op();
-80105f00:	e8 eb d8 ff ff       	call   801037f0 <end_op>
+801054b0:	e8 eb d8 ff ff       	call   80102da0 <end_op>
     return -1;
-80105f05:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105f0a:	eb c7                	jmp    80105ed3 <sys_chdir+0x73>
-80105f0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801054b5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054ba:	eb c7                	jmp    80105483 <sys_chdir+0x73>
+801054bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105f10 <sys_exec>:
+801054c0 <sys_exec>:
 
 int
 sys_exec(void)
 {
-80105f10:	f3 0f 1e fb          	endbr32 
-80105f14:	55                   	push   %ebp
-80105f15:	89 e5                	mov    %esp,%ebp
-80105f17:	57                   	push   %edi
-80105f18:	56                   	push   %esi
+801054c0:	f3 0f 1e fb          	endbr32 
+801054c4:	55                   	push   %ebp
+801054c5:	89 e5                	mov    %esp,%ebp
+801054c7:	57                   	push   %edi
+801054c8:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105f19:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+801054c9:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-80105f1f:	53                   	push   %ebx
-80105f20:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+801054cf:	53                   	push   %ebx
+801054d0:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-80105f26:	50                   	push   %eax
-80105f27:	6a 00                	push   $0x0
-80105f29:	e8 22 f5 ff ff       	call   80105450 <argstr>
-80105f2e:	83 c4 10             	add    $0x10,%esp
-80105f31:	85 c0                	test   %eax,%eax
-80105f33:	0f 88 8b 00 00 00    	js     80105fc4 <sys_exec+0xb4>
-80105f39:	83 ec 08             	sub    $0x8,%esp
-80105f3c:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-80105f42:	50                   	push   %eax
-80105f43:	6a 01                	push   $0x1
-80105f45:	e8 56 f4 ff ff       	call   801053a0 <argint>
-80105f4a:	83 c4 10             	add    $0x10,%esp
-80105f4d:	85 c0                	test   %eax,%eax
-80105f4f:	78 73                	js     80105fc4 <sys_exec+0xb4>
+801054d6:	50                   	push   %eax
+801054d7:	6a 00                	push   $0x0
+801054d9:	e8 22 f5 ff ff       	call   80104a00 <argstr>
+801054de:	83 c4 10             	add    $0x10,%esp
+801054e1:	85 c0                	test   %eax,%eax
+801054e3:	0f 88 8b 00 00 00    	js     80105574 <sys_exec+0xb4>
+801054e9:	83 ec 08             	sub    $0x8,%esp
+801054ec:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+801054f2:	50                   	push   %eax
+801054f3:	6a 01                	push   $0x1
+801054f5:	e8 56 f4 ff ff       	call   80104950 <argint>
+801054fa:	83 c4 10             	add    $0x10,%esp
+801054fd:	85 c0                	test   %eax,%eax
+801054ff:	78 73                	js     80105574 <sys_exec+0xb4>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-80105f51:	83 ec 04             	sub    $0x4,%esp
-80105f54:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105501:	83 ec 04             	sub    $0x4,%esp
+80105504:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
   for(i=0;; i++){
-80105f5a:	31 db                	xor    %ebx,%ebx
+8010550a:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-80105f5c:	68 80 00 00 00       	push   $0x80
-80105f61:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
-80105f67:	6a 00                	push   $0x0
-80105f69:	50                   	push   %eax
-80105f6a:	e8 51 f1 ff ff       	call   801050c0 <memset>
-80105f6f:	83 c4 10             	add    $0x10,%esp
-80105f72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010550c:	68 80 00 00 00       	push   $0x80
+80105511:	8d bd 64 ff ff ff    	lea    -0x9c(%ebp),%edi
+80105517:	6a 00                	push   $0x0
+80105519:	50                   	push   %eax
+8010551a:	e8 51 f1 ff ff       	call   80104670 <memset>
+8010551f:	83 c4 10             	add    $0x10,%esp
+80105522:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105f78:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105f7e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
-80105f85:	83 ec 08             	sub    $0x8,%esp
-80105f88:	57                   	push   %edi
-80105f89:	01 f0                	add    %esi,%eax
-80105f8b:	50                   	push   %eax
-80105f8c:	e8 6f f3 ff ff       	call   80105300 <fetchint>
-80105f91:	83 c4 10             	add    $0x10,%esp
-80105f94:	85 c0                	test   %eax,%eax
-80105f96:	78 2c                	js     80105fc4 <sys_exec+0xb4>
+80105528:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+8010552e:	8d 34 9d 00 00 00 00 	lea    0x0(,%ebx,4),%esi
+80105535:	83 ec 08             	sub    $0x8,%esp
+80105538:	57                   	push   %edi
+80105539:	01 f0                	add    %esi,%eax
+8010553b:	50                   	push   %eax
+8010553c:	e8 6f f3 ff ff       	call   801048b0 <fetchint>
+80105541:	83 c4 10             	add    $0x10,%esp
+80105544:	85 c0                	test   %eax,%eax
+80105546:	78 2c                	js     80105574 <sys_exec+0xb4>
       return -1;
     if(uarg == 0){
-80105f98:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-80105f9e:	85 c0                	test   %eax,%eax
-80105fa0:	74 36                	je     80105fd8 <sys_exec+0xc8>
+80105548:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+8010554e:	85 c0                	test   %eax,%eax
+80105550:	74 36                	je     80105588 <sys_exec+0xc8>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105fa2:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
-80105fa8:	83 ec 08             	sub    $0x8,%esp
-80105fab:	8d 14 31             	lea    (%ecx,%esi,1),%edx
-80105fae:	52                   	push   %edx
-80105faf:	50                   	push   %eax
-80105fb0:	e8 8b f3 ff ff       	call   80105340 <fetchstr>
-80105fb5:	83 c4 10             	add    $0x10,%esp
-80105fb8:	85 c0                	test   %eax,%eax
-80105fba:	78 08                	js     80105fc4 <sys_exec+0xb4>
+80105552:	8d 8d 68 ff ff ff    	lea    -0x98(%ebp),%ecx
+80105558:	83 ec 08             	sub    $0x8,%esp
+8010555b:	8d 14 31             	lea    (%ecx,%esi,1),%edx
+8010555e:	52                   	push   %edx
+8010555f:	50                   	push   %eax
+80105560:	e8 8b f3 ff ff       	call   801048f0 <fetchstr>
+80105565:	83 c4 10             	add    $0x10,%esp
+80105568:	85 c0                	test   %eax,%eax
+8010556a:	78 08                	js     80105574 <sys_exec+0xb4>
   for(i=0;; i++){
-80105fbc:	83 c3 01             	add    $0x1,%ebx
+8010556c:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-80105fbf:	83 fb 20             	cmp    $0x20,%ebx
-80105fc2:	75 b4                	jne    80105f78 <sys_exec+0x68>
+8010556f:	83 fb 20             	cmp    $0x20,%ebx
+80105572:	75 b4                	jne    80105528 <sys_exec+0x68>
       return -1;
   }
   return exec(path, argv);
 }
-80105fc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105574:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-80105fc7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105577:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105fcc:	5b                   	pop    %ebx
-80105fcd:	5e                   	pop    %esi
-80105fce:	5f                   	pop    %edi
-80105fcf:	5d                   	pop    %ebp
-80105fd0:	c3                   	ret    
-80105fd1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010557c:	5b                   	pop    %ebx
+8010557d:	5e                   	pop    %esi
+8010557e:	5f                   	pop    %edi
+8010557f:	5d                   	pop    %ebp
+80105580:	c3                   	ret    
+80105581:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return exec(path, argv);
-80105fd8:	83 ec 08             	sub    $0x8,%esp
-80105fdb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
+80105588:	83 ec 08             	sub    $0x8,%esp
+8010558b:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
       argv[i] = 0;
-80105fe1:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105fe8:	00 00 00 00 
+80105591:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+80105598:	00 00 00 00 
   return exec(path, argv);
-80105fec:	50                   	push   %eax
-80105fed:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
-80105ff3:	e8 d8 b4 ff ff       	call   801014d0 <exec>
-80105ff8:	83 c4 10             	add    $0x10,%esp
-}
-80105ffb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ffe:	5b                   	pop    %ebx
-80105fff:	5e                   	pop    %esi
-80106000:	5f                   	pop    %edi
-80106001:	5d                   	pop    %ebp
-80106002:	c3                   	ret    
-80106003:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010600a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010559c:	50                   	push   %eax
+8010559d:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
+801055a3:	e8 d8 b4 ff ff       	call   80100a80 <exec>
+801055a8:	83 c4 10             	add    $0x10,%esp
+}
+801055ab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801055ae:	5b                   	pop    %ebx
+801055af:	5e                   	pop    %esi
+801055b0:	5f                   	pop    %edi
+801055b1:	5d                   	pop    %ebp
+801055b2:	c3                   	ret    
+801055b3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801055ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106010 <sys_pipe>:
+801055c0 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-80106010:	f3 0f 1e fb          	endbr32 
-80106014:	55                   	push   %ebp
-80106015:	89 e5                	mov    %esp,%ebp
-80106017:	57                   	push   %edi
-80106018:	56                   	push   %esi
+801055c0:	f3 0f 1e fb          	endbr32 
+801055c4:	55                   	push   %ebp
+801055c5:	89 e5                	mov    %esp,%ebp
+801055c7:	57                   	push   %edi
+801055c8:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80106019:	8d 45 dc             	lea    -0x24(%ebp),%eax
+801055c9:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-8010601c:	53                   	push   %ebx
-8010601d:	83 ec 20             	sub    $0x20,%esp
+801055cc:	53                   	push   %ebx
+801055cd:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80106020:	6a 08                	push   $0x8
-80106022:	50                   	push   %eax
-80106023:	6a 00                	push   $0x0
-80106025:	e8 c6 f3 ff ff       	call   801053f0 <argptr>
-8010602a:	83 c4 10             	add    $0x10,%esp
-8010602d:	85 c0                	test   %eax,%eax
-8010602f:	78 4e                	js     8010607f <sys_pipe+0x6f>
+801055d0:	6a 08                	push   $0x8
+801055d2:	50                   	push   %eax
+801055d3:	6a 00                	push   $0x0
+801055d5:	e8 c6 f3 ff ff       	call   801049a0 <argptr>
+801055da:	83 c4 10             	add    $0x10,%esp
+801055dd:	85 c0                	test   %eax,%eax
+801055df:	78 4e                	js     8010562f <sys_pipe+0x6f>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-80106031:	83 ec 08             	sub    $0x8,%esp
-80106034:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80106037:	50                   	push   %eax
-80106038:	8d 45 e0             	lea    -0x20(%ebp),%eax
-8010603b:	50                   	push   %eax
-8010603c:	e8 ff dd ff ff       	call   80103e40 <pipealloc>
-80106041:	83 c4 10             	add    $0x10,%esp
-80106044:	85 c0                	test   %eax,%eax
-80106046:	78 37                	js     8010607f <sys_pipe+0x6f>
+801055e1:	83 ec 08             	sub    $0x8,%esp
+801055e4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+801055e7:	50                   	push   %eax
+801055e8:	8d 45 e0             	lea    -0x20(%ebp),%eax
+801055eb:	50                   	push   %eax
+801055ec:	e8 ff dd ff ff       	call   801033f0 <pipealloc>
+801055f1:	83 c4 10             	add    $0x10,%esp
+801055f4:	85 c0                	test   %eax,%eax
+801055f6:	78 37                	js     8010562f <sys_pipe+0x6f>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80106048:	8b 7d e0             	mov    -0x20(%ebp),%edi
+801055f8:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-8010604b:	31 db                	xor    %ebx,%ebx
+801055fb:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-8010604d:	e8 5e e3 ff ff       	call   801043b0 <myproc>
+801055fd:	e8 5e e3 ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80106052:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105602:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd] == 0){
-80106058:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-8010605c:	85 f6                	test   %esi,%esi
-8010605e:	74 30                	je     80106090 <sys_pipe+0x80>
+80105608:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+8010560c:	85 f6                	test   %esi,%esi
+8010560e:	74 30                	je     80105640 <sys_pipe+0x80>
   for(fd = 0; fd < NOFILE; fd++){
-80106060:	83 c3 01             	add    $0x1,%ebx
-80106063:	83 fb 10             	cmp    $0x10,%ebx
-80106066:	75 f0                	jne    80106058 <sys_pipe+0x48>
+80105610:	83 c3 01             	add    $0x1,%ebx
+80105613:	83 fb 10             	cmp    $0x10,%ebx
+80105616:	75 f0                	jne    80105608 <sys_pipe+0x48>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80106068:	83 ec 0c             	sub    $0xc,%esp
-8010606b:	ff 75 e0             	pushl  -0x20(%ebp)
-8010606e:	e8 9d b8 ff ff       	call   80101910 <fileclose>
+80105618:	83 ec 0c             	sub    $0xc,%esp
+8010561b:	ff 75 e0             	pushl  -0x20(%ebp)
+8010561e:	e8 9d b8 ff ff       	call   80100ec0 <fileclose>
     fileclose(wf);
-80106073:	58                   	pop    %eax
-80106074:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106077:	e8 94 b8 ff ff       	call   80101910 <fileclose>
-    return -1;
-8010607c:	83 c4 10             	add    $0x10,%esp
-8010607f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80106084:	eb 5b                	jmp    801060e1 <sys_pipe+0xd1>
-80106086:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010608d:	8d 76 00             	lea    0x0(%esi),%esi
+80105623:	58                   	pop    %eax
+80105624:	ff 75 e4             	pushl  -0x1c(%ebp)
+80105627:	e8 94 b8 ff ff       	call   80100ec0 <fileclose>
+    return -1;
+8010562c:	83 c4 10             	add    $0x10,%esp
+8010562f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105634:	eb 5b                	jmp    80105691 <sys_pipe+0xd1>
+80105636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010563d:	8d 76 00             	lea    0x0(%esi),%esi
       curproc->ofile[fd] = f;
-80106090:	8d 73 08             	lea    0x8(%ebx),%esi
-80106093:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105640:	8d 73 08             	lea    0x8(%ebx),%esi
+80105643:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80106097:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105647:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010609a:	e8 11 e3 ff ff       	call   801043b0 <myproc>
+8010564a:	e8 11 e3 ff ff       	call   80103960 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010609f:	31 d2                	xor    %edx,%edx
-801060a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010564f:	31 d2                	xor    %edx,%edx
+80105651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-801060a8:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-801060ac:	85 c9                	test   %ecx,%ecx
-801060ae:	74 20                	je     801060d0 <sys_pipe+0xc0>
+80105658:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010565c:	85 c9                	test   %ecx,%ecx
+8010565e:	74 20                	je     80105680 <sys_pipe+0xc0>
   for(fd = 0; fd < NOFILE; fd++){
-801060b0:	83 c2 01             	add    $0x1,%edx
-801060b3:	83 fa 10             	cmp    $0x10,%edx
-801060b6:	75 f0                	jne    801060a8 <sys_pipe+0x98>
+80105660:	83 c2 01             	add    $0x1,%edx
+80105663:	83 fa 10             	cmp    $0x10,%edx
+80105666:	75 f0                	jne    80105658 <sys_pipe+0x98>
       myproc()->ofile[fd0] = 0;
-801060b8:	e8 f3 e2 ff ff       	call   801043b0 <myproc>
-801060bd:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-801060c4:	00 
-801060c5:	eb a1                	jmp    80106068 <sys_pipe+0x58>
-801060c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801060ce:	66 90                	xchg   %ax,%ax
+80105668:	e8 f3 e2 ff ff       	call   80103960 <myproc>
+8010566d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+80105674:	00 
+80105675:	eb a1                	jmp    80105618 <sys_pipe+0x58>
+80105677:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010567e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-801060d0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+80105680:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-801060d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801060d7:	89 18                	mov    %ebx,(%eax)
+80105684:	8b 45 dc             	mov    -0x24(%ebp),%eax
+80105687:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-801060d9:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801060dc:	89 50 04             	mov    %edx,0x4(%eax)
+80105689:	8b 45 dc             	mov    -0x24(%ebp),%eax
+8010568c:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-801060df:	31 c0                	xor    %eax,%eax
+8010568f:	31 c0                	xor    %eax,%eax
 }
-801060e1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801060e4:	5b                   	pop    %ebx
-801060e5:	5e                   	pop    %esi
-801060e6:	5f                   	pop    %edi
-801060e7:	5d                   	pop    %ebp
-801060e8:	c3                   	ret    
-801060e9:	66 90                	xchg   %ax,%ax
-801060eb:	66 90                	xchg   %ax,%ax
-801060ed:	66 90                	xchg   %ax,%ax
-801060ef:	90                   	nop
-
-801060f0 <sys_fork>:
+80105691:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105694:	5b                   	pop    %ebx
+80105695:	5e                   	pop    %esi
+80105696:	5f                   	pop    %edi
+80105697:	5d                   	pop    %ebp
+80105698:	c3                   	ret    
+80105699:	66 90                	xchg   %ax,%ax
+8010569b:	66 90                	xchg   %ax,%ax
+8010569d:	66 90                	xchg   %ax,%ax
+8010569f:	90                   	nop
 
-#define EOF '\0'
+801056a0 <sys_fork>:
+#include "mmu.h"
+#include "proc.h"
 
 int
 sys_fork(void)
 {
-801060f0:	f3 0f 1e fb          	endbr32 
+801056a0:	f3 0f 1e fb          	endbr32 
   return fork();
-801060f4:	e9 67 e4 ff ff       	jmp    80104560 <fork>
-801060f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056a4:	e9 67 e4 ff ff       	jmp    80103b10 <fork>
+801056a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106100 <sys_exit>:
+801056b0 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-80106100:	f3 0f 1e fb          	endbr32 
-80106104:	55                   	push   %ebp
-80106105:	89 e5                	mov    %esp,%ebp
-80106107:	83 ec 08             	sub    $0x8,%esp
+801056b0:	f3 0f 1e fb          	endbr32 
+801056b4:	55                   	push   %ebp
+801056b5:	89 e5                	mov    %esp,%ebp
+801056b7:	83 ec 08             	sub    $0x8,%esp
   exit();
-8010610a:	e8 d1 e6 ff ff       	call   801047e0 <exit>
+801056ba:	e8 d1 e6 ff ff       	call   80103d90 <exit>
   return 0;  // not reached
 }
-8010610f:	31 c0                	xor    %eax,%eax
-80106111:	c9                   	leave  
-80106112:	c3                   	ret    
-80106113:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010611a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801056bf:	31 c0                	xor    %eax,%eax
+801056c1:	c9                   	leave  
+801056c2:	c3                   	ret    
+801056c3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106120 <sys_wait>:
+801056d0 <sys_wait>:
 
 int
 sys_wait(void)
 {
-80106120:	f3 0f 1e fb          	endbr32 
+801056d0:	f3 0f 1e fb          	endbr32 
   return wait();
-80106124:	e9 07 e9 ff ff       	jmp    80104a30 <wait>
-80106129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801056d4:	e9 07 e9 ff ff       	jmp    80103fe0 <wait>
+801056d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80106130 <sys_kill>:
+801056e0 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-80106130:	f3 0f 1e fb          	endbr32 
-80106134:	55                   	push   %ebp
-80106135:	89 e5                	mov    %esp,%ebp
-80106137:	83 ec 20             	sub    $0x20,%esp
+801056e0:	f3 0f 1e fb          	endbr32 
+801056e4:	55                   	push   %ebp
+801056e5:	89 e5                	mov    %esp,%ebp
+801056e7:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-8010613a:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010613d:	50                   	push   %eax
-8010613e:	6a 00                	push   $0x0
-80106140:	e8 5b f2 ff ff       	call   801053a0 <argint>
-80106145:	83 c4 10             	add    $0x10,%esp
-80106148:	85 c0                	test   %eax,%eax
-8010614a:	78 14                	js     80106160 <sys_kill+0x30>
+801056ea:	8d 45 f4             	lea    -0xc(%ebp),%eax
+801056ed:	50                   	push   %eax
+801056ee:	6a 00                	push   $0x0
+801056f0:	e8 5b f2 ff ff       	call   80104950 <argint>
+801056f5:	83 c4 10             	add    $0x10,%esp
+801056f8:	85 c0                	test   %eax,%eax
+801056fa:	78 14                	js     80105710 <sys_kill+0x30>
     return -1;
   return kill(pid);
-8010614c:	83 ec 0c             	sub    $0xc,%esp
-8010614f:	ff 75 f4             	pushl  -0xc(%ebp)
-80106152:	e8 39 ea ff ff       	call   80104b90 <kill>
-80106157:	83 c4 10             	add    $0x10,%esp
-}
-8010615a:	c9                   	leave  
-8010615b:	c3                   	ret    
-8010615c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106160:	c9                   	leave  
-    return -1;
-80106161:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106166:	c3                   	ret    
-80106167:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010616e:	66 90                	xchg   %ax,%ax
+801056fc:	83 ec 0c             	sub    $0xc,%esp
+801056ff:	ff 75 f4             	pushl  -0xc(%ebp)
+80105702:	e8 39 ea ff ff       	call   80104140 <kill>
+80105707:	83 c4 10             	add    $0x10,%esp
+}
+8010570a:	c9                   	leave  
+8010570b:	c3                   	ret    
+8010570c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105710:	c9                   	leave  
+    return -1;
+80105711:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105716:	c3                   	ret    
+80105717:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010571e:	66 90                	xchg   %ax,%ax
 
-80106170 <sys_getpid>:
+80105720 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80106170:	f3 0f 1e fb          	endbr32 
-80106174:	55                   	push   %ebp
-80106175:	89 e5                	mov    %esp,%ebp
-80106177:	83 ec 08             	sub    $0x8,%esp
+80105720:	f3 0f 1e fb          	endbr32 
+80105724:	55                   	push   %ebp
+80105725:	89 e5                	mov    %esp,%ebp
+80105727:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-8010617a:	e8 31 e2 ff ff       	call   801043b0 <myproc>
-8010617f:	8b 40 10             	mov    0x10(%eax),%eax
+8010572a:	e8 31 e2 ff ff       	call   80103960 <myproc>
+8010572f:	8b 40 10             	mov    0x10(%eax),%eax
 }
-80106182:	c9                   	leave  
-80106183:	c3                   	ret    
-80106184:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010618b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010618f:	90                   	nop
+80105732:	c9                   	leave  
+80105733:	c3                   	ret    
+80105734:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010573b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010573f:	90                   	nop
 
-80106190 <sys_sbrk>:
+80105740 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80106190:	f3 0f 1e fb          	endbr32 
-80106194:	55                   	push   %ebp
-80106195:	89 e5                	mov    %esp,%ebp
-80106197:	53                   	push   %ebx
+80105740:	f3 0f 1e fb          	endbr32 
+80105744:	55                   	push   %ebp
+80105745:	89 e5                	mov    %esp,%ebp
+80105747:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80106198:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105748:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-8010619b:	83 ec 1c             	sub    $0x1c,%esp
+8010574b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010619e:	50                   	push   %eax
-8010619f:	6a 00                	push   $0x0
-801061a1:	e8 fa f1 ff ff       	call   801053a0 <argint>
-801061a6:	83 c4 10             	add    $0x10,%esp
-801061a9:	85 c0                	test   %eax,%eax
-801061ab:	78 23                	js     801061d0 <sys_sbrk+0x40>
+8010574e:	50                   	push   %eax
+8010574f:	6a 00                	push   $0x0
+80105751:	e8 fa f1 ff ff       	call   80104950 <argint>
+80105756:	83 c4 10             	add    $0x10,%esp
+80105759:	85 c0                	test   %eax,%eax
+8010575b:	78 23                	js     80105780 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-801061ad:	e8 fe e1 ff ff       	call   801043b0 <myproc>
+8010575d:	e8 fe e1 ff ff       	call   80103960 <myproc>
   if(growproc(n) < 0)
-801061b2:	83 ec 0c             	sub    $0xc,%esp
+80105762:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-801061b5:	8b 18                	mov    (%eax),%ebx
+80105765:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-801061b7:	ff 75 f4             	pushl  -0xc(%ebp)
-801061ba:	e8 21 e3 ff ff       	call   801044e0 <growproc>
-801061bf:	83 c4 10             	add    $0x10,%esp
-801061c2:	85 c0                	test   %eax,%eax
-801061c4:	78 0a                	js     801061d0 <sys_sbrk+0x40>
+80105767:	ff 75 f4             	pushl  -0xc(%ebp)
+8010576a:	e8 21 e3 ff ff       	call   80103a90 <growproc>
+8010576f:	83 c4 10             	add    $0x10,%esp
+80105772:	85 c0                	test   %eax,%eax
+80105774:	78 0a                	js     80105780 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-801061c6:	89 d8                	mov    %ebx,%eax
-801061c8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801061cb:	c9                   	leave  
-801061cc:	c3                   	ret    
-801061cd:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-801061d0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801061d5:	eb ef                	jmp    801061c6 <sys_sbrk+0x36>
-801061d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801061de:	66 90                	xchg   %ax,%ax
+80105776:	89 d8                	mov    %ebx,%eax
+80105778:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010577b:	c9                   	leave  
+8010577c:	c3                   	ret    
+8010577d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105780:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105785:	eb ef                	jmp    80105776 <sys_sbrk+0x36>
+80105787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010578e:	66 90                	xchg   %ax,%ax
 
-801061e0 <sys_sleep>:
+80105790 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-801061e0:	f3 0f 1e fb          	endbr32 
-801061e4:	55                   	push   %ebp
-801061e5:	89 e5                	mov    %esp,%ebp
-801061e7:	53                   	push   %ebx
+80105790:	f3 0f 1e fb          	endbr32 
+80105794:	55                   	push   %ebp
+80105795:	89 e5                	mov    %esp,%ebp
+80105797:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-801061e8:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105798:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-801061eb:	83 ec 1c             	sub    $0x1c,%esp
+8010579b:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-801061ee:	50                   	push   %eax
-801061ef:	6a 00                	push   $0x0
-801061f1:	e8 aa f1 ff ff       	call   801053a0 <argint>
-801061f6:	83 c4 10             	add    $0x10,%esp
-801061f9:	85 c0                	test   %eax,%eax
-801061fb:	0f 88 86 00 00 00    	js     80106287 <sys_sleep+0xa7>
+8010579e:	50                   	push   %eax
+8010579f:	6a 00                	push   $0x0
+801057a1:	e8 aa f1 ff ff       	call   80104950 <argint>
+801057a6:	83 c4 10             	add    $0x10,%esp
+801057a9:	85 c0                	test   %eax,%eax
+801057ab:	0f 88 86 00 00 00    	js     80105837 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-80106201:	83 ec 0c             	sub    $0xc,%esp
-80106204:	68 60 66 11 80       	push   $0x80116660
-80106209:	e8 a2 ed ff ff       	call   80104fb0 <acquire>
+801057b1:	83 ec 0c             	sub    $0xc,%esp
+801057b4:	68 60 4c 11 80       	push   $0x80114c60
+801057b9:	e8 a2 ed ff ff       	call   80104560 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-8010620e:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801057be:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-80106211:	8b 1d a0 6e 11 80    	mov    0x80116ea0,%ebx
+801057c1:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
   while(ticks - ticks0 < n){
-80106217:	83 c4 10             	add    $0x10,%esp
-8010621a:	85 d2                	test   %edx,%edx
-8010621c:	75 23                	jne    80106241 <sys_sleep+0x61>
-8010621e:	eb 50                	jmp    80106270 <sys_sleep+0x90>
+801057c7:	83 c4 10             	add    $0x10,%esp
+801057ca:	85 d2                	test   %edx,%edx
+801057cc:	75 23                	jne    801057f1 <sys_sleep+0x61>
+801057ce:	eb 50                	jmp    80105820 <sys_sleep+0x90>
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-80106220:	83 ec 08             	sub    $0x8,%esp
-80106223:	68 60 66 11 80       	push   $0x80116660
-80106228:	68 a0 6e 11 80       	push   $0x80116ea0
-8010622d:	e8 3e e7 ff ff       	call   80104970 <sleep>
+801057d0:	83 ec 08             	sub    $0x8,%esp
+801057d3:	68 60 4c 11 80       	push   $0x80114c60
+801057d8:	68 a0 54 11 80       	push   $0x801154a0
+801057dd:	e8 3e e7 ff ff       	call   80103f20 <sleep>
   while(ticks - ticks0 < n){
-80106232:	a1 a0 6e 11 80       	mov    0x80116ea0,%eax
-80106237:	83 c4 10             	add    $0x10,%esp
-8010623a:	29 d8                	sub    %ebx,%eax
-8010623c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010623f:	73 2f                	jae    80106270 <sys_sleep+0x90>
+801057e2:	a1 a0 54 11 80       	mov    0x801154a0,%eax
+801057e7:	83 c4 10             	add    $0x10,%esp
+801057ea:	29 d8                	sub    %ebx,%eax
+801057ec:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+801057ef:	73 2f                	jae    80105820 <sys_sleep+0x90>
     if(myproc()->killed){
-80106241:	e8 6a e1 ff ff       	call   801043b0 <myproc>
-80106246:	8b 40 24             	mov    0x24(%eax),%eax
-80106249:	85 c0                	test   %eax,%eax
-8010624b:	74 d3                	je     80106220 <sys_sleep+0x40>
+801057f1:	e8 6a e1 ff ff       	call   80103960 <myproc>
+801057f6:	8b 40 24             	mov    0x24(%eax),%eax
+801057f9:	85 c0                	test   %eax,%eax
+801057fb:	74 d3                	je     801057d0 <sys_sleep+0x40>
       release(&tickslock);
-8010624d:	83 ec 0c             	sub    $0xc,%esp
-80106250:	68 60 66 11 80       	push   $0x80116660
-80106255:	e8 16 ee ff ff       	call   80105070 <release>
+801057fd:	83 ec 0c             	sub    $0xc,%esp
+80105800:	68 60 4c 11 80       	push   $0x80114c60
+80105805:	e8 16 ee ff ff       	call   80104620 <release>
   }
   release(&tickslock);
   return 0;
 }
-8010625a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010580a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-8010625d:	83 c4 10             	add    $0x10,%esp
-80106260:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010580d:	83 c4 10             	add    $0x10,%esp
+80105810:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106265:	c9                   	leave  
-80106266:	c3                   	ret    
-80106267:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010626e:	66 90                	xchg   %ax,%ax
+80105815:	c9                   	leave  
+80105816:	c3                   	ret    
+80105817:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010581e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-80106270:	83 ec 0c             	sub    $0xc,%esp
-80106273:	68 60 66 11 80       	push   $0x80116660
-80106278:	e8 f3 ed ff ff       	call   80105070 <release>
+80105820:	83 ec 0c             	sub    $0xc,%esp
+80105823:	68 60 4c 11 80       	push   $0x80114c60
+80105828:	e8 f3 ed ff ff       	call   80104620 <release>
   return 0;
-8010627d:	83 c4 10             	add    $0x10,%esp
-80106280:	31 c0                	xor    %eax,%eax
+8010582d:	83 c4 10             	add    $0x10,%esp
+80105830:	31 c0                	xor    %eax,%eax
 }
-80106282:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80106285:	c9                   	leave  
-80106286:	c3                   	ret    
+80105832:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105835:	c9                   	leave  
+80105836:	c3                   	ret    
     return -1;
-80106287:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010628c:	eb f4                	jmp    80106282 <sys_sleep+0xa2>
-8010628e:	66 90                	xchg   %ax,%ax
+80105837:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010583c:	eb f4                	jmp    80105832 <sys_sleep+0xa2>
+8010583e:	66 90                	xchg   %ax,%ax
 
-80106290 <sys_uptime>:
+80105840 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80106290:	f3 0f 1e fb          	endbr32 
-80106294:	55                   	push   %ebp
-80106295:	89 e5                	mov    %esp,%ebp
-80106297:	53                   	push   %ebx
-80106298:	83 ec 10             	sub    $0x10,%esp
+80105840:	f3 0f 1e fb          	endbr32 
+80105844:	55                   	push   %ebp
+80105845:	89 e5                	mov    %esp,%ebp
+80105847:	53                   	push   %ebx
+80105848:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-8010629b:	68 60 66 11 80       	push   $0x80116660
-801062a0:	e8 0b ed ff ff       	call   80104fb0 <acquire>
+8010584b:	68 60 4c 11 80       	push   $0x80114c60
+80105850:	e8 0b ed ff ff       	call   80104560 <acquire>
   xticks = ticks;
-801062a5:	8b 1d a0 6e 11 80    	mov    0x80116ea0,%ebx
+80105855:	8b 1d a0 54 11 80    	mov    0x801154a0,%ebx
   release(&tickslock);
-801062ab:	c7 04 24 60 66 11 80 	movl   $0x80116660,(%esp)
-801062b2:	e8 b9 ed ff ff       	call   80105070 <release>
+8010585b:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+80105862:	e8 b9 ed ff ff       	call   80104620 <release>
   return xticks;
 }
-801062b7:	89 d8                	mov    %ebx,%eax
-801062b9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801062bc:	c9                   	leave  
-801062bd:	c3                   	ret    
-801062be:	66 90                	xchg   %ax,%ax
-
-801062c0 <sys_history>:
-
-///sys call added
-int sys_history(void)
-{
-801062c0:	f3 0f 1e fb          	endbr32 
-801062c4:	55                   	push   %ebp
-801062c5:	89 e5                	mov    %esp,%ebp
-801062c7:	83 ec 20             	sub    $0x20,%esp
-  int history_id;
-  char* buffer;
-  if( argint(1,&history_id) == -1 )
-801062ca:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801062cd:	50                   	push   %eax
-801062ce:	6a 01                	push   $0x1
-801062d0:	e8 cb f0 ff ff       	call   801053a0 <argint>
-801062d5:	83 c4 10             	add    $0x10,%esp
-801062d8:	83 f8 ff             	cmp    $0xffffffff,%eax
-801062db:	74 33                	je     80106310 <sys_history+0x50>
-    return -1;
-  if((argptr(0,(char**)&buffer,history_id) == -1 ))
-801062dd:	83 ec 04             	sub    $0x4,%esp
-801062e0:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801062e3:	ff 75 f0             	pushl  -0x10(%ebp)
-801062e6:	50                   	push   %eax
-801062e7:	6a 00                	push   $0x0
-801062e9:	e8 02 f1 ff ff       	call   801053f0 <argptr>
-801062ee:	83 c4 10             	add    $0x10,%esp
-801062f1:	83 f8 ff             	cmp    $0xffffffff,%eax
-801062f4:	74 1a                	je     80106310 <sys_history+0x50>
-    return -1;
-  return history(buffer,history_id);
-801062f6:	83 ec 08             	sub    $0x8,%esp
-801062f9:	ff 75 f0             	pushl  -0x10(%ebp)
-801062fc:	ff 75 f4             	pushl  -0xc(%ebp)
-801062ff:	e8 ec b0 ff ff       	call   801013f0 <history>
-80106304:	83 c4 10             	add    $0x10,%esp
-}
-80106307:	c9                   	leave  
-80106308:	c3                   	ret    
-80106309:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106310:	c9                   	leave  
-    return -1;
-80106311:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106316:	c3                   	ret    
+80105867:	89 d8                	mov    %ebx,%eax
+80105869:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010586c:	c9                   	leave  
+8010586d:	c3                   	ret    
 
-80106317 <alltraps>:
+8010586e <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-80106317:	1e                   	push   %ds
+8010586e:	1e                   	push   %ds
   pushl %es
-80106318:	06                   	push   %es
+8010586f:	06                   	push   %es
   pushl %fs
-80106319:	0f a0                	push   %fs
+80105870:	0f a0                	push   %fs
   pushl %gs
-8010631b:	0f a8                	push   %gs
+80105872:	0f a8                	push   %gs
   pushal
-8010631d:	60                   	pusha  
+80105874:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-8010631e:	66 b8 10 00          	mov    $0x10,%ax
+80105875:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80106322:	8e d8                	mov    %eax,%ds
+80105879:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-80106324:	8e c0                	mov    %eax,%es
+8010587b:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-80106326:	54                   	push   %esp
+8010587d:	54                   	push   %esp
   call trap
-80106327:	e8 c4 00 00 00       	call   801063f0 <trap>
+8010587e:	e8 cd 00 00 00       	call   80105950 <trap>
   addl $4, %esp
-8010632c:	83 c4 04             	add    $0x4,%esp
+80105883:	83 c4 04             	add    $0x4,%esp
 
-8010632f <trapret>:
+80105886 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-8010632f:	61                   	popa   
+80105886:	61                   	popa   
   popl %gs
-80106330:	0f a9                	pop    %gs
+80105887:	0f a9                	pop    %gs
   popl %fs
-80106332:	0f a1                	pop    %fs
+80105889:	0f a1                	pop    %fs
   popl %es
-80106334:	07                   	pop    %es
+8010588b:	07                   	pop    %es
   popl %ds
-80106335:	1f                   	pop    %ds
+8010588c:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-80106336:	83 c4 08             	add    $0x8,%esp
+8010588d:	83 c4 08             	add    $0x8,%esp
   iret
-80106339:	cf                   	iret   
-8010633a:	66 90                	xchg   %ax,%ax
-8010633c:	66 90                	xchg   %ax,%ax
-8010633e:	66 90                	xchg   %ax,%ax
+80105890:	cf                   	iret   
+80105891:	66 90                	xchg   %ax,%ax
+80105893:	66 90                	xchg   %ax,%ax
+80105895:	66 90                	xchg   %ax,%ax
+80105897:	66 90                	xchg   %ax,%ax
+80105899:	66 90                	xchg   %ax,%ax
+8010589b:	66 90                	xchg   %ax,%ax
+8010589d:	66 90                	xchg   %ax,%ax
+8010589f:	90                   	nop
 
-80106340 <tvinit>:
+801058a0 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-80106340:	f3 0f 1e fb          	endbr32 
-80106344:	55                   	push   %ebp
+801058a0:	f3 0f 1e fb          	endbr32 
+801058a4:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-80106345:	31 c0                	xor    %eax,%eax
+801058a5:	31 c0                	xor    %eax,%eax
 {
-80106347:	89 e5                	mov    %esp,%ebp
-80106349:	83 ec 08             	sub    $0x8,%esp
-8010634c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058a7:	89 e5                	mov    %esp,%ebp
+801058a9:	83 ec 08             	sub    $0x8,%esp
+801058ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80106350:	8b 14 85 08 b0 10 80 	mov    -0x7fef4ff8(,%eax,4),%edx
-80106357:	c7 04 c5 a2 66 11 80 	movl   $0x8e000008,-0x7fee995e(,%eax,8)
-8010635e:	08 00 00 8e 
-80106362:	66 89 14 c5 a0 66 11 	mov    %dx,-0x7fee9960(,%eax,8)
-80106369:	80 
-8010636a:	c1 ea 10             	shr    $0x10,%edx
-8010636d:	66 89 14 c5 a6 66 11 	mov    %dx,-0x7fee995a(,%eax,8)
-80106374:	80 
+801058b0:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+801058b7:	c7 04 c5 a2 4c 11 80 	movl   $0x8e000008,-0x7feeb35e(,%eax,8)
+801058be:	08 00 00 8e 
+801058c2:	66 89 14 c5 a0 4c 11 	mov    %dx,-0x7feeb360(,%eax,8)
+801058c9:	80 
+801058ca:	c1 ea 10             	shr    $0x10,%edx
+801058cd:	66 89 14 c5 a6 4c 11 	mov    %dx,-0x7feeb35a(,%eax,8)
+801058d4:	80 
   for(i = 0; i < 256; i++)
-80106375:	83 c0 01             	add    $0x1,%eax
-80106378:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010637d:	75 d1                	jne    80106350 <tvinit+0x10>
+801058d5:	83 c0 01             	add    $0x1,%eax
+801058d8:	3d 00 01 00 00       	cmp    $0x100,%eax
+801058dd:	75 d1                	jne    801058b0 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-8010637f:	83 ec 08             	sub    $0x8,%esp
+801058df:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80106382:	a1 08 b1 10 80       	mov    0x8010b108,%eax
-80106387:	c7 05 a2 68 11 80 08 	movl   $0xef000008,0x801168a2
-8010638e:	00 00 ef 
+801058e2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+801058e7:	c7 05 a2 4e 11 80 08 	movl   $0xef000008,0x80114ea2
+801058ee:	00 00 ef 
   initlock(&tickslock, "time");
-80106391:	68 3d 83 10 80       	push   $0x8010833d
-80106396:	68 60 66 11 80       	push   $0x80116660
+801058f1:	68 59 78 10 80       	push   $0x80107859
+801058f6:	68 60 4c 11 80       	push   $0x80114c60
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-8010639b:	66 a3 a0 68 11 80    	mov    %ax,0x801168a0
-801063a1:	c1 e8 10             	shr    $0x10,%eax
-801063a4:	66 a3 a6 68 11 80    	mov    %ax,0x801168a6
+801058fb:	66 a3 a0 4e 11 80    	mov    %ax,0x80114ea0
+80105901:	c1 e8 10             	shr    $0x10,%eax
+80105904:	66 a3 a6 4e 11 80    	mov    %ax,0x80114ea6
   initlock(&tickslock, "time");
-801063aa:	e8 81 ea ff ff       	call   80104e30 <initlock>
+8010590a:	e8 d1 ea ff ff       	call   801043e0 <initlock>
 }
-801063af:	83 c4 10             	add    $0x10,%esp
-801063b2:	c9                   	leave  
-801063b3:	c3                   	ret    
-801063b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801063bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801063bf:	90                   	nop
+8010590f:	83 c4 10             	add    $0x10,%esp
+80105912:	c9                   	leave  
+80105913:	c3                   	ret    
+80105914:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010591b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010591f:	90                   	nop
 
-801063c0 <idtinit>:
+80105920 <idtinit>:
 
 void
 idtinit(void)
 {
-801063c0:	f3 0f 1e fb          	endbr32 
-801063c4:	55                   	push   %ebp
+80105920:	f3 0f 1e fb          	endbr32 
+80105924:	55                   	push   %ebp
   pd[0] = size-1;
-801063c5:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801063ca:	89 e5                	mov    %esp,%ebp
-801063cc:	83 ec 10             	sub    $0x10,%esp
-801063cf:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105925:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+8010592a:	89 e5                	mov    %esp,%ebp
+8010592c:	83 ec 10             	sub    $0x10,%esp
+8010592f:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-801063d3:	b8 a0 66 11 80       	mov    $0x801166a0,%eax
-801063d8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105933:	b8 a0 4c 11 80       	mov    $0x80114ca0,%eax
+80105938:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-801063dc:	c1 e8 10             	shr    $0x10,%eax
-801063df:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+8010593c:	c1 e8 10             	shr    $0x10,%eax
+8010593f:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-801063e3:	8d 45 fa             	lea    -0x6(%ebp),%eax
-801063e6:	0f 01 18             	lidtl  (%eax)
+80105943:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105946:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-801063e9:	c9                   	leave  
-801063ea:	c3                   	ret    
-801063eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801063ef:	90                   	nop
+80105949:	c9                   	leave  
+8010594a:	c3                   	ret    
+8010594b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010594f:	90                   	nop
 
-801063f0 <trap>:
+80105950 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-801063f0:	f3 0f 1e fb          	endbr32 
-801063f4:	55                   	push   %ebp
-801063f5:	89 e5                	mov    %esp,%ebp
-801063f7:	57                   	push   %edi
-801063f8:	56                   	push   %esi
-801063f9:	53                   	push   %ebx
-801063fa:	83 ec 1c             	sub    $0x1c,%esp
-801063fd:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105950:	f3 0f 1e fb          	endbr32 
+80105954:	55                   	push   %ebp
+80105955:	89 e5                	mov    %esp,%ebp
+80105957:	57                   	push   %edi
+80105958:	56                   	push   %esi
+80105959:	53                   	push   %ebx
+8010595a:	83 ec 1c             	sub    $0x1c,%esp
+8010595d:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-80106400:	8b 43 30             	mov    0x30(%ebx),%eax
-80106403:	83 f8 40             	cmp    $0x40,%eax
-80106406:	0f 84 bc 01 00 00    	je     801065c8 <trap+0x1d8>
+80105960:	8b 43 30             	mov    0x30(%ebx),%eax
+80105963:	83 f8 40             	cmp    $0x40,%eax
+80105966:	0f 84 bc 01 00 00    	je     80105b28 <trap+0x1d8>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-8010640c:	83 e8 20             	sub    $0x20,%eax
-8010640f:	83 f8 1f             	cmp    $0x1f,%eax
-80106412:	77 08                	ja     8010641c <trap+0x2c>
-80106414:	3e ff 24 85 e4 83 10 	notrack jmp *-0x7fef7c1c(,%eax,4)
-8010641b:	80 
+8010596c:	83 e8 20             	sub    $0x20,%eax
+8010596f:	83 f8 1f             	cmp    $0x1f,%eax
+80105972:	77 08                	ja     8010597c <trap+0x2c>
+80105974:	3e ff 24 85 00 79 10 	notrack jmp *-0x7fef8700(,%eax,4)
+8010597b:	80 
     lapiceoi();
     break;
 
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
-8010641c:	e8 8f df ff ff       	call   801043b0 <myproc>
-80106421:	8b 7b 38             	mov    0x38(%ebx),%edi
-80106424:	85 c0                	test   %eax,%eax
-80106426:	0f 84 eb 01 00 00    	je     80106617 <trap+0x227>
-8010642c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80106430:	0f 84 e1 01 00 00    	je     80106617 <trap+0x227>
+8010597c:	e8 df df ff ff       	call   80103960 <myproc>
+80105981:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105984:	85 c0                	test   %eax,%eax
+80105986:	0f 84 eb 01 00 00    	je     80105b77 <trap+0x227>
+8010598c:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105990:	0f 84 e1 01 00 00    	je     80105b77 <trap+0x227>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-80106436:	0f 20 d1             	mov    %cr2,%ecx
-80106439:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105996:	0f 20 d1             	mov    %cr2,%ecx
+80105999:	89 4d d8             	mov    %ecx,-0x28(%ebp)
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
               tf->trapno, cpuid(), tf->eip, rcr2());
       panic("trap");
     }
     // In user space, assume process misbehaved.
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010643c:	e8 4f df ff ff       	call   80104390 <cpuid>
-80106441:	8b 73 30             	mov    0x30(%ebx),%esi
-80106444:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106447:	8b 43 34             	mov    0x34(%ebx),%eax
-8010644a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+8010599c:	e8 9f df ff ff       	call   80103940 <cpuid>
+801059a1:	8b 73 30             	mov    0x30(%ebx),%esi
+801059a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
+801059a7:	8b 43 34             	mov    0x34(%ebx),%eax
+801059aa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             "eip 0x%x addr 0x%x--kill proc\n",
             myproc()->pid, myproc()->name, tf->trapno,
-8010644d:	e8 5e df ff ff       	call   801043b0 <myproc>
-80106452:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106455:	e8 56 df ff ff       	call   801043b0 <myproc>
+801059ad:	e8 ae df ff ff       	call   80103960 <myproc>
+801059b2:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801059b5:	e8 a6 df ff ff       	call   80103960 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010645a:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-8010645d:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80106460:	51                   	push   %ecx
-80106461:	57                   	push   %edi
-80106462:	52                   	push   %edx
-80106463:	ff 75 e4             	pushl  -0x1c(%ebp)
-80106466:	56                   	push   %esi
+801059ba:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+801059bd:	8b 55 dc             	mov    -0x24(%ebp),%edx
+801059c0:	51                   	push   %ecx
+801059c1:	57                   	push   %edi
+801059c2:	52                   	push   %edx
+801059c3:	ff 75 e4             	pushl  -0x1c(%ebp)
+801059c6:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-80106467:	8b 75 e0             	mov    -0x20(%ebp),%esi
-8010646a:	83 c6 6c             	add    $0x6c,%esi
+801059c7:	8b 75 e0             	mov    -0x20(%ebp),%esi
+801059ca:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-8010646d:	56                   	push   %esi
-8010646e:	ff 70 10             	pushl  0x10(%eax)
-80106471:	68 a0 83 10 80       	push   $0x801083a0
-80106476:	e8 75 a2 ff ff       	call   801006f0 <cprintf>
+801059cd:	56                   	push   %esi
+801059ce:	ff 70 10             	pushl  0x10(%eax)
+801059d1:	68 bc 78 10 80       	push   $0x801078bc
+801059d6:	e8 d5 ac ff ff       	call   801006b0 <cprintf>
             tf->err, cpuid(), tf->eip, rcr2());
     myproc()->killed = 1;
-8010647b:	83 c4 20             	add    $0x20,%esp
-8010647e:	e8 2d df ff ff       	call   801043b0 <myproc>
-80106483:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+801059db:	83 c4 20             	add    $0x20,%esp
+801059de:	e8 7d df ff ff       	call   80103960 <myproc>
+801059e3:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010648a:	e8 21 df ff ff       	call   801043b0 <myproc>
-8010648f:	85 c0                	test   %eax,%eax
-80106491:	74 1d                	je     801064b0 <trap+0xc0>
-80106493:	e8 18 df ff ff       	call   801043b0 <myproc>
-80106498:	8b 50 24             	mov    0x24(%eax),%edx
-8010649b:	85 d2                	test   %edx,%edx
-8010649d:	74 11                	je     801064b0 <trap+0xc0>
-8010649f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801064a3:	83 e0 03             	and    $0x3,%eax
-801064a6:	66 83 f8 03          	cmp    $0x3,%ax
-801064aa:	0f 84 50 01 00 00    	je     80106600 <trap+0x210>
+801059ea:	e8 71 df ff ff       	call   80103960 <myproc>
+801059ef:	85 c0                	test   %eax,%eax
+801059f1:	74 1d                	je     80105a10 <trap+0xc0>
+801059f3:	e8 68 df ff ff       	call   80103960 <myproc>
+801059f8:	8b 50 24             	mov    0x24(%eax),%edx
+801059fb:	85 d2                	test   %edx,%edx
+801059fd:	74 11                	je     80105a10 <trap+0xc0>
+801059ff:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105a03:	83 e0 03             	and    $0x3,%eax
+80105a06:	66 83 f8 03          	cmp    $0x3,%ax
+80105a0a:	0f 84 50 01 00 00    	je     80105b60 <trap+0x210>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-801064b0:	e8 fb de ff ff       	call   801043b0 <myproc>
-801064b5:	85 c0                	test   %eax,%eax
-801064b7:	74 0f                	je     801064c8 <trap+0xd8>
-801064b9:	e8 f2 de ff ff       	call   801043b0 <myproc>
-801064be:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-801064c2:	0f 84 e8 00 00 00    	je     801065b0 <trap+0x1c0>
+80105a10:	e8 4b df ff ff       	call   80103960 <myproc>
+80105a15:	85 c0                	test   %eax,%eax
+80105a17:	74 0f                	je     80105a28 <trap+0xd8>
+80105a19:	e8 42 df ff ff       	call   80103960 <myproc>
+80105a1e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105a22:	0f 84 e8 00 00 00    	je     80105b10 <trap+0x1c0>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-801064c8:	e8 e3 de ff ff       	call   801043b0 <myproc>
-801064cd:	85 c0                	test   %eax,%eax
-801064cf:	74 1d                	je     801064ee <trap+0xfe>
-801064d1:	e8 da de ff ff       	call   801043b0 <myproc>
-801064d6:	8b 40 24             	mov    0x24(%eax),%eax
-801064d9:	85 c0                	test   %eax,%eax
-801064db:	74 11                	je     801064ee <trap+0xfe>
-801064dd:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801064e1:	83 e0 03             	and    $0x3,%eax
-801064e4:	66 83 f8 03          	cmp    $0x3,%ax
-801064e8:	0f 84 03 01 00 00    	je     801065f1 <trap+0x201>
+80105a28:	e8 33 df ff ff       	call   80103960 <myproc>
+80105a2d:	85 c0                	test   %eax,%eax
+80105a2f:	74 1d                	je     80105a4e <trap+0xfe>
+80105a31:	e8 2a df ff ff       	call   80103960 <myproc>
+80105a36:	8b 40 24             	mov    0x24(%eax),%eax
+80105a39:	85 c0                	test   %eax,%eax
+80105a3b:	74 11                	je     80105a4e <trap+0xfe>
+80105a3d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105a41:	83 e0 03             	and    $0x3,%eax
+80105a44:	66 83 f8 03          	cmp    $0x3,%ax
+80105a48:	0f 84 03 01 00 00    	je     80105b51 <trap+0x201>
     exit();
 }
-801064ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801064f1:	5b                   	pop    %ebx
-801064f2:	5e                   	pop    %esi
-801064f3:	5f                   	pop    %edi
-801064f4:	5d                   	pop    %ebp
-801064f5:	c3                   	ret    
+80105a4e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105a51:	5b                   	pop    %ebx
+80105a52:	5e                   	pop    %esi
+80105a53:	5f                   	pop    %edi
+80105a54:	5d                   	pop    %ebp
+80105a55:	c3                   	ret    
     ideintr();
-801064f6:	e8 35 c7 ff ff       	call   80102c30 <ideintr>
+80105a56:	e8 85 c7 ff ff       	call   801021e0 <ideintr>
     lapiceoi();
-801064fb:	e8 10 ce ff ff       	call   80103310 <lapiceoi>
+80105a5b:	e8 60 ce ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80106500:	e8 ab de ff ff       	call   801043b0 <myproc>
-80106505:	85 c0                	test   %eax,%eax
-80106507:	75 8a                	jne    80106493 <trap+0xa3>
-80106509:	eb a5                	jmp    801064b0 <trap+0xc0>
+80105a60:	e8 fb de ff ff       	call   80103960 <myproc>
+80105a65:	85 c0                	test   %eax,%eax
+80105a67:	75 8a                	jne    801059f3 <trap+0xa3>
+80105a69:	eb a5                	jmp    80105a10 <trap+0xc0>
     if(cpuid() == 0){
-8010650b:	e8 80 de ff ff       	call   80104390 <cpuid>
-80106510:	85 c0                	test   %eax,%eax
-80106512:	75 e7                	jne    801064fb <trap+0x10b>
+80105a6b:	e8 d0 de ff ff       	call   80103940 <cpuid>
+80105a70:	85 c0                	test   %eax,%eax
+80105a72:	75 e7                	jne    80105a5b <trap+0x10b>
       acquire(&tickslock);
-80106514:	83 ec 0c             	sub    $0xc,%esp
-80106517:	68 60 66 11 80       	push   $0x80116660
-8010651c:	e8 8f ea ff ff       	call   80104fb0 <acquire>
+80105a74:	83 ec 0c             	sub    $0xc,%esp
+80105a77:	68 60 4c 11 80       	push   $0x80114c60
+80105a7c:	e8 df ea ff ff       	call   80104560 <acquire>
       wakeup(&ticks);
-80106521:	c7 04 24 a0 6e 11 80 	movl   $0x80116ea0,(%esp)
+80105a81:	c7 04 24 a0 54 11 80 	movl   $0x801154a0,(%esp)
       ticks++;
-80106528:	83 05 a0 6e 11 80 01 	addl   $0x1,0x80116ea0
+80105a88:	83 05 a0 54 11 80 01 	addl   $0x1,0x801154a0
       wakeup(&ticks);
-8010652f:	e8 fc e5 ff ff       	call   80104b30 <wakeup>
+80105a8f:	e8 4c e6 ff ff       	call   801040e0 <wakeup>
       release(&tickslock);
-80106534:	c7 04 24 60 66 11 80 	movl   $0x80116660,(%esp)
-8010653b:	e8 30 eb ff ff       	call   80105070 <release>
-80106540:	83 c4 10             	add    $0x10,%esp
+80105a94:	c7 04 24 60 4c 11 80 	movl   $0x80114c60,(%esp)
+80105a9b:	e8 80 eb ff ff       	call   80104620 <release>
+80105aa0:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80106543:	eb b6                	jmp    801064fb <trap+0x10b>
+80105aa3:	eb b6                	jmp    80105a5b <trap+0x10b>
     kbdintr();
-80106545:	e8 86 cc ff ff       	call   801031d0 <kbdintr>
+80105aa5:	e8 d6 cc ff ff       	call   80102780 <kbdintr>
     lapiceoi();
-8010654a:	e8 c1 cd ff ff       	call   80103310 <lapiceoi>
+80105aaa:	e8 11 ce ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010654f:	e8 5c de ff ff       	call   801043b0 <myproc>
-80106554:	85 c0                	test   %eax,%eax
-80106556:	0f 85 37 ff ff ff    	jne    80106493 <trap+0xa3>
-8010655c:	e9 4f ff ff ff       	jmp    801064b0 <trap+0xc0>
+80105aaf:	e8 ac de ff ff       	call   80103960 <myproc>
+80105ab4:	85 c0                	test   %eax,%eax
+80105ab6:	0f 85 37 ff ff ff    	jne    801059f3 <trap+0xa3>
+80105abc:	e9 4f ff ff ff       	jmp    80105a10 <trap+0xc0>
     uartintr();
-80106561:	e8 4a 02 00 00       	call   801067b0 <uartintr>
+80105ac1:	e8 4a 02 00 00       	call   80105d10 <uartintr>
     lapiceoi();
-80106566:	e8 a5 cd ff ff       	call   80103310 <lapiceoi>
+80105ac6:	e8 f5 cd ff ff       	call   801028c0 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010656b:	e8 40 de ff ff       	call   801043b0 <myproc>
-80106570:	85 c0                	test   %eax,%eax
-80106572:	0f 85 1b ff ff ff    	jne    80106493 <trap+0xa3>
-80106578:	e9 33 ff ff ff       	jmp    801064b0 <trap+0xc0>
+80105acb:	e8 90 de ff ff       	call   80103960 <myproc>
+80105ad0:	85 c0                	test   %eax,%eax
+80105ad2:	0f 85 1b ff ff ff    	jne    801059f3 <trap+0xa3>
+80105ad8:	e9 33 ff ff ff       	jmp    80105a10 <trap+0xc0>
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-8010657d:	8b 7b 38             	mov    0x38(%ebx),%edi
-80106580:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80106584:	e8 07 de ff ff       	call   80104390 <cpuid>
-80106589:	57                   	push   %edi
-8010658a:	56                   	push   %esi
-8010658b:	50                   	push   %eax
-8010658c:	68 48 83 10 80       	push   $0x80108348
-80106591:	e8 5a a1 ff ff       	call   801006f0 <cprintf>
+80105add:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105ae0:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105ae4:	e8 57 de ff ff       	call   80103940 <cpuid>
+80105ae9:	57                   	push   %edi
+80105aea:	56                   	push   %esi
+80105aeb:	50                   	push   %eax
+80105aec:	68 64 78 10 80       	push   $0x80107864
+80105af1:	e8 ba ab ff ff       	call   801006b0 <cprintf>
     lapiceoi();
-80106596:	e8 75 cd ff ff       	call   80103310 <lapiceoi>
+80105af6:	e8 c5 cd ff ff       	call   801028c0 <lapiceoi>
     break;
-8010659b:	83 c4 10             	add    $0x10,%esp
+80105afb:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010659e:	e8 0d de ff ff       	call   801043b0 <myproc>
-801065a3:	85 c0                	test   %eax,%eax
-801065a5:	0f 85 e8 fe ff ff    	jne    80106493 <trap+0xa3>
-801065ab:	e9 00 ff ff ff       	jmp    801064b0 <trap+0xc0>
+80105afe:	e8 5d de ff ff       	call   80103960 <myproc>
+80105b03:	85 c0                	test   %eax,%eax
+80105b05:	0f 85 e8 fe ff ff    	jne    801059f3 <trap+0xa3>
+80105b0b:	e9 00 ff ff ff       	jmp    80105a10 <trap+0xc0>
   if(myproc() && myproc()->state == RUNNING &&
-801065b0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-801065b4:	0f 85 0e ff ff ff    	jne    801064c8 <trap+0xd8>
+80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105b14:	0f 85 0e ff ff ff    	jne    80105a28 <trap+0xd8>
     yield();
-801065ba:	e8 61 e3 ff ff       	call   80104920 <yield>
-801065bf:	e9 04 ff ff ff       	jmp    801064c8 <trap+0xd8>
-801065c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105b1a:	e8 b1 e3 ff ff       	call   80103ed0 <yield>
+80105b1f:	e9 04 ff ff ff       	jmp    80105a28 <trap+0xd8>
+80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed)
-801065c8:	e8 e3 dd ff ff       	call   801043b0 <myproc>
-801065cd:	8b 70 24             	mov    0x24(%eax),%esi
-801065d0:	85 f6                	test   %esi,%esi
-801065d2:	75 3c                	jne    80106610 <trap+0x220>
+80105b28:	e8 33 de ff ff       	call   80103960 <myproc>
+80105b2d:	8b 70 24             	mov    0x24(%eax),%esi
+80105b30:	85 f6                	test   %esi,%esi
+80105b32:	75 3c                	jne    80105b70 <trap+0x220>
     myproc()->tf = tf;
-801065d4:	e8 d7 dd ff ff       	call   801043b0 <myproc>
-801065d9:	89 58 18             	mov    %ebx,0x18(%eax)
+80105b34:	e8 27 de ff ff       	call   80103960 <myproc>
+80105b39:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-801065dc:	e8 af ee ff ff       	call   80105490 <syscall>
+80105b3c:	e8 ff ee ff ff       	call   80104a40 <syscall>
     if(myproc()->killed)
-801065e1:	e8 ca dd ff ff       	call   801043b0 <myproc>
-801065e6:	8b 48 24             	mov    0x24(%eax),%ecx
-801065e9:	85 c9                	test   %ecx,%ecx
-801065eb:	0f 84 fd fe ff ff    	je     801064ee <trap+0xfe>
-}
-801065f1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801065f4:	5b                   	pop    %ebx
-801065f5:	5e                   	pop    %esi
-801065f6:	5f                   	pop    %edi
-801065f7:	5d                   	pop    %ebp
+80105b41:	e8 1a de ff ff       	call   80103960 <myproc>
+80105b46:	8b 48 24             	mov    0x24(%eax),%ecx
+80105b49:	85 c9                	test   %ecx,%ecx
+80105b4b:	0f 84 fd fe ff ff    	je     80105a4e <trap+0xfe>
+}
+80105b51:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105b54:	5b                   	pop    %ebx
+80105b55:	5e                   	pop    %esi
+80105b56:	5f                   	pop    %edi
+80105b57:	5d                   	pop    %ebp
       exit();
-801065f8:	e9 e3 e1 ff ff       	jmp    801047e0 <exit>
-801065fd:	8d 76 00             	lea    0x0(%esi),%esi
+80105b58:	e9 33 e2 ff ff       	jmp    80103d90 <exit>
+80105b5d:	8d 76 00             	lea    0x0(%esi),%esi
     exit();
-80106600:	e8 db e1 ff ff       	call   801047e0 <exit>
-80106605:	e9 a6 fe ff ff       	jmp    801064b0 <trap+0xc0>
-8010660a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105b60:	e8 2b e2 ff ff       	call   80103d90 <exit>
+80105b65:	e9 a6 fe ff ff       	jmp    80105a10 <trap+0xc0>
+80105b6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80106610:	e8 cb e1 ff ff       	call   801047e0 <exit>
-80106615:	eb bd                	jmp    801065d4 <trap+0x1e4>
-80106617:	0f 20 d6             	mov    %cr2,%esi
+80105b70:	e8 1b e2 ff ff       	call   80103d90 <exit>
+80105b75:	eb bd                	jmp    80105b34 <trap+0x1e4>
+80105b77:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-8010661a:	e8 71 dd ff ff       	call   80104390 <cpuid>
-8010661f:	83 ec 0c             	sub    $0xc,%esp
-80106622:	56                   	push   %esi
-80106623:	57                   	push   %edi
-80106624:	50                   	push   %eax
-80106625:	ff 73 30             	pushl  0x30(%ebx)
-80106628:	68 6c 83 10 80       	push   $0x8010836c
-8010662d:	e8 be a0 ff ff       	call   801006f0 <cprintf>
+80105b7a:	e8 c1 dd ff ff       	call   80103940 <cpuid>
+80105b7f:	83 ec 0c             	sub    $0xc,%esp
+80105b82:	56                   	push   %esi
+80105b83:	57                   	push   %edi
+80105b84:	50                   	push   %eax
+80105b85:	ff 73 30             	pushl  0x30(%ebx)
+80105b88:	68 88 78 10 80       	push   $0x80107888
+80105b8d:	e8 1e ab ff ff       	call   801006b0 <cprintf>
       panic("trap");
-80106632:	83 c4 14             	add    $0x14,%esp
-80106635:	68 42 83 10 80       	push   $0x80108342
-8010663a:	e8 51 9d ff ff       	call   80100390 <panic>
-8010663f:	90                   	nop
+80105b92:	83 c4 14             	add    $0x14,%esp
+80105b95:	68 5e 78 10 80       	push   $0x8010785e
+80105b9a:	e8 f1 a7 ff ff       	call   80100390 <panic>
+80105b9f:	90                   	nop
 
-80106640 <uartgetc>:
+80105ba0 <uartgetc>:
   outb(COM1+0, c);
 }
 
 static int
 uartgetc(void)
 {
-80106640:	f3 0f 1e fb          	endbr32 
+80105ba0:	f3 0f 1e fb          	endbr32 
   if(!uart)
-80106644:	a1 bc b5 10 80       	mov    0x8010b5bc,%eax
-80106649:	85 c0                	test   %eax,%eax
-8010664b:	74 1b                	je     80106668 <uartgetc+0x28>
+80105ba4:	a1 bc a5 10 80       	mov    0x8010a5bc,%eax
+80105ba9:	85 c0                	test   %eax,%eax
+80105bab:	74 1b                	je     80105bc8 <uartgetc+0x28>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010664d:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80106652:	ec                   	in     (%dx),%al
+80105bad:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105bb2:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80106653:	a8 01                	test   $0x1,%al
-80106655:	74 11                	je     80106668 <uartgetc+0x28>
-80106657:	ba f8 03 00 00       	mov    $0x3f8,%edx
-8010665c:	ec                   	in     (%dx),%al
+80105bb3:	a8 01                	test   $0x1,%al
+80105bb5:	74 11                	je     80105bc8 <uartgetc+0x28>
+80105bb7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105bbc:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-8010665d:	0f b6 c0             	movzbl %al,%eax
-80106660:	c3                   	ret    
-80106661:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bbd:	0f b6 c0             	movzbl %al,%eax
+80105bc0:	c3                   	ret    
+80105bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80106668:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bc8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010666d:	c3                   	ret    
-8010666e:	66 90                	xchg   %ax,%ax
+80105bcd:	c3                   	ret    
+80105bce:	66 90                	xchg   %ax,%ax
 
-80106670 <uartputc.part.0>:
+80105bd0 <uartputc.part.0>:
 uartputc(int c)
-80106670:	55                   	push   %ebp
-80106671:	89 e5                	mov    %esp,%ebp
-80106673:	57                   	push   %edi
-80106674:	89 c7                	mov    %eax,%edi
-80106676:	56                   	push   %esi
-80106677:	be fd 03 00 00       	mov    $0x3fd,%esi
-8010667c:	53                   	push   %ebx
-8010667d:	bb 80 00 00 00       	mov    $0x80,%ebx
-80106682:	83 ec 0c             	sub    $0xc,%esp
-80106685:	eb 1b                	jmp    801066a2 <uartputc.part.0+0x32>
-80106687:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010668e:	66 90                	xchg   %ax,%ax
+80105bd0:	55                   	push   %ebp
+80105bd1:	89 e5                	mov    %esp,%ebp
+80105bd3:	57                   	push   %edi
+80105bd4:	89 c7                	mov    %eax,%edi
+80105bd6:	56                   	push   %esi
+80105bd7:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105bdc:	53                   	push   %ebx
+80105bdd:	bb 80 00 00 00       	mov    $0x80,%ebx
+80105be2:	83 ec 0c             	sub    $0xc,%esp
+80105be5:	eb 1b                	jmp    80105c02 <uartputc.part.0+0x32>
+80105be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105bee:	66 90                	xchg   %ax,%ax
     microdelay(10);
-80106690:	83 ec 0c             	sub    $0xc,%esp
-80106693:	6a 0a                	push   $0xa
-80106695:	e8 96 cc ff ff       	call   80103330 <microdelay>
+80105bf0:	83 ec 0c             	sub    $0xc,%esp
+80105bf3:	6a 0a                	push   $0xa
+80105bf5:	e8 e6 cc ff ff       	call   801028e0 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-8010669a:	83 c4 10             	add    $0x10,%esp
-8010669d:	83 eb 01             	sub    $0x1,%ebx
-801066a0:	74 07                	je     801066a9 <uartputc.part.0+0x39>
-801066a2:	89 f2                	mov    %esi,%edx
-801066a4:	ec                   	in     (%dx),%al
-801066a5:	a8 20                	test   $0x20,%al
-801066a7:	74 e7                	je     80106690 <uartputc.part.0+0x20>
+80105bfa:	83 c4 10             	add    $0x10,%esp
+80105bfd:	83 eb 01             	sub    $0x1,%ebx
+80105c00:	74 07                	je     80105c09 <uartputc.part.0+0x39>
+80105c02:	89 f2                	mov    %esi,%edx
+80105c04:	ec                   	in     (%dx),%al
+80105c05:	a8 20                	test   $0x20,%al
+80105c07:	74 e7                	je     80105bf0 <uartputc.part.0+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-801066a9:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801066ae:	89 f8                	mov    %edi,%eax
-801066b0:	ee                   	out    %al,(%dx)
-}
-801066b1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801066b4:	5b                   	pop    %ebx
-801066b5:	5e                   	pop    %esi
-801066b6:	5f                   	pop    %edi
-801066b7:	5d                   	pop    %ebp
-801066b8:	c3                   	ret    
-801066b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801066c0 <uartinit>:
-{
-801066c0:	f3 0f 1e fb          	endbr32 
-801066c4:	55                   	push   %ebp
-801066c5:	31 c9                	xor    %ecx,%ecx
-801066c7:	89 c8                	mov    %ecx,%eax
-801066c9:	89 e5                	mov    %esp,%ebp
-801066cb:	57                   	push   %edi
-801066cc:	56                   	push   %esi
-801066cd:	53                   	push   %ebx
-801066ce:	bb fa 03 00 00       	mov    $0x3fa,%ebx
-801066d3:	89 da                	mov    %ebx,%edx
-801066d5:	83 ec 0c             	sub    $0xc,%esp
-801066d8:	ee                   	out    %al,(%dx)
-801066d9:	bf fb 03 00 00       	mov    $0x3fb,%edi
-801066de:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-801066e3:	89 fa                	mov    %edi,%edx
-801066e5:	ee                   	out    %al,(%dx)
-801066e6:	b8 0c 00 00 00       	mov    $0xc,%eax
-801066eb:	ba f8 03 00 00       	mov    $0x3f8,%edx
-801066f0:	ee                   	out    %al,(%dx)
-801066f1:	be f9 03 00 00       	mov    $0x3f9,%esi
-801066f6:	89 c8                	mov    %ecx,%eax
-801066f8:	89 f2                	mov    %esi,%edx
-801066fa:	ee                   	out    %al,(%dx)
-801066fb:	b8 03 00 00 00       	mov    $0x3,%eax
-80106700:	89 fa                	mov    %edi,%edx
-80106702:	ee                   	out    %al,(%dx)
-80106703:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80106708:	89 c8                	mov    %ecx,%eax
-8010670a:	ee                   	out    %al,(%dx)
-8010670b:	b8 01 00 00 00       	mov    $0x1,%eax
-80106710:	89 f2                	mov    %esi,%edx
-80106712:	ee                   	out    %al,(%dx)
+80105c09:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c0e:	89 f8                	mov    %edi,%eax
+80105c10:	ee                   	out    %al,(%dx)
+}
+80105c11:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105c14:	5b                   	pop    %ebx
+80105c15:	5e                   	pop    %esi
+80105c16:	5f                   	pop    %edi
+80105c17:	5d                   	pop    %ebp
+80105c18:	c3                   	ret    
+80105c19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105c20 <uartinit>:
+{
+80105c20:	f3 0f 1e fb          	endbr32 
+80105c24:	55                   	push   %ebp
+80105c25:	31 c9                	xor    %ecx,%ecx
+80105c27:	89 c8                	mov    %ecx,%eax
+80105c29:	89 e5                	mov    %esp,%ebp
+80105c2b:	57                   	push   %edi
+80105c2c:	56                   	push   %esi
+80105c2d:	53                   	push   %ebx
+80105c2e:	bb fa 03 00 00       	mov    $0x3fa,%ebx
+80105c33:	89 da                	mov    %ebx,%edx
+80105c35:	83 ec 0c             	sub    $0xc,%esp
+80105c38:	ee                   	out    %al,(%dx)
+80105c39:	bf fb 03 00 00       	mov    $0x3fb,%edi
+80105c3e:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105c43:	89 fa                	mov    %edi,%edx
+80105c45:	ee                   	out    %al,(%dx)
+80105c46:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105c4b:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c50:	ee                   	out    %al,(%dx)
+80105c51:	be f9 03 00 00       	mov    $0x3f9,%esi
+80105c56:	89 c8                	mov    %ecx,%eax
+80105c58:	89 f2                	mov    %esi,%edx
+80105c5a:	ee                   	out    %al,(%dx)
+80105c5b:	b8 03 00 00 00       	mov    $0x3,%eax
+80105c60:	89 fa                	mov    %edi,%edx
+80105c62:	ee                   	out    %al,(%dx)
+80105c63:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105c68:	89 c8                	mov    %ecx,%eax
+80105c6a:	ee                   	out    %al,(%dx)
+80105c6b:	b8 01 00 00 00       	mov    $0x1,%eax
+80105c70:	89 f2                	mov    %esi,%edx
+80105c72:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80106713:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80106718:	ec                   	in     (%dx),%al
+80105c73:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105c78:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80106719:	3c ff                	cmp    $0xff,%al
-8010671b:	74 52                	je     8010676f <uartinit+0xaf>
+80105c79:	3c ff                	cmp    $0xff,%al
+80105c7b:	74 52                	je     80105ccf <uartinit+0xaf>
   uart = 1;
-8010671d:	c7 05 bc b5 10 80 01 	movl   $0x1,0x8010b5bc
-80106724:	00 00 00 
-80106727:	89 da                	mov    %ebx,%edx
-80106729:	ec                   	in     (%dx),%al
-8010672a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-8010672f:	ec                   	in     (%dx),%al
+80105c7d:	c7 05 bc a5 10 80 01 	movl   $0x1,0x8010a5bc
+80105c84:	00 00 00 
+80105c87:	89 da                	mov    %ebx,%edx
+80105c89:	ec                   	in     (%dx),%al
+80105c8a:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105c8f:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80106730:	83 ec 08             	sub    $0x8,%esp
-80106733:	be 76 00 00 00       	mov    $0x76,%esi
+80105c90:	83 ec 08             	sub    $0x8,%esp
+80105c93:	be 76 00 00 00       	mov    $0x76,%esi
   for(p="xv6...\n"; *p; p++)
-80106738:	bb 64 84 10 80       	mov    $0x80108464,%ebx
+80105c98:	bb 80 79 10 80       	mov    $0x80107980,%ebx
   ioapicenable(IRQ_COM1, 0);
-8010673d:	6a 00                	push   $0x0
-8010673f:	6a 04                	push   $0x4
-80106741:	e8 3a c7 ff ff       	call   80102e80 <ioapicenable>
-80106746:	83 c4 10             	add    $0x10,%esp
+80105c9d:	6a 00                	push   $0x0
+80105c9f:	6a 04                	push   $0x4
+80105ca1:	e8 8a c7 ff ff       	call   80102430 <ioapicenable>
+80105ca6:	83 c4 10             	add    $0x10,%esp
   for(p="xv6...\n"; *p; p++)
-80106749:	b8 78 00 00 00       	mov    $0x78,%eax
-8010674e:	eb 04                	jmp    80106754 <uartinit+0x94>
-80106750:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
+80105ca9:	b8 78 00 00 00       	mov    $0x78,%eax
+80105cae:	eb 04                	jmp    80105cb4 <uartinit+0x94>
+80105cb0:	0f b6 73 01          	movzbl 0x1(%ebx),%esi
   if(!uart)
-80106754:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
-8010675a:	85 d2                	test   %edx,%edx
-8010675c:	74 08                	je     80106766 <uartinit+0xa6>
+80105cb4:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
+80105cba:	85 d2                	test   %edx,%edx
+80105cbc:	74 08                	je     80105cc6 <uartinit+0xa6>
     uartputc(*p);
-8010675e:	0f be c0             	movsbl %al,%eax
-80106761:	e8 0a ff ff ff       	call   80106670 <uartputc.part.0>
+80105cbe:	0f be c0             	movsbl %al,%eax
+80105cc1:	e8 0a ff ff ff       	call   80105bd0 <uartputc.part.0>
   for(p="xv6...\n"; *p; p++)
-80106766:	89 f0                	mov    %esi,%eax
-80106768:	83 c3 01             	add    $0x1,%ebx
-8010676b:	84 c0                	test   %al,%al
-8010676d:	75 e1                	jne    80106750 <uartinit+0x90>
-}
-8010676f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106772:	5b                   	pop    %ebx
-80106773:	5e                   	pop    %esi
-80106774:	5f                   	pop    %edi
-80106775:	5d                   	pop    %ebp
-80106776:	c3                   	ret    
-80106777:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010677e:	66 90                	xchg   %ax,%ax
+80105cc6:	89 f0                	mov    %esi,%eax
+80105cc8:	83 c3 01             	add    $0x1,%ebx
+80105ccb:	84 c0                	test   %al,%al
+80105ccd:	75 e1                	jne    80105cb0 <uartinit+0x90>
+}
+80105ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105cd2:	5b                   	pop    %ebx
+80105cd3:	5e                   	pop    %esi
+80105cd4:	5f                   	pop    %edi
+80105cd5:	5d                   	pop    %ebp
+80105cd6:	c3                   	ret    
+80105cd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cde:	66 90                	xchg   %ax,%ax
 
-80106780 <uartputc>:
+80105ce0 <uartputc>:
 {
-80106780:	f3 0f 1e fb          	endbr32 
-80106784:	55                   	push   %ebp
+80105ce0:	f3 0f 1e fb          	endbr32 
+80105ce4:	55                   	push   %ebp
   if(!uart)
-80106785:	8b 15 bc b5 10 80    	mov    0x8010b5bc,%edx
+80105ce5:	8b 15 bc a5 10 80    	mov    0x8010a5bc,%edx
 {
-8010678b:	89 e5                	mov    %esp,%ebp
-8010678d:	8b 45 08             	mov    0x8(%ebp),%eax
+80105ceb:	89 e5                	mov    %esp,%ebp
+80105ced:	8b 45 08             	mov    0x8(%ebp),%eax
   if(!uart)
-80106790:	85 d2                	test   %edx,%edx
-80106792:	74 0c                	je     801067a0 <uartputc+0x20>
+80105cf0:	85 d2                	test   %edx,%edx
+80105cf2:	74 0c                	je     80105d00 <uartputc+0x20>
 }
-80106794:	5d                   	pop    %ebp
-80106795:	e9 d6 fe ff ff       	jmp    80106670 <uartputc.part.0>
-8010679a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801067a0:	5d                   	pop    %ebp
-801067a1:	c3                   	ret    
-801067a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801067a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cf4:	5d                   	pop    %ebp
+80105cf5:	e9 d6 fe ff ff       	jmp    80105bd0 <uartputc.part.0>
+80105cfa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105d00:	5d                   	pop    %ebp
+80105d01:	c3                   	ret    
+80105d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801067b0 <uartintr>:
+80105d10 <uartintr>:
 
 void
 uartintr(void)
 {
-801067b0:	f3 0f 1e fb          	endbr32 
-801067b4:	55                   	push   %ebp
-801067b5:	89 e5                	mov    %esp,%ebp
-801067b7:	83 ec 14             	sub    $0x14,%esp
+80105d10:	f3 0f 1e fb          	endbr32 
+80105d14:	55                   	push   %ebp
+80105d15:	89 e5                	mov    %esp,%ebp
+80105d17:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-801067ba:	68 40 66 10 80       	push   $0x80106640
-801067bf:	e8 1c a5 ff ff       	call   80100ce0 <consoleintr>
+80105d1a:	68 a0 5b 10 80       	push   $0x80105ba0
+80105d1f:	e8 3c ab ff ff       	call   80100860 <consoleintr>
 }
-801067c4:	83 c4 10             	add    $0x10,%esp
-801067c7:	c9                   	leave  
-801067c8:	c3                   	ret    
+80105d24:	83 c4 10             	add    $0x10,%esp
+80105d27:	c9                   	leave  
+80105d28:	c3                   	ret    
 
-801067c9 <vector0>:
+80105d29 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-801067c9:	6a 00                	push   $0x0
+80105d29:	6a 00                	push   $0x0
   pushl $0
-801067cb:	6a 00                	push   $0x0
+80105d2b:	6a 00                	push   $0x0
   jmp alltraps
-801067cd:	e9 45 fb ff ff       	jmp    80106317 <alltraps>
+80105d2d:	e9 3c fb ff ff       	jmp    8010586e <alltraps>
 
-801067d2 <vector1>:
+80105d32 <vector1>:
 .globl vector1
 vector1:
   pushl $0
-801067d2:	6a 00                	push   $0x0
+80105d32:	6a 00                	push   $0x0
   pushl $1
-801067d4:	6a 01                	push   $0x1
+80105d34:	6a 01                	push   $0x1
   jmp alltraps
-801067d6:	e9 3c fb ff ff       	jmp    80106317 <alltraps>
+80105d36:	e9 33 fb ff ff       	jmp    8010586e <alltraps>
 
-801067db <vector2>:
+80105d3b <vector2>:
 .globl vector2
 vector2:
   pushl $0
-801067db:	6a 00                	push   $0x0
+80105d3b:	6a 00                	push   $0x0
   pushl $2
-801067dd:	6a 02                	push   $0x2
+80105d3d:	6a 02                	push   $0x2
   jmp alltraps
-801067df:	e9 33 fb ff ff       	jmp    80106317 <alltraps>
+80105d3f:	e9 2a fb ff ff       	jmp    8010586e <alltraps>
 
-801067e4 <vector3>:
+80105d44 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-801067e4:	6a 00                	push   $0x0
+80105d44:	6a 00                	push   $0x0
   pushl $3
-801067e6:	6a 03                	push   $0x3
+80105d46:	6a 03                	push   $0x3
   jmp alltraps
-801067e8:	e9 2a fb ff ff       	jmp    80106317 <alltraps>
+80105d48:	e9 21 fb ff ff       	jmp    8010586e <alltraps>
 
-801067ed <vector4>:
+80105d4d <vector4>:
 .globl vector4
 vector4:
   pushl $0
-801067ed:	6a 00                	push   $0x0
+80105d4d:	6a 00                	push   $0x0
   pushl $4
-801067ef:	6a 04                	push   $0x4
+80105d4f:	6a 04                	push   $0x4
   jmp alltraps
-801067f1:	e9 21 fb ff ff       	jmp    80106317 <alltraps>
+80105d51:	e9 18 fb ff ff       	jmp    8010586e <alltraps>
 
-801067f6 <vector5>:
+80105d56 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-801067f6:	6a 00                	push   $0x0
+80105d56:	6a 00                	push   $0x0
   pushl $5
-801067f8:	6a 05                	push   $0x5
+80105d58:	6a 05                	push   $0x5
   jmp alltraps
-801067fa:	e9 18 fb ff ff       	jmp    80106317 <alltraps>
+80105d5a:	e9 0f fb ff ff       	jmp    8010586e <alltraps>
 
-801067ff <vector6>:
+80105d5f <vector6>:
 .globl vector6
 vector6:
   pushl $0
-801067ff:	6a 00                	push   $0x0
+80105d5f:	6a 00                	push   $0x0
   pushl $6
-80106801:	6a 06                	push   $0x6
+80105d61:	6a 06                	push   $0x6
   jmp alltraps
-80106803:	e9 0f fb ff ff       	jmp    80106317 <alltraps>
+80105d63:	e9 06 fb ff ff       	jmp    8010586e <alltraps>
 
-80106808 <vector7>:
+80105d68 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80106808:	6a 00                	push   $0x0
+80105d68:	6a 00                	push   $0x0
   pushl $7
-8010680a:	6a 07                	push   $0x7
+80105d6a:	6a 07                	push   $0x7
   jmp alltraps
-8010680c:	e9 06 fb ff ff       	jmp    80106317 <alltraps>
+80105d6c:	e9 fd fa ff ff       	jmp    8010586e <alltraps>
 
-80106811 <vector8>:
+80105d71 <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80106811:	6a 08                	push   $0x8
+80105d71:	6a 08                	push   $0x8
   jmp alltraps
-80106813:	e9 ff fa ff ff       	jmp    80106317 <alltraps>
+80105d73:	e9 f6 fa ff ff       	jmp    8010586e <alltraps>
 
-80106818 <vector9>:
+80105d78 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80106818:	6a 00                	push   $0x0
+80105d78:	6a 00                	push   $0x0
   pushl $9
-8010681a:	6a 09                	push   $0x9
+80105d7a:	6a 09                	push   $0x9
   jmp alltraps
-8010681c:	e9 f6 fa ff ff       	jmp    80106317 <alltraps>
+80105d7c:	e9 ed fa ff ff       	jmp    8010586e <alltraps>
 
-80106821 <vector10>:
+80105d81 <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80106821:	6a 0a                	push   $0xa
+80105d81:	6a 0a                	push   $0xa
   jmp alltraps
-80106823:	e9 ef fa ff ff       	jmp    80106317 <alltraps>
+80105d83:	e9 e6 fa ff ff       	jmp    8010586e <alltraps>
 
-80106828 <vector11>:
+80105d88 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80106828:	6a 0b                	push   $0xb
+80105d88:	6a 0b                	push   $0xb
   jmp alltraps
-8010682a:	e9 e8 fa ff ff       	jmp    80106317 <alltraps>
+80105d8a:	e9 df fa ff ff       	jmp    8010586e <alltraps>
 
-8010682f <vector12>:
+80105d8f <vector12>:
 .globl vector12
 vector12:
   pushl $12
-8010682f:	6a 0c                	push   $0xc
+80105d8f:	6a 0c                	push   $0xc
   jmp alltraps
-80106831:	e9 e1 fa ff ff       	jmp    80106317 <alltraps>
+80105d91:	e9 d8 fa ff ff       	jmp    8010586e <alltraps>
 
-80106836 <vector13>:
+80105d96 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80106836:	6a 0d                	push   $0xd
+80105d96:	6a 0d                	push   $0xd
   jmp alltraps
-80106838:	e9 da fa ff ff       	jmp    80106317 <alltraps>
+80105d98:	e9 d1 fa ff ff       	jmp    8010586e <alltraps>
 
-8010683d <vector14>:
+80105d9d <vector14>:
 .globl vector14
 vector14:
   pushl $14
-8010683d:	6a 0e                	push   $0xe
+80105d9d:	6a 0e                	push   $0xe
   jmp alltraps
-8010683f:	e9 d3 fa ff ff       	jmp    80106317 <alltraps>
+80105d9f:	e9 ca fa ff ff       	jmp    8010586e <alltraps>
 
-80106844 <vector15>:
+80105da4 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80106844:	6a 00                	push   $0x0
+80105da4:	6a 00                	push   $0x0
   pushl $15
-80106846:	6a 0f                	push   $0xf
+80105da6:	6a 0f                	push   $0xf
   jmp alltraps
-80106848:	e9 ca fa ff ff       	jmp    80106317 <alltraps>
+80105da8:	e9 c1 fa ff ff       	jmp    8010586e <alltraps>
 
-8010684d <vector16>:
+80105dad <vector16>:
 .globl vector16
 vector16:
   pushl $0
-8010684d:	6a 00                	push   $0x0
+80105dad:	6a 00                	push   $0x0
   pushl $16
-8010684f:	6a 10                	push   $0x10
+80105daf:	6a 10                	push   $0x10
   jmp alltraps
-80106851:	e9 c1 fa ff ff       	jmp    80106317 <alltraps>
+80105db1:	e9 b8 fa ff ff       	jmp    8010586e <alltraps>
 
-80106856 <vector17>:
+80105db6 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80106856:	6a 11                	push   $0x11
+80105db6:	6a 11                	push   $0x11
   jmp alltraps
-80106858:	e9 ba fa ff ff       	jmp    80106317 <alltraps>
+80105db8:	e9 b1 fa ff ff       	jmp    8010586e <alltraps>
 
-8010685d <vector18>:
+80105dbd <vector18>:
 .globl vector18
 vector18:
   pushl $0
-8010685d:	6a 00                	push   $0x0
+80105dbd:	6a 00                	push   $0x0
   pushl $18
-8010685f:	6a 12                	push   $0x12
+80105dbf:	6a 12                	push   $0x12
   jmp alltraps
-80106861:	e9 b1 fa ff ff       	jmp    80106317 <alltraps>
+80105dc1:	e9 a8 fa ff ff       	jmp    8010586e <alltraps>
 
-80106866 <vector19>:
+80105dc6 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80106866:	6a 00                	push   $0x0
+80105dc6:	6a 00                	push   $0x0
   pushl $19
-80106868:	6a 13                	push   $0x13
+80105dc8:	6a 13                	push   $0x13
   jmp alltraps
-8010686a:	e9 a8 fa ff ff       	jmp    80106317 <alltraps>
+80105dca:	e9 9f fa ff ff       	jmp    8010586e <alltraps>
 
-8010686f <vector20>:
+80105dcf <vector20>:
 .globl vector20
 vector20:
   pushl $0
-8010686f:	6a 00                	push   $0x0
+80105dcf:	6a 00                	push   $0x0
   pushl $20
-80106871:	6a 14                	push   $0x14
+80105dd1:	6a 14                	push   $0x14
   jmp alltraps
-80106873:	e9 9f fa ff ff       	jmp    80106317 <alltraps>
+80105dd3:	e9 96 fa ff ff       	jmp    8010586e <alltraps>
 
-80106878 <vector21>:
+80105dd8 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80106878:	6a 00                	push   $0x0
+80105dd8:	6a 00                	push   $0x0
   pushl $21
-8010687a:	6a 15                	push   $0x15
+80105dda:	6a 15                	push   $0x15
   jmp alltraps
-8010687c:	e9 96 fa ff ff       	jmp    80106317 <alltraps>
+80105ddc:	e9 8d fa ff ff       	jmp    8010586e <alltraps>
 
-80106881 <vector22>:
+80105de1 <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80106881:	6a 00                	push   $0x0
+80105de1:	6a 00                	push   $0x0
   pushl $22
-80106883:	6a 16                	push   $0x16
+80105de3:	6a 16                	push   $0x16
   jmp alltraps
-80106885:	e9 8d fa ff ff       	jmp    80106317 <alltraps>
+80105de5:	e9 84 fa ff ff       	jmp    8010586e <alltraps>
 
-8010688a <vector23>:
+80105dea <vector23>:
 .globl vector23
 vector23:
   pushl $0
-8010688a:	6a 00                	push   $0x0
+80105dea:	6a 00                	push   $0x0
   pushl $23
-8010688c:	6a 17                	push   $0x17
+80105dec:	6a 17                	push   $0x17
   jmp alltraps
-8010688e:	e9 84 fa ff ff       	jmp    80106317 <alltraps>
+80105dee:	e9 7b fa ff ff       	jmp    8010586e <alltraps>
 
-80106893 <vector24>:
+80105df3 <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80106893:	6a 00                	push   $0x0
+80105df3:	6a 00                	push   $0x0
   pushl $24
-80106895:	6a 18                	push   $0x18
+80105df5:	6a 18                	push   $0x18
   jmp alltraps
-80106897:	e9 7b fa ff ff       	jmp    80106317 <alltraps>
+80105df7:	e9 72 fa ff ff       	jmp    8010586e <alltraps>
 
-8010689c <vector25>:
+80105dfc <vector25>:
 .globl vector25
 vector25:
   pushl $0
-8010689c:	6a 00                	push   $0x0
+80105dfc:	6a 00                	push   $0x0
   pushl $25
-8010689e:	6a 19                	push   $0x19
+80105dfe:	6a 19                	push   $0x19
   jmp alltraps
-801068a0:	e9 72 fa ff ff       	jmp    80106317 <alltraps>
+80105e00:	e9 69 fa ff ff       	jmp    8010586e <alltraps>
 
-801068a5 <vector26>:
+80105e05 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-801068a5:	6a 00                	push   $0x0
+80105e05:	6a 00                	push   $0x0
   pushl $26
-801068a7:	6a 1a                	push   $0x1a
+80105e07:	6a 1a                	push   $0x1a
   jmp alltraps
-801068a9:	e9 69 fa ff ff       	jmp    80106317 <alltraps>
+80105e09:	e9 60 fa ff ff       	jmp    8010586e <alltraps>
 
-801068ae <vector27>:
+80105e0e <vector27>:
 .globl vector27
 vector27:
   pushl $0
-801068ae:	6a 00                	push   $0x0
+80105e0e:	6a 00                	push   $0x0
   pushl $27
-801068b0:	6a 1b                	push   $0x1b
+80105e10:	6a 1b                	push   $0x1b
   jmp alltraps
-801068b2:	e9 60 fa ff ff       	jmp    80106317 <alltraps>
+80105e12:	e9 57 fa ff ff       	jmp    8010586e <alltraps>
 
-801068b7 <vector28>:
+80105e17 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-801068b7:	6a 00                	push   $0x0
+80105e17:	6a 00                	push   $0x0
   pushl $28
-801068b9:	6a 1c                	push   $0x1c
+80105e19:	6a 1c                	push   $0x1c
   jmp alltraps
-801068bb:	e9 57 fa ff ff       	jmp    80106317 <alltraps>
+80105e1b:	e9 4e fa ff ff       	jmp    8010586e <alltraps>
 
-801068c0 <vector29>:
+80105e20 <vector29>:
 .globl vector29
 vector29:
   pushl $0
-801068c0:	6a 00                	push   $0x0
+80105e20:	6a 00                	push   $0x0
   pushl $29
-801068c2:	6a 1d                	push   $0x1d
+80105e22:	6a 1d                	push   $0x1d
   jmp alltraps
-801068c4:	e9 4e fa ff ff       	jmp    80106317 <alltraps>
+80105e24:	e9 45 fa ff ff       	jmp    8010586e <alltraps>
 
-801068c9 <vector30>:
+80105e29 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-801068c9:	6a 00                	push   $0x0
+80105e29:	6a 00                	push   $0x0
   pushl $30
-801068cb:	6a 1e                	push   $0x1e
+80105e2b:	6a 1e                	push   $0x1e
   jmp alltraps
-801068cd:	e9 45 fa ff ff       	jmp    80106317 <alltraps>
+80105e2d:	e9 3c fa ff ff       	jmp    8010586e <alltraps>
 
-801068d2 <vector31>:
+80105e32 <vector31>:
 .globl vector31
 vector31:
   pushl $0
-801068d2:	6a 00                	push   $0x0
+80105e32:	6a 00                	push   $0x0
   pushl $31
-801068d4:	6a 1f                	push   $0x1f
+80105e34:	6a 1f                	push   $0x1f
   jmp alltraps
-801068d6:	e9 3c fa ff ff       	jmp    80106317 <alltraps>
+80105e36:	e9 33 fa ff ff       	jmp    8010586e <alltraps>
 
-801068db <vector32>:
+80105e3b <vector32>:
 .globl vector32
 vector32:
   pushl $0
-801068db:	6a 00                	push   $0x0
+80105e3b:	6a 00                	push   $0x0
   pushl $32
-801068dd:	6a 20                	push   $0x20
+80105e3d:	6a 20                	push   $0x20
   jmp alltraps
-801068df:	e9 33 fa ff ff       	jmp    80106317 <alltraps>
+80105e3f:	e9 2a fa ff ff       	jmp    8010586e <alltraps>
 
-801068e4 <vector33>:
+80105e44 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-801068e4:	6a 00                	push   $0x0
+80105e44:	6a 00                	push   $0x0
   pushl $33
-801068e6:	6a 21                	push   $0x21
+80105e46:	6a 21                	push   $0x21
   jmp alltraps
-801068e8:	e9 2a fa ff ff       	jmp    80106317 <alltraps>
+80105e48:	e9 21 fa ff ff       	jmp    8010586e <alltraps>
 
-801068ed <vector34>:
+80105e4d <vector34>:
 .globl vector34
 vector34:
   pushl $0
-801068ed:	6a 00                	push   $0x0
+80105e4d:	6a 00                	push   $0x0
   pushl $34
-801068ef:	6a 22                	push   $0x22
+80105e4f:	6a 22                	push   $0x22
   jmp alltraps
-801068f1:	e9 21 fa ff ff       	jmp    80106317 <alltraps>
+80105e51:	e9 18 fa ff ff       	jmp    8010586e <alltraps>
 
-801068f6 <vector35>:
+80105e56 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-801068f6:	6a 00                	push   $0x0
+80105e56:	6a 00                	push   $0x0
   pushl $35
-801068f8:	6a 23                	push   $0x23
+80105e58:	6a 23                	push   $0x23
   jmp alltraps
-801068fa:	e9 18 fa ff ff       	jmp    80106317 <alltraps>
+80105e5a:	e9 0f fa ff ff       	jmp    8010586e <alltraps>
 
-801068ff <vector36>:
+80105e5f <vector36>:
 .globl vector36
 vector36:
   pushl $0
-801068ff:	6a 00                	push   $0x0
+80105e5f:	6a 00                	push   $0x0
   pushl $36
-80106901:	6a 24                	push   $0x24
+80105e61:	6a 24                	push   $0x24
   jmp alltraps
-80106903:	e9 0f fa ff ff       	jmp    80106317 <alltraps>
+80105e63:	e9 06 fa ff ff       	jmp    8010586e <alltraps>
 
-80106908 <vector37>:
+80105e68 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80106908:	6a 00                	push   $0x0
+80105e68:	6a 00                	push   $0x0
   pushl $37
-8010690a:	6a 25                	push   $0x25
+80105e6a:	6a 25                	push   $0x25
   jmp alltraps
-8010690c:	e9 06 fa ff ff       	jmp    80106317 <alltraps>
+80105e6c:	e9 fd f9 ff ff       	jmp    8010586e <alltraps>
 
-80106911 <vector38>:
+80105e71 <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80106911:	6a 00                	push   $0x0
+80105e71:	6a 00                	push   $0x0
   pushl $38
-80106913:	6a 26                	push   $0x26
+80105e73:	6a 26                	push   $0x26
   jmp alltraps
-80106915:	e9 fd f9 ff ff       	jmp    80106317 <alltraps>
+80105e75:	e9 f4 f9 ff ff       	jmp    8010586e <alltraps>
 
-8010691a <vector39>:
+80105e7a <vector39>:
 .globl vector39
 vector39:
   pushl $0
-8010691a:	6a 00                	push   $0x0
+80105e7a:	6a 00                	push   $0x0
   pushl $39
-8010691c:	6a 27                	push   $0x27
+80105e7c:	6a 27                	push   $0x27
   jmp alltraps
-8010691e:	e9 f4 f9 ff ff       	jmp    80106317 <alltraps>
+80105e7e:	e9 eb f9 ff ff       	jmp    8010586e <alltraps>
 
-80106923 <vector40>:
+80105e83 <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80106923:	6a 00                	push   $0x0
+80105e83:	6a 00                	push   $0x0
   pushl $40
-80106925:	6a 28                	push   $0x28
+80105e85:	6a 28                	push   $0x28
   jmp alltraps
-80106927:	e9 eb f9 ff ff       	jmp    80106317 <alltraps>
+80105e87:	e9 e2 f9 ff ff       	jmp    8010586e <alltraps>
 
-8010692c <vector41>:
+80105e8c <vector41>:
 .globl vector41
 vector41:
   pushl $0
-8010692c:	6a 00                	push   $0x0
+80105e8c:	6a 00                	push   $0x0
   pushl $41
-8010692e:	6a 29                	push   $0x29
+80105e8e:	6a 29                	push   $0x29
   jmp alltraps
-80106930:	e9 e2 f9 ff ff       	jmp    80106317 <alltraps>
+80105e90:	e9 d9 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106935 <vector42>:
+80105e95 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80106935:	6a 00                	push   $0x0
+80105e95:	6a 00                	push   $0x0
   pushl $42
-80106937:	6a 2a                	push   $0x2a
+80105e97:	6a 2a                	push   $0x2a
   jmp alltraps
-80106939:	e9 d9 f9 ff ff       	jmp    80106317 <alltraps>
+80105e99:	e9 d0 f9 ff ff       	jmp    8010586e <alltraps>
 
-8010693e <vector43>:
+80105e9e <vector43>:
 .globl vector43
 vector43:
   pushl $0
-8010693e:	6a 00                	push   $0x0
+80105e9e:	6a 00                	push   $0x0
   pushl $43
-80106940:	6a 2b                	push   $0x2b
+80105ea0:	6a 2b                	push   $0x2b
   jmp alltraps
-80106942:	e9 d0 f9 ff ff       	jmp    80106317 <alltraps>
+80105ea2:	e9 c7 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106947 <vector44>:
+80105ea7 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80106947:	6a 00                	push   $0x0
+80105ea7:	6a 00                	push   $0x0
   pushl $44
-80106949:	6a 2c                	push   $0x2c
+80105ea9:	6a 2c                	push   $0x2c
   jmp alltraps
-8010694b:	e9 c7 f9 ff ff       	jmp    80106317 <alltraps>
+80105eab:	e9 be f9 ff ff       	jmp    8010586e <alltraps>
 
-80106950 <vector45>:
+80105eb0 <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80106950:	6a 00                	push   $0x0
+80105eb0:	6a 00                	push   $0x0
   pushl $45
-80106952:	6a 2d                	push   $0x2d
+80105eb2:	6a 2d                	push   $0x2d
   jmp alltraps
-80106954:	e9 be f9 ff ff       	jmp    80106317 <alltraps>
+80105eb4:	e9 b5 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106959 <vector46>:
+80105eb9 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80106959:	6a 00                	push   $0x0
+80105eb9:	6a 00                	push   $0x0
   pushl $46
-8010695b:	6a 2e                	push   $0x2e
+80105ebb:	6a 2e                	push   $0x2e
   jmp alltraps
-8010695d:	e9 b5 f9 ff ff       	jmp    80106317 <alltraps>
+80105ebd:	e9 ac f9 ff ff       	jmp    8010586e <alltraps>
 
-80106962 <vector47>:
+80105ec2 <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80106962:	6a 00                	push   $0x0
+80105ec2:	6a 00                	push   $0x0
   pushl $47
-80106964:	6a 2f                	push   $0x2f
+80105ec4:	6a 2f                	push   $0x2f
   jmp alltraps
-80106966:	e9 ac f9 ff ff       	jmp    80106317 <alltraps>
+80105ec6:	e9 a3 f9 ff ff       	jmp    8010586e <alltraps>
 
-8010696b <vector48>:
+80105ecb <vector48>:
 .globl vector48
 vector48:
   pushl $0
-8010696b:	6a 00                	push   $0x0
+80105ecb:	6a 00                	push   $0x0
   pushl $48
-8010696d:	6a 30                	push   $0x30
+80105ecd:	6a 30                	push   $0x30
   jmp alltraps
-8010696f:	e9 a3 f9 ff ff       	jmp    80106317 <alltraps>
+80105ecf:	e9 9a f9 ff ff       	jmp    8010586e <alltraps>
 
-80106974 <vector49>:
+80105ed4 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80106974:	6a 00                	push   $0x0
+80105ed4:	6a 00                	push   $0x0
   pushl $49
-80106976:	6a 31                	push   $0x31
+80105ed6:	6a 31                	push   $0x31
   jmp alltraps
-80106978:	e9 9a f9 ff ff       	jmp    80106317 <alltraps>
+80105ed8:	e9 91 f9 ff ff       	jmp    8010586e <alltraps>
 
-8010697d <vector50>:
+80105edd <vector50>:
 .globl vector50
 vector50:
   pushl $0
-8010697d:	6a 00                	push   $0x0
+80105edd:	6a 00                	push   $0x0
   pushl $50
-8010697f:	6a 32                	push   $0x32
+80105edf:	6a 32                	push   $0x32
   jmp alltraps
-80106981:	e9 91 f9 ff ff       	jmp    80106317 <alltraps>
+80105ee1:	e9 88 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106986 <vector51>:
+80105ee6 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80106986:	6a 00                	push   $0x0
+80105ee6:	6a 00                	push   $0x0
   pushl $51
-80106988:	6a 33                	push   $0x33
+80105ee8:	6a 33                	push   $0x33
   jmp alltraps
-8010698a:	e9 88 f9 ff ff       	jmp    80106317 <alltraps>
+80105eea:	e9 7f f9 ff ff       	jmp    8010586e <alltraps>
 
-8010698f <vector52>:
+80105eef <vector52>:
 .globl vector52
 vector52:
   pushl $0
-8010698f:	6a 00                	push   $0x0
+80105eef:	6a 00                	push   $0x0
   pushl $52
-80106991:	6a 34                	push   $0x34
+80105ef1:	6a 34                	push   $0x34
   jmp alltraps
-80106993:	e9 7f f9 ff ff       	jmp    80106317 <alltraps>
+80105ef3:	e9 76 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106998 <vector53>:
+80105ef8 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80106998:	6a 00                	push   $0x0
+80105ef8:	6a 00                	push   $0x0
   pushl $53
-8010699a:	6a 35                	push   $0x35
+80105efa:	6a 35                	push   $0x35
   jmp alltraps
-8010699c:	e9 76 f9 ff ff       	jmp    80106317 <alltraps>
+80105efc:	e9 6d f9 ff ff       	jmp    8010586e <alltraps>
 
-801069a1 <vector54>:
+80105f01 <vector54>:
 .globl vector54
 vector54:
   pushl $0
-801069a1:	6a 00                	push   $0x0
+80105f01:	6a 00                	push   $0x0
   pushl $54
-801069a3:	6a 36                	push   $0x36
+80105f03:	6a 36                	push   $0x36
   jmp alltraps
-801069a5:	e9 6d f9 ff ff       	jmp    80106317 <alltraps>
+80105f05:	e9 64 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069aa <vector55>:
+80105f0a <vector55>:
 .globl vector55
 vector55:
   pushl $0
-801069aa:	6a 00                	push   $0x0
+80105f0a:	6a 00                	push   $0x0
   pushl $55
-801069ac:	6a 37                	push   $0x37
+80105f0c:	6a 37                	push   $0x37
   jmp alltraps
-801069ae:	e9 64 f9 ff ff       	jmp    80106317 <alltraps>
+80105f0e:	e9 5b f9 ff ff       	jmp    8010586e <alltraps>
 
-801069b3 <vector56>:
+80105f13 <vector56>:
 .globl vector56
 vector56:
   pushl $0
-801069b3:	6a 00                	push   $0x0
+80105f13:	6a 00                	push   $0x0
   pushl $56
-801069b5:	6a 38                	push   $0x38
+80105f15:	6a 38                	push   $0x38
   jmp alltraps
-801069b7:	e9 5b f9 ff ff       	jmp    80106317 <alltraps>
+80105f17:	e9 52 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069bc <vector57>:
+80105f1c <vector57>:
 .globl vector57
 vector57:
   pushl $0
-801069bc:	6a 00                	push   $0x0
+80105f1c:	6a 00                	push   $0x0
   pushl $57
-801069be:	6a 39                	push   $0x39
+80105f1e:	6a 39                	push   $0x39
   jmp alltraps
-801069c0:	e9 52 f9 ff ff       	jmp    80106317 <alltraps>
+80105f20:	e9 49 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069c5 <vector58>:
+80105f25 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-801069c5:	6a 00                	push   $0x0
+80105f25:	6a 00                	push   $0x0
   pushl $58
-801069c7:	6a 3a                	push   $0x3a
+80105f27:	6a 3a                	push   $0x3a
   jmp alltraps
-801069c9:	e9 49 f9 ff ff       	jmp    80106317 <alltraps>
+80105f29:	e9 40 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069ce <vector59>:
+80105f2e <vector59>:
 .globl vector59
 vector59:
   pushl $0
-801069ce:	6a 00                	push   $0x0
+80105f2e:	6a 00                	push   $0x0
   pushl $59
-801069d0:	6a 3b                	push   $0x3b
+80105f30:	6a 3b                	push   $0x3b
   jmp alltraps
-801069d2:	e9 40 f9 ff ff       	jmp    80106317 <alltraps>
+80105f32:	e9 37 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069d7 <vector60>:
+80105f37 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-801069d7:	6a 00                	push   $0x0
+80105f37:	6a 00                	push   $0x0
   pushl $60
-801069d9:	6a 3c                	push   $0x3c
+80105f39:	6a 3c                	push   $0x3c
   jmp alltraps
-801069db:	e9 37 f9 ff ff       	jmp    80106317 <alltraps>
+80105f3b:	e9 2e f9 ff ff       	jmp    8010586e <alltraps>
 
-801069e0 <vector61>:
+80105f40 <vector61>:
 .globl vector61
 vector61:
   pushl $0
-801069e0:	6a 00                	push   $0x0
+80105f40:	6a 00                	push   $0x0
   pushl $61
-801069e2:	6a 3d                	push   $0x3d
+80105f42:	6a 3d                	push   $0x3d
   jmp alltraps
-801069e4:	e9 2e f9 ff ff       	jmp    80106317 <alltraps>
+80105f44:	e9 25 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069e9 <vector62>:
+80105f49 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-801069e9:	6a 00                	push   $0x0
+80105f49:	6a 00                	push   $0x0
   pushl $62
-801069eb:	6a 3e                	push   $0x3e
+80105f4b:	6a 3e                	push   $0x3e
   jmp alltraps
-801069ed:	e9 25 f9 ff ff       	jmp    80106317 <alltraps>
+80105f4d:	e9 1c f9 ff ff       	jmp    8010586e <alltraps>
 
-801069f2 <vector63>:
+80105f52 <vector63>:
 .globl vector63
 vector63:
   pushl $0
-801069f2:	6a 00                	push   $0x0
+80105f52:	6a 00                	push   $0x0
   pushl $63
-801069f4:	6a 3f                	push   $0x3f
+80105f54:	6a 3f                	push   $0x3f
   jmp alltraps
-801069f6:	e9 1c f9 ff ff       	jmp    80106317 <alltraps>
+80105f56:	e9 13 f9 ff ff       	jmp    8010586e <alltraps>
 
-801069fb <vector64>:
+80105f5b <vector64>:
 .globl vector64
 vector64:
   pushl $0
-801069fb:	6a 00                	push   $0x0
+80105f5b:	6a 00                	push   $0x0
   pushl $64
-801069fd:	6a 40                	push   $0x40
+80105f5d:	6a 40                	push   $0x40
   jmp alltraps
-801069ff:	e9 13 f9 ff ff       	jmp    80106317 <alltraps>
+80105f5f:	e9 0a f9 ff ff       	jmp    8010586e <alltraps>
 
-80106a04 <vector65>:
+80105f64 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80106a04:	6a 00                	push   $0x0
+80105f64:	6a 00                	push   $0x0
   pushl $65
-80106a06:	6a 41                	push   $0x41
+80105f66:	6a 41                	push   $0x41
   jmp alltraps
-80106a08:	e9 0a f9 ff ff       	jmp    80106317 <alltraps>
+80105f68:	e9 01 f9 ff ff       	jmp    8010586e <alltraps>
 
-80106a0d <vector66>:
+80105f6d <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80106a0d:	6a 00                	push   $0x0
+80105f6d:	6a 00                	push   $0x0
   pushl $66
-80106a0f:	6a 42                	push   $0x42
+80105f6f:	6a 42                	push   $0x42
   jmp alltraps
-80106a11:	e9 01 f9 ff ff       	jmp    80106317 <alltraps>
+80105f71:	e9 f8 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a16 <vector67>:
+80105f76 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80106a16:	6a 00                	push   $0x0
+80105f76:	6a 00                	push   $0x0
   pushl $67
-80106a18:	6a 43                	push   $0x43
+80105f78:	6a 43                	push   $0x43
   jmp alltraps
-80106a1a:	e9 f8 f8 ff ff       	jmp    80106317 <alltraps>
+80105f7a:	e9 ef f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a1f <vector68>:
+80105f7f <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80106a1f:	6a 00                	push   $0x0
+80105f7f:	6a 00                	push   $0x0
   pushl $68
-80106a21:	6a 44                	push   $0x44
+80105f81:	6a 44                	push   $0x44
   jmp alltraps
-80106a23:	e9 ef f8 ff ff       	jmp    80106317 <alltraps>
+80105f83:	e9 e6 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a28 <vector69>:
+80105f88 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80106a28:	6a 00                	push   $0x0
+80105f88:	6a 00                	push   $0x0
   pushl $69
-80106a2a:	6a 45                	push   $0x45
+80105f8a:	6a 45                	push   $0x45
   jmp alltraps
-80106a2c:	e9 e6 f8 ff ff       	jmp    80106317 <alltraps>
+80105f8c:	e9 dd f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a31 <vector70>:
+80105f91 <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80106a31:	6a 00                	push   $0x0
+80105f91:	6a 00                	push   $0x0
   pushl $70
-80106a33:	6a 46                	push   $0x46
+80105f93:	6a 46                	push   $0x46
   jmp alltraps
-80106a35:	e9 dd f8 ff ff       	jmp    80106317 <alltraps>
+80105f95:	e9 d4 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a3a <vector71>:
+80105f9a <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80106a3a:	6a 00                	push   $0x0
+80105f9a:	6a 00                	push   $0x0
   pushl $71
-80106a3c:	6a 47                	push   $0x47
+80105f9c:	6a 47                	push   $0x47
   jmp alltraps
-80106a3e:	e9 d4 f8 ff ff       	jmp    80106317 <alltraps>
+80105f9e:	e9 cb f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a43 <vector72>:
+80105fa3 <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80106a43:	6a 00                	push   $0x0
+80105fa3:	6a 00                	push   $0x0
   pushl $72
-80106a45:	6a 48                	push   $0x48
+80105fa5:	6a 48                	push   $0x48
   jmp alltraps
-80106a47:	e9 cb f8 ff ff       	jmp    80106317 <alltraps>
+80105fa7:	e9 c2 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a4c <vector73>:
+80105fac <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80106a4c:	6a 00                	push   $0x0
+80105fac:	6a 00                	push   $0x0
   pushl $73
-80106a4e:	6a 49                	push   $0x49
+80105fae:	6a 49                	push   $0x49
   jmp alltraps
-80106a50:	e9 c2 f8 ff ff       	jmp    80106317 <alltraps>
+80105fb0:	e9 b9 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a55 <vector74>:
+80105fb5 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80106a55:	6a 00                	push   $0x0
+80105fb5:	6a 00                	push   $0x0
   pushl $74
-80106a57:	6a 4a                	push   $0x4a
+80105fb7:	6a 4a                	push   $0x4a
   jmp alltraps
-80106a59:	e9 b9 f8 ff ff       	jmp    80106317 <alltraps>
+80105fb9:	e9 b0 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a5e <vector75>:
+80105fbe <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80106a5e:	6a 00                	push   $0x0
+80105fbe:	6a 00                	push   $0x0
   pushl $75
-80106a60:	6a 4b                	push   $0x4b
+80105fc0:	6a 4b                	push   $0x4b
   jmp alltraps
-80106a62:	e9 b0 f8 ff ff       	jmp    80106317 <alltraps>
+80105fc2:	e9 a7 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a67 <vector76>:
+80105fc7 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80106a67:	6a 00                	push   $0x0
+80105fc7:	6a 00                	push   $0x0
   pushl $76
-80106a69:	6a 4c                	push   $0x4c
+80105fc9:	6a 4c                	push   $0x4c
   jmp alltraps
-80106a6b:	e9 a7 f8 ff ff       	jmp    80106317 <alltraps>
+80105fcb:	e9 9e f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a70 <vector77>:
+80105fd0 <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80106a70:	6a 00                	push   $0x0
+80105fd0:	6a 00                	push   $0x0
   pushl $77
-80106a72:	6a 4d                	push   $0x4d
+80105fd2:	6a 4d                	push   $0x4d
   jmp alltraps
-80106a74:	e9 9e f8 ff ff       	jmp    80106317 <alltraps>
+80105fd4:	e9 95 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a79 <vector78>:
+80105fd9 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80106a79:	6a 00                	push   $0x0
+80105fd9:	6a 00                	push   $0x0
   pushl $78
-80106a7b:	6a 4e                	push   $0x4e
+80105fdb:	6a 4e                	push   $0x4e
   jmp alltraps
-80106a7d:	e9 95 f8 ff ff       	jmp    80106317 <alltraps>
+80105fdd:	e9 8c f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a82 <vector79>:
+80105fe2 <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80106a82:	6a 00                	push   $0x0
+80105fe2:	6a 00                	push   $0x0
   pushl $79
-80106a84:	6a 4f                	push   $0x4f
+80105fe4:	6a 4f                	push   $0x4f
   jmp alltraps
-80106a86:	e9 8c f8 ff ff       	jmp    80106317 <alltraps>
+80105fe6:	e9 83 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a8b <vector80>:
+80105feb <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80106a8b:	6a 00                	push   $0x0
+80105feb:	6a 00                	push   $0x0
   pushl $80
-80106a8d:	6a 50                	push   $0x50
+80105fed:	6a 50                	push   $0x50
   jmp alltraps
-80106a8f:	e9 83 f8 ff ff       	jmp    80106317 <alltraps>
+80105fef:	e9 7a f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a94 <vector81>:
+80105ff4 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80106a94:	6a 00                	push   $0x0
+80105ff4:	6a 00                	push   $0x0
   pushl $81
-80106a96:	6a 51                	push   $0x51
+80105ff6:	6a 51                	push   $0x51
   jmp alltraps
-80106a98:	e9 7a f8 ff ff       	jmp    80106317 <alltraps>
+80105ff8:	e9 71 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106a9d <vector82>:
+80105ffd <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80106a9d:	6a 00                	push   $0x0
+80105ffd:	6a 00                	push   $0x0
   pushl $82
-80106a9f:	6a 52                	push   $0x52
+80105fff:	6a 52                	push   $0x52
   jmp alltraps
-80106aa1:	e9 71 f8 ff ff       	jmp    80106317 <alltraps>
+80106001:	e9 68 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106aa6 <vector83>:
+80106006 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106aa6:	6a 00                	push   $0x0
+80106006:	6a 00                	push   $0x0
   pushl $83
-80106aa8:	6a 53                	push   $0x53
+80106008:	6a 53                	push   $0x53
   jmp alltraps
-80106aaa:	e9 68 f8 ff ff       	jmp    80106317 <alltraps>
+8010600a:	e9 5f f8 ff ff       	jmp    8010586e <alltraps>
 
-80106aaf <vector84>:
+8010600f <vector84>:
 .globl vector84
 vector84:
   pushl $0
-80106aaf:	6a 00                	push   $0x0
+8010600f:	6a 00                	push   $0x0
   pushl $84
-80106ab1:	6a 54                	push   $0x54
+80106011:	6a 54                	push   $0x54
   jmp alltraps
-80106ab3:	e9 5f f8 ff ff       	jmp    80106317 <alltraps>
+80106013:	e9 56 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106ab8 <vector85>:
+80106018 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106ab8:	6a 00                	push   $0x0
+80106018:	6a 00                	push   $0x0
   pushl $85
-80106aba:	6a 55                	push   $0x55
+8010601a:	6a 55                	push   $0x55
   jmp alltraps
-80106abc:	e9 56 f8 ff ff       	jmp    80106317 <alltraps>
+8010601c:	e9 4d f8 ff ff       	jmp    8010586e <alltraps>
 
-80106ac1 <vector86>:
+80106021 <vector86>:
 .globl vector86
 vector86:
   pushl $0
-80106ac1:	6a 00                	push   $0x0
+80106021:	6a 00                	push   $0x0
   pushl $86
-80106ac3:	6a 56                	push   $0x56
+80106023:	6a 56                	push   $0x56
   jmp alltraps
-80106ac5:	e9 4d f8 ff ff       	jmp    80106317 <alltraps>
+80106025:	e9 44 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106aca <vector87>:
+8010602a <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80106aca:	6a 00                	push   $0x0
+8010602a:	6a 00                	push   $0x0
   pushl $87
-80106acc:	6a 57                	push   $0x57
+8010602c:	6a 57                	push   $0x57
   jmp alltraps
-80106ace:	e9 44 f8 ff ff       	jmp    80106317 <alltraps>
+8010602e:	e9 3b f8 ff ff       	jmp    8010586e <alltraps>
 
-80106ad3 <vector88>:
+80106033 <vector88>:
 .globl vector88
 vector88:
   pushl $0
-80106ad3:	6a 00                	push   $0x0
+80106033:	6a 00                	push   $0x0
   pushl $88
-80106ad5:	6a 58                	push   $0x58
+80106035:	6a 58                	push   $0x58
   jmp alltraps
-80106ad7:	e9 3b f8 ff ff       	jmp    80106317 <alltraps>
+80106037:	e9 32 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106adc <vector89>:
+8010603c <vector89>:
 .globl vector89
 vector89:
   pushl $0
-80106adc:	6a 00                	push   $0x0
+8010603c:	6a 00                	push   $0x0
   pushl $89
-80106ade:	6a 59                	push   $0x59
+8010603e:	6a 59                	push   $0x59
   jmp alltraps
-80106ae0:	e9 32 f8 ff ff       	jmp    80106317 <alltraps>
+80106040:	e9 29 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106ae5 <vector90>:
+80106045 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106ae5:	6a 00                	push   $0x0
+80106045:	6a 00                	push   $0x0
   pushl $90
-80106ae7:	6a 5a                	push   $0x5a
+80106047:	6a 5a                	push   $0x5a
   jmp alltraps
-80106ae9:	e9 29 f8 ff ff       	jmp    80106317 <alltraps>
+80106049:	e9 20 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106aee <vector91>:
+8010604e <vector91>:
 .globl vector91
 vector91:
   pushl $0
-80106aee:	6a 00                	push   $0x0
+8010604e:	6a 00                	push   $0x0
   pushl $91
-80106af0:	6a 5b                	push   $0x5b
+80106050:	6a 5b                	push   $0x5b
   jmp alltraps
-80106af2:	e9 20 f8 ff ff       	jmp    80106317 <alltraps>
+80106052:	e9 17 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106af7 <vector92>:
+80106057 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106af7:	6a 00                	push   $0x0
+80106057:	6a 00                	push   $0x0
   pushl $92
-80106af9:	6a 5c                	push   $0x5c
+80106059:	6a 5c                	push   $0x5c
   jmp alltraps
-80106afb:	e9 17 f8 ff ff       	jmp    80106317 <alltraps>
+8010605b:	e9 0e f8 ff ff       	jmp    8010586e <alltraps>
 
-80106b00 <vector93>:
+80106060 <vector93>:
 .globl vector93
 vector93:
   pushl $0
-80106b00:	6a 00                	push   $0x0
+80106060:	6a 00                	push   $0x0
   pushl $93
-80106b02:	6a 5d                	push   $0x5d
+80106062:	6a 5d                	push   $0x5d
   jmp alltraps
-80106b04:	e9 0e f8 ff ff       	jmp    80106317 <alltraps>
+80106064:	e9 05 f8 ff ff       	jmp    8010586e <alltraps>
 
-80106b09 <vector94>:
+80106069 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106b09:	6a 00                	push   $0x0
+80106069:	6a 00                	push   $0x0
   pushl $94
-80106b0b:	6a 5e                	push   $0x5e
+8010606b:	6a 5e                	push   $0x5e
   jmp alltraps
-80106b0d:	e9 05 f8 ff ff       	jmp    80106317 <alltraps>
+8010606d:	e9 fc f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b12 <vector95>:
+80106072 <vector95>:
 .globl vector95
 vector95:
   pushl $0
-80106b12:	6a 00                	push   $0x0
+80106072:	6a 00                	push   $0x0
   pushl $95
-80106b14:	6a 5f                	push   $0x5f
+80106074:	6a 5f                	push   $0x5f
   jmp alltraps
-80106b16:	e9 fc f7 ff ff       	jmp    80106317 <alltraps>
+80106076:	e9 f3 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b1b <vector96>:
+8010607b <vector96>:
 .globl vector96
 vector96:
   pushl $0
-80106b1b:	6a 00                	push   $0x0
+8010607b:	6a 00                	push   $0x0
   pushl $96
-80106b1d:	6a 60                	push   $0x60
+8010607d:	6a 60                	push   $0x60
   jmp alltraps
-80106b1f:	e9 f3 f7 ff ff       	jmp    80106317 <alltraps>
+8010607f:	e9 ea f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b24 <vector97>:
+80106084 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106b24:	6a 00                	push   $0x0
+80106084:	6a 00                	push   $0x0
   pushl $97
-80106b26:	6a 61                	push   $0x61
+80106086:	6a 61                	push   $0x61
   jmp alltraps
-80106b28:	e9 ea f7 ff ff       	jmp    80106317 <alltraps>
+80106088:	e9 e1 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b2d <vector98>:
+8010608d <vector98>:
 .globl vector98
 vector98:
   pushl $0
-80106b2d:	6a 00                	push   $0x0
+8010608d:	6a 00                	push   $0x0
   pushl $98
-80106b2f:	6a 62                	push   $0x62
+8010608f:	6a 62                	push   $0x62
   jmp alltraps
-80106b31:	e9 e1 f7 ff ff       	jmp    80106317 <alltraps>
+80106091:	e9 d8 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b36 <vector99>:
+80106096 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106b36:	6a 00                	push   $0x0
+80106096:	6a 00                	push   $0x0
   pushl $99
-80106b38:	6a 63                	push   $0x63
+80106098:	6a 63                	push   $0x63
   jmp alltraps
-80106b3a:	e9 d8 f7 ff ff       	jmp    80106317 <alltraps>
+8010609a:	e9 cf f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b3f <vector100>:
+8010609f <vector100>:
 .globl vector100
 vector100:
   pushl $0
-80106b3f:	6a 00                	push   $0x0
+8010609f:	6a 00                	push   $0x0
   pushl $100
-80106b41:	6a 64                	push   $0x64
+801060a1:	6a 64                	push   $0x64
   jmp alltraps
-80106b43:	e9 cf f7 ff ff       	jmp    80106317 <alltraps>
+801060a3:	e9 c6 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b48 <vector101>:
+801060a8 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-80106b48:	6a 00                	push   $0x0
+801060a8:	6a 00                	push   $0x0
   pushl $101
-80106b4a:	6a 65                	push   $0x65
+801060aa:	6a 65                	push   $0x65
   jmp alltraps
-80106b4c:	e9 c6 f7 ff ff       	jmp    80106317 <alltraps>
+801060ac:	e9 bd f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b51 <vector102>:
+801060b1 <vector102>:
 .globl vector102
 vector102:
   pushl $0
-80106b51:	6a 00                	push   $0x0
+801060b1:	6a 00                	push   $0x0
   pushl $102
-80106b53:	6a 66                	push   $0x66
+801060b3:	6a 66                	push   $0x66
   jmp alltraps
-80106b55:	e9 bd f7 ff ff       	jmp    80106317 <alltraps>
+801060b5:	e9 b4 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b5a <vector103>:
+801060ba <vector103>:
 .globl vector103
 vector103:
   pushl $0
-80106b5a:	6a 00                	push   $0x0
+801060ba:	6a 00                	push   $0x0
   pushl $103
-80106b5c:	6a 67                	push   $0x67
+801060bc:	6a 67                	push   $0x67
   jmp alltraps
-80106b5e:	e9 b4 f7 ff ff       	jmp    80106317 <alltraps>
+801060be:	e9 ab f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b63 <vector104>:
+801060c3 <vector104>:
 .globl vector104
 vector104:
   pushl $0
-80106b63:	6a 00                	push   $0x0
+801060c3:	6a 00                	push   $0x0
   pushl $104
-80106b65:	6a 68                	push   $0x68
+801060c5:	6a 68                	push   $0x68
   jmp alltraps
-80106b67:	e9 ab f7 ff ff       	jmp    80106317 <alltraps>
+801060c7:	e9 a2 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b6c <vector105>:
+801060cc <vector105>:
 .globl vector105
 vector105:
   pushl $0
-80106b6c:	6a 00                	push   $0x0
+801060cc:	6a 00                	push   $0x0
   pushl $105
-80106b6e:	6a 69                	push   $0x69
+801060ce:	6a 69                	push   $0x69
   jmp alltraps
-80106b70:	e9 a2 f7 ff ff       	jmp    80106317 <alltraps>
+801060d0:	e9 99 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b75 <vector106>:
+801060d5 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-80106b75:	6a 00                	push   $0x0
+801060d5:	6a 00                	push   $0x0
   pushl $106
-80106b77:	6a 6a                	push   $0x6a
+801060d7:	6a 6a                	push   $0x6a
   jmp alltraps
-80106b79:	e9 99 f7 ff ff       	jmp    80106317 <alltraps>
+801060d9:	e9 90 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b7e <vector107>:
+801060de <vector107>:
 .globl vector107
 vector107:
   pushl $0
-80106b7e:	6a 00                	push   $0x0
+801060de:	6a 00                	push   $0x0
   pushl $107
-80106b80:	6a 6b                	push   $0x6b
+801060e0:	6a 6b                	push   $0x6b
   jmp alltraps
-80106b82:	e9 90 f7 ff ff       	jmp    80106317 <alltraps>
+801060e2:	e9 87 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b87 <vector108>:
+801060e7 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-80106b87:	6a 00                	push   $0x0
+801060e7:	6a 00                	push   $0x0
   pushl $108
-80106b89:	6a 6c                	push   $0x6c
+801060e9:	6a 6c                	push   $0x6c
   jmp alltraps
-80106b8b:	e9 87 f7 ff ff       	jmp    80106317 <alltraps>
+801060eb:	e9 7e f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b90 <vector109>:
+801060f0 <vector109>:
 .globl vector109
 vector109:
   pushl $0
-80106b90:	6a 00                	push   $0x0
+801060f0:	6a 00                	push   $0x0
   pushl $109
-80106b92:	6a 6d                	push   $0x6d
+801060f2:	6a 6d                	push   $0x6d
   jmp alltraps
-80106b94:	e9 7e f7 ff ff       	jmp    80106317 <alltraps>
+801060f4:	e9 75 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106b99 <vector110>:
+801060f9 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-80106b99:	6a 00                	push   $0x0
+801060f9:	6a 00                	push   $0x0
   pushl $110
-80106b9b:	6a 6e                	push   $0x6e
+801060fb:	6a 6e                	push   $0x6e
   jmp alltraps
-80106b9d:	e9 75 f7 ff ff       	jmp    80106317 <alltraps>
+801060fd:	e9 6c f7 ff ff       	jmp    8010586e <alltraps>
 
-80106ba2 <vector111>:
+80106102 <vector111>:
 .globl vector111
 vector111:
   pushl $0
-80106ba2:	6a 00                	push   $0x0
+80106102:	6a 00                	push   $0x0
   pushl $111
-80106ba4:	6a 6f                	push   $0x6f
+80106104:	6a 6f                	push   $0x6f
   jmp alltraps
-80106ba6:	e9 6c f7 ff ff       	jmp    80106317 <alltraps>
+80106106:	e9 63 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bab <vector112>:
+8010610b <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106bab:	6a 00                	push   $0x0
+8010610b:	6a 00                	push   $0x0
   pushl $112
-80106bad:	6a 70                	push   $0x70
+8010610d:	6a 70                	push   $0x70
   jmp alltraps
-80106baf:	e9 63 f7 ff ff       	jmp    80106317 <alltraps>
+8010610f:	e9 5a f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bb4 <vector113>:
+80106114 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106bb4:	6a 00                	push   $0x0
+80106114:	6a 00                	push   $0x0
   pushl $113
-80106bb6:	6a 71                	push   $0x71
+80106116:	6a 71                	push   $0x71
   jmp alltraps
-80106bb8:	e9 5a f7 ff ff       	jmp    80106317 <alltraps>
+80106118:	e9 51 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bbd <vector114>:
+8010611d <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80106bbd:	6a 00                	push   $0x0
+8010611d:	6a 00                	push   $0x0
   pushl $114
-80106bbf:	6a 72                	push   $0x72
+8010611f:	6a 72                	push   $0x72
   jmp alltraps
-80106bc1:	e9 51 f7 ff ff       	jmp    80106317 <alltraps>
+80106121:	e9 48 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bc6 <vector115>:
+80106126 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106bc6:	6a 00                	push   $0x0
+80106126:	6a 00                	push   $0x0
   pushl $115
-80106bc8:	6a 73                	push   $0x73
+80106128:	6a 73                	push   $0x73
   jmp alltraps
-80106bca:	e9 48 f7 ff ff       	jmp    80106317 <alltraps>
+8010612a:	e9 3f f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bcf <vector116>:
+8010612f <vector116>:
 .globl vector116
 vector116:
   pushl $0
-80106bcf:	6a 00                	push   $0x0
+8010612f:	6a 00                	push   $0x0
   pushl $116
-80106bd1:	6a 74                	push   $0x74
+80106131:	6a 74                	push   $0x74
   jmp alltraps
-80106bd3:	e9 3f f7 ff ff       	jmp    80106317 <alltraps>
+80106133:	e9 36 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bd8 <vector117>:
+80106138 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106bd8:	6a 00                	push   $0x0
+80106138:	6a 00                	push   $0x0
   pushl $117
-80106bda:	6a 75                	push   $0x75
+8010613a:	6a 75                	push   $0x75
   jmp alltraps
-80106bdc:	e9 36 f7 ff ff       	jmp    80106317 <alltraps>
+8010613c:	e9 2d f7 ff ff       	jmp    8010586e <alltraps>
 
-80106be1 <vector118>:
+80106141 <vector118>:
 .globl vector118
 vector118:
   pushl $0
-80106be1:	6a 00                	push   $0x0
+80106141:	6a 00                	push   $0x0
   pushl $118
-80106be3:	6a 76                	push   $0x76
+80106143:	6a 76                	push   $0x76
   jmp alltraps
-80106be5:	e9 2d f7 ff ff       	jmp    80106317 <alltraps>
+80106145:	e9 24 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bea <vector119>:
+8010614a <vector119>:
 .globl vector119
 vector119:
   pushl $0
-80106bea:	6a 00                	push   $0x0
+8010614a:	6a 00                	push   $0x0
   pushl $119
-80106bec:	6a 77                	push   $0x77
+8010614c:	6a 77                	push   $0x77
   jmp alltraps
-80106bee:	e9 24 f7 ff ff       	jmp    80106317 <alltraps>
+8010614e:	e9 1b f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bf3 <vector120>:
+80106153 <vector120>:
 .globl vector120
 vector120:
   pushl $0
-80106bf3:	6a 00                	push   $0x0
+80106153:	6a 00                	push   $0x0
   pushl $120
-80106bf5:	6a 78                	push   $0x78
+80106155:	6a 78                	push   $0x78
   jmp alltraps
-80106bf7:	e9 1b f7 ff ff       	jmp    80106317 <alltraps>
+80106157:	e9 12 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106bfc <vector121>:
+8010615c <vector121>:
 .globl vector121
 vector121:
   pushl $0
-80106bfc:	6a 00                	push   $0x0
+8010615c:	6a 00                	push   $0x0
   pushl $121
-80106bfe:	6a 79                	push   $0x79
+8010615e:	6a 79                	push   $0x79
   jmp alltraps
-80106c00:	e9 12 f7 ff ff       	jmp    80106317 <alltraps>
+80106160:	e9 09 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106c05 <vector122>:
+80106165 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106c05:	6a 00                	push   $0x0
+80106165:	6a 00                	push   $0x0
   pushl $122
-80106c07:	6a 7a                	push   $0x7a
+80106167:	6a 7a                	push   $0x7a
   jmp alltraps
-80106c09:	e9 09 f7 ff ff       	jmp    80106317 <alltraps>
+80106169:	e9 00 f7 ff ff       	jmp    8010586e <alltraps>
 
-80106c0e <vector123>:
+8010616e <vector123>:
 .globl vector123
 vector123:
   pushl $0
-80106c0e:	6a 00                	push   $0x0
+8010616e:	6a 00                	push   $0x0
   pushl $123
-80106c10:	6a 7b                	push   $0x7b
+80106170:	6a 7b                	push   $0x7b
   jmp alltraps
-80106c12:	e9 00 f7 ff ff       	jmp    80106317 <alltraps>
+80106172:	e9 f7 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c17 <vector124>:
+80106177 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106c17:	6a 00                	push   $0x0
+80106177:	6a 00                	push   $0x0
   pushl $124
-80106c19:	6a 7c                	push   $0x7c
+80106179:	6a 7c                	push   $0x7c
   jmp alltraps
-80106c1b:	e9 f7 f6 ff ff       	jmp    80106317 <alltraps>
+8010617b:	e9 ee f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c20 <vector125>:
+80106180 <vector125>:
 .globl vector125
 vector125:
   pushl $0
-80106c20:	6a 00                	push   $0x0
+80106180:	6a 00                	push   $0x0
   pushl $125
-80106c22:	6a 7d                	push   $0x7d
+80106182:	6a 7d                	push   $0x7d
   jmp alltraps
-80106c24:	e9 ee f6 ff ff       	jmp    80106317 <alltraps>
+80106184:	e9 e5 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c29 <vector126>:
+80106189 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106c29:	6a 00                	push   $0x0
+80106189:	6a 00                	push   $0x0
   pushl $126
-80106c2b:	6a 7e                	push   $0x7e
+8010618b:	6a 7e                	push   $0x7e
   jmp alltraps
-80106c2d:	e9 e5 f6 ff ff       	jmp    80106317 <alltraps>
+8010618d:	e9 dc f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c32 <vector127>:
+80106192 <vector127>:
 .globl vector127
 vector127:
   pushl $0
-80106c32:	6a 00                	push   $0x0
+80106192:	6a 00                	push   $0x0
   pushl $127
-80106c34:	6a 7f                	push   $0x7f
+80106194:	6a 7f                	push   $0x7f
   jmp alltraps
-80106c36:	e9 dc f6 ff ff       	jmp    80106317 <alltraps>
+80106196:	e9 d3 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c3b <vector128>:
+8010619b <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80106c3b:	6a 00                	push   $0x0
+8010619b:	6a 00                	push   $0x0
   pushl $128
-80106c3d:	68 80 00 00 00       	push   $0x80
+8010619d:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-80106c42:	e9 d0 f6 ff ff       	jmp    80106317 <alltraps>
+801061a2:	e9 c7 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c47 <vector129>:
+801061a7 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-80106c47:	6a 00                	push   $0x0
+801061a7:	6a 00                	push   $0x0
   pushl $129
-80106c49:	68 81 00 00 00       	push   $0x81
+801061a9:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-80106c4e:	e9 c4 f6 ff ff       	jmp    80106317 <alltraps>
+801061ae:	e9 bb f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c53 <vector130>:
+801061b3 <vector130>:
 .globl vector130
 vector130:
   pushl $0
-80106c53:	6a 00                	push   $0x0
+801061b3:	6a 00                	push   $0x0
   pushl $130
-80106c55:	68 82 00 00 00       	push   $0x82
+801061b5:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-80106c5a:	e9 b8 f6 ff ff       	jmp    80106317 <alltraps>
+801061ba:	e9 af f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c5f <vector131>:
+801061bf <vector131>:
 .globl vector131
 vector131:
   pushl $0
-80106c5f:	6a 00                	push   $0x0
+801061bf:	6a 00                	push   $0x0
   pushl $131
-80106c61:	68 83 00 00 00       	push   $0x83
+801061c1:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-80106c66:	e9 ac f6 ff ff       	jmp    80106317 <alltraps>
+801061c6:	e9 a3 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c6b <vector132>:
+801061cb <vector132>:
 .globl vector132
 vector132:
   pushl $0
-80106c6b:	6a 00                	push   $0x0
+801061cb:	6a 00                	push   $0x0
   pushl $132
-80106c6d:	68 84 00 00 00       	push   $0x84
+801061cd:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-80106c72:	e9 a0 f6 ff ff       	jmp    80106317 <alltraps>
+801061d2:	e9 97 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c77 <vector133>:
+801061d7 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-80106c77:	6a 00                	push   $0x0
+801061d7:	6a 00                	push   $0x0
   pushl $133
-80106c79:	68 85 00 00 00       	push   $0x85
+801061d9:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-80106c7e:	e9 94 f6 ff ff       	jmp    80106317 <alltraps>
+801061de:	e9 8b f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c83 <vector134>:
+801061e3 <vector134>:
 .globl vector134
 vector134:
   pushl $0
-80106c83:	6a 00                	push   $0x0
+801061e3:	6a 00                	push   $0x0
   pushl $134
-80106c85:	68 86 00 00 00       	push   $0x86
+801061e5:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-80106c8a:	e9 88 f6 ff ff       	jmp    80106317 <alltraps>
+801061ea:	e9 7f f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c8f <vector135>:
+801061ef <vector135>:
 .globl vector135
 vector135:
   pushl $0
-80106c8f:	6a 00                	push   $0x0
+801061ef:	6a 00                	push   $0x0
   pushl $135
-80106c91:	68 87 00 00 00       	push   $0x87
+801061f1:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-80106c96:	e9 7c f6 ff ff       	jmp    80106317 <alltraps>
+801061f6:	e9 73 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106c9b <vector136>:
+801061fb <vector136>:
 .globl vector136
 vector136:
   pushl $0
-80106c9b:	6a 00                	push   $0x0
+801061fb:	6a 00                	push   $0x0
   pushl $136
-80106c9d:	68 88 00 00 00       	push   $0x88
+801061fd:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-80106ca2:	e9 70 f6 ff ff       	jmp    80106317 <alltraps>
+80106202:	e9 67 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106ca7 <vector137>:
+80106207 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106ca7:	6a 00                	push   $0x0
+80106207:	6a 00                	push   $0x0
   pushl $137
-80106ca9:	68 89 00 00 00       	push   $0x89
+80106209:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-80106cae:	e9 64 f6 ff ff       	jmp    80106317 <alltraps>
+8010620e:	e9 5b f6 ff ff       	jmp    8010586e <alltraps>
 
-80106cb3 <vector138>:
+80106213 <vector138>:
 .globl vector138
 vector138:
   pushl $0
-80106cb3:	6a 00                	push   $0x0
+80106213:	6a 00                	push   $0x0
   pushl $138
-80106cb5:	68 8a 00 00 00       	push   $0x8a
+80106215:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80106cba:	e9 58 f6 ff ff       	jmp    80106317 <alltraps>
+8010621a:	e9 4f f6 ff ff       	jmp    8010586e <alltraps>
 
-80106cbf <vector139>:
+8010621f <vector139>:
 .globl vector139
 vector139:
   pushl $0
-80106cbf:	6a 00                	push   $0x0
+8010621f:	6a 00                	push   $0x0
   pushl $139
-80106cc1:	68 8b 00 00 00       	push   $0x8b
+80106221:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106cc6:	e9 4c f6 ff ff       	jmp    80106317 <alltraps>
+80106226:	e9 43 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106ccb <vector140>:
+8010622b <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80106ccb:	6a 00                	push   $0x0
+8010622b:	6a 00                	push   $0x0
   pushl $140
-80106ccd:	68 8c 00 00 00       	push   $0x8c
+8010622d:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-80106cd2:	e9 40 f6 ff ff       	jmp    80106317 <alltraps>
+80106232:	e9 37 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106cd7 <vector141>:
+80106237 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106cd7:	6a 00                	push   $0x0
+80106237:	6a 00                	push   $0x0
   pushl $141
-80106cd9:	68 8d 00 00 00       	push   $0x8d
+80106239:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-80106cde:	e9 34 f6 ff ff       	jmp    80106317 <alltraps>
+8010623e:	e9 2b f6 ff ff       	jmp    8010586e <alltraps>
 
-80106ce3 <vector142>:
+80106243 <vector142>:
 .globl vector142
 vector142:
   pushl $0
-80106ce3:	6a 00                	push   $0x0
+80106243:	6a 00                	push   $0x0
   pushl $142
-80106ce5:	68 8e 00 00 00       	push   $0x8e
+80106245:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-80106cea:	e9 28 f6 ff ff       	jmp    80106317 <alltraps>
+8010624a:	e9 1f f6 ff ff       	jmp    8010586e <alltraps>
 
-80106cef <vector143>:
+8010624f <vector143>:
 .globl vector143
 vector143:
   pushl $0
-80106cef:	6a 00                	push   $0x0
+8010624f:	6a 00                	push   $0x0
   pushl $143
-80106cf1:	68 8f 00 00 00       	push   $0x8f
+80106251:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106cf6:	e9 1c f6 ff ff       	jmp    80106317 <alltraps>
+80106256:	e9 13 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106cfb <vector144>:
+8010625b <vector144>:
 .globl vector144
 vector144:
   pushl $0
-80106cfb:	6a 00                	push   $0x0
+8010625b:	6a 00                	push   $0x0
   pushl $144
-80106cfd:	68 90 00 00 00       	push   $0x90
+8010625d:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-80106d02:	e9 10 f6 ff ff       	jmp    80106317 <alltraps>
+80106262:	e9 07 f6 ff ff       	jmp    8010586e <alltraps>
 
-80106d07 <vector145>:
+80106267 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106d07:	6a 00                	push   $0x0
+80106267:	6a 00                	push   $0x0
   pushl $145
-80106d09:	68 91 00 00 00       	push   $0x91
+80106269:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-80106d0e:	e9 04 f6 ff ff       	jmp    80106317 <alltraps>
+8010626e:	e9 fb f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d13 <vector146>:
+80106273 <vector146>:
 .globl vector146
 vector146:
   pushl $0
-80106d13:	6a 00                	push   $0x0
+80106273:	6a 00                	push   $0x0
   pushl $146
-80106d15:	68 92 00 00 00       	push   $0x92
+80106275:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-80106d1a:	e9 f8 f5 ff ff       	jmp    80106317 <alltraps>
+8010627a:	e9 ef f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d1f <vector147>:
+8010627f <vector147>:
 .globl vector147
 vector147:
   pushl $0
-80106d1f:	6a 00                	push   $0x0
+8010627f:	6a 00                	push   $0x0
   pushl $147
-80106d21:	68 93 00 00 00       	push   $0x93
+80106281:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106d26:	e9 ec f5 ff ff       	jmp    80106317 <alltraps>
+80106286:	e9 e3 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d2b <vector148>:
+8010628b <vector148>:
 .globl vector148
 vector148:
   pushl $0
-80106d2b:	6a 00                	push   $0x0
+8010628b:	6a 00                	push   $0x0
   pushl $148
-80106d2d:	68 94 00 00 00       	push   $0x94
+8010628d:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-80106d32:	e9 e0 f5 ff ff       	jmp    80106317 <alltraps>
+80106292:	e9 d7 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d37 <vector149>:
+80106297 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106d37:	6a 00                	push   $0x0
+80106297:	6a 00                	push   $0x0
   pushl $149
-80106d39:	68 95 00 00 00       	push   $0x95
+80106299:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-80106d3e:	e9 d4 f5 ff ff       	jmp    80106317 <alltraps>
+8010629e:	e9 cb f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d43 <vector150>:
+801062a3 <vector150>:
 .globl vector150
 vector150:
   pushl $0
-80106d43:	6a 00                	push   $0x0
+801062a3:	6a 00                	push   $0x0
   pushl $150
-80106d45:	68 96 00 00 00       	push   $0x96
+801062a5:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-80106d4a:	e9 c8 f5 ff ff       	jmp    80106317 <alltraps>
+801062aa:	e9 bf f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d4f <vector151>:
+801062af <vector151>:
 .globl vector151
 vector151:
   pushl $0
-80106d4f:	6a 00                	push   $0x0
+801062af:	6a 00                	push   $0x0
   pushl $151
-80106d51:	68 97 00 00 00       	push   $0x97
+801062b1:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-80106d56:	e9 bc f5 ff ff       	jmp    80106317 <alltraps>
+801062b6:	e9 b3 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d5b <vector152>:
+801062bb <vector152>:
 .globl vector152
 vector152:
   pushl $0
-80106d5b:	6a 00                	push   $0x0
+801062bb:	6a 00                	push   $0x0
   pushl $152
-80106d5d:	68 98 00 00 00       	push   $0x98
+801062bd:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-80106d62:	e9 b0 f5 ff ff       	jmp    80106317 <alltraps>
+801062c2:	e9 a7 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d67 <vector153>:
+801062c7 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-80106d67:	6a 00                	push   $0x0
+801062c7:	6a 00                	push   $0x0
   pushl $153
-80106d69:	68 99 00 00 00       	push   $0x99
+801062c9:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-80106d6e:	e9 a4 f5 ff ff       	jmp    80106317 <alltraps>
+801062ce:	e9 9b f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d73 <vector154>:
+801062d3 <vector154>:
 .globl vector154
 vector154:
   pushl $0
-80106d73:	6a 00                	push   $0x0
+801062d3:	6a 00                	push   $0x0
   pushl $154
-80106d75:	68 9a 00 00 00       	push   $0x9a
+801062d5:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-80106d7a:	e9 98 f5 ff ff       	jmp    80106317 <alltraps>
+801062da:	e9 8f f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d7f <vector155>:
+801062df <vector155>:
 .globl vector155
 vector155:
   pushl $0
-80106d7f:	6a 00                	push   $0x0
+801062df:	6a 00                	push   $0x0
   pushl $155
-80106d81:	68 9b 00 00 00       	push   $0x9b
+801062e1:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-80106d86:	e9 8c f5 ff ff       	jmp    80106317 <alltraps>
+801062e6:	e9 83 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d8b <vector156>:
+801062eb <vector156>:
 .globl vector156
 vector156:
   pushl $0
-80106d8b:	6a 00                	push   $0x0
+801062eb:	6a 00                	push   $0x0
   pushl $156
-80106d8d:	68 9c 00 00 00       	push   $0x9c
+801062ed:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-80106d92:	e9 80 f5 ff ff       	jmp    80106317 <alltraps>
+801062f2:	e9 77 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106d97 <vector157>:
+801062f7 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-80106d97:	6a 00                	push   $0x0
+801062f7:	6a 00                	push   $0x0
   pushl $157
-80106d99:	68 9d 00 00 00       	push   $0x9d
+801062f9:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-80106d9e:	e9 74 f5 ff ff       	jmp    80106317 <alltraps>
+801062fe:	e9 6b f5 ff ff       	jmp    8010586e <alltraps>
 
-80106da3 <vector158>:
+80106303 <vector158>:
 .globl vector158
 vector158:
   pushl $0
-80106da3:	6a 00                	push   $0x0
+80106303:	6a 00                	push   $0x0
   pushl $158
-80106da5:	68 9e 00 00 00       	push   $0x9e
+80106305:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106daa:	e9 68 f5 ff ff       	jmp    80106317 <alltraps>
+8010630a:	e9 5f f5 ff ff       	jmp    8010586e <alltraps>
 
-80106daf <vector159>:
+8010630f <vector159>:
 .globl vector159
 vector159:
   pushl $0
-80106daf:	6a 00                	push   $0x0
+8010630f:	6a 00                	push   $0x0
   pushl $159
-80106db1:	68 9f 00 00 00       	push   $0x9f
+80106311:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106db6:	e9 5c f5 ff ff       	jmp    80106317 <alltraps>
+80106316:	e9 53 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106dbb <vector160>:
+8010631b <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106dbb:	6a 00                	push   $0x0
+8010631b:	6a 00                	push   $0x0
   pushl $160
-80106dbd:	68 a0 00 00 00       	push   $0xa0
+8010631d:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-80106dc2:	e9 50 f5 ff ff       	jmp    80106317 <alltraps>
+80106322:	e9 47 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106dc7 <vector161>:
+80106327 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106dc7:	6a 00                	push   $0x0
+80106327:	6a 00                	push   $0x0
   pushl $161
-80106dc9:	68 a1 00 00 00       	push   $0xa1
+80106329:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-80106dce:	e9 44 f5 ff ff       	jmp    80106317 <alltraps>
+8010632e:	e9 3b f5 ff ff       	jmp    8010586e <alltraps>
 
-80106dd3 <vector162>:
+80106333 <vector162>:
 .globl vector162
 vector162:
   pushl $0
-80106dd3:	6a 00                	push   $0x0
+80106333:	6a 00                	push   $0x0
   pushl $162
-80106dd5:	68 a2 00 00 00       	push   $0xa2
+80106335:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-80106dda:	e9 38 f5 ff ff       	jmp    80106317 <alltraps>
+8010633a:	e9 2f f5 ff ff       	jmp    8010586e <alltraps>
 
-80106ddf <vector163>:
+8010633f <vector163>:
 .globl vector163
 vector163:
   pushl $0
-80106ddf:	6a 00                	push   $0x0
+8010633f:	6a 00                	push   $0x0
   pushl $163
-80106de1:	68 a3 00 00 00       	push   $0xa3
+80106341:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106de6:	e9 2c f5 ff ff       	jmp    80106317 <alltraps>
+80106346:	e9 23 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106deb <vector164>:
+8010634b <vector164>:
 .globl vector164
 vector164:
   pushl $0
-80106deb:	6a 00                	push   $0x0
+8010634b:	6a 00                	push   $0x0
   pushl $164
-80106ded:	68 a4 00 00 00       	push   $0xa4
+8010634d:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-80106df2:	e9 20 f5 ff ff       	jmp    80106317 <alltraps>
+80106352:	e9 17 f5 ff ff       	jmp    8010586e <alltraps>
 
-80106df7 <vector165>:
+80106357 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106df7:	6a 00                	push   $0x0
+80106357:	6a 00                	push   $0x0
   pushl $165
-80106df9:	68 a5 00 00 00       	push   $0xa5
+80106359:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-80106dfe:	e9 14 f5 ff ff       	jmp    80106317 <alltraps>
+8010635e:	e9 0b f5 ff ff       	jmp    8010586e <alltraps>
 
-80106e03 <vector166>:
+80106363 <vector166>:
 .globl vector166
 vector166:
   pushl $0
-80106e03:	6a 00                	push   $0x0
+80106363:	6a 00                	push   $0x0
   pushl $166
-80106e05:	68 a6 00 00 00       	push   $0xa6
+80106365:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-80106e0a:	e9 08 f5 ff ff       	jmp    80106317 <alltraps>
+8010636a:	e9 ff f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e0f <vector167>:
+8010636f <vector167>:
 .globl vector167
 vector167:
   pushl $0
-80106e0f:	6a 00                	push   $0x0
+8010636f:	6a 00                	push   $0x0
   pushl $167
-80106e11:	68 a7 00 00 00       	push   $0xa7
+80106371:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106e16:	e9 fc f4 ff ff       	jmp    80106317 <alltraps>
+80106376:	e9 f3 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e1b <vector168>:
+8010637b <vector168>:
 .globl vector168
 vector168:
   pushl $0
-80106e1b:	6a 00                	push   $0x0
+8010637b:	6a 00                	push   $0x0
   pushl $168
-80106e1d:	68 a8 00 00 00       	push   $0xa8
+8010637d:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-80106e22:	e9 f0 f4 ff ff       	jmp    80106317 <alltraps>
+80106382:	e9 e7 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e27 <vector169>:
+80106387 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106e27:	6a 00                	push   $0x0
+80106387:	6a 00                	push   $0x0
   pushl $169
-80106e29:	68 a9 00 00 00       	push   $0xa9
+80106389:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-80106e2e:	e9 e4 f4 ff ff       	jmp    80106317 <alltraps>
+8010638e:	e9 db f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e33 <vector170>:
+80106393 <vector170>:
 .globl vector170
 vector170:
   pushl $0
-80106e33:	6a 00                	push   $0x0
+80106393:	6a 00                	push   $0x0
   pushl $170
-80106e35:	68 aa 00 00 00       	push   $0xaa
+80106395:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-80106e3a:	e9 d8 f4 ff ff       	jmp    80106317 <alltraps>
+8010639a:	e9 cf f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e3f <vector171>:
+8010639f <vector171>:
 .globl vector171
 vector171:
   pushl $0
-80106e3f:	6a 00                	push   $0x0
+8010639f:	6a 00                	push   $0x0
   pushl $171
-80106e41:	68 ab 00 00 00       	push   $0xab
+801063a1:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-80106e46:	e9 cc f4 ff ff       	jmp    80106317 <alltraps>
+801063a6:	e9 c3 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e4b <vector172>:
+801063ab <vector172>:
 .globl vector172
 vector172:
   pushl $0
-80106e4b:	6a 00                	push   $0x0
+801063ab:	6a 00                	push   $0x0
   pushl $172
-80106e4d:	68 ac 00 00 00       	push   $0xac
+801063ad:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-80106e52:	e9 c0 f4 ff ff       	jmp    80106317 <alltraps>
+801063b2:	e9 b7 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e57 <vector173>:
+801063b7 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-80106e57:	6a 00                	push   $0x0
+801063b7:	6a 00                	push   $0x0
   pushl $173
-80106e59:	68 ad 00 00 00       	push   $0xad
+801063b9:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-80106e5e:	e9 b4 f4 ff ff       	jmp    80106317 <alltraps>
+801063be:	e9 ab f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e63 <vector174>:
+801063c3 <vector174>:
 .globl vector174
 vector174:
   pushl $0
-80106e63:	6a 00                	push   $0x0
+801063c3:	6a 00                	push   $0x0
   pushl $174
-80106e65:	68 ae 00 00 00       	push   $0xae
+801063c5:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-80106e6a:	e9 a8 f4 ff ff       	jmp    80106317 <alltraps>
+801063ca:	e9 9f f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e6f <vector175>:
+801063cf <vector175>:
 .globl vector175
 vector175:
   pushl $0
-80106e6f:	6a 00                	push   $0x0
+801063cf:	6a 00                	push   $0x0
   pushl $175
-80106e71:	68 af 00 00 00       	push   $0xaf
+801063d1:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-80106e76:	e9 9c f4 ff ff       	jmp    80106317 <alltraps>
+801063d6:	e9 93 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e7b <vector176>:
+801063db <vector176>:
 .globl vector176
 vector176:
   pushl $0
-80106e7b:	6a 00                	push   $0x0
+801063db:	6a 00                	push   $0x0
   pushl $176
-80106e7d:	68 b0 00 00 00       	push   $0xb0
+801063dd:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-80106e82:	e9 90 f4 ff ff       	jmp    80106317 <alltraps>
+801063e2:	e9 87 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e87 <vector177>:
+801063e7 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-80106e87:	6a 00                	push   $0x0
+801063e7:	6a 00                	push   $0x0
   pushl $177
-80106e89:	68 b1 00 00 00       	push   $0xb1
+801063e9:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-80106e8e:	e9 84 f4 ff ff       	jmp    80106317 <alltraps>
+801063ee:	e9 7b f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e93 <vector178>:
+801063f3 <vector178>:
 .globl vector178
 vector178:
   pushl $0
-80106e93:	6a 00                	push   $0x0
+801063f3:	6a 00                	push   $0x0
   pushl $178
-80106e95:	68 b2 00 00 00       	push   $0xb2
+801063f5:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-80106e9a:	e9 78 f4 ff ff       	jmp    80106317 <alltraps>
+801063fa:	e9 6f f4 ff ff       	jmp    8010586e <alltraps>
 
-80106e9f <vector179>:
+801063ff <vector179>:
 .globl vector179
 vector179:
   pushl $0
-80106e9f:	6a 00                	push   $0x0
+801063ff:	6a 00                	push   $0x0
   pushl $179
-80106ea1:	68 b3 00 00 00       	push   $0xb3
+80106401:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106ea6:	e9 6c f4 ff ff       	jmp    80106317 <alltraps>
+80106406:	e9 63 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106eab <vector180>:
+8010640b <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106eab:	6a 00                	push   $0x0
+8010640b:	6a 00                	push   $0x0
   pushl $180
-80106ead:	68 b4 00 00 00       	push   $0xb4
+8010640d:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-80106eb2:	e9 60 f4 ff ff       	jmp    80106317 <alltraps>
+80106412:	e9 57 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106eb7 <vector181>:
+80106417 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106eb7:	6a 00                	push   $0x0
+80106417:	6a 00                	push   $0x0
   pushl $181
-80106eb9:	68 b5 00 00 00       	push   $0xb5
+80106419:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-80106ebe:	e9 54 f4 ff ff       	jmp    80106317 <alltraps>
+8010641e:	e9 4b f4 ff ff       	jmp    8010586e <alltraps>
 
-80106ec3 <vector182>:
+80106423 <vector182>:
 .globl vector182
 vector182:
   pushl $0
-80106ec3:	6a 00                	push   $0x0
+80106423:	6a 00                	push   $0x0
   pushl $182
-80106ec5:	68 b6 00 00 00       	push   $0xb6
+80106425:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106eca:	e9 48 f4 ff ff       	jmp    80106317 <alltraps>
+8010642a:	e9 3f f4 ff ff       	jmp    8010586e <alltraps>
 
-80106ecf <vector183>:
+8010642f <vector183>:
 .globl vector183
 vector183:
   pushl $0
-80106ecf:	6a 00                	push   $0x0
+8010642f:	6a 00                	push   $0x0
   pushl $183
-80106ed1:	68 b7 00 00 00       	push   $0xb7
+80106431:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106ed6:	e9 3c f4 ff ff       	jmp    80106317 <alltraps>
+80106436:	e9 33 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106edb <vector184>:
+8010643b <vector184>:
 .globl vector184
 vector184:
   pushl $0
-80106edb:	6a 00                	push   $0x0
+8010643b:	6a 00                	push   $0x0
   pushl $184
-80106edd:	68 b8 00 00 00       	push   $0xb8
+8010643d:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-80106ee2:	e9 30 f4 ff ff       	jmp    80106317 <alltraps>
+80106442:	e9 27 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106ee7 <vector185>:
+80106447 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106ee7:	6a 00                	push   $0x0
+80106447:	6a 00                	push   $0x0
   pushl $185
-80106ee9:	68 b9 00 00 00       	push   $0xb9
+80106449:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-80106eee:	e9 24 f4 ff ff       	jmp    80106317 <alltraps>
+8010644e:	e9 1b f4 ff ff       	jmp    8010586e <alltraps>
 
-80106ef3 <vector186>:
+80106453 <vector186>:
 .globl vector186
 vector186:
   pushl $0
-80106ef3:	6a 00                	push   $0x0
+80106453:	6a 00                	push   $0x0
   pushl $186
-80106ef5:	68 ba 00 00 00       	push   $0xba
+80106455:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-80106efa:	e9 18 f4 ff ff       	jmp    80106317 <alltraps>
+8010645a:	e9 0f f4 ff ff       	jmp    8010586e <alltraps>
 
-80106eff <vector187>:
+8010645f <vector187>:
 .globl vector187
 vector187:
   pushl $0
-80106eff:	6a 00                	push   $0x0
+8010645f:	6a 00                	push   $0x0
   pushl $187
-80106f01:	68 bb 00 00 00       	push   $0xbb
+80106461:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106f06:	e9 0c f4 ff ff       	jmp    80106317 <alltraps>
+80106466:	e9 03 f4 ff ff       	jmp    8010586e <alltraps>
 
-80106f0b <vector188>:
+8010646b <vector188>:
 .globl vector188
 vector188:
   pushl $0
-80106f0b:	6a 00                	push   $0x0
+8010646b:	6a 00                	push   $0x0
   pushl $188
-80106f0d:	68 bc 00 00 00       	push   $0xbc
+8010646d:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-80106f12:	e9 00 f4 ff ff       	jmp    80106317 <alltraps>
+80106472:	e9 f7 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f17 <vector189>:
+80106477 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106f17:	6a 00                	push   $0x0
+80106477:	6a 00                	push   $0x0
   pushl $189
-80106f19:	68 bd 00 00 00       	push   $0xbd
+80106479:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-80106f1e:	e9 f4 f3 ff ff       	jmp    80106317 <alltraps>
+8010647e:	e9 eb f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f23 <vector190>:
+80106483 <vector190>:
 .globl vector190
 vector190:
   pushl $0
-80106f23:	6a 00                	push   $0x0
+80106483:	6a 00                	push   $0x0
   pushl $190
-80106f25:	68 be 00 00 00       	push   $0xbe
+80106485:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-80106f2a:	e9 e8 f3 ff ff       	jmp    80106317 <alltraps>
+8010648a:	e9 df f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f2f <vector191>:
+8010648f <vector191>:
 .globl vector191
 vector191:
   pushl $0
-80106f2f:	6a 00                	push   $0x0
+8010648f:	6a 00                	push   $0x0
   pushl $191
-80106f31:	68 bf 00 00 00       	push   $0xbf
+80106491:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106f36:	e9 dc f3 ff ff       	jmp    80106317 <alltraps>
+80106496:	e9 d3 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f3b <vector192>:
+8010649b <vector192>:
 .globl vector192
 vector192:
   pushl $0
-80106f3b:	6a 00                	push   $0x0
+8010649b:	6a 00                	push   $0x0
   pushl $192
-80106f3d:	68 c0 00 00 00       	push   $0xc0
+8010649d:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-80106f42:	e9 d0 f3 ff ff       	jmp    80106317 <alltraps>
+801064a2:	e9 c7 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f47 <vector193>:
+801064a7 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-80106f47:	6a 00                	push   $0x0
+801064a7:	6a 00                	push   $0x0
   pushl $193
-80106f49:	68 c1 00 00 00       	push   $0xc1
+801064a9:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-80106f4e:	e9 c4 f3 ff ff       	jmp    80106317 <alltraps>
+801064ae:	e9 bb f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f53 <vector194>:
+801064b3 <vector194>:
 .globl vector194
 vector194:
   pushl $0
-80106f53:	6a 00                	push   $0x0
+801064b3:	6a 00                	push   $0x0
   pushl $194
-80106f55:	68 c2 00 00 00       	push   $0xc2
+801064b5:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-80106f5a:	e9 b8 f3 ff ff       	jmp    80106317 <alltraps>
+801064ba:	e9 af f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f5f <vector195>:
+801064bf <vector195>:
 .globl vector195
 vector195:
   pushl $0
-80106f5f:	6a 00                	push   $0x0
+801064bf:	6a 00                	push   $0x0
   pushl $195
-80106f61:	68 c3 00 00 00       	push   $0xc3
+801064c1:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-80106f66:	e9 ac f3 ff ff       	jmp    80106317 <alltraps>
+801064c6:	e9 a3 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f6b <vector196>:
+801064cb <vector196>:
 .globl vector196
 vector196:
   pushl $0
-80106f6b:	6a 00                	push   $0x0
+801064cb:	6a 00                	push   $0x0
   pushl $196
-80106f6d:	68 c4 00 00 00       	push   $0xc4
+801064cd:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-80106f72:	e9 a0 f3 ff ff       	jmp    80106317 <alltraps>
+801064d2:	e9 97 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f77 <vector197>:
+801064d7 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-80106f77:	6a 00                	push   $0x0
+801064d7:	6a 00                	push   $0x0
   pushl $197
-80106f79:	68 c5 00 00 00       	push   $0xc5
+801064d9:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-80106f7e:	e9 94 f3 ff ff       	jmp    80106317 <alltraps>
+801064de:	e9 8b f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f83 <vector198>:
+801064e3 <vector198>:
 .globl vector198
 vector198:
   pushl $0
-80106f83:	6a 00                	push   $0x0
+801064e3:	6a 00                	push   $0x0
   pushl $198
-80106f85:	68 c6 00 00 00       	push   $0xc6
+801064e5:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-80106f8a:	e9 88 f3 ff ff       	jmp    80106317 <alltraps>
+801064ea:	e9 7f f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f8f <vector199>:
+801064ef <vector199>:
 .globl vector199
 vector199:
   pushl $0
-80106f8f:	6a 00                	push   $0x0
+801064ef:	6a 00                	push   $0x0
   pushl $199
-80106f91:	68 c7 00 00 00       	push   $0xc7
+801064f1:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-80106f96:	e9 7c f3 ff ff       	jmp    80106317 <alltraps>
+801064f6:	e9 73 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106f9b <vector200>:
+801064fb <vector200>:
 .globl vector200
 vector200:
   pushl $0
-80106f9b:	6a 00                	push   $0x0
+801064fb:	6a 00                	push   $0x0
   pushl $200
-80106f9d:	68 c8 00 00 00       	push   $0xc8
+801064fd:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-80106fa2:	e9 70 f3 ff ff       	jmp    80106317 <alltraps>
+80106502:	e9 67 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fa7 <vector201>:
+80106507 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106fa7:	6a 00                	push   $0x0
+80106507:	6a 00                	push   $0x0
   pushl $201
-80106fa9:	68 c9 00 00 00       	push   $0xc9
+80106509:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-80106fae:	e9 64 f3 ff ff       	jmp    80106317 <alltraps>
+8010650e:	e9 5b f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fb3 <vector202>:
+80106513 <vector202>:
 .globl vector202
 vector202:
   pushl $0
-80106fb3:	6a 00                	push   $0x0
+80106513:	6a 00                	push   $0x0
   pushl $202
-80106fb5:	68 ca 00 00 00       	push   $0xca
+80106515:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106fba:	e9 58 f3 ff ff       	jmp    80106317 <alltraps>
+8010651a:	e9 4f f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fbf <vector203>:
+8010651f <vector203>:
 .globl vector203
 vector203:
   pushl $0
-80106fbf:	6a 00                	push   $0x0
+8010651f:	6a 00                	push   $0x0
   pushl $203
-80106fc1:	68 cb 00 00 00       	push   $0xcb
+80106521:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106fc6:	e9 4c f3 ff ff       	jmp    80106317 <alltraps>
+80106526:	e9 43 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fcb <vector204>:
+8010652b <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106fcb:	6a 00                	push   $0x0
+8010652b:	6a 00                	push   $0x0
   pushl $204
-80106fcd:	68 cc 00 00 00       	push   $0xcc
+8010652d:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-80106fd2:	e9 40 f3 ff ff       	jmp    80106317 <alltraps>
+80106532:	e9 37 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fd7 <vector205>:
+80106537 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106fd7:	6a 00                	push   $0x0
+80106537:	6a 00                	push   $0x0
   pushl $205
-80106fd9:	68 cd 00 00 00       	push   $0xcd
+80106539:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-80106fde:	e9 34 f3 ff ff       	jmp    80106317 <alltraps>
+8010653e:	e9 2b f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fe3 <vector206>:
+80106543 <vector206>:
 .globl vector206
 vector206:
   pushl $0
-80106fe3:	6a 00                	push   $0x0
+80106543:	6a 00                	push   $0x0
   pushl $206
-80106fe5:	68 ce 00 00 00       	push   $0xce
+80106545:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-80106fea:	e9 28 f3 ff ff       	jmp    80106317 <alltraps>
+8010654a:	e9 1f f3 ff ff       	jmp    8010586e <alltraps>
 
-80106fef <vector207>:
+8010654f <vector207>:
 .globl vector207
 vector207:
   pushl $0
-80106fef:	6a 00                	push   $0x0
+8010654f:	6a 00                	push   $0x0
   pushl $207
-80106ff1:	68 cf 00 00 00       	push   $0xcf
+80106551:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106ff6:	e9 1c f3 ff ff       	jmp    80106317 <alltraps>
+80106556:	e9 13 f3 ff ff       	jmp    8010586e <alltraps>
 
-80106ffb <vector208>:
+8010655b <vector208>:
 .globl vector208
 vector208:
   pushl $0
-80106ffb:	6a 00                	push   $0x0
+8010655b:	6a 00                	push   $0x0
   pushl $208
-80106ffd:	68 d0 00 00 00       	push   $0xd0
+8010655d:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-80107002:	e9 10 f3 ff ff       	jmp    80106317 <alltraps>
+80106562:	e9 07 f3 ff ff       	jmp    8010586e <alltraps>
 
-80107007 <vector209>:
+80106567 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80107007:	6a 00                	push   $0x0
+80106567:	6a 00                	push   $0x0
   pushl $209
-80107009:	68 d1 00 00 00       	push   $0xd1
+80106569:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010700e:	e9 04 f3 ff ff       	jmp    80106317 <alltraps>
+8010656e:	e9 fb f2 ff ff       	jmp    8010586e <alltraps>
 
-80107013 <vector210>:
+80106573 <vector210>:
 .globl vector210
 vector210:
   pushl $0
-80107013:	6a 00                	push   $0x0
+80106573:	6a 00                	push   $0x0
   pushl $210
-80107015:	68 d2 00 00 00       	push   $0xd2
+80106575:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-8010701a:	e9 f8 f2 ff ff       	jmp    80106317 <alltraps>
+8010657a:	e9 ef f2 ff ff       	jmp    8010586e <alltraps>
 
-8010701f <vector211>:
+8010657f <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010701f:	6a 00                	push   $0x0
+8010657f:	6a 00                	push   $0x0
   pushl $211
-80107021:	68 d3 00 00 00       	push   $0xd3
+80106581:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80107026:	e9 ec f2 ff ff       	jmp    80106317 <alltraps>
+80106586:	e9 e3 f2 ff ff       	jmp    8010586e <alltraps>
 
-8010702b <vector212>:
+8010658b <vector212>:
 .globl vector212
 vector212:
   pushl $0
-8010702b:	6a 00                	push   $0x0
+8010658b:	6a 00                	push   $0x0
   pushl $212
-8010702d:	68 d4 00 00 00       	push   $0xd4
+8010658d:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-80107032:	e9 e0 f2 ff ff       	jmp    80106317 <alltraps>
+80106592:	e9 d7 f2 ff ff       	jmp    8010586e <alltraps>
 
-80107037 <vector213>:
+80106597 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80107037:	6a 00                	push   $0x0
+80106597:	6a 00                	push   $0x0
   pushl $213
-80107039:	68 d5 00 00 00       	push   $0xd5
+80106599:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010703e:	e9 d4 f2 ff ff       	jmp    80106317 <alltraps>
+8010659e:	e9 cb f2 ff ff       	jmp    8010586e <alltraps>
 
-80107043 <vector214>:
+801065a3 <vector214>:
 .globl vector214
 vector214:
   pushl $0
-80107043:	6a 00                	push   $0x0
+801065a3:	6a 00                	push   $0x0
   pushl $214
-80107045:	68 d6 00 00 00       	push   $0xd6
+801065a5:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-8010704a:	e9 c8 f2 ff ff       	jmp    80106317 <alltraps>
+801065aa:	e9 bf f2 ff ff       	jmp    8010586e <alltraps>
 
-8010704f <vector215>:
+801065af <vector215>:
 .globl vector215
 vector215:
   pushl $0
-8010704f:	6a 00                	push   $0x0
+801065af:	6a 00                	push   $0x0
   pushl $215
-80107051:	68 d7 00 00 00       	push   $0xd7
+801065b1:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-80107056:	e9 bc f2 ff ff       	jmp    80106317 <alltraps>
+801065b6:	e9 b3 f2 ff ff       	jmp    8010586e <alltraps>
 
-8010705b <vector216>:
+801065bb <vector216>:
 .globl vector216
 vector216:
   pushl $0
-8010705b:	6a 00                	push   $0x0
+801065bb:	6a 00                	push   $0x0
   pushl $216
-8010705d:	68 d8 00 00 00       	push   $0xd8
+801065bd:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-80107062:	e9 b0 f2 ff ff       	jmp    80106317 <alltraps>
+801065c2:	e9 a7 f2 ff ff       	jmp    8010586e <alltraps>
 
-80107067 <vector217>:
+801065c7 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-80107067:	6a 00                	push   $0x0
+801065c7:	6a 00                	push   $0x0
   pushl $217
-80107069:	68 d9 00 00 00       	push   $0xd9
+801065c9:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-8010706e:	e9 a4 f2 ff ff       	jmp    80106317 <alltraps>
+801065ce:	e9 9b f2 ff ff       	jmp    8010586e <alltraps>
 
-80107073 <vector218>:
+801065d3 <vector218>:
 .globl vector218
 vector218:
   pushl $0
-80107073:	6a 00                	push   $0x0
+801065d3:	6a 00                	push   $0x0
   pushl $218
-80107075:	68 da 00 00 00       	push   $0xda
+801065d5:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-8010707a:	e9 98 f2 ff ff       	jmp    80106317 <alltraps>
+801065da:	e9 8f f2 ff ff       	jmp    8010586e <alltraps>
 
-8010707f <vector219>:
+801065df <vector219>:
 .globl vector219
 vector219:
   pushl $0
-8010707f:	6a 00                	push   $0x0
+801065df:	6a 00                	push   $0x0
   pushl $219
-80107081:	68 db 00 00 00       	push   $0xdb
+801065e1:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-80107086:	e9 8c f2 ff ff       	jmp    80106317 <alltraps>
+801065e6:	e9 83 f2 ff ff       	jmp    8010586e <alltraps>
 
-8010708b <vector220>:
+801065eb <vector220>:
 .globl vector220
 vector220:
   pushl $0
-8010708b:	6a 00                	push   $0x0
+801065eb:	6a 00                	push   $0x0
   pushl $220
-8010708d:	68 dc 00 00 00       	push   $0xdc
+801065ed:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-80107092:	e9 80 f2 ff ff       	jmp    80106317 <alltraps>
+801065f2:	e9 77 f2 ff ff       	jmp    8010586e <alltraps>
 
-80107097 <vector221>:
+801065f7 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-80107097:	6a 00                	push   $0x0
+801065f7:	6a 00                	push   $0x0
   pushl $221
-80107099:	68 dd 00 00 00       	push   $0xdd
+801065f9:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-8010709e:	e9 74 f2 ff ff       	jmp    80106317 <alltraps>
+801065fe:	e9 6b f2 ff ff       	jmp    8010586e <alltraps>
 
-801070a3 <vector222>:
+80106603 <vector222>:
 .globl vector222
 vector222:
   pushl $0
-801070a3:	6a 00                	push   $0x0
+80106603:	6a 00                	push   $0x0
   pushl $222
-801070a5:	68 de 00 00 00       	push   $0xde
+80106605:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-801070aa:	e9 68 f2 ff ff       	jmp    80106317 <alltraps>
+8010660a:	e9 5f f2 ff ff       	jmp    8010586e <alltraps>
 
-801070af <vector223>:
+8010660f <vector223>:
 .globl vector223
 vector223:
   pushl $0
-801070af:	6a 00                	push   $0x0
+8010660f:	6a 00                	push   $0x0
   pushl $223
-801070b1:	68 df 00 00 00       	push   $0xdf
+80106611:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-801070b6:	e9 5c f2 ff ff       	jmp    80106317 <alltraps>
+80106616:	e9 53 f2 ff ff       	jmp    8010586e <alltraps>
 
-801070bb <vector224>:
+8010661b <vector224>:
 .globl vector224
 vector224:
   pushl $0
-801070bb:	6a 00                	push   $0x0
+8010661b:	6a 00                	push   $0x0
   pushl $224
-801070bd:	68 e0 00 00 00       	push   $0xe0
+8010661d:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-801070c2:	e9 50 f2 ff ff       	jmp    80106317 <alltraps>
+80106622:	e9 47 f2 ff ff       	jmp    8010586e <alltraps>
 
-801070c7 <vector225>:
+80106627 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-801070c7:	6a 00                	push   $0x0
+80106627:	6a 00                	push   $0x0
   pushl $225
-801070c9:	68 e1 00 00 00       	push   $0xe1
+80106629:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-801070ce:	e9 44 f2 ff ff       	jmp    80106317 <alltraps>
+8010662e:	e9 3b f2 ff ff       	jmp    8010586e <alltraps>
 
-801070d3 <vector226>:
+80106633 <vector226>:
 .globl vector226
 vector226:
   pushl $0
-801070d3:	6a 00                	push   $0x0
+80106633:	6a 00                	push   $0x0
   pushl $226
-801070d5:	68 e2 00 00 00       	push   $0xe2
+80106635:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-801070da:	e9 38 f2 ff ff       	jmp    80106317 <alltraps>
+8010663a:	e9 2f f2 ff ff       	jmp    8010586e <alltraps>
 
-801070df <vector227>:
+8010663f <vector227>:
 .globl vector227
 vector227:
   pushl $0
-801070df:	6a 00                	push   $0x0
+8010663f:	6a 00                	push   $0x0
   pushl $227
-801070e1:	68 e3 00 00 00       	push   $0xe3
+80106641:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-801070e6:	e9 2c f2 ff ff       	jmp    80106317 <alltraps>
+80106646:	e9 23 f2 ff ff       	jmp    8010586e <alltraps>
 
-801070eb <vector228>:
+8010664b <vector228>:
 .globl vector228
 vector228:
   pushl $0
-801070eb:	6a 00                	push   $0x0
+8010664b:	6a 00                	push   $0x0
   pushl $228
-801070ed:	68 e4 00 00 00       	push   $0xe4
+8010664d:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-801070f2:	e9 20 f2 ff ff       	jmp    80106317 <alltraps>
+80106652:	e9 17 f2 ff ff       	jmp    8010586e <alltraps>
 
-801070f7 <vector229>:
+80106657 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-801070f7:	6a 00                	push   $0x0
+80106657:	6a 00                	push   $0x0
   pushl $229
-801070f9:	68 e5 00 00 00       	push   $0xe5
+80106659:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-801070fe:	e9 14 f2 ff ff       	jmp    80106317 <alltraps>
+8010665e:	e9 0b f2 ff ff       	jmp    8010586e <alltraps>
 
-80107103 <vector230>:
+80106663 <vector230>:
 .globl vector230
 vector230:
   pushl $0
-80107103:	6a 00                	push   $0x0
+80106663:	6a 00                	push   $0x0
   pushl $230
-80107105:	68 e6 00 00 00       	push   $0xe6
+80106665:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-8010710a:	e9 08 f2 ff ff       	jmp    80106317 <alltraps>
+8010666a:	e9 ff f1 ff ff       	jmp    8010586e <alltraps>
 
-8010710f <vector231>:
+8010666f <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010710f:	6a 00                	push   $0x0
+8010666f:	6a 00                	push   $0x0
   pushl $231
-80107111:	68 e7 00 00 00       	push   $0xe7
+80106671:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80107116:	e9 fc f1 ff ff       	jmp    80106317 <alltraps>
+80106676:	e9 f3 f1 ff ff       	jmp    8010586e <alltraps>
 
-8010711b <vector232>:
+8010667b <vector232>:
 .globl vector232
 vector232:
   pushl $0
-8010711b:	6a 00                	push   $0x0
+8010667b:	6a 00                	push   $0x0
   pushl $232
-8010711d:	68 e8 00 00 00       	push   $0xe8
+8010667d:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-80107122:	e9 f0 f1 ff ff       	jmp    80106317 <alltraps>
+80106682:	e9 e7 f1 ff ff       	jmp    8010586e <alltraps>
 
-80107127 <vector233>:
+80106687 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80107127:	6a 00                	push   $0x0
+80106687:	6a 00                	push   $0x0
   pushl $233
-80107129:	68 e9 00 00 00       	push   $0xe9
+80106689:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010712e:	e9 e4 f1 ff ff       	jmp    80106317 <alltraps>
+8010668e:	e9 db f1 ff ff       	jmp    8010586e <alltraps>
 
-80107133 <vector234>:
+80106693 <vector234>:
 .globl vector234
 vector234:
   pushl $0
-80107133:	6a 00                	push   $0x0
+80106693:	6a 00                	push   $0x0
   pushl $234
-80107135:	68 ea 00 00 00       	push   $0xea
+80106695:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-8010713a:	e9 d8 f1 ff ff       	jmp    80106317 <alltraps>
+8010669a:	e9 cf f1 ff ff       	jmp    8010586e <alltraps>
 
-8010713f <vector235>:
+8010669f <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010713f:	6a 00                	push   $0x0
+8010669f:	6a 00                	push   $0x0
   pushl $235
-80107141:	68 eb 00 00 00       	push   $0xeb
+801066a1:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-80107146:	e9 cc f1 ff ff       	jmp    80106317 <alltraps>
+801066a6:	e9 c3 f1 ff ff       	jmp    8010586e <alltraps>
 
-8010714b <vector236>:
+801066ab <vector236>:
 .globl vector236
 vector236:
   pushl $0
-8010714b:	6a 00                	push   $0x0
+801066ab:	6a 00                	push   $0x0
   pushl $236
-8010714d:	68 ec 00 00 00       	push   $0xec
+801066ad:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-80107152:	e9 c0 f1 ff ff       	jmp    80106317 <alltraps>
+801066b2:	e9 b7 f1 ff ff       	jmp    8010586e <alltraps>
 
-80107157 <vector237>:
+801066b7 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-80107157:	6a 00                	push   $0x0
+801066b7:	6a 00                	push   $0x0
   pushl $237
-80107159:	68 ed 00 00 00       	push   $0xed
+801066b9:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-8010715e:	e9 b4 f1 ff ff       	jmp    80106317 <alltraps>
+801066be:	e9 ab f1 ff ff       	jmp    8010586e <alltraps>
 
-80107163 <vector238>:
+801066c3 <vector238>:
 .globl vector238
 vector238:
   pushl $0
-80107163:	6a 00                	push   $0x0
+801066c3:	6a 00                	push   $0x0
   pushl $238
-80107165:	68 ee 00 00 00       	push   $0xee
+801066c5:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-8010716a:	e9 a8 f1 ff ff       	jmp    80106317 <alltraps>
+801066ca:	e9 9f f1 ff ff       	jmp    8010586e <alltraps>
 
-8010716f <vector239>:
+801066cf <vector239>:
 .globl vector239
 vector239:
   pushl $0
-8010716f:	6a 00                	push   $0x0
+801066cf:	6a 00                	push   $0x0
   pushl $239
-80107171:	68 ef 00 00 00       	push   $0xef
+801066d1:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-80107176:	e9 9c f1 ff ff       	jmp    80106317 <alltraps>
+801066d6:	e9 93 f1 ff ff       	jmp    8010586e <alltraps>
 
-8010717b <vector240>:
+801066db <vector240>:
 .globl vector240
 vector240:
   pushl $0
-8010717b:	6a 00                	push   $0x0
+801066db:	6a 00                	push   $0x0
   pushl $240
-8010717d:	68 f0 00 00 00       	push   $0xf0
+801066dd:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-80107182:	e9 90 f1 ff ff       	jmp    80106317 <alltraps>
+801066e2:	e9 87 f1 ff ff       	jmp    8010586e <alltraps>
 
-80107187 <vector241>:
+801066e7 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-80107187:	6a 00                	push   $0x0
+801066e7:	6a 00                	push   $0x0
   pushl $241
-80107189:	68 f1 00 00 00       	push   $0xf1
+801066e9:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-8010718e:	e9 84 f1 ff ff       	jmp    80106317 <alltraps>
+801066ee:	e9 7b f1 ff ff       	jmp    8010586e <alltraps>
 
-80107193 <vector242>:
+801066f3 <vector242>:
 .globl vector242
 vector242:
   pushl $0
-80107193:	6a 00                	push   $0x0
+801066f3:	6a 00                	push   $0x0
   pushl $242
-80107195:	68 f2 00 00 00       	push   $0xf2
+801066f5:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-8010719a:	e9 78 f1 ff ff       	jmp    80106317 <alltraps>
+801066fa:	e9 6f f1 ff ff       	jmp    8010586e <alltraps>
 
-8010719f <vector243>:
+801066ff <vector243>:
 .globl vector243
 vector243:
   pushl $0
-8010719f:	6a 00                	push   $0x0
+801066ff:	6a 00                	push   $0x0
   pushl $243
-801071a1:	68 f3 00 00 00       	push   $0xf3
+80106701:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-801071a6:	e9 6c f1 ff ff       	jmp    80106317 <alltraps>
+80106706:	e9 63 f1 ff ff       	jmp    8010586e <alltraps>
 
-801071ab <vector244>:
+8010670b <vector244>:
 .globl vector244
 vector244:
   pushl $0
-801071ab:	6a 00                	push   $0x0
+8010670b:	6a 00                	push   $0x0
   pushl $244
-801071ad:	68 f4 00 00 00       	push   $0xf4
+8010670d:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-801071b2:	e9 60 f1 ff ff       	jmp    80106317 <alltraps>
+80106712:	e9 57 f1 ff ff       	jmp    8010586e <alltraps>
 
-801071b7 <vector245>:
+80106717 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-801071b7:	6a 00                	push   $0x0
+80106717:	6a 00                	push   $0x0
   pushl $245
-801071b9:	68 f5 00 00 00       	push   $0xf5
+80106719:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-801071be:	e9 54 f1 ff ff       	jmp    80106317 <alltraps>
+8010671e:	e9 4b f1 ff ff       	jmp    8010586e <alltraps>
 
-801071c3 <vector246>:
+80106723 <vector246>:
 .globl vector246
 vector246:
   pushl $0
-801071c3:	6a 00                	push   $0x0
+80106723:	6a 00                	push   $0x0
   pushl $246
-801071c5:	68 f6 00 00 00       	push   $0xf6
+80106725:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-801071ca:	e9 48 f1 ff ff       	jmp    80106317 <alltraps>
+8010672a:	e9 3f f1 ff ff       	jmp    8010586e <alltraps>
 
-801071cf <vector247>:
+8010672f <vector247>:
 .globl vector247
 vector247:
   pushl $0
-801071cf:	6a 00                	push   $0x0
+8010672f:	6a 00                	push   $0x0
   pushl $247
-801071d1:	68 f7 00 00 00       	push   $0xf7
+80106731:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-801071d6:	e9 3c f1 ff ff       	jmp    80106317 <alltraps>
+80106736:	e9 33 f1 ff ff       	jmp    8010586e <alltraps>
 
-801071db <vector248>:
+8010673b <vector248>:
 .globl vector248
 vector248:
   pushl $0
-801071db:	6a 00                	push   $0x0
+8010673b:	6a 00                	push   $0x0
   pushl $248
-801071dd:	68 f8 00 00 00       	push   $0xf8
+8010673d:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-801071e2:	e9 30 f1 ff ff       	jmp    80106317 <alltraps>
+80106742:	e9 27 f1 ff ff       	jmp    8010586e <alltraps>
 
-801071e7 <vector249>:
+80106747 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-801071e7:	6a 00                	push   $0x0
+80106747:	6a 00                	push   $0x0
   pushl $249
-801071e9:	68 f9 00 00 00       	push   $0xf9
+80106749:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-801071ee:	e9 24 f1 ff ff       	jmp    80106317 <alltraps>
+8010674e:	e9 1b f1 ff ff       	jmp    8010586e <alltraps>
 
-801071f3 <vector250>:
+80106753 <vector250>:
 .globl vector250
 vector250:
   pushl $0
-801071f3:	6a 00                	push   $0x0
+80106753:	6a 00                	push   $0x0
   pushl $250
-801071f5:	68 fa 00 00 00       	push   $0xfa
+80106755:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-801071fa:	e9 18 f1 ff ff       	jmp    80106317 <alltraps>
+8010675a:	e9 0f f1 ff ff       	jmp    8010586e <alltraps>
 
-801071ff <vector251>:
+8010675f <vector251>:
 .globl vector251
 vector251:
   pushl $0
-801071ff:	6a 00                	push   $0x0
+8010675f:	6a 00                	push   $0x0
   pushl $251
-80107201:	68 fb 00 00 00       	push   $0xfb
+80106761:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80107206:	e9 0c f1 ff ff       	jmp    80106317 <alltraps>
+80106766:	e9 03 f1 ff ff       	jmp    8010586e <alltraps>
 
-8010720b <vector252>:
+8010676b <vector252>:
 .globl vector252
 vector252:
   pushl $0
-8010720b:	6a 00                	push   $0x0
+8010676b:	6a 00                	push   $0x0
   pushl $252
-8010720d:	68 fc 00 00 00       	push   $0xfc
+8010676d:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-80107212:	e9 00 f1 ff ff       	jmp    80106317 <alltraps>
+80106772:	e9 f7 f0 ff ff       	jmp    8010586e <alltraps>
 
-80107217 <vector253>:
+80106777 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80107217:	6a 00                	push   $0x0
+80106777:	6a 00                	push   $0x0
   pushl $253
-80107219:	68 fd 00 00 00       	push   $0xfd
+80106779:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010721e:	e9 f4 f0 ff ff       	jmp    80106317 <alltraps>
+8010677e:	e9 eb f0 ff ff       	jmp    8010586e <alltraps>
 
-80107223 <vector254>:
+80106783 <vector254>:
 .globl vector254
 vector254:
   pushl $0
-80107223:	6a 00                	push   $0x0
+80106783:	6a 00                	push   $0x0
   pushl $254
-80107225:	68 fe 00 00 00       	push   $0xfe
+80106785:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-8010722a:	e9 e8 f0 ff ff       	jmp    80106317 <alltraps>
+8010678a:	e9 df f0 ff ff       	jmp    8010586e <alltraps>
 
-8010722f <vector255>:
+8010678f <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010722f:	6a 00                	push   $0x0
+8010678f:	6a 00                	push   $0x0
   pushl $255
-80107231:	68 ff 00 00 00       	push   $0xff
+80106791:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80107236:	e9 dc f0 ff ff       	jmp    80106317 <alltraps>
-8010723b:	66 90                	xchg   %ax,%ax
-8010723d:	66 90                	xchg   %ax,%ax
-8010723f:	90                   	nop
+80106796:	e9 d3 f0 ff ff       	jmp    8010586e <alltraps>
+8010679b:	66 90                	xchg   %ax,%ax
+8010679d:	66 90                	xchg   %ax,%ax
+8010679f:	90                   	nop
 
-80107240 <walkpgdir>:
+801067a0 <walkpgdir>:
 // Return the address of the PTE in page table pgdir
 // that corresponds to virtual address va.  If alloc!=0,
 // create any required page table pages.
 static pte_t *
 walkpgdir(pde_t *pgdir, const void *va, int alloc)
 {
-80107240:	55                   	push   %ebp
-80107241:	89 e5                	mov    %esp,%ebp
-80107243:	57                   	push   %edi
-80107244:	56                   	push   %esi
-80107245:	89 d6                	mov    %edx,%esi
+801067a0:	55                   	push   %ebp
+801067a1:	89 e5                	mov    %esp,%ebp
+801067a3:	57                   	push   %edi
+801067a4:	56                   	push   %esi
+801067a5:	89 d6                	mov    %edx,%esi
   pde_t *pde;
   pte_t *pgtab;
 
   pde = &pgdir[PDX(va)];
-80107247:	c1 ea 16             	shr    $0x16,%edx
+801067a7:	c1 ea 16             	shr    $0x16,%edx
 {
-8010724a:	53                   	push   %ebx
+801067aa:	53                   	push   %ebx
   pde = &pgdir[PDX(va)];
-8010724b:	8d 3c 90             	lea    (%eax,%edx,4),%edi
+801067ab:	8d 3c 90             	lea    (%eax,%edx,4),%edi
 {
-8010724e:	83 ec 0c             	sub    $0xc,%esp
+801067ae:	83 ec 0c             	sub    $0xc,%esp
   if(*pde & PTE_P){
-80107251:	8b 1f                	mov    (%edi),%ebx
-80107253:	f6 c3 01             	test   $0x1,%bl
-80107256:	74 28                	je     80107280 <walkpgdir+0x40>
+801067b1:	8b 1f                	mov    (%edi),%ebx
+801067b3:	f6 c3 01             	test   $0x1,%bl
+801067b6:	74 28                	je     801067e0 <walkpgdir+0x40>
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107258:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-8010725e:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
+801067b8:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+801067be:	81 c3 00 00 00 80    	add    $0x80000000,%ebx
     // The permissions here are overly generous, but they can
     // be further restricted by the permissions in the page table
     // entries, if necessary.
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
   }
   return &pgtab[PTX(va)];
-80107264:	89 f0                	mov    %esi,%eax
+801067c4:	89 f0                	mov    %esi,%eax
 }
-80107266:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801067c6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return &pgtab[PTX(va)];
-80107269:	c1 e8 0a             	shr    $0xa,%eax
-8010726c:	25 fc 0f 00 00       	and    $0xffc,%eax
-80107271:	01 d8                	add    %ebx,%eax
-}
-80107273:	5b                   	pop    %ebx
-80107274:	5e                   	pop    %esi
-80107275:	5f                   	pop    %edi
-80107276:	5d                   	pop    %ebp
-80107277:	c3                   	ret    
-80107278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010727f:	90                   	nop
+801067c9:	c1 e8 0a             	shr    $0xa,%eax
+801067cc:	25 fc 0f 00 00       	and    $0xffc,%eax
+801067d1:	01 d8                	add    %ebx,%eax
+}
+801067d3:	5b                   	pop    %ebx
+801067d4:	5e                   	pop    %esi
+801067d5:	5f                   	pop    %edi
+801067d6:	5d                   	pop    %ebp
+801067d7:	c3                   	ret    
+801067d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801067df:	90                   	nop
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-80107280:	85 c9                	test   %ecx,%ecx
-80107282:	74 2c                	je     801072b0 <walkpgdir+0x70>
-80107284:	e8 f7 bd ff ff       	call   80103080 <kalloc>
-80107289:	89 c3                	mov    %eax,%ebx
-8010728b:	85 c0                	test   %eax,%eax
-8010728d:	74 21                	je     801072b0 <walkpgdir+0x70>
+801067e0:	85 c9                	test   %ecx,%ecx
+801067e2:	74 2c                	je     80106810 <walkpgdir+0x70>
+801067e4:	e8 47 be ff ff       	call   80102630 <kalloc>
+801067e9:	89 c3                	mov    %eax,%ebx
+801067eb:	85 c0                	test   %eax,%eax
+801067ed:	74 21                	je     80106810 <walkpgdir+0x70>
     memset(pgtab, 0, PGSIZE);
-8010728f:	83 ec 04             	sub    $0x4,%esp
-80107292:	68 00 10 00 00       	push   $0x1000
-80107297:	6a 00                	push   $0x0
-80107299:	50                   	push   %eax
-8010729a:	e8 21 de ff ff       	call   801050c0 <memset>
+801067ef:	83 ec 04             	sub    $0x4,%esp
+801067f2:	68 00 10 00 00       	push   $0x1000
+801067f7:	6a 00                	push   $0x0
+801067f9:	50                   	push   %eax
+801067fa:	e8 71 de ff ff       	call   80104670 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-8010729f:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-801072a5:	83 c4 10             	add    $0x10,%esp
-801072a8:	83 c8 07             	or     $0x7,%eax
-801072ab:	89 07                	mov    %eax,(%edi)
-801072ad:	eb b5                	jmp    80107264 <walkpgdir+0x24>
-801072af:	90                   	nop
+801067ff:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106805:	83 c4 10             	add    $0x10,%esp
+80106808:	83 c8 07             	or     $0x7,%eax
+8010680b:	89 07                	mov    %eax,(%edi)
+8010680d:	eb b5                	jmp    801067c4 <walkpgdir+0x24>
+8010680f:	90                   	nop
 }
-801072b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106810:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return 0;
-801072b3:	31 c0                	xor    %eax,%eax
+80106813:	31 c0                	xor    %eax,%eax
 }
-801072b5:	5b                   	pop    %ebx
-801072b6:	5e                   	pop    %esi
-801072b7:	5f                   	pop    %edi
-801072b8:	5d                   	pop    %ebp
-801072b9:	c3                   	ret    
-801072ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106815:	5b                   	pop    %ebx
+80106816:	5e                   	pop    %esi
+80106817:	5f                   	pop    %edi
+80106818:	5d                   	pop    %ebp
+80106819:	c3                   	ret    
+8010681a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801072c0 <mappages>:
+80106820 <mappages>:
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
 static int
 mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)
 {
-801072c0:	55                   	push   %ebp
-801072c1:	89 e5                	mov    %esp,%ebp
-801072c3:	57                   	push   %edi
-801072c4:	89 c7                	mov    %eax,%edi
+80106820:	55                   	push   %ebp
+80106821:	89 e5                	mov    %esp,%ebp
+80106823:	57                   	push   %edi
+80106824:	89 c7                	mov    %eax,%edi
   char *a, *last;
   pte_t *pte;
 
   a = (char*)PGROUNDDOWN((uint)va);
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801072c6:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106826:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
 {
-801072ca:	56                   	push   %esi
+8010682a:	56                   	push   %esi
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801072cb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010682b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   a = (char*)PGROUNDDOWN((uint)va);
-801072d0:	89 d6                	mov    %edx,%esi
+80106830:	89 d6                	mov    %edx,%esi
 {
-801072d2:	53                   	push   %ebx
+80106832:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-801072d3:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106833:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
 {
-801072d9:	83 ec 1c             	sub    $0x1c,%esp
+80106839:	83 ec 1c             	sub    $0x1c,%esp
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-801072dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801072df:	8b 45 08             	mov    0x8(%ebp),%eax
-801072e2:	29 f0                	sub    %esi,%eax
-801072e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801072e7:	eb 1f                	jmp    80107308 <mappages+0x48>
-801072e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010683c:	89 45 e0             	mov    %eax,-0x20(%ebp)
+8010683f:	8b 45 08             	mov    0x8(%ebp),%eax
+80106842:	29 f0                	sub    %esi,%eax
+80106844:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106847:	eb 1f                	jmp    80106868 <mappages+0x48>
+80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   for(;;){
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
       return -1;
     if(*pte & PTE_P)
-801072f0:	f6 00 01             	testb  $0x1,(%eax)
-801072f3:	75 45                	jne    8010733a <mappages+0x7a>
+80106850:	f6 00 01             	testb  $0x1,(%eax)
+80106853:	75 45                	jne    8010689a <mappages+0x7a>
       panic("remap");
     *pte = pa | perm | PTE_P;
-801072f5:	0b 5d 0c             	or     0xc(%ebp),%ebx
-801072f8:	83 cb 01             	or     $0x1,%ebx
-801072fb:	89 18                	mov    %ebx,(%eax)
+80106855:	0b 5d 0c             	or     0xc(%ebp),%ebx
+80106858:	83 cb 01             	or     $0x1,%ebx
+8010685b:	89 18                	mov    %ebx,(%eax)
     if(a == last)
-801072fd:	3b 75 e0             	cmp    -0x20(%ebp),%esi
-80107300:	74 2e                	je     80107330 <mappages+0x70>
+8010685d:	3b 75 e0             	cmp    -0x20(%ebp),%esi
+80106860:	74 2e                	je     80106890 <mappages+0x70>
       break;
     a += PGSIZE;
-80107302:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106862:	81 c6 00 10 00 00    	add    $0x1000,%esi
   for(;;){
-80107308:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106868:	8b 45 e4             	mov    -0x1c(%ebp),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-8010730b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80107310:	89 f2                	mov    %esi,%edx
-80107312:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
-80107315:	89 f8                	mov    %edi,%eax
-80107317:	e8 24 ff ff ff       	call   80107240 <walkpgdir>
-8010731c:	85 c0                	test   %eax,%eax
-8010731e:	75 d0                	jne    801072f0 <mappages+0x30>
+8010686b:	b9 01 00 00 00       	mov    $0x1,%ecx
+80106870:	89 f2                	mov    %esi,%edx
+80106872:	8d 1c 06             	lea    (%esi,%eax,1),%ebx
+80106875:	89 f8                	mov    %edi,%eax
+80106877:	e8 24 ff ff ff       	call   801067a0 <walkpgdir>
+8010687c:	85 c0                	test   %eax,%eax
+8010687e:	75 d0                	jne    80106850 <mappages+0x30>
     pa += PGSIZE;
   }
   return 0;
 }
-80107320:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106880:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80107323:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106883:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80107328:	5b                   	pop    %ebx
-80107329:	5e                   	pop    %esi
-8010732a:	5f                   	pop    %edi
-8010732b:	5d                   	pop    %ebp
-8010732c:	c3                   	ret    
-8010732d:	8d 76 00             	lea    0x0(%esi),%esi
-80107330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106888:	5b                   	pop    %ebx
+80106889:	5e                   	pop    %esi
+8010688a:	5f                   	pop    %edi
+8010688b:	5d                   	pop    %ebp
+8010688c:	c3                   	ret    
+8010688d:	8d 76 00             	lea    0x0(%esi),%esi
+80106890:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80107333:	31 c0                	xor    %eax,%eax
+80106893:	31 c0                	xor    %eax,%eax
 }
-80107335:	5b                   	pop    %ebx
-80107336:	5e                   	pop    %esi
-80107337:	5f                   	pop    %edi
-80107338:	5d                   	pop    %ebp
-80107339:	c3                   	ret    
+80106895:	5b                   	pop    %ebx
+80106896:	5e                   	pop    %esi
+80106897:	5f                   	pop    %edi
+80106898:	5d                   	pop    %ebp
+80106899:	c3                   	ret    
       panic("remap");
-8010733a:	83 ec 0c             	sub    $0xc,%esp
-8010733d:	68 6c 84 10 80       	push   $0x8010846c
-80107342:	e8 49 90 ff ff       	call   80100390 <panic>
-80107347:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010734e:	66 90                	xchg   %ax,%ax
+8010689a:	83 ec 0c             	sub    $0xc,%esp
+8010689d:	68 88 79 10 80       	push   $0x80107988
+801068a2:	e8 e9 9a ff ff       	call   80100390 <panic>
+801068a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068ae:	66 90                	xchg   %ax,%ax
 
-80107350 <deallocuvm.part.0>:
+801068b0 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80107350:	55                   	push   %ebp
-80107351:	89 e5                	mov    %esp,%ebp
-80107353:	57                   	push   %edi
-80107354:	56                   	push   %esi
-80107355:	89 c6                	mov    %eax,%esi
-80107357:	53                   	push   %ebx
-80107358:	89 d3                	mov    %edx,%ebx
+801068b0:	55                   	push   %ebp
+801068b1:	89 e5                	mov    %esp,%ebp
+801068b3:	57                   	push   %edi
+801068b4:	56                   	push   %esi
+801068b5:	89 c6                	mov    %eax,%esi
+801068b7:	53                   	push   %ebx
+801068b8:	89 d3                	mov    %edx,%ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-8010735a:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
-80107360:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+801068ba:	8d 91 ff 0f 00 00    	lea    0xfff(%ecx),%edx
+801068c0:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80107366:	83 ec 1c             	sub    $0x1c,%esp
-80107369:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+801068c6:	83 ec 1c             	sub    $0x1c,%esp
+801068c9:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-8010736c:	39 da                	cmp    %ebx,%edx
-8010736e:	73 5b                	jae    801073cb <deallocuvm.part.0+0x7b>
-80107370:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-80107373:	89 d7                	mov    %edx,%edi
-80107375:	eb 14                	jmp    8010738b <deallocuvm.part.0+0x3b>
-80107377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010737e:	66 90                	xchg   %ax,%ax
-80107380:	81 c7 00 10 00 00    	add    $0x1000,%edi
-80107386:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-80107389:	76 40                	jbe    801073cb <deallocuvm.part.0+0x7b>
+801068cc:	39 da                	cmp    %ebx,%edx
+801068ce:	73 5b                	jae    8010692b <deallocuvm.part.0+0x7b>
+801068d0:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
+801068d3:	89 d7                	mov    %edx,%edi
+801068d5:	eb 14                	jmp    801068eb <deallocuvm.part.0+0x3b>
+801068d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801068de:	66 90                	xchg   %ax,%ax
+801068e0:	81 c7 00 10 00 00    	add    $0x1000,%edi
+801068e6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+801068e9:	76 40                	jbe    8010692b <deallocuvm.part.0+0x7b>
     pte = walkpgdir(pgdir, (char*)a, 0);
-8010738b:	31 c9                	xor    %ecx,%ecx
-8010738d:	89 fa                	mov    %edi,%edx
-8010738f:	89 f0                	mov    %esi,%eax
-80107391:	e8 aa fe ff ff       	call   80107240 <walkpgdir>
-80107396:	89 c3                	mov    %eax,%ebx
+801068eb:	31 c9                	xor    %ecx,%ecx
+801068ed:	89 fa                	mov    %edi,%edx
+801068ef:	89 f0                	mov    %esi,%eax
+801068f1:	e8 aa fe ff ff       	call   801067a0 <walkpgdir>
+801068f6:	89 c3                	mov    %eax,%ebx
     if(!pte)
-80107398:	85 c0                	test   %eax,%eax
-8010739a:	74 44                	je     801073e0 <deallocuvm.part.0+0x90>
+801068f8:	85 c0                	test   %eax,%eax
+801068fa:	74 44                	je     80106940 <deallocuvm.part.0+0x90>
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
     else if((*pte & PTE_P) != 0){
-8010739c:	8b 00                	mov    (%eax),%eax
-8010739e:	a8 01                	test   $0x1,%al
-801073a0:	74 de                	je     80107380 <deallocuvm.part.0+0x30>
+801068fc:	8b 00                	mov    (%eax),%eax
+801068fe:	a8 01                	test   $0x1,%al
+80106900:	74 de                	je     801068e0 <deallocuvm.part.0+0x30>
       pa = PTE_ADDR(*pte);
       if(pa == 0)
-801073a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-801073a7:	74 47                	je     801073f0 <deallocuvm.part.0+0xa0>
+80106902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106907:	74 47                	je     80106950 <deallocuvm.part.0+0xa0>
         panic("kfree");
       char *v = P2V(pa);
       kfree(v);
-801073a9:	83 ec 0c             	sub    $0xc,%esp
+80106909:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-801073ac:	05 00 00 00 80       	add    $0x80000000,%eax
-801073b1:	81 c7 00 10 00 00    	add    $0x1000,%edi
+8010690c:	05 00 00 00 80       	add    $0x80000000,%eax
+80106911:	81 c7 00 10 00 00    	add    $0x1000,%edi
       kfree(v);
-801073b7:	50                   	push   %eax
-801073b8:	e8 03 bb ff ff       	call   80102ec0 <kfree>
+80106917:	50                   	push   %eax
+80106918:	e8 53 bb ff ff       	call   80102470 <kfree>
       *pte = 0;
-801073bd:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-801073c3:	83 c4 10             	add    $0x10,%esp
+8010691d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+80106923:	83 c4 10             	add    $0x10,%esp
   for(; a  < oldsz; a += PGSIZE){
-801073c6:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-801073c9:	77 c0                	ja     8010738b <deallocuvm.part.0+0x3b>
+80106926:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
+80106929:	77 c0                	ja     801068eb <deallocuvm.part.0+0x3b>
     }
   }
   return newsz;
 }
-801073cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801073ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801073d1:	5b                   	pop    %ebx
-801073d2:	5e                   	pop    %esi
-801073d3:	5f                   	pop    %edi
-801073d4:	5d                   	pop    %ebp
-801073d5:	c3                   	ret    
-801073d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801073dd:	8d 76 00             	lea    0x0(%esi),%esi
+8010692b:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010692e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106931:	5b                   	pop    %ebx
+80106932:	5e                   	pop    %esi
+80106933:	5f                   	pop    %edi
+80106934:	5d                   	pop    %ebp
+80106935:	c3                   	ret    
+80106936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010693d:	8d 76 00             	lea    0x0(%esi),%esi
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-801073e0:	89 fa                	mov    %edi,%edx
-801073e2:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
-801073e8:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
-801073ee:	eb 96                	jmp    80107386 <deallocuvm.part.0+0x36>
+80106940:	89 fa                	mov    %edi,%edx
+80106942:	81 e2 00 00 c0 ff    	and    $0xffc00000,%edx
+80106948:	8d ba 00 00 40 00    	lea    0x400000(%edx),%edi
+8010694e:	eb 96                	jmp    801068e6 <deallocuvm.part.0+0x36>
         panic("kfree");
-801073f0:	83 ec 0c             	sub    $0xc,%esp
-801073f3:	68 1e 7e 10 80       	push   $0x80107e1e
-801073f8:	e8 93 8f ff ff       	call   80100390 <panic>
-801073fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80107400 <seginit>:
-{
-80107400:	f3 0f 1e fb          	endbr32 
-80107404:	55                   	push   %ebp
-80107405:	89 e5                	mov    %esp,%ebp
-80107407:	83 ec 18             	sub    $0x18,%esp
+80106950:	83 ec 0c             	sub    $0xc,%esp
+80106953:	68 46 73 10 80       	push   $0x80107346
+80106958:	e8 33 9a ff ff       	call   80100390 <panic>
+8010695d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106960 <seginit>:
+{
+80106960:	f3 0f 1e fb          	endbr32 
+80106964:	55                   	push   %ebp
+80106965:	89 e5                	mov    %esp,%ebp
+80106967:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-8010740a:	e8 81 cf ff ff       	call   80104390 <cpuid>
+8010696a:	e8 d1 cf ff ff       	call   80103940 <cpuid>
   pd[0] = size-1;
-8010740f:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80107414:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-8010741a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+8010696f:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106974:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+8010697a:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010741e:	c7 80 f8 41 11 80 ff 	movl   $0xffff,-0x7feebe08(%eax)
-80107425:	ff 00 00 
-80107428:	c7 80 fc 41 11 80 00 	movl   $0xcf9a00,-0x7feebe04(%eax)
-8010742f:	9a cf 00 
+8010697e:	c7 80 f8 27 11 80 ff 	movl   $0xffff,-0x7feed808(%eax)
+80106985:	ff 00 00 
+80106988:	c7 80 fc 27 11 80 00 	movl   $0xcf9a00,-0x7feed804(%eax)
+8010698f:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80107432:	c7 80 00 42 11 80 ff 	movl   $0xffff,-0x7feebe00(%eax)
-80107439:	ff 00 00 
-8010743c:	c7 80 04 42 11 80 00 	movl   $0xcf9200,-0x7feebdfc(%eax)
-80107443:	92 cf 00 
+80106992:	c7 80 00 28 11 80 ff 	movl   $0xffff,-0x7feed800(%eax)
+80106999:	ff 00 00 
+8010699c:	c7 80 04 28 11 80 00 	movl   $0xcf9200,-0x7feed7fc(%eax)
+801069a3:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80107446:	c7 80 08 42 11 80 ff 	movl   $0xffff,-0x7feebdf8(%eax)
-8010744d:	ff 00 00 
-80107450:	c7 80 0c 42 11 80 00 	movl   $0xcffa00,-0x7feebdf4(%eax)
-80107457:	fa cf 00 
+801069a6:	c7 80 08 28 11 80 ff 	movl   $0xffff,-0x7feed7f8(%eax)
+801069ad:	ff 00 00 
+801069b0:	c7 80 0c 28 11 80 00 	movl   $0xcffa00,-0x7feed7f4(%eax)
+801069b7:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-8010745a:	c7 80 10 42 11 80 ff 	movl   $0xffff,-0x7feebdf0(%eax)
-80107461:	ff 00 00 
-80107464:	c7 80 14 42 11 80 00 	movl   $0xcff200,-0x7feebdec(%eax)
-8010746b:	f2 cf 00 
+801069ba:	c7 80 10 28 11 80 ff 	movl   $0xffff,-0x7feed7f0(%eax)
+801069c1:	ff 00 00 
+801069c4:	c7 80 14 28 11 80 00 	movl   $0xcff200,-0x7feed7ec(%eax)
+801069cb:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-8010746e:	05 f0 41 11 80       	add    $0x801141f0,%eax
+801069ce:	05 f0 27 11 80       	add    $0x801127f0,%eax
   pd[1] = (uint)p;
-80107473:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+801069d3:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-80107477:	c1 e8 10             	shr    $0x10,%eax
-8010747a:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+801069d7:	c1 e8 10             	shr    $0x10,%eax
+801069da:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-8010747e:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80107481:	0f 01 10             	lgdtl  (%eax)
+801069de:	8d 45 f2             	lea    -0xe(%ebp),%eax
+801069e1:	0f 01 10             	lgdtl  (%eax)
 }
-80107484:	c9                   	leave  
-80107485:	c3                   	ret    
-80107486:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010748d:	8d 76 00             	lea    0x0(%esi),%esi
+801069e4:	c9                   	leave  
+801069e5:	c3                   	ret    
+801069e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801069ed:	8d 76 00             	lea    0x0(%esi),%esi
 
-80107490 <switchkvm>:
+801069f0 <switchkvm>:
 {
-80107490:	f3 0f 1e fb          	endbr32 
+801069f0:	f3 0f 1e fb          	endbr32 
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80107494:	a1 a4 6e 11 80       	mov    0x80116ea4,%eax
-80107499:	05 00 00 00 80       	add    $0x80000000,%eax
+801069f4:	a1 a4 54 11 80       	mov    0x801154a4,%eax
+801069f9:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-8010749e:	0f 22 d8             	mov    %eax,%cr3
+801069fe:	0f 22 d8             	mov    %eax,%cr3
 }
-801074a1:	c3                   	ret    
-801074a2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801074a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801074b0 <switchuvm>:
-{
-801074b0:	f3 0f 1e fb          	endbr32 
-801074b4:	55                   	push   %ebp
-801074b5:	89 e5                	mov    %esp,%ebp
-801074b7:	57                   	push   %edi
-801074b8:	56                   	push   %esi
-801074b9:	53                   	push   %ebx
-801074ba:	83 ec 1c             	sub    $0x1c,%esp
-801074bd:	8b 75 08             	mov    0x8(%ebp),%esi
+80106a01:	c3                   	ret    
+80106a02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106a09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106a10 <switchuvm>:
+{
+80106a10:	f3 0f 1e fb          	endbr32 
+80106a14:	55                   	push   %ebp
+80106a15:	89 e5                	mov    %esp,%ebp
+80106a17:	57                   	push   %edi
+80106a18:	56                   	push   %esi
+80106a19:	53                   	push   %ebx
+80106a1a:	83 ec 1c             	sub    $0x1c,%esp
+80106a1d:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-801074c0:	85 f6                	test   %esi,%esi
-801074c2:	0f 84 cb 00 00 00    	je     80107593 <switchuvm+0xe3>
+80106a20:	85 f6                	test   %esi,%esi
+80106a22:	0f 84 cb 00 00 00    	je     80106af3 <switchuvm+0xe3>
   if(p->kstack == 0)
-801074c8:	8b 46 08             	mov    0x8(%esi),%eax
-801074cb:	85 c0                	test   %eax,%eax
-801074cd:	0f 84 da 00 00 00    	je     801075ad <switchuvm+0xfd>
+80106a28:	8b 46 08             	mov    0x8(%esi),%eax
+80106a2b:	85 c0                	test   %eax,%eax
+80106a2d:	0f 84 da 00 00 00    	je     80106b0d <switchuvm+0xfd>
   if(p->pgdir == 0)
-801074d3:	8b 46 04             	mov    0x4(%esi),%eax
-801074d6:	85 c0                	test   %eax,%eax
-801074d8:	0f 84 c2 00 00 00    	je     801075a0 <switchuvm+0xf0>
+80106a33:	8b 46 04             	mov    0x4(%esi),%eax
+80106a36:	85 c0                	test   %eax,%eax
+80106a38:	0f 84 c2 00 00 00    	je     80106b00 <switchuvm+0xf0>
   pushcli();
-801074de:	e8 cd d9 ff ff       	call   80104eb0 <pushcli>
+80106a3e:	e8 1d da ff ff       	call   80104460 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-801074e3:	e8 38 ce ff ff       	call   80104320 <mycpu>
-801074e8:	89 c3                	mov    %eax,%ebx
-801074ea:	e8 31 ce ff ff       	call   80104320 <mycpu>
-801074ef:	89 c7                	mov    %eax,%edi
-801074f1:	e8 2a ce ff ff       	call   80104320 <mycpu>
-801074f6:	83 c7 08             	add    $0x8,%edi
-801074f9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801074fc:	e8 1f ce ff ff       	call   80104320 <mycpu>
-80107501:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80107504:	ba 67 00 00 00       	mov    $0x67,%edx
-80107509:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80107510:	83 c0 08             	add    $0x8,%eax
-80107513:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106a43:	e8 88 ce ff ff       	call   801038d0 <mycpu>
+80106a48:	89 c3                	mov    %eax,%ebx
+80106a4a:	e8 81 ce ff ff       	call   801038d0 <mycpu>
+80106a4f:	89 c7                	mov    %eax,%edi
+80106a51:	e8 7a ce ff ff       	call   801038d0 <mycpu>
+80106a56:	83 c7 08             	add    $0x8,%edi
+80106a59:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106a5c:	e8 6f ce ff ff       	call   801038d0 <mycpu>
+80106a61:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106a64:	ba 67 00 00 00       	mov    $0x67,%edx
+80106a69:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106a70:	83 c0 08             	add    $0x8,%eax
+80106a73:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-8010751a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106a7a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-8010751f:	83 c1 08             	add    $0x8,%ecx
-80107522:	c1 e8 18             	shr    $0x18,%eax
-80107525:	c1 e9 10             	shr    $0x10,%ecx
-80107528:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-8010752e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80107534:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80107539:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106a7f:	83 c1 08             	add    $0x8,%ecx
+80106a82:	c1 e8 18             	shr    $0x18,%eax
+80106a85:	c1 e9 10             	shr    $0x10,%ecx
+80106a88:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106a8e:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106a94:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106a99:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80107540:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106aa0:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80107545:	e8 d6 cd ff ff       	call   80104320 <mycpu>
-8010754a:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106aa5:	e8 26 ce ff ff       	call   801038d0 <mycpu>
+80106aaa:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80107551:	e8 ca cd ff ff       	call   80104320 <mycpu>
-80107556:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106ab1:	e8 1a ce ff ff       	call   801038d0 <mycpu>
+80106ab6:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-8010755a:	8b 5e 08             	mov    0x8(%esi),%ebx
-8010755d:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80107563:	e8 b8 cd ff ff       	call   80104320 <mycpu>
-80107568:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106aba:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106abd:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106ac3:	e8 08 ce ff ff       	call   801038d0 <mycpu>
+80106ac8:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-8010756b:	e8 b0 cd ff ff       	call   80104320 <mycpu>
-80107570:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106acb:	e8 00 ce ff ff       	call   801038d0 <mycpu>
+80106ad0:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80107574:	b8 28 00 00 00       	mov    $0x28,%eax
-80107579:	0f 00 d8             	ltr    %ax
+80106ad4:	b8 28 00 00 00       	mov    $0x28,%eax
+80106ad9:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-8010757c:	8b 46 04             	mov    0x4(%esi),%eax
-8010757f:	05 00 00 00 80       	add    $0x80000000,%eax
+80106adc:	8b 46 04             	mov    0x4(%esi),%eax
+80106adf:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80107584:	0f 22 d8             	mov    %eax,%cr3
+80106ae4:	0f 22 d8             	mov    %eax,%cr3
 }
-80107587:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010758a:	5b                   	pop    %ebx
-8010758b:	5e                   	pop    %esi
-8010758c:	5f                   	pop    %edi
-8010758d:	5d                   	pop    %ebp
+80106ae7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106aea:	5b                   	pop    %ebx
+80106aeb:	5e                   	pop    %esi
+80106aec:	5f                   	pop    %edi
+80106aed:	5d                   	pop    %ebp
   popcli();
-8010758e:	e9 6d d9 ff ff       	jmp    80104f00 <popcli>
+80106aee:	e9 bd d9 ff ff       	jmp    801044b0 <popcli>
     panic("switchuvm: no process");
-80107593:	83 ec 0c             	sub    $0xc,%esp
-80107596:	68 72 84 10 80       	push   $0x80108472
-8010759b:	e8 f0 8d ff ff       	call   80100390 <panic>
+80106af3:	83 ec 0c             	sub    $0xc,%esp
+80106af6:	68 8e 79 10 80       	push   $0x8010798e
+80106afb:	e8 90 98 ff ff       	call   80100390 <panic>
     panic("switchuvm: no pgdir");
-801075a0:	83 ec 0c             	sub    $0xc,%esp
-801075a3:	68 9d 84 10 80       	push   $0x8010849d
-801075a8:	e8 e3 8d ff ff       	call   80100390 <panic>
+80106b00:	83 ec 0c             	sub    $0xc,%esp
+80106b03:	68 b9 79 10 80       	push   $0x801079b9
+80106b08:	e8 83 98 ff ff       	call   80100390 <panic>
     panic("switchuvm: no kstack");
-801075ad:	83 ec 0c             	sub    $0xc,%esp
-801075b0:	68 88 84 10 80       	push   $0x80108488
-801075b5:	e8 d6 8d ff ff       	call   80100390 <panic>
-801075ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801075c0 <inituvm>:
-{
-801075c0:	f3 0f 1e fb          	endbr32 
-801075c4:	55                   	push   %ebp
-801075c5:	89 e5                	mov    %esp,%ebp
-801075c7:	57                   	push   %edi
-801075c8:	56                   	push   %esi
-801075c9:	53                   	push   %ebx
-801075ca:	83 ec 1c             	sub    $0x1c,%esp
-801075cd:	8b 45 0c             	mov    0xc(%ebp),%eax
-801075d0:	8b 75 10             	mov    0x10(%ebp),%esi
-801075d3:	8b 7d 08             	mov    0x8(%ebp),%edi
-801075d6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106b0d:	83 ec 0c             	sub    $0xc,%esp
+80106b10:	68 a4 79 10 80       	push   $0x801079a4
+80106b15:	e8 76 98 ff ff       	call   80100390 <panic>
+80106b1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106b20 <inituvm>:
+{
+80106b20:	f3 0f 1e fb          	endbr32 
+80106b24:	55                   	push   %ebp
+80106b25:	89 e5                	mov    %esp,%ebp
+80106b27:	57                   	push   %edi
+80106b28:	56                   	push   %esi
+80106b29:	53                   	push   %ebx
+80106b2a:	83 ec 1c             	sub    $0x1c,%esp
+80106b2d:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106b30:	8b 75 10             	mov    0x10(%ebp),%esi
+80106b33:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-801075d9:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-801075df:	77 4b                	ja     8010762c <inituvm+0x6c>
+80106b39:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106b3f:	77 4b                	ja     80106b8c <inituvm+0x6c>
   mem = kalloc();
-801075e1:	e8 9a ba ff ff       	call   80103080 <kalloc>
+80106b41:	e8 ea ba ff ff       	call   80102630 <kalloc>
   memset(mem, 0, PGSIZE);
-801075e6:	83 ec 04             	sub    $0x4,%esp
-801075e9:	68 00 10 00 00       	push   $0x1000
+80106b46:	83 ec 04             	sub    $0x4,%esp
+80106b49:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-801075ee:	89 c3                	mov    %eax,%ebx
+80106b4e:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-801075f0:	6a 00                	push   $0x0
-801075f2:	50                   	push   %eax
-801075f3:	e8 c8 da ff ff       	call   801050c0 <memset>
+80106b50:	6a 00                	push   $0x0
+80106b52:	50                   	push   %eax
+80106b53:	e8 18 db ff ff       	call   80104670 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-801075f8:	58                   	pop    %eax
-801075f9:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-801075ff:	5a                   	pop    %edx
-80107600:	6a 06                	push   $0x6
-80107602:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80107607:	31 d2                	xor    %edx,%edx
-80107609:	50                   	push   %eax
-8010760a:	89 f8                	mov    %edi,%eax
-8010760c:	e8 af fc ff ff       	call   801072c0 <mappages>
+80106b58:	58                   	pop    %eax
+80106b59:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106b5f:	5a                   	pop    %edx
+80106b60:	6a 06                	push   $0x6
+80106b62:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106b67:	31 d2                	xor    %edx,%edx
+80106b69:	50                   	push   %eax
+80106b6a:	89 f8                	mov    %edi,%eax
+80106b6c:	e8 af fc ff ff       	call   80106820 <mappages>
   memmove(mem, init, sz);
-80107611:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107614:	89 75 10             	mov    %esi,0x10(%ebp)
-80107617:	83 c4 10             	add    $0x10,%esp
-8010761a:	89 5d 08             	mov    %ebx,0x8(%ebp)
-8010761d:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80107620:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107623:	5b                   	pop    %ebx
-80107624:	5e                   	pop    %esi
-80107625:	5f                   	pop    %edi
-80107626:	5d                   	pop    %ebp
+80106b71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106b74:	89 75 10             	mov    %esi,0x10(%ebp)
+80106b77:	83 c4 10             	add    $0x10,%esp
+80106b7a:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106b7d:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106b80:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106b83:	5b                   	pop    %ebx
+80106b84:	5e                   	pop    %esi
+80106b85:	5f                   	pop    %edi
+80106b86:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80107627:	e9 34 db ff ff       	jmp    80105160 <memmove>
+80106b87:	e9 84 db ff ff       	jmp    80104710 <memmove>
     panic("inituvm: more than a page");
-8010762c:	83 ec 0c             	sub    $0xc,%esp
-8010762f:	68 b1 84 10 80       	push   $0x801084b1
-80107634:	e8 57 8d ff ff       	call   80100390 <panic>
-80107639:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80107640 <loaduvm>:
-{
-80107640:	f3 0f 1e fb          	endbr32 
-80107644:	55                   	push   %ebp
-80107645:	89 e5                	mov    %esp,%ebp
-80107647:	57                   	push   %edi
-80107648:	56                   	push   %esi
-80107649:	53                   	push   %ebx
-8010764a:	83 ec 1c             	sub    $0x1c,%esp
-8010764d:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107650:	8b 75 18             	mov    0x18(%ebp),%esi
+80106b8c:	83 ec 0c             	sub    $0xc,%esp
+80106b8f:	68 cd 79 10 80       	push   $0x801079cd
+80106b94:	e8 f7 97 ff ff       	call   80100390 <panic>
+80106b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106ba0 <loaduvm>:
+{
+80106ba0:	f3 0f 1e fb          	endbr32 
+80106ba4:	55                   	push   %ebp
+80106ba5:	89 e5                	mov    %esp,%ebp
+80106ba7:	57                   	push   %edi
+80106ba8:	56                   	push   %esi
+80106ba9:	53                   	push   %ebx
+80106baa:	83 ec 1c             	sub    $0x1c,%esp
+80106bad:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106bb0:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80107653:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80107658:	0f 85 99 00 00 00    	jne    801076f7 <loaduvm+0xb7>
+80106bb3:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106bb8:	0f 85 99 00 00 00    	jne    80106c57 <loaduvm+0xb7>
   for(i = 0; i < sz; i += PGSIZE){
-8010765e:	01 f0                	add    %esi,%eax
-80107660:	89 f3                	mov    %esi,%ebx
-80107662:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106bbe:	01 f0                	add    %esi,%eax
+80106bc0:	89 f3                	mov    %esi,%ebx
+80106bc2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80107665:	8b 45 14             	mov    0x14(%ebp),%eax
-80107668:	01 f0                	add    %esi,%eax
-8010766a:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106bc5:	8b 45 14             	mov    0x14(%ebp),%eax
+80106bc8:	01 f0                	add    %esi,%eax
+80106bca:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-8010766d:	85 f6                	test   %esi,%esi
-8010766f:	75 15                	jne    80107686 <loaduvm+0x46>
-80107671:	eb 6d                	jmp    801076e0 <loaduvm+0xa0>
-80107673:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80107677:	90                   	nop
-80107678:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-8010767e:	89 f0                	mov    %esi,%eax
-80107680:	29 d8                	sub    %ebx,%eax
-80107682:	39 c6                	cmp    %eax,%esi
-80107684:	76 5a                	jbe    801076e0 <loaduvm+0xa0>
+80106bcd:	85 f6                	test   %esi,%esi
+80106bcf:	75 15                	jne    80106be6 <loaduvm+0x46>
+80106bd1:	eb 6d                	jmp    80106c40 <loaduvm+0xa0>
+80106bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106bd7:	90                   	nop
+80106bd8:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106bde:	89 f0                	mov    %esi,%eax
+80106be0:	29 d8                	sub    %ebx,%eax
+80106be2:	39 c6                	cmp    %eax,%esi
+80106be4:	76 5a                	jbe    80106c40 <loaduvm+0xa0>
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80107686:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80107689:	8b 45 08             	mov    0x8(%ebp),%eax
-8010768c:	31 c9                	xor    %ecx,%ecx
-8010768e:	29 da                	sub    %ebx,%edx
-80107690:	e8 ab fb ff ff       	call   80107240 <walkpgdir>
-80107695:	85 c0                	test   %eax,%eax
-80107697:	74 51                	je     801076ea <loaduvm+0xaa>
+80106be6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
+80106bec:	31 c9                	xor    %ecx,%ecx
+80106bee:	29 da                	sub    %ebx,%edx
+80106bf0:	e8 ab fb ff ff       	call   801067a0 <walkpgdir>
+80106bf5:	85 c0                	test   %eax,%eax
+80106bf7:	74 51                	je     80106c4a <loaduvm+0xaa>
     pa = PTE_ADDR(*pte);
-80107699:	8b 00                	mov    (%eax),%eax
+80106bf9:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-8010769b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80106bfb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-8010769e:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106bfe:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-801076a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106c03:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-801076a8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-801076ae:	0f 46 fb             	cmovbe %ebx,%edi
+80106c08:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106c0e:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-801076b1:	29 d9                	sub    %ebx,%ecx
-801076b3:	05 00 00 00 80       	add    $0x80000000,%eax
-801076b8:	57                   	push   %edi
-801076b9:	51                   	push   %ecx
-801076ba:	50                   	push   %eax
-801076bb:	ff 75 10             	pushl  0x10(%ebp)
-801076be:	e8 ed ad ff ff       	call   801024b0 <readi>
-801076c3:	83 c4 10             	add    $0x10,%esp
-801076c6:	39 f8                	cmp    %edi,%eax
-801076c8:	74 ae                	je     80107678 <loaduvm+0x38>
+80106c11:	29 d9                	sub    %ebx,%ecx
+80106c13:	05 00 00 00 80       	add    $0x80000000,%eax
+80106c18:	57                   	push   %edi
+80106c19:	51                   	push   %ecx
+80106c1a:	50                   	push   %eax
+80106c1b:	ff 75 10             	pushl  0x10(%ebp)
+80106c1e:	e8 3d ae ff ff       	call   80101a60 <readi>
+80106c23:	83 c4 10             	add    $0x10,%esp
+80106c26:	39 f8                	cmp    %edi,%eax
+80106c28:	74 ae                	je     80106bd8 <loaduvm+0x38>
 }
-801076ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-801076cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106c2d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801076d2:	5b                   	pop    %ebx
-801076d3:	5e                   	pop    %esi
-801076d4:	5f                   	pop    %edi
-801076d5:	5d                   	pop    %ebp
-801076d6:	c3                   	ret    
-801076d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801076de:	66 90                	xchg   %ax,%ax
-801076e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106c32:	5b                   	pop    %ebx
+80106c33:	5e                   	pop    %esi
+80106c34:	5f                   	pop    %edi
+80106c35:	5d                   	pop    %ebp
+80106c36:	c3                   	ret    
+80106c37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c3e:	66 90                	xchg   %ax,%ax
+80106c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-801076e3:	31 c0                	xor    %eax,%eax
+80106c43:	31 c0                	xor    %eax,%eax
 }
-801076e5:	5b                   	pop    %ebx
-801076e6:	5e                   	pop    %esi
-801076e7:	5f                   	pop    %edi
-801076e8:	5d                   	pop    %ebp
-801076e9:	c3                   	ret    
+80106c45:	5b                   	pop    %ebx
+80106c46:	5e                   	pop    %esi
+80106c47:	5f                   	pop    %edi
+80106c48:	5d                   	pop    %ebp
+80106c49:	c3                   	ret    
       panic("loaduvm: address should exist");
-801076ea:	83 ec 0c             	sub    $0xc,%esp
-801076ed:	68 cb 84 10 80       	push   $0x801084cb
-801076f2:	e8 99 8c ff ff       	call   80100390 <panic>
+80106c4a:	83 ec 0c             	sub    $0xc,%esp
+80106c4d:	68 e7 79 10 80       	push   $0x801079e7
+80106c52:	e8 39 97 ff ff       	call   80100390 <panic>
     panic("loaduvm: addr must be page aligned");
-801076f7:	83 ec 0c             	sub    $0xc,%esp
-801076fa:	68 6c 85 10 80       	push   $0x8010856c
-801076ff:	e8 8c 8c ff ff       	call   80100390 <panic>
-80107704:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010770b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010770f:	90                   	nop
-
-80107710 <allocuvm>:
-{
-80107710:	f3 0f 1e fb          	endbr32 
-80107714:	55                   	push   %ebp
-80107715:	89 e5                	mov    %esp,%ebp
-80107717:	57                   	push   %edi
-80107718:	56                   	push   %esi
-80107719:	53                   	push   %ebx
-8010771a:	83 ec 1c             	sub    $0x1c,%esp
+80106c57:	83 ec 0c             	sub    $0xc,%esp
+80106c5a:	68 88 7a 10 80       	push   $0x80107a88
+80106c5f:	e8 2c 97 ff ff       	call   80100390 <panic>
+80106c64:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106c6b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106c6f:	90                   	nop
+
+80106c70 <allocuvm>:
+{
+80106c70:	f3 0f 1e fb          	endbr32 
+80106c74:	55                   	push   %ebp
+80106c75:	89 e5                	mov    %esp,%ebp
+80106c77:	57                   	push   %edi
+80106c78:	56                   	push   %esi
+80106c79:	53                   	push   %ebx
+80106c7a:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-8010771d:	8b 45 10             	mov    0x10(%ebp),%eax
+80106c7d:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80107720:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106c80:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80107723:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80107726:	85 c0                	test   %eax,%eax
-80107728:	0f 88 b2 00 00 00    	js     801077e0 <allocuvm+0xd0>
+80106c83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106c86:	85 c0                	test   %eax,%eax
+80106c88:	0f 88 b2 00 00 00    	js     80106d40 <allocuvm+0xd0>
   if(newsz < oldsz)
-8010772e:	3b 45 0c             	cmp    0xc(%ebp),%eax
+80106c8e:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80107731:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106c91:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80107734:	0f 82 96 00 00 00    	jb     801077d0 <allocuvm+0xc0>
+80106c94:	0f 82 96 00 00 00    	jb     80106d30 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-8010773a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80107740:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80106c9a:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+80106ca0:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80107746:	39 75 10             	cmp    %esi,0x10(%ebp)
-80107749:	77 40                	ja     8010778b <allocuvm+0x7b>
-8010774b:	e9 83 00 00 00       	jmp    801077d3 <allocuvm+0xc3>
+80106ca6:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106ca9:	77 40                	ja     80106ceb <allocuvm+0x7b>
+80106cab:	e9 83 00 00 00       	jmp    80106d33 <allocuvm+0xc3>
     memset(mem, 0, PGSIZE);
-80107750:	83 ec 04             	sub    $0x4,%esp
-80107753:	68 00 10 00 00       	push   $0x1000
-80107758:	6a 00                	push   $0x0
-8010775a:	50                   	push   %eax
-8010775b:	e8 60 d9 ff ff       	call   801050c0 <memset>
+80106cb0:	83 ec 04             	sub    $0x4,%esp
+80106cb3:	68 00 10 00 00       	push   $0x1000
+80106cb8:	6a 00                	push   $0x0
+80106cba:	50                   	push   %eax
+80106cbb:	e8 b0 d9 ff ff       	call   80104670 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80107760:	58                   	pop    %eax
-80107761:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80107767:	5a                   	pop    %edx
-80107768:	6a 06                	push   $0x6
-8010776a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-8010776f:	89 f2                	mov    %esi,%edx
-80107771:	50                   	push   %eax
-80107772:	89 f8                	mov    %edi,%eax
-80107774:	e8 47 fb ff ff       	call   801072c0 <mappages>
-80107779:	83 c4 10             	add    $0x10,%esp
-8010777c:	85 c0                	test   %eax,%eax
-8010777e:	78 78                	js     801077f8 <allocuvm+0xe8>
+80106cc0:	58                   	pop    %eax
+80106cc1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106cc7:	5a                   	pop    %edx
+80106cc8:	6a 06                	push   $0x6
+80106cca:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106ccf:	89 f2                	mov    %esi,%edx
+80106cd1:	50                   	push   %eax
+80106cd2:	89 f8                	mov    %edi,%eax
+80106cd4:	e8 47 fb ff ff       	call   80106820 <mappages>
+80106cd9:	83 c4 10             	add    $0x10,%esp
+80106cdc:	85 c0                	test   %eax,%eax
+80106cde:	78 78                	js     80106d58 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80107780:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80107786:	39 75 10             	cmp    %esi,0x10(%ebp)
-80107789:	76 48                	jbe    801077d3 <allocuvm+0xc3>
+80106ce0:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106ce6:	39 75 10             	cmp    %esi,0x10(%ebp)
+80106ce9:	76 48                	jbe    80106d33 <allocuvm+0xc3>
     mem = kalloc();
-8010778b:	e8 f0 b8 ff ff       	call   80103080 <kalloc>
-80107790:	89 c3                	mov    %eax,%ebx
+80106ceb:	e8 40 b9 ff ff       	call   80102630 <kalloc>
+80106cf0:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80107792:	85 c0                	test   %eax,%eax
-80107794:	75 ba                	jne    80107750 <allocuvm+0x40>
+80106cf2:	85 c0                	test   %eax,%eax
+80106cf4:	75 ba                	jne    80106cb0 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80107796:	83 ec 0c             	sub    $0xc,%esp
-80107799:	68 e9 84 10 80       	push   $0x801084e9
-8010779e:	e8 4d 8f ff ff       	call   801006f0 <cprintf>
+80106cf6:	83 ec 0c             	sub    $0xc,%esp
+80106cf9:	68 05 7a 10 80       	push   $0x80107a05
+80106cfe:	e8 ad 99 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-801077a3:	8b 45 0c             	mov    0xc(%ebp),%eax
-801077a6:	83 c4 10             	add    $0x10,%esp
-801077a9:	39 45 10             	cmp    %eax,0x10(%ebp)
-801077ac:	74 32                	je     801077e0 <allocuvm+0xd0>
-801077ae:	8b 55 10             	mov    0x10(%ebp),%edx
-801077b1:	89 c1                	mov    %eax,%ecx
-801077b3:	89 f8                	mov    %edi,%eax
-801077b5:	e8 96 fb ff ff       	call   80107350 <deallocuvm.part.0>
+80106d03:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106d06:	83 c4 10             	add    $0x10,%esp
+80106d09:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106d0c:	74 32                	je     80106d40 <allocuvm+0xd0>
+80106d0e:	8b 55 10             	mov    0x10(%ebp),%edx
+80106d11:	89 c1                	mov    %eax,%ecx
+80106d13:	89 f8                	mov    %edi,%eax
+80106d15:	e8 96 fb ff ff       	call   801068b0 <deallocuvm.part.0>
       return 0;
-801077ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d1a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-801077c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801077c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801077c7:	5b                   	pop    %ebx
-801077c8:	5e                   	pop    %esi
-801077c9:	5f                   	pop    %edi
-801077ca:	5d                   	pop    %ebp
-801077cb:	c3                   	ret    
-801077cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106d21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d24:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d27:	5b                   	pop    %ebx
+80106d28:	5e                   	pop    %esi
+80106d29:	5f                   	pop    %edi
+80106d2a:	5d                   	pop    %ebp
+80106d2b:	c3                   	ret    
+80106d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-801077d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106d30:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-801077d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801077d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801077d9:	5b                   	pop    %ebx
-801077da:	5e                   	pop    %esi
-801077db:	5f                   	pop    %edi
-801077dc:	5d                   	pop    %ebp
-801077dd:	c3                   	ret    
-801077de:	66 90                	xchg   %ax,%ax
+80106d33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d36:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d39:	5b                   	pop    %ebx
+80106d3a:	5e                   	pop    %esi
+80106d3b:	5f                   	pop    %edi
+80106d3c:	5d                   	pop    %ebp
+80106d3d:	c3                   	ret    
+80106d3e:	66 90                	xchg   %ax,%ax
     return 0;
-801077e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d40:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-801077e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-801077ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801077ed:	5b                   	pop    %ebx
-801077ee:	5e                   	pop    %esi
-801077ef:	5f                   	pop    %edi
-801077f0:	5d                   	pop    %ebp
-801077f1:	c3                   	ret    
-801077f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106d47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d4d:	5b                   	pop    %ebx
+80106d4e:	5e                   	pop    %esi
+80106d4f:	5f                   	pop    %edi
+80106d50:	5d                   	pop    %ebp
+80106d51:	c3                   	ret    
+80106d52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-801077f8:	83 ec 0c             	sub    $0xc,%esp
-801077fb:	68 01 85 10 80       	push   $0x80108501
-80107800:	e8 eb 8e ff ff       	call   801006f0 <cprintf>
+80106d58:	83 ec 0c             	sub    $0xc,%esp
+80106d5b:	68 1d 7a 10 80       	push   $0x80107a1d
+80106d60:	e8 4b 99 ff ff       	call   801006b0 <cprintf>
   if(newsz >= oldsz)
-80107805:	8b 45 0c             	mov    0xc(%ebp),%eax
-80107808:	83 c4 10             	add    $0x10,%esp
-8010780b:	39 45 10             	cmp    %eax,0x10(%ebp)
-8010780e:	74 0c                	je     8010781c <allocuvm+0x10c>
-80107810:	8b 55 10             	mov    0x10(%ebp),%edx
-80107813:	89 c1                	mov    %eax,%ecx
-80107815:	89 f8                	mov    %edi,%eax
-80107817:	e8 34 fb ff ff       	call   80107350 <deallocuvm.part.0>
+80106d65:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106d68:	83 c4 10             	add    $0x10,%esp
+80106d6b:	39 45 10             	cmp    %eax,0x10(%ebp)
+80106d6e:	74 0c                	je     80106d7c <allocuvm+0x10c>
+80106d70:	8b 55 10             	mov    0x10(%ebp),%edx
+80106d73:	89 c1                	mov    %eax,%ecx
+80106d75:	89 f8                	mov    %edi,%eax
+80106d77:	e8 34 fb ff ff       	call   801068b0 <deallocuvm.part.0>
       kfree(mem);
-8010781c:	83 ec 0c             	sub    $0xc,%esp
-8010781f:	53                   	push   %ebx
-80107820:	e8 9b b6 ff ff       	call   80102ec0 <kfree>
+80106d7c:	83 ec 0c             	sub    $0xc,%esp
+80106d7f:	53                   	push   %ebx
+80106d80:	e8 eb b6 ff ff       	call   80102470 <kfree>
       return 0;
-80107825:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-8010782c:	83 c4 10             	add    $0x10,%esp
+80106d85:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+80106d8c:	83 c4 10             	add    $0x10,%esp
 }
-8010782f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80107832:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107835:	5b                   	pop    %ebx
-80107836:	5e                   	pop    %esi
-80107837:	5f                   	pop    %edi
-80107838:	5d                   	pop    %ebp
-80107839:	c3                   	ret    
-8010783a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80107840 <deallocuvm>:
-{
-80107840:	f3 0f 1e fb          	endbr32 
-80107844:	55                   	push   %ebp
-80107845:	89 e5                	mov    %esp,%ebp
-80107847:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010784a:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010784d:	8b 45 08             	mov    0x8(%ebp),%eax
+80106d8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106d92:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106d95:	5b                   	pop    %ebx
+80106d96:	5e                   	pop    %esi
+80106d97:	5f                   	pop    %edi
+80106d98:	5d                   	pop    %ebp
+80106d99:	c3                   	ret    
+80106d9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80106da0 <deallocuvm>:
+{
+80106da0:	f3 0f 1e fb          	endbr32 
+80106da4:	55                   	push   %ebp
+80106da5:	89 e5                	mov    %esp,%ebp
+80106da7:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106daa:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80106dad:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80107850:	39 d1                	cmp    %edx,%ecx
-80107852:	73 0c                	jae    80107860 <deallocuvm+0x20>
+80106db0:	39 d1                	cmp    %edx,%ecx
+80106db2:	73 0c                	jae    80106dc0 <deallocuvm+0x20>
 }
-80107854:	5d                   	pop    %ebp
-80107855:	e9 f6 fa ff ff       	jmp    80107350 <deallocuvm.part.0>
-8010785a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80107860:	89 d0                	mov    %edx,%eax
-80107862:	5d                   	pop    %ebp
-80107863:	c3                   	ret    
-80107864:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010786b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010786f:	90                   	nop
+80106db4:	5d                   	pop    %ebp
+80106db5:	e9 f6 fa ff ff       	jmp    801068b0 <deallocuvm.part.0>
+80106dba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106dc0:	89 d0                	mov    %edx,%eax
+80106dc2:	5d                   	pop    %ebp
+80106dc3:	c3                   	ret    
+80106dc4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106dcb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106dcf:	90                   	nop
 
-80107870 <freevm>:
+80106dd0 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80107870:	f3 0f 1e fb          	endbr32 
-80107874:	55                   	push   %ebp
-80107875:	89 e5                	mov    %esp,%ebp
-80107877:	57                   	push   %edi
-80107878:	56                   	push   %esi
-80107879:	53                   	push   %ebx
-8010787a:	83 ec 0c             	sub    $0xc,%esp
-8010787d:	8b 75 08             	mov    0x8(%ebp),%esi
+80106dd0:	f3 0f 1e fb          	endbr32 
+80106dd4:	55                   	push   %ebp
+80106dd5:	89 e5                	mov    %esp,%ebp
+80106dd7:	57                   	push   %edi
+80106dd8:	56                   	push   %esi
+80106dd9:	53                   	push   %ebx
+80106dda:	83 ec 0c             	sub    $0xc,%esp
+80106ddd:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80107880:	85 f6                	test   %esi,%esi
-80107882:	74 55                	je     801078d9 <freevm+0x69>
+80106de0:	85 f6                	test   %esi,%esi
+80106de2:	74 55                	je     80106e39 <freevm+0x69>
   if(newsz >= oldsz)
-80107884:	31 c9                	xor    %ecx,%ecx
-80107886:	ba 00 00 00 80       	mov    $0x80000000,%edx
-8010788b:	89 f0                	mov    %esi,%eax
-8010788d:	89 f3                	mov    %esi,%ebx
-8010788f:	e8 bc fa ff ff       	call   80107350 <deallocuvm.part.0>
+80106de4:	31 c9                	xor    %ecx,%ecx
+80106de6:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80106deb:	89 f0                	mov    %esi,%eax
+80106ded:	89 f3                	mov    %esi,%ebx
+80106def:	e8 bc fa ff ff       	call   801068b0 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80107894:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-8010789a:	eb 0b                	jmp    801078a7 <freevm+0x37>
-8010789c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801078a0:	83 c3 04             	add    $0x4,%ebx
-801078a3:	39 df                	cmp    %ebx,%edi
-801078a5:	74 23                	je     801078ca <freevm+0x5a>
+80106df4:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80106dfa:	eb 0b                	jmp    80106e07 <freevm+0x37>
+80106dfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106e00:	83 c3 04             	add    $0x4,%ebx
+80106e03:	39 df                	cmp    %ebx,%edi
+80106e05:	74 23                	je     80106e2a <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-801078a7:	8b 03                	mov    (%ebx),%eax
-801078a9:	a8 01                	test   $0x1,%al
-801078ab:	74 f3                	je     801078a0 <freevm+0x30>
+80106e07:	8b 03                	mov    (%ebx),%eax
+80106e09:	a8 01                	test   $0x1,%al
+80106e0b:	74 f3                	je     80106e00 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-801078ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106e0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-801078b2:	83 ec 0c             	sub    $0xc,%esp
-801078b5:	83 c3 04             	add    $0x4,%ebx
+80106e12:	83 ec 0c             	sub    $0xc,%esp
+80106e15:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-801078b8:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e18:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-801078bd:	50                   	push   %eax
-801078be:	e8 fd b5 ff ff       	call   80102ec0 <kfree>
-801078c3:	83 c4 10             	add    $0x10,%esp
+80106e1d:	50                   	push   %eax
+80106e1e:	e8 4d b6 ff ff       	call   80102470 <kfree>
+80106e23:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-801078c6:	39 df                	cmp    %ebx,%edi
-801078c8:	75 dd                	jne    801078a7 <freevm+0x37>
+80106e26:	39 df                	cmp    %ebx,%edi
+80106e28:	75 dd                	jne    80106e07 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-801078ca:	89 75 08             	mov    %esi,0x8(%ebp)
+80106e2a:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-801078cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801078d0:	5b                   	pop    %ebx
-801078d1:	5e                   	pop    %esi
-801078d2:	5f                   	pop    %edi
-801078d3:	5d                   	pop    %ebp
+80106e2d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e30:	5b                   	pop    %ebx
+80106e31:	5e                   	pop    %esi
+80106e32:	5f                   	pop    %edi
+80106e33:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-801078d4:	e9 e7 b5 ff ff       	jmp    80102ec0 <kfree>
+80106e34:	e9 37 b6 ff ff       	jmp    80102470 <kfree>
     panic("freevm: no pgdir");
-801078d9:	83 ec 0c             	sub    $0xc,%esp
-801078dc:	68 1d 85 10 80       	push   $0x8010851d
-801078e1:	e8 aa 8a ff ff       	call   80100390 <panic>
-801078e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801078ed:	8d 76 00             	lea    0x0(%esi),%esi
-
-801078f0 <setupkvm>:
-{
-801078f0:	f3 0f 1e fb          	endbr32 
-801078f4:	55                   	push   %ebp
-801078f5:	89 e5                	mov    %esp,%ebp
-801078f7:	56                   	push   %esi
-801078f8:	53                   	push   %ebx
+80106e39:	83 ec 0c             	sub    $0xc,%esp
+80106e3c:	68 39 7a 10 80       	push   $0x80107a39
+80106e41:	e8 4a 95 ff ff       	call   80100390 <panic>
+80106e46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106e50 <setupkvm>:
+{
+80106e50:	f3 0f 1e fb          	endbr32 
+80106e54:	55                   	push   %ebp
+80106e55:	89 e5                	mov    %esp,%ebp
+80106e57:	56                   	push   %esi
+80106e58:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-801078f9:	e8 82 b7 ff ff       	call   80103080 <kalloc>
-801078fe:	89 c6                	mov    %eax,%esi
-80107900:	85 c0                	test   %eax,%eax
-80107902:	74 42                	je     80107946 <setupkvm+0x56>
+80106e59:	e8 d2 b7 ff ff       	call   80102630 <kalloc>
+80106e5e:	89 c6                	mov    %eax,%esi
+80106e60:	85 c0                	test   %eax,%eax
+80106e62:	74 42                	je     80106ea6 <setupkvm+0x56>
   memset(pgdir, 0, PGSIZE);
-80107904:	83 ec 04             	sub    $0x4,%esp
+80106e64:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80107907:	bb 20 b4 10 80       	mov    $0x8010b420,%ebx
+80106e67:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-8010790c:	68 00 10 00 00       	push   $0x1000
-80107911:	6a 00                	push   $0x0
-80107913:	50                   	push   %eax
-80107914:	e8 a7 d7 ff ff       	call   801050c0 <memset>
-80107919:	83 c4 10             	add    $0x10,%esp
+80106e6c:	68 00 10 00 00       	push   $0x1000
+80106e71:	6a 00                	push   $0x0
+80106e73:	50                   	push   %eax
+80106e74:	e8 f7 d7 ff ff       	call   80104670 <memset>
+80106e79:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-8010791c:	8b 43 04             	mov    0x4(%ebx),%eax
+80106e7c:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-8010791f:	83 ec 08             	sub    $0x8,%esp
-80107922:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80107925:	ff 73 0c             	pushl  0xc(%ebx)
-80107928:	8b 13                	mov    (%ebx),%edx
-8010792a:	50                   	push   %eax
-8010792b:	29 c1                	sub    %eax,%ecx
-8010792d:	89 f0                	mov    %esi,%eax
-8010792f:	e8 8c f9 ff ff       	call   801072c0 <mappages>
-80107934:	83 c4 10             	add    $0x10,%esp
-80107937:	85 c0                	test   %eax,%eax
-80107939:	78 15                	js     80107950 <setupkvm+0x60>
+80106e7f:	83 ec 08             	sub    $0x8,%esp
+80106e82:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80106e85:	ff 73 0c             	pushl  0xc(%ebx)
+80106e88:	8b 13                	mov    (%ebx),%edx
+80106e8a:	50                   	push   %eax
+80106e8b:	29 c1                	sub    %eax,%ecx
+80106e8d:	89 f0                	mov    %esi,%eax
+80106e8f:	e8 8c f9 ff ff       	call   80106820 <mappages>
+80106e94:	83 c4 10             	add    $0x10,%esp
+80106e97:	85 c0                	test   %eax,%eax
+80106e99:	78 15                	js     80106eb0 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-8010793b:	83 c3 10             	add    $0x10,%ebx
-8010793e:	81 fb 60 b4 10 80    	cmp    $0x8010b460,%ebx
-80107944:	75 d6                	jne    8010791c <setupkvm+0x2c>
-}
-80107946:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80107949:	89 f0                	mov    %esi,%eax
-8010794b:	5b                   	pop    %ebx
-8010794c:	5e                   	pop    %esi
-8010794d:	5d                   	pop    %ebp
-8010794e:	c3                   	ret    
-8010794f:	90                   	nop
+80106e9b:	83 c3 10             	add    $0x10,%ebx
+80106e9e:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80106ea4:	75 d6                	jne    80106e7c <setupkvm+0x2c>
+}
+80106ea6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106ea9:	89 f0                	mov    %esi,%eax
+80106eab:	5b                   	pop    %ebx
+80106eac:	5e                   	pop    %esi
+80106ead:	5d                   	pop    %ebp
+80106eae:	c3                   	ret    
+80106eaf:	90                   	nop
       freevm(pgdir);
-80107950:	83 ec 0c             	sub    $0xc,%esp
-80107953:	56                   	push   %esi
+80106eb0:	83 ec 0c             	sub    $0xc,%esp
+80106eb3:	56                   	push   %esi
       return 0;
-80107954:	31 f6                	xor    %esi,%esi
+80106eb4:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80107956:	e8 15 ff ff ff       	call   80107870 <freevm>
+80106eb6:	e8 15 ff ff ff       	call   80106dd0 <freevm>
       return 0;
-8010795b:	83 c4 10             	add    $0x10,%esp
+80106ebb:	83 c4 10             	add    $0x10,%esp
 }
-8010795e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80107961:	89 f0                	mov    %esi,%eax
-80107963:	5b                   	pop    %ebx
-80107964:	5e                   	pop    %esi
-80107965:	5d                   	pop    %ebp
-80107966:	c3                   	ret    
-80107967:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010796e:	66 90                	xchg   %ax,%ax
-
-80107970 <kvmalloc>:
-{
-80107970:	f3 0f 1e fb          	endbr32 
-80107974:	55                   	push   %ebp
-80107975:	89 e5                	mov    %esp,%ebp
-80107977:	83 ec 08             	sub    $0x8,%esp
+80106ebe:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80106ec1:	89 f0                	mov    %esi,%eax
+80106ec3:	5b                   	pop    %ebx
+80106ec4:	5e                   	pop    %esi
+80106ec5:	5d                   	pop    %ebp
+80106ec6:	c3                   	ret    
+80106ec7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106ece:	66 90                	xchg   %ax,%ax
+
+80106ed0 <kvmalloc>:
+{
+80106ed0:	f3 0f 1e fb          	endbr32 
+80106ed4:	55                   	push   %ebp
+80106ed5:	89 e5                	mov    %esp,%ebp
+80106ed7:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-8010797a:	e8 71 ff ff ff       	call   801078f0 <setupkvm>
-8010797f:	a3 a4 6e 11 80       	mov    %eax,0x80116ea4
+80106eda:	e8 71 ff ff ff       	call   80106e50 <setupkvm>
+80106edf:	a3 a4 54 11 80       	mov    %eax,0x801154a4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80107984:	05 00 00 00 80       	add    $0x80000000,%eax
-80107989:	0f 22 d8             	mov    %eax,%cr3
+80106ee4:	05 00 00 00 80       	add    $0x80000000,%eax
+80106ee9:	0f 22 d8             	mov    %eax,%cr3
 }
-8010798c:	c9                   	leave  
-8010798d:	c3                   	ret    
-8010798e:	66 90                	xchg   %ax,%ax
+80106eec:	c9                   	leave  
+80106eed:	c3                   	ret    
+80106eee:	66 90                	xchg   %ax,%ax
 
-80107990 <clearpteu>:
+80106ef0 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80107990:	f3 0f 1e fb          	endbr32 
-80107994:	55                   	push   %ebp
+80106ef0:	f3 0f 1e fb          	endbr32 
+80106ef4:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107995:	31 c9                	xor    %ecx,%ecx
+80106ef5:	31 c9                	xor    %ecx,%ecx
 {
-80107997:	89 e5                	mov    %esp,%ebp
-80107999:	83 ec 08             	sub    $0x8,%esp
+80106ef7:	89 e5                	mov    %esp,%ebp
+80106ef9:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-8010799c:	8b 55 0c             	mov    0xc(%ebp),%edx
-8010799f:	8b 45 08             	mov    0x8(%ebp),%eax
-801079a2:	e8 99 f8 ff ff       	call   80107240 <walkpgdir>
+80106efc:	8b 55 0c             	mov    0xc(%ebp),%edx
+80106eff:	8b 45 08             	mov    0x8(%ebp),%eax
+80106f02:	e8 99 f8 ff ff       	call   801067a0 <walkpgdir>
   if(pte == 0)
-801079a7:	85 c0                	test   %eax,%eax
-801079a9:	74 05                	je     801079b0 <clearpteu+0x20>
+80106f07:	85 c0                	test   %eax,%eax
+80106f09:	74 05                	je     80106f10 <clearpteu+0x20>
     panic("clearpteu");
   *pte &= ~PTE_U;
-801079ab:	83 20 fb             	andl   $0xfffffffb,(%eax)
+80106f0b:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-801079ae:	c9                   	leave  
-801079af:	c3                   	ret    
+80106f0e:	c9                   	leave  
+80106f0f:	c3                   	ret    
     panic("clearpteu");
-801079b0:	83 ec 0c             	sub    $0xc,%esp
-801079b3:	68 2e 85 10 80       	push   $0x8010852e
-801079b8:	e8 d3 89 ff ff       	call   80100390 <panic>
-801079bd:	8d 76 00             	lea    0x0(%esi),%esi
+80106f10:	83 ec 0c             	sub    $0xc,%esp
+80106f13:	68 4a 7a 10 80       	push   $0x80107a4a
+80106f18:	e8 73 94 ff ff       	call   80100390 <panic>
+80106f1d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801079c0 <copyuvm>:
+80106f20 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-801079c0:	f3 0f 1e fb          	endbr32 
-801079c4:	55                   	push   %ebp
-801079c5:	89 e5                	mov    %esp,%ebp
-801079c7:	57                   	push   %edi
-801079c8:	56                   	push   %esi
-801079c9:	53                   	push   %ebx
-801079ca:	83 ec 1c             	sub    $0x1c,%esp
+80106f20:	f3 0f 1e fb          	endbr32 
+80106f24:	55                   	push   %ebp
+80106f25:	89 e5                	mov    %esp,%ebp
+80106f27:	57                   	push   %edi
+80106f28:	56                   	push   %esi
+80106f29:	53                   	push   %ebx
+80106f2a:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-801079cd:	e8 1e ff ff ff       	call   801078f0 <setupkvm>
-801079d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801079d5:	85 c0                	test   %eax,%eax
-801079d7:	0f 84 9b 00 00 00    	je     80107a78 <copyuvm+0xb8>
+80106f2d:	e8 1e ff ff ff       	call   80106e50 <setupkvm>
+80106f32:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106f35:	85 c0                	test   %eax,%eax
+80106f37:	0f 84 9b 00 00 00    	je     80106fd8 <copyuvm+0xb8>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-801079dd:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801079e0:	85 c9                	test   %ecx,%ecx
-801079e2:	0f 84 90 00 00 00    	je     80107a78 <copyuvm+0xb8>
-801079e8:	31 f6                	xor    %esi,%esi
-801079ea:	eb 46                	jmp    80107a32 <copyuvm+0x72>
-801079ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106f3d:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80106f40:	85 c9                	test   %ecx,%ecx
+80106f42:	0f 84 90 00 00 00    	je     80106fd8 <copyuvm+0xb8>
+80106f48:	31 f6                	xor    %esi,%esi
+80106f4a:	eb 46                	jmp    80106f92 <copyuvm+0x72>
+80106f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-801079f0:	83 ec 04             	sub    $0x4,%esp
-801079f3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-801079f9:	68 00 10 00 00       	push   $0x1000
-801079fe:	57                   	push   %edi
-801079ff:	50                   	push   %eax
-80107a00:	e8 5b d7 ff ff       	call   80105160 <memmove>
+80106f50:	83 ec 04             	sub    $0x4,%esp
+80106f53:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80106f59:	68 00 10 00 00       	push   $0x1000
+80106f5e:	57                   	push   %edi
+80106f5f:	50                   	push   %eax
+80106f60:	e8 ab d7 ff ff       	call   80104710 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80107a05:	58                   	pop    %eax
-80107a06:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80107a0c:	5a                   	pop    %edx
-80107a0d:	ff 75 e4             	pushl  -0x1c(%ebp)
-80107a10:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80107a15:	89 f2                	mov    %esi,%edx
-80107a17:	50                   	push   %eax
-80107a18:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107a1b:	e8 a0 f8 ff ff       	call   801072c0 <mappages>
-80107a20:	83 c4 10             	add    $0x10,%esp
-80107a23:	85 c0                	test   %eax,%eax
-80107a25:	78 61                	js     80107a88 <copyuvm+0xc8>
+80106f65:	58                   	pop    %eax
+80106f66:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106f6c:	5a                   	pop    %edx
+80106f6d:	ff 75 e4             	pushl  -0x1c(%ebp)
+80106f70:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106f75:	89 f2                	mov    %esi,%edx
+80106f77:	50                   	push   %eax
+80106f78:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106f7b:	e8 a0 f8 ff ff       	call   80106820 <mappages>
+80106f80:	83 c4 10             	add    $0x10,%esp
+80106f83:	85 c0                	test   %eax,%eax
+80106f85:	78 61                	js     80106fe8 <copyuvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80107a27:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80107a2d:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80107a30:	76 46                	jbe    80107a78 <copyuvm+0xb8>
+80106f87:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80106f8d:	39 75 0c             	cmp    %esi,0xc(%ebp)
+80106f90:	76 46                	jbe    80106fd8 <copyuvm+0xb8>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80107a32:	8b 45 08             	mov    0x8(%ebp),%eax
-80107a35:	31 c9                	xor    %ecx,%ecx
-80107a37:	89 f2                	mov    %esi,%edx
-80107a39:	e8 02 f8 ff ff       	call   80107240 <walkpgdir>
-80107a3e:	85 c0                	test   %eax,%eax
-80107a40:	74 61                	je     80107aa3 <copyuvm+0xe3>
+80106f92:	8b 45 08             	mov    0x8(%ebp),%eax
+80106f95:	31 c9                	xor    %ecx,%ecx
+80106f97:	89 f2                	mov    %esi,%edx
+80106f99:	e8 02 f8 ff ff       	call   801067a0 <walkpgdir>
+80106f9e:	85 c0                	test   %eax,%eax
+80106fa0:	74 61                	je     80107003 <copyuvm+0xe3>
     if(!(*pte & PTE_P))
-80107a42:	8b 00                	mov    (%eax),%eax
-80107a44:	a8 01                	test   $0x1,%al
-80107a46:	74 4e                	je     80107a96 <copyuvm+0xd6>
+80106fa2:	8b 00                	mov    (%eax),%eax
+80106fa4:	a8 01                	test   $0x1,%al
+80106fa6:	74 4e                	je     80106ff6 <copyuvm+0xd6>
     pa = PTE_ADDR(*pte);
-80107a48:	89 c7                	mov    %eax,%edi
+80106fa8:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80107a4a:	25 ff 0f 00 00       	and    $0xfff,%eax
-80107a4f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106faa:	25 ff 0f 00 00       	and    $0xfff,%eax
+80106faf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80107a52:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+80106fb2:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80107a58:	e8 23 b6 ff ff       	call   80103080 <kalloc>
-80107a5d:	89 c3                	mov    %eax,%ebx
-80107a5f:	85 c0                	test   %eax,%eax
-80107a61:	75 8d                	jne    801079f0 <copyuvm+0x30>
+80106fb8:	e8 73 b6 ff ff       	call   80102630 <kalloc>
+80106fbd:	89 c3                	mov    %eax,%ebx
+80106fbf:	85 c0                	test   %eax,%eax
+80106fc1:	75 8d                	jne    80106f50 <copyuvm+0x30>
     }
   }
   return d;
 
 bad:
   freevm(d);
-80107a63:	83 ec 0c             	sub    $0xc,%esp
-80107a66:	ff 75 e0             	pushl  -0x20(%ebp)
-80107a69:	e8 02 fe ff ff       	call   80107870 <freevm>
+80106fc3:	83 ec 0c             	sub    $0xc,%esp
+80106fc6:	ff 75 e0             	pushl  -0x20(%ebp)
+80106fc9:	e8 02 fe ff ff       	call   80106dd0 <freevm>
   return 0;
-80107a6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80107a75:	83 c4 10             	add    $0x10,%esp
+80106fce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+80106fd5:	83 c4 10             	add    $0x10,%esp
 }
-80107a78:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107a7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80107a7e:	5b                   	pop    %ebx
-80107a7f:	5e                   	pop    %esi
-80107a80:	5f                   	pop    %edi
-80107a81:	5d                   	pop    %ebp
-80107a82:	c3                   	ret    
-80107a83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80107a87:	90                   	nop
+80106fd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fde:	5b                   	pop    %ebx
+80106fdf:	5e                   	pop    %esi
+80106fe0:	5f                   	pop    %edi
+80106fe1:	5d                   	pop    %ebp
+80106fe2:	c3                   	ret    
+80106fe3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80106fe7:	90                   	nop
       kfree(mem);
-80107a88:	83 ec 0c             	sub    $0xc,%esp
-80107a8b:	53                   	push   %ebx
-80107a8c:	e8 2f b4 ff ff       	call   80102ec0 <kfree>
+80106fe8:	83 ec 0c             	sub    $0xc,%esp
+80106feb:	53                   	push   %ebx
+80106fec:	e8 7f b4 ff ff       	call   80102470 <kfree>
       goto bad;
-80107a91:	83 c4 10             	add    $0x10,%esp
-80107a94:	eb cd                	jmp    80107a63 <copyuvm+0xa3>
+80106ff1:	83 c4 10             	add    $0x10,%esp
+80106ff4:	eb cd                	jmp    80106fc3 <copyuvm+0xa3>
       panic("copyuvm: page not present");
-80107a96:	83 ec 0c             	sub    $0xc,%esp
-80107a99:	68 52 85 10 80       	push   $0x80108552
-80107a9e:	e8 ed 88 ff ff       	call   80100390 <panic>
+80106ff6:	83 ec 0c             	sub    $0xc,%esp
+80106ff9:	68 6e 7a 10 80       	push   $0x80107a6e
+80106ffe:	e8 8d 93 ff ff       	call   80100390 <panic>
       panic("copyuvm: pte should exist");
-80107aa3:	83 ec 0c             	sub    $0xc,%esp
-80107aa6:	68 38 85 10 80       	push   $0x80108538
-80107aab:	e8 e0 88 ff ff       	call   80100390 <panic>
+80107003:	83 ec 0c             	sub    $0xc,%esp
+80107006:	68 54 7a 10 80       	push   $0x80107a54
+8010700b:	e8 80 93 ff ff       	call   80100390 <panic>
 
-80107ab0 <uva2ka>:
+80107010 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107ab0:	f3 0f 1e fb          	endbr32 
-80107ab4:	55                   	push   %ebp
+80107010:	f3 0f 1e fb          	endbr32 
+80107014:	55                   	push   %ebp
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
-80107ab5:	31 c9                	xor    %ecx,%ecx
+80107015:	31 c9                	xor    %ecx,%ecx
 {
-80107ab7:	89 e5                	mov    %esp,%ebp
-80107ab9:	83 ec 08             	sub    $0x8,%esp
+80107017:	89 e5                	mov    %esp,%ebp
+80107019:	83 ec 08             	sub    $0x8,%esp
   pte = walkpgdir(pgdir, uva, 0);
-80107abc:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107abf:	8b 45 08             	mov    0x8(%ebp),%eax
-80107ac2:	e8 79 f7 ff ff       	call   80107240 <walkpgdir>
+8010701c:	8b 55 0c             	mov    0xc(%ebp),%edx
+8010701f:	8b 45 08             	mov    0x8(%ebp),%eax
+80107022:	e8 79 f7 ff ff       	call   801067a0 <walkpgdir>
   if((*pte & PTE_P) == 0)
-80107ac7:	8b 00                	mov    (%eax),%eax
+80107027:	8b 00                	mov    (%eax),%eax
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107ac9:	c9                   	leave  
+80107029:	c9                   	leave  
   if((*pte & PTE_U) == 0)
-80107aca:	89 c2                	mov    %eax,%edx
+8010702a:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107acc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+8010702c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107ad1:	83 e2 05             	and    $0x5,%edx
+80107031:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107ad4:	05 00 00 00 80       	add    $0x80000000,%eax
-80107ad9:	83 fa 05             	cmp    $0x5,%edx
-80107adc:	ba 00 00 00 00       	mov    $0x0,%edx
-80107ae1:	0f 45 c2             	cmovne %edx,%eax
-}
-80107ae4:	c3                   	ret    
-80107ae5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80107aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107034:	05 00 00 00 80       	add    $0x80000000,%eax
+80107039:	83 fa 05             	cmp    $0x5,%edx
+8010703c:	ba 00 00 00 00       	mov    $0x0,%edx
+80107041:	0f 45 c2             	cmovne %edx,%eax
+}
+80107044:	c3                   	ret    
+80107045:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80107af0 <copyout>:
+80107050 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-80107af0:	f3 0f 1e fb          	endbr32 
-80107af4:	55                   	push   %ebp
-80107af5:	89 e5                	mov    %esp,%ebp
-80107af7:	57                   	push   %edi
-80107af8:	56                   	push   %esi
-80107af9:	53                   	push   %ebx
-80107afa:	83 ec 0c             	sub    $0xc,%esp
-80107afd:	8b 75 14             	mov    0x14(%ebp),%esi
-80107b00:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107050:	f3 0f 1e fb          	endbr32 
+80107054:	55                   	push   %ebp
+80107055:	89 e5                	mov    %esp,%ebp
+80107057:	57                   	push   %edi
+80107058:	56                   	push   %esi
+80107059:	53                   	push   %ebx
+8010705a:	83 ec 0c             	sub    $0xc,%esp
+8010705d:	8b 75 14             	mov    0x14(%ebp),%esi
+80107060:	8b 55 0c             	mov    0xc(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-80107b03:	85 f6                	test   %esi,%esi
-80107b05:	75 3c                	jne    80107b43 <copyout+0x53>
-80107b07:	eb 67                	jmp    80107b70 <copyout+0x80>
-80107b09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107063:	85 f6                	test   %esi,%esi
+80107065:	75 3c                	jne    801070a3 <copyout+0x53>
+80107067:	eb 67                	jmp    801070d0 <copyout+0x80>
+80107069:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (va - va0);
-80107b10:	8b 55 0c             	mov    0xc(%ebp),%edx
-80107b13:	89 fb                	mov    %edi,%ebx
-80107b15:	29 d3                	sub    %edx,%ebx
-80107b17:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80107070:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107073:	89 fb                	mov    %edi,%ebx
+80107075:	29 d3                	sub    %edx,%ebx
+80107077:	81 c3 00 10 00 00    	add    $0x1000,%ebx
     if(n > len)
-80107b1d:	39 f3                	cmp    %esi,%ebx
-80107b1f:	0f 47 de             	cmova  %esi,%ebx
+8010707d:	39 f3                	cmp    %esi,%ebx
+8010707f:	0f 47 de             	cmova  %esi,%ebx
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-80107b22:	29 fa                	sub    %edi,%edx
-80107b24:	83 ec 04             	sub    $0x4,%esp
-80107b27:	01 c2                	add    %eax,%edx
-80107b29:	53                   	push   %ebx
-80107b2a:	ff 75 10             	pushl  0x10(%ebp)
-80107b2d:	52                   	push   %edx
-80107b2e:	e8 2d d6 ff ff       	call   80105160 <memmove>
+80107082:	29 fa                	sub    %edi,%edx
+80107084:	83 ec 04             	sub    $0x4,%esp
+80107087:	01 c2                	add    %eax,%edx
+80107089:	53                   	push   %ebx
+8010708a:	ff 75 10             	pushl  0x10(%ebp)
+8010708d:	52                   	push   %edx
+8010708e:	e8 7d d6 ff ff       	call   80104710 <memmove>
     len -= n;
     buf += n;
-80107b33:	01 5d 10             	add    %ebx,0x10(%ebp)
+80107093:	01 5d 10             	add    %ebx,0x10(%ebp)
     va = va0 + PGSIZE;
-80107b36:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
+80107096:	8d 97 00 10 00 00    	lea    0x1000(%edi),%edx
   while(len > 0){
-80107b3c:	83 c4 10             	add    $0x10,%esp
-80107b3f:	29 de                	sub    %ebx,%esi
-80107b41:	74 2d                	je     80107b70 <copyout+0x80>
+8010709c:	83 c4 10             	add    $0x10,%esp
+8010709f:	29 de                	sub    %ebx,%esi
+801070a1:	74 2d                	je     801070d0 <copyout+0x80>
     va0 = (uint)PGROUNDDOWN(va);
-80107b43:	89 d7                	mov    %edx,%edi
+801070a3:	89 d7                	mov    %edx,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-80107b45:	83 ec 08             	sub    $0x8,%esp
+801070a5:	83 ec 08             	sub    $0x8,%esp
     va0 = (uint)PGROUNDDOWN(va);
-80107b48:	89 55 0c             	mov    %edx,0xc(%ebp)
-80107b4b:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+801070a8:	89 55 0c             	mov    %edx,0xc(%ebp)
+801070ab:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     pa0 = uva2ka(pgdir, (char*)va0);
-80107b51:	57                   	push   %edi
-80107b52:	ff 75 08             	pushl  0x8(%ebp)
-80107b55:	e8 56 ff ff ff       	call   80107ab0 <uva2ka>
+801070b1:	57                   	push   %edi
+801070b2:	ff 75 08             	pushl  0x8(%ebp)
+801070b5:	e8 56 ff ff ff       	call   80107010 <uva2ka>
     if(pa0 == 0)
-80107b5a:	83 c4 10             	add    $0x10,%esp
-80107b5d:	85 c0                	test   %eax,%eax
-80107b5f:	75 af                	jne    80107b10 <copyout+0x20>
+801070ba:	83 c4 10             	add    $0x10,%esp
+801070bd:	85 c0                	test   %eax,%eax
+801070bf:	75 af                	jne    80107070 <copyout+0x20>
   }
   return 0;
 }
-80107b61:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80107b64:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801070c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80107b69:	5b                   	pop    %ebx
-80107b6a:	5e                   	pop    %esi
-80107b6b:	5f                   	pop    %edi
-80107b6c:	5d                   	pop    %ebp
-80107b6d:	c3                   	ret    
-80107b6e:	66 90                	xchg   %ax,%ax
-80107b70:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070c9:	5b                   	pop    %ebx
+801070ca:	5e                   	pop    %esi
+801070cb:	5f                   	pop    %edi
+801070cc:	5d                   	pop    %ebp
+801070cd:	c3                   	ret    
+801070ce:	66 90                	xchg   %ax,%ax
+801070d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80107b73:	31 c0                	xor    %eax,%eax
+801070d3:	31 c0                	xor    %eax,%eax
 }
-80107b75:	5b                   	pop    %ebx
-80107b76:	5e                   	pop    %esi
-80107b77:	5f                   	pop    %edi
-80107b78:	5d                   	pop    %ebp
-80107b79:	c3                   	ret    
+801070d5:	5b                   	pop    %ebx
+801070d6:	5e                   	pop    %esi
+801070d7:	5f                   	pop    %edi
+801070d8:	5d                   	pop    %ebp
+801070d9:	c3                   	ret    
diff -ruN g44/kernel.sym xv6-public/kernel.sym
--- g44/kernel.sym	2021-09-15 23:29:26.239051762 +0530
+++ xv6-public/kernel.sym	2021-08-30 22:38:16.112748260 +0530
@@ -1,7 +1,7 @@
 80100000 .text
-80107b80 .rodata
-80109000 .data
-8010b520 .bss
+801070e0 .rodata
+80108000 .data
+8010a520 .bss
 00000000 .debug_line
 00000000 .debug_info
 00000000 .debug_abbrev
@@ -12,521 +12,505 @@
 00000000 .comment
 00000000 bio.c
 00000000 console.c
-8010b520 cons
-8010b558 panicked
+8010a520 cons
+8010a558 panicked
 80100410 consputc.part.0
-801005e0 printint
-80107c28 digits.1577
+801005a0 printint
+80107150 digits.1577
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
-80101c00 bfree
-80101c80 balloc
-80101d90 iget
-80101e80 bmap
-801027c0 namex
+801011b0 bfree
+80101230 balloc
+80101340 iget
+80101430 bmap
+80101d70 namex
 00000000 ide.c
-80102ac0 idestart
-8010b580 idelock
-8010b560 havedisk1
-8010b564 idequeue
+80102070 idestart
+8010a580 idelock
+8010a560 havedisk1
+8010a564 idequeue
 00000000 ioapic.c
 00000000 kalloc.c
 00000000 kbd.c
-8010b5b4 shift.1418
-80107f60 shiftcode
-80107e60 togglecode
-80107e40 charcode.1419
-80109200 normalmap
-80109100 shiftmap
-80109000 ctlmap
+8010a5b4 shift.1418
+80107480 shiftcode
+80107380 togglecode
+80107360 charcode.1419
+80108200 normalmap
+80108100 shiftmap
+80108000 ctlmap
 00000000 lapic.c
 00000000 log.c
-801035e0 install_trans
-80103680 write_head
+80102b90 install_trans
+80102c30 write_head
 00000000 main.c
-80103a30 mpmain
-80103a70 mpenter
+80102fe0 mpmain
+80103020 mpenter
 00000000 mp.c
-80103bc0 mpsearch1
+80103170 mpsearch1
 00000000 picirq.c
 00000000 pipe.c
 00000000 proc.c
-801041e0 allocproc
-8010b000 first.1619
-8010b5b8 initproc
-8010820c states.1645
+80103790 allocproc
+8010a000 first.1619
+8010a5b8 initproc
+8010772c states.1645
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80108280 syscalls
+801077a0 syscalls
 00000000 sysfile.c
-80105500 create
-801056a0 argfd.constprop.0
+80104ab0 create
+80104c50 argfd.constprop.0
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80106640 uartgetc
-8010b5bc uart
-80106670 uartputc.part.0
+80105ba0 uartgetc
+8010a5bc uart
+80105bd0 uartputc.part.0
 00000000 vm.c
-80107240 walkpgdir
-801072c0 mappages
-80107350 deallocuvm.part.0
-8010b420 kmap
+801067a0 walkpgdir
+80106820 mappages
+801068b0 deallocuvm.part.0
+8010a420 kmap
 80100290 consoleread
-80107193 vector242
-80106bea vector119
+801066f3 vector242
+8010614a vector119
 8010000c entry
-80106aca vector87
-80106ac1 vector86
-80105280 safestrcpy
-80105840 sys_close
-801071ff vector251
-80106aee vector91
-801068e4 vector33
-801062c0 sys_history
-80106dd3 vector162
-80104920 yield
-80114080 log
-80114040 kmem
-80107037 vector213
-80106b87 vector108
-801066c0 uartinit
-8010693e vector43
-80110f20 oldBuf
-80103310 lapiceoi
-80106df7 vector165
-80106ee7 vector185
-80102dd0 ioapicinit
-80106bc6 vector115
-80101a40 fileread
-80106c05 vector122
-80106190 sys_sbrk
-80114160 ioapicid
-80106d8b vector156
-801071b7 vector245
-80114034 ioapic
-80106f17 vector189
-80106808 vector7
-801069e0 vector61
-80106893 vector24
-80106ba2 vector111
-80106f9b vector200
-80100bd0 saveCommandInHistory
-80106a16 vector67
-80106cb3 vector138
-80106a55 vector74
-80104720 sched
-80105160 memmove
-801069bc vector57
-80105490 syscall
-80107043 vector214
-80106b36 vector99
-80104390 cpuid
-801025b0 writei
-80106cd7 vector141
-801060f0 sys_fork
-8010c5c0 bcache
-80106e4b vector172
-80107187 vector241
-80104e50 getcallerpcs
-80105d50 sys_mkdir
-80107217 vector253
-801067e4 vector3
-801067db vector2
-801026e0 namecmp
-801070df vector227
-80107013 vector210
-80105450 argstr
-801070bb vector224
-8010692c vector41
-801006f0 cprintf
-801018c0 filedup
-80102a80 namei
-80106878 vector21
+8010602a vector87
+80106021 vector86
+80104830 safestrcpy
+80104df0 sys_close
+8010675f vector251
+8010604e vector91
+80105e44 vector33
+80106333 vector162
+80103ed0 yield
+80112680 log
+80112640 kmem
+80106597 vector213
+801060e7 vector108
+80105c20 uartinit
+80105e9e vector43
+801028c0 lapiceoi
+80106357 vector165
+80106447 vector185
+80102380 ioapicinit
+80106126 vector115
+80100ff0 fileread
+80106165 vector122
+80105740 sys_sbrk
+80112760 ioapicid
+801062eb vector156
+80106717 vector245
+80112634 ioapic
+80106477 vector189
+80105d68 vector7
+80105f40 vector61
+80105df3 vector24
+80106102 vector111
+801064fb vector200
+80105f76 vector67
+80106213 vector138
+80105fb5 vector74
+80103cd0 sched
+80104710 memmove
+80105f1c vector57
+80104a40 syscall
+801065a3 vector214
+80106096 vector99
+80103940 cpuid
+80101b60 writei
+80106237 vector141
+801056a0 sys_fork
+8010b5c0 bcache
+801063ab vector172
+801066e7 vector241
+80104400 getcallerpcs
+80105300 sys_mkdir
+80106777 vector253
+80105d44 vector3
+80105d3b vector2
+80101c90 namecmp
+8010663f vector227
+80106573 vector210
+80104a00 argstr
+8010661b vector224
+80105e8c vector41
+801006b0 cprintf
+80100e70 filedup
+80102030 namei
+80105dd8 vector21
 80100040 binit
-80106e87 vector177
-80106be1 vector118
-80106a31 vector70
-80106a28 vector69
-80107157 vector237
-801069fb vector64
-801068ae vector27
-801008a0 copyCharsToBeMoved
-80106c6b vector132
-80106ef3 vector186
-80105760 sys_read
-80107067 vector217
-80105300 fetchint
-801078f0 setupkvm
-801051c0 memcpy
-80107870 freevm
-801067d2 vector1
-80106e93 vector178
-80106911 vector38
-80102ec0 kfree
-80107163 vector238
-80104320 mycpu
-801022e0 iput
-80106c77 vector133
-80106a4c vector73
-80106cfb vector144
-80107223 vector254
-80101f50 readsb
-8010b004 nextpid
-80106b48 vector101
-8010701f vector211
-80103c40 mpinit
-80106e63 vector174
-8010719f vector243
-80101830 fileinit
-80104e30 initlock
-801008f0 shiftbufright
-80106c3b vector128
-80107af0 copyout
-80106a94 vector81
-80104970 sleep
-80103330 microdelay
-80106836 vector13
-80106986 vector51
-8010684d vector16
-80110fa0 input
-8010717b vector240
-801069a1 vector54
-80106866 vector19
-80106af7 vector92
-801071ab vector244
-80102480 stati
-80106ccb vector140
-80106130 sys_kill
-80106950 vector45
-80106a82 vector79
-80103f50 pipeclose
-801070f7 vector229
-80106da3 vector158
-80105890 sys_fstat
-80100680 consolewrite
-8010691a vector39
-80106e1b vector168
-801037f0 end_op
-801068f6 vector35
-80106bb4 vector113
-80102f60 freerange
-80106c20 vector125
-80100b30 copyBufferToScreen
-80107710 allocuvm
-8010632f trapret
-8010705b vector216
-801069f2 vector63
-801068a5 vector26
-80106f47 vector193
-801031f0 lapicinit
-80106f6b vector196
-80107007 vector209
-801067ed vector4
-80106e33 vector170
-8010b5c0 stack
-80106c9b vector136
-80106821 vector10
-80106fe3 vector206
-80102290 iunlock
-801061e0 sys_sleep
-8010722f vector255
-80106eb7 vector181
-801069ce vector59
-80106ab8 vector85
-80106aaf vector84
-80106ecf vector183
-80106daf vector159
-8010702b vector212
-801058e0 sys_link
-80106962 vector47
-801070eb vector228
-80106935 vector42
-80106bbd vector114
-80107ab0 uva2ka
-80106e6f vector175
-80106cef vector143
-80101850 filealloc
-80104b30 wakeup
-80106c53 vector130
-801071c3 vector246
-80106818 vector9
-80106ce3 vector142
-80106b3f vector100
-80106fa7 vector201
-80107990 clearpteu
-801043b0 myproc
-80106340 tvinit
-801069d7 vector60
-8010688a vector23
-80102180 idup
-8010714b vector236
-801031d0 kbdintr
-80105c10 sys_open
-8010710f vector231
-801013f0 history
-80106a0d vector66
-801068c0 vector29
-801024b0 readi
-80106c8f vector135
-80100ce0 consoleintr
-80104b90 kill
-80106a70 vector77
-80102030 ialloc
-80106eab vector180
-80116ea4 kpgdir
-80106ffb vector208
-801033e0 cmostime
-801067b0 uartintr
-80106b2d vector98
-80106b24 vector97
-80100b10 earaseContentOnInputBuf
-80106e7b vector176
-80106f53 vector194
-801068db vector32
-80116ea8 end
-80106f8f vector199
-80106c5f vector131
-8010720b vector252
-80101ae0 filewrite
-801067c9 vector0
-801053a0 argint
-801014d0 exec
-80106d07 vector145
-801057d0 sys_write
-80105070 release
-80105340 fetchstr
-80106b7e vector107
-80106923 vector40
-80104a30 wait
-80106b51 vector102
-80111040 buf2
-8010a000 entrypgdir
+801063e7 vector177
+80106141 vector118
+80105f91 vector70
+80105f88 vector69
+801066b7 vector237
+80105f5b vector64
+80105e0e vector27
+801061cb vector132
+80106453 vector186
+80104d10 sys_read
+801065c7 vector217
+801048b0 fetchint
+80106e50 setupkvm
+80104770 memcpy
+80106dd0 freevm
+80105d32 vector1
+801063f3 vector178
+80105e71 vector38
+80102470 kfree
+801066c3 vector238
+801038d0 mycpu
+80101890 iput
+801061d7 vector133
+80105fac vector73
+8010625b vector144
+80106783 vector254
+80101500 readsb
+8010a004 nextpid
+801060a8 vector101
+8010657f vector211
+801031f0 mpinit
+801063c3 vector174
+801066ff vector243
+80100de0 fileinit
+801043e0 initlock
+8010619b vector128
+80107050 copyout
+80105ff4 vector81
+80103f20 sleep
+801028e0 microdelay
+80105d96 vector13
+80105ee6 vector51
+80105dad vector16
+8010ff20 input
+801066db vector240
+80105f01 vector54
+80105dc6 vector19
+80106057 vector92
+8010670b vector244
+80101a30 stati
+8010622b vector140
+801056e0 sys_kill
+80105eb0 vector45
+80105fe2 vector79
+80103500 pipeclose
+80106657 vector229
+80106303 vector158
+80104e40 sys_fstat
+80100640 consolewrite
+80105e7a vector39
+8010637b vector168
+80102da0 end_op
+80105e56 vector35
+80106114 vector113
+80102510 freerange
+80106180 vector125
+80106c70 allocuvm
+80105886 trapret
+801065bb vector216
+80105f52 vector63
+80105e05 vector26
+801064a7 vector193
+801027a0 lapicinit
+801064cb vector196
+80106567 vector209
+80105d4d vector4
+80106393 vector170
+8010a5c0 stack
+801061fb vector136
+80105d81 vector10
+80106543 vector206
+80101840 iunlock
+80105790 sys_sleep
+8010678f vector255
+80106417 vector181
+80105f2e vector59
+80106018 vector85
+8010600f vector84
+8010642f vector183
+8010630f vector159
+8010658b vector212
+80104e90 sys_link
+80105ec2 vector47
+8010664b vector228
+80105e95 vector42
+8010611d vector114
+80107010 uva2ka
+801063cf vector175
+8010624f vector143
+80100e00 filealloc
+801040e0 wakeup
+801061b3 vector130
+80106723 vector246
+80105d78 vector9
+80106243 vector142
+8010609f vector100
+80106507 vector201
+80106ef0 clearpteu
+80103960 myproc
+801058a0 tvinit
+80105f37 vector60
+80105dea vector23
+80101730 idup
+801066ab vector236
+80102780 kbdintr
+801051c0 sys_open
+8010666f vector231
+80105f6d vector66
+80105e20 vector29
+80101a60 readi
+801061ef vector135
+80100860 consoleintr
+80104140 kill
+80105fd0 vector77
+801015e0 ialloc
+8010640b vector180
+801154a4 kpgdir
+8010655b vector208
+80102990 cmostime
+80105d10 uartintr
+8010608d vector98
+80106084 vector97
+801063db vector176
+801064b3 vector194
+80105e3b vector32
+801154a8 end
+801064ef vector199
+801061bf vector131
+8010676b vector252
+80101090 filewrite
+80105d29 vector0
+80104950 argint
+80100a80 exec
+80106267 vector145
+80104d80 sys_write
+80104620 release
+801048f0 fetchstr
+801060de vector107
+80105e83 vector40
+80103fe0 wait
+801060b1 vector102
+80109000 entrypgdir
 0010000c _start
-801069b3 vector56
-80106a1f vector68
-801067ff vector6
-8010b48c _binary_initcode_end
+80105f13 vector56
+80105f7f vector68
+80105d5f vector6
+8010a48c _binary_initcode_end
 80100000 multiboot_header
-80106c47 vector129
-80104680 scheduler
-80102700 dirlookup
-80106f77 vector197
-80101910 fileclose
-80103780 begin_op
-80106d5b vector152
-801110c0 lengthOfOldBuf
-80107970 kvmalloc
-80107103 vector230
-801051d0 strncmp
-80106908 vector37
-80106fd7 vector205
-80106dc7 vector161
-80116660 tickslock
-80103ff0 pipewrite
-80105220 strncpy
-80106a3a vector71
-801079c0 copyuvm
-801119c0 ftable
-80106dbb vector160
-801053f0 argptr
-8010704f vector215
-80106d97 vector157
-801056f0 sys_dup
-80106bab vector112
+801061a7 vector129
+80103c30 scheduler
+80101cb0 dirlookup
+801064d7 vector197
+80100ec0 fileclose
+80102d30 begin_op
+801062bb vector152
+80106ed0 kvmalloc
+80106663 vector230
+80104780 strncmp
+80105e68 vector37
+80106537 vector205
+80106327 vector161
+80114c60 tickslock
+801035a0 pipewrite
+801047d0 strncpy
+80105f9a vector71
+80106f20 copyuvm
+8010ffc0 ftable
+8010631b vector160
+801049a0 argptr
+801065af vector215
+801062f7 vector157
+80104ca0 sys_dup
+8010610b vector112
 80100390 panic
-801042b0 forkret
-80106ec3 vector182
-8010682f vector12
-80105110 memcmp
-801030f0 kbdgetc
-80106b90 vector109
-8010686f vector20
-80104560 fork
-80106998 vector53
-8010685d vector18
+80103860 forkret
+80106423 vector182
+80105d8f vector12
+801046c0 memcmp
+801026a0 kbdgetc
+801060f0 vector109
+80105dcf vector20
+80103b10 fork
+80105ef8 vector53
+80105dbd vector18
 0000008a _binary_entryother_size
-80114180 cpus
-80104d90 releasesleep
-80106b12 vector95
-80104f60 holding
-801123c0 sb
-80104fb0 acquire
-801070d3 vector226
-80102aa0 nameiparent
-80106974 vector49
-80106947 vector44
-8011407c lapic
-80106a79 vector78
-80106317 alltraps
-80106e57 vector173
-80106bd8 vector117
-80106a9d vector82
-801070a3 vector222
-80106811 vector8
-801110e0 charsToBeMoved
-80106d37 vector149
-801020f0 iupdate
-80109000 data
-801050c0 memset
-8010711b vector232
-80103a90 main
-80107490 switchkvm
-80106b75 vector106
-8010708b vector220
-80106ae5 vector90
-80106ddf vector163
-80107133 vector234
-80103960 log_write
-80104d30 acquiresleep
-80105a30 sys_unlink
-801069e9 vector62
-8010689c vector25
-80106f83 vector198
-80106bf3 vector120
-8010b48c _binary_entryother_start
-80102fb0 kinit1
-8010697d vector50
-80106844 vector15
-80106d4f vector151
-80106aa6 vector83
-80106adc vector89
-80106ad3 vector88
-801063f0 trap
-80106290 sys_uptime
-80106e9f vector179
-801068ed vector34
-80106959 vector46
-801009b0 shiftbufleft
-80106c83 vector134
-801070af vector223
-801166a0 idt
-80107073 vector218
-80104300 pinit
-80107840 deallocuvm
-801070c7 vector225
-801032f0 lapicid
-80106eff vector187
-801044e0 growproc
-80104dd0 holdingsleep
-80114700 ncpu
-801068c9 vector30
-801043e0 userinit
+80112780 cpus
+80104340 releasesleep
+80106072 vector95
+80104510 holding
+801109c0 sb
+80104560 acquire
+80106633 vector226
+80102050 nameiparent
+80105ed4 vector49
+80105ea7 vector44
+8011267c lapic
+80105fd9 vector78
+8010586e alltraps
+801063b7 vector173
+80106138 vector117
+80105ffd vector82
+80106603 vector222
+80105d71 vector8
+80106297 vector149
+801016a0 iupdate
+80108000 data
+80104670 memset
+8010667b vector232
+80103040 main
+801069f0 switchkvm
+801060d5 vector106
+801065eb vector220
+80106045 vector90
+8010633f vector163
+80106693 vector234
+80102f10 log_write
+801042e0 acquiresleep
+80104fe0 sys_unlink
+80105f49 vector62
+80105dfc vector25
+801064e3 vector198
+80106153 vector120
+8010a48c _binary_entryother_start
+80102560 kinit1
+80105edd vector50
+80105da4 vector15
+801062af vector151
+80106006 vector83
+8010603c vector89
+80106033 vector88
+80105950 trap
+80105840 sys_uptime
+801063ff vector179
+80105e4d vector34
+80105eb9 vector46
+801061e3 vector134
+8010660f vector223
+80114ca0 idt
+801065d3 vector218
+801038b0 pinit
+80106da0 deallocuvm
+80106627 vector225
+801028a0 lapicid
+8010645f vector187
+80103a90 growproc
+80104380 holdingsleep
+80112d00 ncpu
+80105e29 vector30
+80103990 userinit
 801000d0 bread
-80106c32 vector127
-801040f0 piperead
-80116ea0 ticks
-80106f3b vector192
-80106e03 vector166
-80101470 consoleinit
-80100a80 earaseCurrentLineOnScreen
-80106a67 vector76
-80106a5e vector75
-80102c30 ideintr
-80106f5f vector195
-80106d43 vector150
-801069c5 vector58
-801071db vector248
-80106c0e vector123
-80106b1b vector96
-801068d2 vector31
-80106fbf vector203
-80106cbf vector139
-80106d67 vector153
-80106deb vector164
-80104c20 procdump
-80106bfc vector121
-80106780 uartputc
-801067f6 vector5
-80106e0f vector167
-80111160 historyBufferArray
-80106d7f vector155
-801071e7 vector249
+80106192 vector127
+801036a0 piperead
+801154a0 ticks
+8010649b vector192
+80106363 vector166
+80100a30 consoleinit
+80105fc7 vector76
+80105fbe vector75
+801021e0 ideintr
+801064bf vector195
+801062a3 vector150
+80105f25 vector58
+8010673b vector248
+8010616e vector123
+8010607b vector96
+80105e32 vector31
+8010651f vector203
+8010621f vector139
+801062c7 vector153
+8010634b vector164
+801041d0 procdump
+8010615c vector121
+80105ce0 uartputc
+80105d56 vector5
+8010636f vector167
+801062df vector155
+80106747 vector249
 801001f0 brelse
-801071f3 vector250
-80106c17 vector124
-80106b99 vector110
-80106fcb vector204
-801021b0 ilock
-80105f10 sys_exec
-80106ca7 vector137
-8010b460 _binary_initcode_start
-801052e3 swtch
-801071cf vector247
-80106881 vector22
-80106fb3 vector202
-80107400 seginit
-80102450 iunlockput
-80106a43 vector72
-801069aa vector55
-80106c29 vector126
-80106a04 vector65
-801068b7 vector28
-8010b516 _binary_entryother_end
-80106e27 vector169
+80106753 vector250
+80106177 vector124
+801060f9 vector110
+8010652b vector204
+80101760 ilock
+801054c0 sys_exec
+80106207 vector137
+8010a460 _binary_initcode_start
+80104893 swtch
+8010672f vector247
+80105de1 vector22
+80106513 vector202
+80106960 seginit
+80101a00 iunlockput
+80105fa3 vector72
+80105f0a vector55
+80106189 vector126
+80105f64 vector65
+80105e17 vector28
+8010a516 _binary_entryother_end
+80106387 vector169
 801001b0 bwrite
-80107127 vector233
-80100b70 copyBufferToInputBuf
-801063c0 idtinit
-801047e0 exit
-80106120 sys_wait
-80106100 sys_exit
-801029c0 dirlink
+80106687 vector233
+80105920 idtinit
+80103d90 exit
+801056d0 sys_wait
+801056b0 sys_exit
+80101f70 dirlink
 0000002c _binary_initcode_size
-80106d1f vector147
-80104cf0 initsleeplock
-80102ba0 ideinit
-80107640 loaduvm
-80106b63 vector104
-80106bcf vector116
-80114720 ptable
-80102e80 ioapicenable
-80104f00 popcli
-8010b008 vectors
-8010698f vector52
-80106856 vector17
-80106edb vector184
-801052c0 strlen
-80106010 sys_pipe
-80101f90 iinit
-80103e20 picinit
-80106fef vector207
-801075c0 inituvm
-80106f23 vector190
-80100ad0 copyCharsToBeMovedToOldBuf
-8010716f vector239
-80106b09 vector94
-80106b00 vector93
-801036e0 initlog
-80106f0b vector188
-8010696b vector48
-80102cd0 iderw
-8010707f vector219
-80106d2b vector148
-80107097 vector221
-80103080 kalloc
-80112360 devsw
-80106170 sys_getpid
-80106a8b vector80
-80106e3f vector171
-80106d73 vector154
-801068ff vector36
-80103e40 pipealloc
-8010713f vector235
-80106b6c vector105
-80105e60 sys_chdir
-801123e0 icache
-80106d13 vector146
-80106f2f vector191
-80106b5a vector103
-80105dc0 sys_mknod
-80103340 lapicstartap
-801074b0 switchuvm
-80104eb0 pushcli
-80103020 kinit2
-80106828 vector11
-8010683d vector14
-801019f0 filestat
+8010627f vector147
+801042a0 initsleeplock
+80102150 ideinit
+80106ba0 loaduvm
+801060c3 vector104
+8010612f vector116
+80112d20 ptable
+80102430 ioapicenable
+801044b0 popcli
+8010a008 vectors
+80105eef vector52
+80105db6 vector17
+8010643b vector184
+80104870 strlen
+801055c0 sys_pipe
+80101540 iinit
+801033d0 picinit
+8010654f vector207
+80106b20 inituvm
+80106483 vector190
+801066cf vector239
+80106069 vector94
+80106060 vector93
+80102c90 initlog
+8010646b vector188
+80105ecb vector48
+80102280 iderw
+801065df vector219
+8010628b vector148
+801065f7 vector221
+80102630 kalloc
+80110960 devsw
+80105720 sys_getpid
+80105feb vector80
+8010639f vector171
+801062d3 vector154
+80105e5f vector36
+801033f0 pipealloc
+8010669f vector235
+801060cc vector105
+80105410 sys_chdir
+801109e0 icache
+80106273 vector146
+8010648f vector191
+801060ba vector103
+80105370 sys_mknod
+801028f0 lapicstartap
+80106a10 switchuvm
+80104460 pushcli
+801025d0 kinit2
+80105d88 vector11
+80105d9d vector14
+80100fa0 filestat
Binary files g44/_kill and xv6-public/_kill differ
diff -ruN g44/kill.asm xv6-public/kill.asm
--- g44/kill.asm	2021-09-15 23:29:31.559060235 +0530
+++ xv6-public/kill.asm	2021-08-30 22:38:24.392763455 +0530
@@ -590,13 +590,10 @@
  36b:	b8 0e 00 00 00       	mov    $0xe,%eax
  370:	cd 40                	int    $0x40
  372:	c3                   	ret    
-
-00000373 <history>:
-//marco
-SYSCALL(history)
- 373:	b8 16 00 00 00       	mov    $0x16,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret    
+ 373:	66 90                	xchg   %ax,%ax
+ 375:	66 90                	xchg   %ax,%ax
+ 377:	66 90                	xchg   %ax,%ax
+ 379:	66 90                	xchg   %ax,%ax
  37b:	66 90                	xchg   %ax,%ax
  37d:	66 90                	xchg   %ax,%ax
  37f:	90                   	nop
Binary files g44/kill.o and xv6-public/kill.o differ
diff -ruN g44/kill.sym xv6-public/kill.sym
--- g44/kill.sym	2021-09-15 23:29:31.559060235 +0530
+++ xv6-public/kill.sym	2021-08-30 22:38:24.396763464 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000380 printint
-000007b4 digits.1088
+000007b4 digits.1085
 00000000 umalloc.c
 00000a64 freep
 00000a68 base
@@ -28,7 +28,6 @@
 00000363 sleep
 000002e3 pipe
 000002f3 write
-00000373 history
 0000032b fstat
 00000303 kill
 00000343 chdir
Binary files g44/lapic.o and xv6-public/lapic.o differ
Binary files g44/_ln and xv6-public/_ln differ
diff -ruN g44/ln.asm xv6-public/ln.asm
--- g44/ln.asm	2021-09-15 23:29:31.599060299 +0530
+++ xv6-public/ln.asm	2021-08-30 22:38:24.448763580 +0530
@@ -582,13 +582,10 @@
  35b:	b8 0e 00 00 00       	mov    $0xe,%eax
  360:	cd 40                	int    $0x40
  362:	c3                   	ret    
-
-00000363 <history>:
-//marco
-SYSCALL(history)
- 363:	b8 16 00 00 00       	mov    $0x16,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret    
+ 363:	66 90                	xchg   %ax,%ax
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
  36b:	66 90                	xchg   %ax,%ax
  36d:	66 90                	xchg   %ax,%ax
  36f:	90                   	nop
Binary files g44/ln.o and xv6-public/ln.o differ
diff -ruN g44/ln.sym xv6-public/ln.sym
--- g44/ln.sym	2021-09-15 23:29:31.611060318 +0530
+++ xv6-public/ln.sym	2021-08-30 22:38:24.456763598 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000370 printint
-000007b8 digits.1088
+000007b8 digits.1085
 00000000 umalloc.c
 00000a64 freep
 00000a68 base
@@ -28,7 +28,6 @@
 00000353 sleep
 000002d3 pipe
 000002e3 write
-00000363 history
 0000031b fstat
 000002f3 kill
 00000333 chdir
Binary files g44/log.o and xv6-public/log.o differ
Binary files g44/_ls and xv6-public/_ls differ
diff -ruN g44/ls.asm xv6-public/ls.asm
--- g44/ls.asm	2021-09-15 23:29:31.727060501 +0530
+++ xv6-public/ls.asm	2021-08-30 22:38:24.520763740 +0530
@@ -863,13 +863,10 @@
  63b:	b8 0e 00 00 00       	mov    $0xe,%eax
  640:	cd 40                	int    $0x40
  642:	c3                   	ret    
-
-00000643 <history>:
-//marco
-SYSCALL(history)
- 643:	b8 16 00 00 00       	mov    $0x16,%eax
- 648:	cd 40                	int    $0x40
- 64a:	c3                   	ret    
+ 643:	66 90                	xchg   %ax,%ax
+ 645:	66 90                	xchg   %ax,%ax
+ 647:	66 90                	xchg   %ax,%ax
+ 649:	66 90                	xchg   %ax,%ax
  64b:	66 90                	xchg   %ax,%ax
  64d:	66 90                	xchg   %ax,%ax
  64f:	90                   	nop
Binary files g44/ls.o and xv6-public/ls.o differ
diff -ruN g44/ls.sym xv6-public/ls.sym
--- g44/ls.sym	2021-09-15 23:29:31.731060507 +0530
+++ xv6-public/ls.sym	2021-08-30 22:38:24.528763757 +0530
@@ -11,11 +11,11 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 ls.c
-00000de4 buf.1099
+00000de4 buf.1096
 00000000 ulib.c
 00000000 printf.c
 00000650 printint
-00000abc digits.1088
+00000abc digits.1085
 00000000 umalloc.c
 00000df4 freep
 00000df8 base
@@ -30,7 +30,6 @@
 00000633 sleep
 000005b3 pipe
 000005c3 write
-00000643 history
 000005fb fstat
 000005d3 kill
 00000613 chdir
Binary files g44/main.o and xv6-public/main.o differ
diff -ruN g44/Makefile xv6-public/Makefile
--- g44/Makefile	2021-09-15 22:52:55.000000000 +0530
+++ xv6-public/Makefile	2021-08-20 23:40:45.900959078 +0530
@@ -51,7 +51,7 @@
 endif
 
 # If the makefile can't find QEMU, specify its path here
-# QEMU = qemu-system-i386
+QEMU = qemu-system-i386
 
 # Try to infer the correct QEMU
 ifndef QEMU
@@ -181,7 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
-	_history\
+	_wolfietest\
+
+# Makefile needs to be edited before our program i.e 
+# wolfietest.c is available for xv6 source code for compilation
+# Here UPROGS means the user programs 
+
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
Binary files g44/_mkdir and xv6-public/_mkdir differ
diff -ruN g44/mkdir.asm xv6-public/mkdir.asm
--- g44/mkdir.asm	2021-09-15 23:29:31.795060609 +0530
+++ xv6-public/mkdir.asm	2021-08-30 22:38:24.580763874 +0530
@@ -605,13 +605,10 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
-
-00000383 <history>:
-//marco
-SYSCALL(history)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
+ 383:	66 90                	xchg   %ax,%ax
+ 385:	66 90                	xchg   %ax,%ax
+ 387:	66 90                	xchg   %ax,%ax
+ 389:	66 90                	xchg   %ax,%ax
  38b:	66 90                	xchg   %ax,%ax
  38d:	66 90                	xchg   %ax,%ax
  38f:	90                   	nop
Binary files g44/mkdir.o and xv6-public/mkdir.o differ
diff -ruN g44/mkdir.sym xv6-public/mkdir.sym
--- g44/mkdir.sym	2021-09-15 23:29:31.807060628 +0530
+++ xv6-public/mkdir.sym	2021-08-30 22:38:24.592763901 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007e4 digits.1088
+000007e4 digits.1085
 00000000 umalloc.c
 00000a9c freep
 00000aa0 base
@@ -28,7 +28,6 @@
 00000373 sleep
 000002f3 pipe
 00000303 write
-00000383 history
 0000033b fstat
 00000313 kill
 00000353 chdir
Binary files g44/mp.o and xv6-public/mp.o differ
Binary files g44/picirq.o and xv6-public/picirq.o differ
Binary files g44/pipe.o and xv6-public/pipe.o differ
Binary files g44/printf.o and xv6-public/printf.o differ
Binary files g44/proc.o and xv6-public/proc.o differ
Binary files g44/_rm and xv6-public/_rm differ
diff -ruN g44/rm.asm xv6-public/rm.asm
--- g44/rm.asm	2021-09-15 23:29:31.871060730 +0530
+++ xv6-public/rm.asm	2021-08-30 22:38:24.640764008 +0530
@@ -605,13 +605,10 @@
  37b:	b8 0e 00 00 00       	mov    $0xe,%eax
  380:	cd 40                	int    $0x40
  382:	c3                   	ret    
-
-00000383 <history>:
-//marco
-SYSCALL(history)
- 383:	b8 16 00 00 00       	mov    $0x16,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret    
+ 383:	66 90                	xchg   %ax,%ax
+ 385:	66 90                	xchg   %ax,%ax
+ 387:	66 90                	xchg   %ax,%ax
+ 389:	66 90                	xchg   %ax,%ax
  38b:	66 90                	xchg   %ax,%ax
  38d:	66 90                	xchg   %ax,%ax
  38f:	90                   	nop
Binary files g44/rm.o and xv6-public/rm.o differ
diff -ruN g44/rm.sym xv6-public/rm.sym
--- g44/rm.sym	2021-09-15 23:29:31.879060742 +0530
+++ xv6-public/rm.sym	2021-08-30 22:38:24.644764016 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000390 printint
-000007dc digits.1088
+000007dc digits.1085
 00000000 umalloc.c
 00000a94 freep
 00000a98 base
@@ -28,7 +28,6 @@
 00000373 sleep
 000002f3 pipe
 00000303 write
-00000383 history
 0000033b fstat
 00000313 kill
 00000353 chdir
Binary files g44/_sh and xv6-public/_sh differ
diff -ruN g44/sh.asm xv6-public/sh.asm
--- g44/sh.asm	2021-09-15 23:29:32.095061085 +0530
+++ xv6-public/sh.asm	2021-08-30 22:38:24.804764374 +0530
@@ -5,9 +5,9 @@
 Disassembly of section .text:
 
 00000000 <main>:
-   exit();
   return 0;
 }
+
 int
 main(void)
 {
@@ -29,2672 +29,2589 @@
       1e:	66 90                	xchg   %ax,%ax
     if(fd >= 3){
       20:	83 f8 02             	cmp    $0x2,%eax
-      23:	0f 8f 3a 01 00 00    	jg     163 <main+0x163>
+      23:	0f 8f b7 00 00 00    	jg     e0 <main+0xe0>
   while((fd = open("console", O_RDWR)) >= 0){
       29:	83 ec 08             	sub    $0x8,%esp
       2c:	6a 02                	push   $0x2
-      2e:	68 de 13 00 00       	push   $0x13de
-      33:	e8 7b 0e 00 00       	call   eb3 <open>
+      2e:	68 f9 12 00 00       	push   $0x12f9
+      33:	e8 9b 0d 00 00       	call   dd3 <open>
       38:	83 c4 10             	add    $0x10,%esp
       3b:	85 c0                	test   %eax,%eax
       3d:	79 e1                	jns    20 <main+0x20>
-      3f:	eb 33                	jmp    74 <main+0x74>
+      3f:	eb 32                	jmp    73 <main+0x73>
       41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      buf[strlen(buf)-1] = 0;  // chop \n
-      if(chdir(buf+3) < 0)
-        printf(2, "cannot cd %s\n", buf+3);
-      continue;
     }
-    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's' && buf[3] == 't'
-      48:	3c 68                	cmp    $0x68,%al
-      4a:	75 0d                	jne    59 <main+0x59>
-      4c:	80 3d 41 1a 00 00 69 	cmpb   $0x69,0x1a41
-      53:	0f 84 97 00 00 00    	je     f0 <main+0xf0>
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      48:	80 3d 42 19 00 00 20 	cmpb   $0x20,0x1942
+      4f:	74 51                	je     a2 <main+0xa2>
+      51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 int
 fork1(void)
 {
   int pid;
 
   pid = fork();
-      59:	e8 0d 0e 00 00       	call   e6b <fork>
+      58:	e8 2e 0d 00 00       	call   d8b <fork>
   if(pid == -1)
-      5e:	83 f8 ff             	cmp    $0xffffffff,%eax
-      61:	0f 84 0d 01 00 00    	je     174 <main+0x174>
+      5d:	83 f8 ff             	cmp    $0xffffffff,%eax
+      60:	0f 84 9d 00 00 00    	je     103 <main+0x103>
     if(fork1() == 0)
-      67:	85 c0                	test   %eax,%eax
-      69:	0f 84 df 00 00 00    	je     14e <main+0x14e>
+      66:	85 c0                	test   %eax,%eax
+      68:	0f 84 80 00 00 00    	je     ee <main+0xee>
     wait();
-      6f:	e8 07 0e 00 00       	call   e7b <wait>
+      6e:	e8 28 0d 00 00       	call   d9b <wait>
   while(getcmd(buf, sizeof(buf)) >= 0){
-      74:	83 ec 08             	sub    $0x8,%esp
-      77:	6a 64                	push   $0x64
-      79:	68 40 1a 00 00       	push   $0x1a40
-      7e:	e8 0d 01 00 00       	call   190 <getcmd>
-      83:	83 c4 10             	add    $0x10,%esp
-      86:	85 c0                	test   %eax,%eax
-      88:	0f 88 bb 00 00 00    	js     149 <main+0x149>
+      73:	83 ec 08             	sub    $0x8,%esp
+      76:	6a 64                	push   $0x64
+      78:	68 40 19 00 00       	push   $0x1940
+      7d:	e8 8e 00 00 00       	call   110 <getcmd>
+      82:	83 c4 10             	add    $0x10,%esp
+      85:	85 c0                	test   %eax,%eax
+      87:	78 14                	js     9d <main+0x9d>
     if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      8e:	0f b6 05 40 1a 00 00 	movzbl 0x1a40,%eax
-      95:	3c 63                	cmp    $0x63,%al
-      97:	75 af                	jne    48 <main+0x48>
-      99:	80 3d 41 1a 00 00 64 	cmpb   $0x64,0x1a41
-      a0:	75 b7                	jne    59 <main+0x59>
-      a2:	80 3d 42 1a 00 00 20 	cmpb   $0x20,0x1a42
-      a9:	75 ae                	jne    59 <main+0x59>
+      89:	80 3d 40 19 00 00 63 	cmpb   $0x63,0x1940
+      90:	75 c6                	jne    58 <main+0x58>
+      92:	80 3d 41 19 00 00 64 	cmpb   $0x64,0x1941
+      99:	75 bd                	jne    58 <main+0x58>
+      9b:	eb ab                	jmp    48 <main+0x48>
+  exit();
+      9d:	e8 f1 0c 00 00       	call   d93 <exit>
       buf[strlen(buf)-1] = 0;  // chop \n
-      ab:	83 ec 0c             	sub    $0xc,%esp
-      ae:	68 40 1a 00 00       	push   $0x1a40
-      b3:	e8 d8 0b 00 00       	call   c90 <strlen>
+      a2:	83 ec 0c             	sub    $0xc,%esp
+      a5:	68 40 19 00 00       	push   $0x1940
+      aa:	e8 01 0b 00 00       	call   bb0 <strlen>
       if(chdir(buf+3) < 0)
-      b8:	c7 04 24 43 1a 00 00 	movl   $0x1a43,(%esp)
+      af:	c7 04 24 43 19 00 00 	movl   $0x1943,(%esp)
       buf[strlen(buf)-1] = 0;  // chop \n
-      bf:	c6 80 3f 1a 00 00 00 	movb   $0x0,0x1a3f(%eax)
+      b6:	c6 80 3f 19 00 00 00 	movb   $0x0,0x193f(%eax)
       if(chdir(buf+3) < 0)
-      c6:	e8 18 0e 00 00       	call   ee3 <chdir>
-      cb:	83 c4 10             	add    $0x10,%esp
-      ce:	85 c0                	test   %eax,%eax
-      d0:	79 a2                	jns    74 <main+0x74>
+      bd:	e8 41 0d 00 00       	call   e03 <chdir>
+      c2:	83 c4 10             	add    $0x10,%esp
+      c5:	85 c0                	test   %eax,%eax
+      c7:	79 aa                	jns    73 <main+0x73>
         printf(2, "cannot cd %s\n", buf+3);
-      d2:	50                   	push   %eax
-      d3:	68 43 1a 00 00       	push   $0x1a43
-      d8:	68 e6 13 00 00       	push   $0x13e6
-      dd:	6a 02                	push   $0x2
-      df:	e8 ec 0e 00 00       	call   fd0 <printf>
-      e4:	83 c4 10             	add    $0x10,%esp
-      e7:	eb 8b                	jmp    74 <main+0x74>
-      e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's' && buf[3] == 't'
-      f0:	80 3d 42 1a 00 00 73 	cmpb   $0x73,0x1a42
-      f7:	0f 85 5c ff ff ff    	jne    59 <main+0x59>
-      fd:	80 3d 43 1a 00 00 74 	cmpb   $0x74,0x1a43
-     104:	0f 85 4f ff ff ff    	jne    59 <main+0x59>
-        && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y') 
-     10a:	80 3d 44 1a 00 00 6f 	cmpb   $0x6f,0x1a44
-     111:	0f 85 42 ff ff ff    	jne    59 <main+0x59>
-     117:	80 3d 45 1a 00 00 72 	cmpb   $0x72,0x1a45
-     11e:	0f 85 35 ff ff ff    	jne    59 <main+0x59>
-     124:	80 3d 46 1a 00 00 79 	cmpb   $0x79,0x1a46
-     12b:	0f 85 28 ff ff ff    	jne    59 <main+0x59>
-      if(buf[7]=='\n' || buf[7]==' ')
-     131:	0f b6 05 47 1a 00 00 	movzbl 0x1a47,%eax
-     138:	3c 0a                	cmp    $0xa,%al
-     13a:	74 08                	je     144 <main+0x144>
-     13c:	3c 20                	cmp    $0x20,%al
-     13e:	0f 85 15 ff ff ff    	jne    59 <main+0x59>
-        historyA();
-     144:	e8 97 00 00 00       	call   1e0 <historyA>
-  exit();
-     149:	e8 25 0d 00 00       	call   e73 <exit>
-      runcmd(parsecmd(buf));
-     14e:	83 ec 0c             	sub    $0xc,%esp
-     151:	68 40 1a 00 00       	push   $0x1a40
-     156:	e8 45 0a 00 00       	call   ba0 <parsecmd>
-     15b:	89 04 24             	mov    %eax,(%esp)
-     15e:	e8 fd 00 00 00       	call   260 <runcmd>
+      c9:	50                   	push   %eax
+      ca:	68 43 19 00 00       	push   $0x1943
+      cf:	68 01 13 00 00       	push   $0x1301
+      d4:	6a 02                	push   $0x2
+      d6:	e8 15 0e 00 00       	call   ef0 <printf>
+      db:	83 c4 10             	add    $0x10,%esp
+      de:	eb 93                	jmp    73 <main+0x73>
       close(fd);
-     163:	83 ec 0c             	sub    $0xc,%esp
-     166:	50                   	push   %eax
-     167:	e8 2f 0d 00 00       	call   e9b <close>
+      e0:	83 ec 0c             	sub    $0xc,%esp
+      e3:	50                   	push   %eax
+      e4:	e8 d2 0c 00 00       	call   dbb <close>
       break;
-     16c:	83 c4 10             	add    $0x10,%esp
-     16f:	e9 00 ff ff ff       	jmp    74 <main+0x74>
+      e9:	83 c4 10             	add    $0x10,%esp
+      ec:	eb 85                	jmp    73 <main+0x73>
+      runcmd(parsecmd(buf));
+      ee:	83 ec 0c             	sub    $0xc,%esp
+      f1:	68 40 19 00 00       	push   $0x1940
+      f6:	e8 c5 09 00 00       	call   ac0 <parsecmd>
+      fb:	89 04 24             	mov    %eax,(%esp)
+      fe:	e8 7d 00 00 00       	call   180 <runcmd>
     panic("fork");
-     174:	83 ec 0c             	sub    $0xc,%esp
-     177:	68 67 13 00 00       	push   $0x1367
-     17c:	e8 bf 00 00 00       	call   240 <panic>
-     181:	66 90                	xchg   %ax,%ax
-     183:	66 90                	xchg   %ax,%ax
-     185:	66 90                	xchg   %ax,%ax
-     187:	66 90                	xchg   %ax,%ax
-     189:	66 90                	xchg   %ax,%ax
-     18b:	66 90                	xchg   %ax,%ax
-     18d:	66 90                	xchg   %ax,%ax
-     18f:	90                   	nop
-
-00000190 <getcmd>:
-{
-     190:	f3 0f 1e fb          	endbr32 
-     194:	55                   	push   %ebp
-     195:	89 e5                	mov    %esp,%ebp
-     197:	56                   	push   %esi
-     198:	53                   	push   %ebx
-     199:	8b 75 0c             	mov    0xc(%ebp),%esi
-     19c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     103:	83 ec 0c             	sub    $0xc,%esp
+     106:	68 82 12 00 00       	push   $0x1282
+     10b:	e8 50 00 00 00       	call   160 <panic>
+
+00000110 <getcmd>:
+{
+     110:	f3 0f 1e fb          	endbr32 
+     114:	55                   	push   %ebp
+     115:	89 e5                	mov    %esp,%ebp
+     117:	56                   	push   %esi
+     118:	53                   	push   %ebx
+     119:	8b 75 0c             	mov    0xc(%ebp),%esi
+     11c:	8b 5d 08             	mov    0x8(%ebp),%ebx
   printf(2, "$ ");
-     19f:	83 ec 08             	sub    $0x8,%esp
-     1a2:	68 38 13 00 00       	push   $0x1338
-     1a7:	6a 02                	push   $0x2
-     1a9:	e8 22 0e 00 00       	call   fd0 <printf>
+     11f:	83 ec 08             	sub    $0x8,%esp
+     122:	68 58 12 00 00       	push   $0x1258
+     127:	6a 02                	push   $0x2
+     129:	e8 c2 0d 00 00       	call   ef0 <printf>
   memset(buf, 0, nbuf);
-     1ae:	83 c4 0c             	add    $0xc,%esp
-     1b1:	56                   	push   %esi
-     1b2:	6a 00                	push   $0x0
-     1b4:	53                   	push   %ebx
-     1b5:	e8 16 0b 00 00       	call   cd0 <memset>
+     12e:	83 c4 0c             	add    $0xc,%esp
+     131:	56                   	push   %esi
+     132:	6a 00                	push   $0x0
+     134:	53                   	push   %ebx
+     135:	e8 b6 0a 00 00       	call   bf0 <memset>
   gets(buf, nbuf);
-     1ba:	58                   	pop    %eax
-     1bb:	5a                   	pop    %edx
-     1bc:	56                   	push   %esi
-     1bd:	53                   	push   %ebx
-     1be:	e8 6d 0b 00 00       	call   d30 <gets>
+     13a:	58                   	pop    %eax
+     13b:	5a                   	pop    %edx
+     13c:	56                   	push   %esi
+     13d:	53                   	push   %ebx
+     13e:	e8 0d 0b 00 00       	call   c50 <gets>
   if(buf[0] == 0) // EOF
-     1c3:	83 c4 10             	add    $0x10,%esp
-     1c6:	31 c0                	xor    %eax,%eax
-     1c8:	80 3b 00             	cmpb   $0x0,(%ebx)
-     1cb:	0f 94 c0             	sete   %al
+     143:	83 c4 10             	add    $0x10,%esp
+     146:	31 c0                	xor    %eax,%eax
+     148:	80 3b 00             	cmpb   $0x0,(%ebx)
+     14b:	0f 94 c0             	sete   %al
 }
-     1ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     1d1:	5b                   	pop    %ebx
+     14e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     151:	5b                   	pop    %ebx
   if(buf[0] == 0) // EOF
-     1d2:	f7 d8                	neg    %eax
+     152:	f7 d8                	neg    %eax
 }
-     1d4:	5e                   	pop    %esi
-     1d5:	5d                   	pop    %ebp
-     1d6:	c3                   	ret    
-     1d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     1de:	66 90                	xchg   %ax,%ax
-
-000001e0 <historyA>:
-{  
-     1e0:	f3 0f 1e fb          	endbr32 
-     1e4:	55                   	push   %ebp
-     1e5:	89 e5                	mov    %esp,%ebp
-     1e7:	56                   	push   %esi
-  for(int i=15;i>=0;i--){
-     1e8:	be 0f 00 00 00       	mov    $0xf,%esi
-{  
-     1ed:	53                   	push   %ebx
-     1ee:	eb 08                	jmp    1f8 <historyA+0x18>
-  for(int i=15;i>=0;i--){
-     1f0:	83 ee 01             	sub    $0x1,%esi
-     1f3:	83 fe ff             	cmp    $0xffffffff,%esi
-     1f6:	74 3b                	je     233 <historyA+0x53>
-   char*  buffer=(char*)malloc(size);
-     1f8:	83 ec 0c             	sub    $0xc,%esp
-     1fb:	ff 35 2c 1a 00 00    	pushl  0x1a2c
-     201:	e8 2a 10 00 00       	call   1230 <malloc>
-     206:	89 c3                	mov    %eax,%ebx
-   int val=history(buffer,i) ;
-     208:	58                   	pop    %eax
-     209:	5a                   	pop    %edx
-     20a:	56                   	push   %esi
-     20b:	53                   	push   %ebx
-     20c:	e8 02 0d 00 00       	call   f13 <history>
-   if(val==0)
-     211:	83 c4 10             	add    $0x10,%esp
-     214:	85 c0                	test   %eax,%eax
-     216:	75 d8                	jne    1f0 <historyA+0x10>
-   printf(1,"%s \n",buffer);
-     218:	83 ec 04             	sub    $0x4,%esp
-  for(int i=15;i>=0;i--){
-     21b:	83 ee 01             	sub    $0x1,%esi
-   printf(1,"%s \n",buffer);
-     21e:	53                   	push   %ebx
-     21f:	68 3b 13 00 00       	push   $0x133b
-     224:	6a 01                	push   $0x1
-     226:	e8 a5 0d 00 00       	call   fd0 <printf>
-     22b:	83 c4 10             	add    $0x10,%esp
-  for(int i=15;i>=0;i--){
-     22e:	83 fe ff             	cmp    $0xffffffff,%esi
-     231:	75 c5                	jne    1f8 <historyA+0x18>
-   exit();
-     233:	e8 3b 0c 00 00       	call   e73 <exit>
-     238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     23f:	90                   	nop
-
-00000240 <panic>:
-{
-     240:	f3 0f 1e fb          	endbr32 
-     244:	55                   	push   %ebp
-     245:	89 e5                	mov    %esp,%ebp
-     247:	83 ec 0c             	sub    $0xc,%esp
+     154:	5e                   	pop    %esi
+     155:	5d                   	pop    %ebp
+     156:	c3                   	ret    
+     157:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     15e:	66 90                	xchg   %ax,%ax
+
+00000160 <panic>:
+{
+     160:	f3 0f 1e fb          	endbr32 
+     164:	55                   	push   %ebp
+     165:	89 e5                	mov    %esp,%ebp
+     167:	83 ec 0c             	sub    $0xc,%esp
   printf(2, "%s\n", s);
-     24a:	ff 75 08             	pushl  0x8(%ebp)
-     24d:	68 da 13 00 00       	push   $0x13da
-     252:	6a 02                	push   $0x2
-     254:	e8 77 0d 00 00       	call   fd0 <printf>
+     16a:	ff 75 08             	pushl  0x8(%ebp)
+     16d:	68 f5 12 00 00       	push   $0x12f5
+     172:	6a 02                	push   $0x2
+     174:	e8 77 0d 00 00       	call   ef0 <printf>
   exit();
-     259:	e8 15 0c 00 00       	call   e73 <exit>
-     25e:	66 90                	xchg   %ax,%ax
+     179:	e8 15 0c 00 00       	call   d93 <exit>
+     17e:	66 90                	xchg   %ax,%ax
 
-00000260 <runcmd>:
+00000180 <runcmd>:
 {
-     260:	f3 0f 1e fb          	endbr32 
-     264:	55                   	push   %ebp
-     265:	89 e5                	mov    %esp,%ebp
-     267:	53                   	push   %ebx
-     268:	83 ec 14             	sub    $0x14,%esp
-     26b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     180:	f3 0f 1e fb          	endbr32 
+     184:	55                   	push   %ebp
+     185:	89 e5                	mov    %esp,%ebp
+     187:	53                   	push   %ebx
+     188:	83 ec 14             	sub    $0x14,%esp
+     18b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(cmd == 0)
-     26e:	85 db                	test   %ebx,%ebx
-     270:	74 7e                	je     2f0 <runcmd+0x90>
+     18e:	85 db                	test   %ebx,%ebx
+     190:	74 7e                	je     210 <runcmd+0x90>
   switch(cmd->type){
-     272:	83 3b 05             	cmpl   $0x5,(%ebx)
-     275:	0f 87 04 01 00 00    	ja     37f <runcmd+0x11f>
-     27b:	8b 03                	mov    (%ebx),%eax
-     27d:	3e ff 24 85 f4 13 00 	notrack jmp *0x13f4(,%eax,4)
-     284:	00 
+     192:	83 3b 05             	cmpl   $0x5,(%ebx)
+     195:	0f 87 04 01 00 00    	ja     29f <runcmd+0x11f>
+     19b:	8b 03                	mov    (%ebx),%eax
+     19d:	3e ff 24 85 10 13 00 	notrack jmp *0x1310(,%eax,4)
+     1a4:	00 
     if(pipe(p) < 0)
-     285:	83 ec 0c             	sub    $0xc,%esp
-     288:	8d 45 f0             	lea    -0x10(%ebp),%eax
-     28b:	50                   	push   %eax
-     28c:	e8 f2 0b 00 00       	call   e83 <pipe>
-     291:	83 c4 10             	add    $0x10,%esp
-     294:	85 c0                	test   %eax,%eax
-     296:	0f 88 05 01 00 00    	js     3a1 <runcmd+0x141>
+     1a5:	83 ec 0c             	sub    $0xc,%esp
+     1a8:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     1ab:	50                   	push   %eax
+     1ac:	e8 f2 0b 00 00       	call   da3 <pipe>
+     1b1:	83 c4 10             	add    $0x10,%esp
+     1b4:	85 c0                	test   %eax,%eax
+     1b6:	0f 88 05 01 00 00    	js     2c1 <runcmd+0x141>
   pid = fork();
-     29c:	e8 ca 0b 00 00       	call   e6b <fork>
+     1bc:	e8 ca 0b 00 00       	call   d8b <fork>
   if(pid == -1)
-     2a1:	83 f8 ff             	cmp    $0xffffffff,%eax
-     2a4:	0f 84 60 01 00 00    	je     40a <runcmd+0x1aa>
+     1c1:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1c4:	0f 84 60 01 00 00    	je     32a <runcmd+0x1aa>
     if(fork1() == 0){
-     2aa:	85 c0                	test   %eax,%eax
-     2ac:	0f 84 fc 00 00 00    	je     3ae <runcmd+0x14e>
+     1ca:	85 c0                	test   %eax,%eax
+     1cc:	0f 84 fc 00 00 00    	je     2ce <runcmd+0x14e>
   pid = fork();
-     2b2:	e8 b4 0b 00 00       	call   e6b <fork>
+     1d2:	e8 b4 0b 00 00       	call   d8b <fork>
   if(pid == -1)
-     2b7:	83 f8 ff             	cmp    $0xffffffff,%eax
-     2ba:	0f 84 4a 01 00 00    	je     40a <runcmd+0x1aa>
+     1d7:	83 f8 ff             	cmp    $0xffffffff,%eax
+     1da:	0f 84 4a 01 00 00    	je     32a <runcmd+0x1aa>
     if(fork1() == 0){
-     2c0:	85 c0                	test   %eax,%eax
-     2c2:	0f 84 14 01 00 00    	je     3dc <runcmd+0x17c>
+     1e0:	85 c0                	test   %eax,%eax
+     1e2:	0f 84 14 01 00 00    	je     2fc <runcmd+0x17c>
     close(p[0]);
-     2c8:	83 ec 0c             	sub    $0xc,%esp
-     2cb:	ff 75 f0             	pushl  -0x10(%ebp)
-     2ce:	e8 c8 0b 00 00       	call   e9b <close>
+     1e8:	83 ec 0c             	sub    $0xc,%esp
+     1eb:	ff 75 f0             	pushl  -0x10(%ebp)
+     1ee:	e8 c8 0b 00 00       	call   dbb <close>
     close(p[1]);
-     2d3:	58                   	pop    %eax
-     2d4:	ff 75 f4             	pushl  -0xc(%ebp)
-     2d7:	e8 bf 0b 00 00       	call   e9b <close>
+     1f3:	58                   	pop    %eax
+     1f4:	ff 75 f4             	pushl  -0xc(%ebp)
+     1f7:	e8 bf 0b 00 00       	call   dbb <close>
     wait();
-     2dc:	e8 9a 0b 00 00       	call   e7b <wait>
+     1fc:	e8 9a 0b 00 00       	call   d9b <wait>
     wait();
-     2e1:	e8 95 0b 00 00       	call   e7b <wait>
+     201:	e8 95 0b 00 00       	call   d9b <wait>
     break;
-     2e6:	83 c4 10             	add    $0x10,%esp
-     2e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     206:	83 c4 10             	add    $0x10,%esp
+     209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     exit();
-     2f0:	e8 7e 0b 00 00       	call   e73 <exit>
+     210:	e8 7e 0b 00 00       	call   d93 <exit>
   pid = fork();
-     2f5:	e8 71 0b 00 00       	call   e6b <fork>
+     215:	e8 71 0b 00 00       	call   d8b <fork>
   if(pid == -1)
-     2fa:	83 f8 ff             	cmp    $0xffffffff,%eax
-     2fd:	0f 84 07 01 00 00    	je     40a <runcmd+0x1aa>
+     21a:	83 f8 ff             	cmp    $0xffffffff,%eax
+     21d:	0f 84 07 01 00 00    	je     32a <runcmd+0x1aa>
     if(fork1() == 0)
-     303:	85 c0                	test   %eax,%eax
-     305:	75 e9                	jne    2f0 <runcmd+0x90>
-     307:	eb 6b                	jmp    374 <runcmd+0x114>
+     223:	85 c0                	test   %eax,%eax
+     225:	75 e9                	jne    210 <runcmd+0x90>
+     227:	eb 6b                	jmp    294 <runcmd+0x114>
     if(ecmd->argv[0] == 0)
-     309:	8b 43 04             	mov    0x4(%ebx),%eax
-     30c:	85 c0                	test   %eax,%eax
-     30e:	74 e0                	je     2f0 <runcmd+0x90>
+     229:	8b 43 04             	mov    0x4(%ebx),%eax
+     22c:	85 c0                	test   %eax,%eax
+     22e:	74 e0                	je     210 <runcmd+0x90>
     exec(ecmd->argv[0], ecmd->argv);
-     310:	8d 53 04             	lea    0x4(%ebx),%edx
-     313:	51                   	push   %ecx
-     314:	51                   	push   %ecx
-     315:	52                   	push   %edx
-     316:	50                   	push   %eax
-     317:	e8 8f 0b 00 00       	call   eab <exec>
+     230:	8d 53 04             	lea    0x4(%ebx),%edx
+     233:	51                   	push   %ecx
+     234:	51                   	push   %ecx
+     235:	52                   	push   %edx
+     236:	50                   	push   %eax
+     237:	e8 8f 0b 00 00       	call   dcb <exec>
     printf(2, "exec %s failed\n", ecmd->argv[0]);
-     31c:	83 c4 0c             	add    $0xc,%esp
-     31f:	ff 73 04             	pushl  0x4(%ebx)
-     322:	68 47 13 00 00       	push   $0x1347
-     327:	6a 02                	push   $0x2
-     329:	e8 a2 0c 00 00       	call   fd0 <printf>
+     23c:	83 c4 0c             	add    $0xc,%esp
+     23f:	ff 73 04             	pushl  0x4(%ebx)
+     242:	68 62 12 00 00       	push   $0x1262
+     247:	6a 02                	push   $0x2
+     249:	e8 a2 0c 00 00       	call   ef0 <printf>
     break;
-     32e:	83 c4 10             	add    $0x10,%esp
-     331:	eb bd                	jmp    2f0 <runcmd+0x90>
+     24e:	83 c4 10             	add    $0x10,%esp
+     251:	eb bd                	jmp    210 <runcmd+0x90>
   pid = fork();
-     333:	e8 33 0b 00 00       	call   e6b <fork>
+     253:	e8 33 0b 00 00       	call   d8b <fork>
   if(pid == -1)
-     338:	83 f8 ff             	cmp    $0xffffffff,%eax
-     33b:	0f 84 c9 00 00 00    	je     40a <runcmd+0x1aa>
+     258:	83 f8 ff             	cmp    $0xffffffff,%eax
+     25b:	0f 84 c9 00 00 00    	je     32a <runcmd+0x1aa>
     if(fork1() == 0)
-     341:	85 c0                	test   %eax,%eax
-     343:	74 2f                	je     374 <runcmd+0x114>
+     261:	85 c0                	test   %eax,%eax
+     263:	74 2f                	je     294 <runcmd+0x114>
     wait();
-     345:	e8 31 0b 00 00       	call   e7b <wait>
+     265:	e8 31 0b 00 00       	call   d9b <wait>
     runcmd(lcmd->right);
-     34a:	83 ec 0c             	sub    $0xc,%esp
-     34d:	ff 73 08             	pushl  0x8(%ebx)
-     350:	e8 0b ff ff ff       	call   260 <runcmd>
+     26a:	83 ec 0c             	sub    $0xc,%esp
+     26d:	ff 73 08             	pushl  0x8(%ebx)
+     270:	e8 0b ff ff ff       	call   180 <runcmd>
     close(rcmd->fd);
-     355:	83 ec 0c             	sub    $0xc,%esp
-     358:	ff 73 14             	pushl  0x14(%ebx)
-     35b:	e8 3b 0b 00 00       	call   e9b <close>
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	ff 73 14             	pushl  0x14(%ebx)
+     27b:	e8 3b 0b 00 00       	call   dbb <close>
     if(open(rcmd->file, rcmd->mode) < 0){
-     360:	58                   	pop    %eax
-     361:	5a                   	pop    %edx
-     362:	ff 73 10             	pushl  0x10(%ebx)
-     365:	ff 73 08             	pushl  0x8(%ebx)
-     368:	e8 46 0b 00 00       	call   eb3 <open>
-     36d:	83 c4 10             	add    $0x10,%esp
-     370:	85 c0                	test   %eax,%eax
-     372:	78 18                	js     38c <runcmd+0x12c>
+     280:	58                   	pop    %eax
+     281:	5a                   	pop    %edx
+     282:	ff 73 10             	pushl  0x10(%ebx)
+     285:	ff 73 08             	pushl  0x8(%ebx)
+     288:	e8 46 0b 00 00       	call   dd3 <open>
+     28d:	83 c4 10             	add    $0x10,%esp
+     290:	85 c0                	test   %eax,%eax
+     292:	78 18                	js     2ac <runcmd+0x12c>
       runcmd(bcmd->cmd);
-     374:	83 ec 0c             	sub    $0xc,%esp
-     377:	ff 73 04             	pushl  0x4(%ebx)
-     37a:	e8 e1 fe ff ff       	call   260 <runcmd>
+     294:	83 ec 0c             	sub    $0xc,%esp
+     297:	ff 73 04             	pushl  0x4(%ebx)
+     29a:	e8 e1 fe ff ff       	call   180 <runcmd>
     panic("runcmd");
-     37f:	83 ec 0c             	sub    $0xc,%esp
-     382:	68 40 13 00 00       	push   $0x1340
-     387:	e8 b4 fe ff ff       	call   240 <panic>
+     29f:	83 ec 0c             	sub    $0xc,%esp
+     2a2:	68 5b 12 00 00       	push   $0x125b
+     2a7:	e8 b4 fe ff ff       	call   160 <panic>
       printf(2, "open %s failed\n", rcmd->file);
-     38c:	51                   	push   %ecx
-     38d:	ff 73 08             	pushl  0x8(%ebx)
-     390:	68 57 13 00 00       	push   $0x1357
-     395:	6a 02                	push   $0x2
-     397:	e8 34 0c 00 00       	call   fd0 <printf>
+     2ac:	51                   	push   %ecx
+     2ad:	ff 73 08             	pushl  0x8(%ebx)
+     2b0:	68 72 12 00 00       	push   $0x1272
+     2b5:	6a 02                	push   $0x2
+     2b7:	e8 34 0c 00 00       	call   ef0 <printf>
       exit();
-     39c:	e8 d2 0a 00 00       	call   e73 <exit>
+     2bc:	e8 d2 0a 00 00       	call   d93 <exit>
       panic("pipe");
-     3a1:	83 ec 0c             	sub    $0xc,%esp
-     3a4:	68 6c 13 00 00       	push   $0x136c
-     3a9:	e8 92 fe ff ff       	call   240 <panic>
+     2c1:	83 ec 0c             	sub    $0xc,%esp
+     2c4:	68 87 12 00 00       	push   $0x1287
+     2c9:	e8 92 fe ff ff       	call   160 <panic>
       close(1);
-     3ae:	83 ec 0c             	sub    $0xc,%esp
-     3b1:	6a 01                	push   $0x1
-     3b3:	e8 e3 0a 00 00       	call   e9b <close>
+     2ce:	83 ec 0c             	sub    $0xc,%esp
+     2d1:	6a 01                	push   $0x1
+     2d3:	e8 e3 0a 00 00       	call   dbb <close>
       dup(p[1]);
-     3b8:	58                   	pop    %eax
-     3b9:	ff 75 f4             	pushl  -0xc(%ebp)
-     3bc:	e8 2a 0b 00 00       	call   eeb <dup>
+     2d8:	58                   	pop    %eax
+     2d9:	ff 75 f4             	pushl  -0xc(%ebp)
+     2dc:	e8 2a 0b 00 00       	call   e0b <dup>
       close(p[0]);
-     3c1:	58                   	pop    %eax
-     3c2:	ff 75 f0             	pushl  -0x10(%ebp)
-     3c5:	e8 d1 0a 00 00       	call   e9b <close>
+     2e1:	58                   	pop    %eax
+     2e2:	ff 75 f0             	pushl  -0x10(%ebp)
+     2e5:	e8 d1 0a 00 00       	call   dbb <close>
       close(p[1]);
-     3ca:	58                   	pop    %eax
-     3cb:	ff 75 f4             	pushl  -0xc(%ebp)
-     3ce:	e8 c8 0a 00 00       	call   e9b <close>
+     2ea:	58                   	pop    %eax
+     2eb:	ff 75 f4             	pushl  -0xc(%ebp)
+     2ee:	e8 c8 0a 00 00       	call   dbb <close>
       runcmd(pcmd->left);
-     3d3:	5a                   	pop    %edx
-     3d4:	ff 73 04             	pushl  0x4(%ebx)
-     3d7:	e8 84 fe ff ff       	call   260 <runcmd>
+     2f3:	5a                   	pop    %edx
+     2f4:	ff 73 04             	pushl  0x4(%ebx)
+     2f7:	e8 84 fe ff ff       	call   180 <runcmd>
       close(0);
-     3dc:	83 ec 0c             	sub    $0xc,%esp
-     3df:	6a 00                	push   $0x0
-     3e1:	e8 b5 0a 00 00       	call   e9b <close>
+     2fc:	83 ec 0c             	sub    $0xc,%esp
+     2ff:	6a 00                	push   $0x0
+     301:	e8 b5 0a 00 00       	call   dbb <close>
       dup(p[0]);
-     3e6:	5a                   	pop    %edx
-     3e7:	ff 75 f0             	pushl  -0x10(%ebp)
-     3ea:	e8 fc 0a 00 00       	call   eeb <dup>
+     306:	5a                   	pop    %edx
+     307:	ff 75 f0             	pushl  -0x10(%ebp)
+     30a:	e8 fc 0a 00 00       	call   e0b <dup>
       close(p[0]);
-     3ef:	59                   	pop    %ecx
-     3f0:	ff 75 f0             	pushl  -0x10(%ebp)
-     3f3:	e8 a3 0a 00 00       	call   e9b <close>
+     30f:	59                   	pop    %ecx
+     310:	ff 75 f0             	pushl  -0x10(%ebp)
+     313:	e8 a3 0a 00 00       	call   dbb <close>
       close(p[1]);
-     3f8:	58                   	pop    %eax
-     3f9:	ff 75 f4             	pushl  -0xc(%ebp)
-     3fc:	e8 9a 0a 00 00       	call   e9b <close>
+     318:	58                   	pop    %eax
+     319:	ff 75 f4             	pushl  -0xc(%ebp)
+     31c:	e8 9a 0a 00 00       	call   dbb <close>
       runcmd(pcmd->right);
-     401:	58                   	pop    %eax
-     402:	ff 73 08             	pushl  0x8(%ebx)
-     405:	e8 56 fe ff ff       	call   260 <runcmd>
+     321:	58                   	pop    %eax
+     322:	ff 73 08             	pushl  0x8(%ebx)
+     325:	e8 56 fe ff ff       	call   180 <runcmd>
     panic("fork");
-     40a:	83 ec 0c             	sub    $0xc,%esp
-     40d:	68 67 13 00 00       	push   $0x1367
-     412:	e8 29 fe ff ff       	call   240 <panic>
-     417:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     41e:	66 90                	xchg   %ax,%ax
-
-00000420 <fork1>:
-{
-     420:	f3 0f 1e fb          	endbr32 
-     424:	55                   	push   %ebp
-     425:	89 e5                	mov    %esp,%ebp
-     427:	83 ec 08             	sub    $0x8,%esp
+     32a:	83 ec 0c             	sub    $0xc,%esp
+     32d:	68 82 12 00 00       	push   $0x1282
+     332:	e8 29 fe ff ff       	call   160 <panic>
+     337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     33e:	66 90                	xchg   %ax,%ax
+
+00000340 <fork1>:
+{
+     340:	f3 0f 1e fb          	endbr32 
+     344:	55                   	push   %ebp
+     345:	89 e5                	mov    %esp,%ebp
+     347:	83 ec 08             	sub    $0x8,%esp
   pid = fork();
-     42a:	e8 3c 0a 00 00       	call   e6b <fork>
+     34a:	e8 3c 0a 00 00       	call   d8b <fork>
   if(pid == -1)
-     42f:	83 f8 ff             	cmp    $0xffffffff,%eax
-     432:	74 02                	je     436 <fork1+0x16>
+     34f:	83 f8 ff             	cmp    $0xffffffff,%eax
+     352:	74 02                	je     356 <fork1+0x16>
   return pid;
 }
-     434:	c9                   	leave  
-     435:	c3                   	ret    
+     354:	c9                   	leave  
+     355:	c3                   	ret    
     panic("fork");
-     436:	83 ec 0c             	sub    $0xc,%esp
-     439:	68 67 13 00 00       	push   $0x1367
-     43e:	e8 fd fd ff ff       	call   240 <panic>
-     443:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     44a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     356:	83 ec 0c             	sub    $0xc,%esp
+     359:	68 82 12 00 00       	push   $0x1282
+     35e:	e8 fd fd ff ff       	call   160 <panic>
+     363:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000450 <execcmd>:
+00000370 <execcmd>:
 //PAGEBREAK!
 // Constructors
 
 struct cmd*
 execcmd(void)
 {
-     450:	f3 0f 1e fb          	endbr32 
-     454:	55                   	push   %ebp
-     455:	89 e5                	mov    %esp,%ebp
-     457:	53                   	push   %ebx
-     458:	83 ec 10             	sub    $0x10,%esp
+     370:	f3 0f 1e fb          	endbr32 
+     374:	55                   	push   %ebp
+     375:	89 e5                	mov    %esp,%ebp
+     377:	53                   	push   %ebx
+     378:	83 ec 10             	sub    $0x10,%esp
   struct execcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     45b:	6a 54                	push   $0x54
-     45d:	e8 ce 0d 00 00       	call   1230 <malloc>
+     37b:	6a 54                	push   $0x54
+     37d:	e8 ce 0d 00 00       	call   1150 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     462:	83 c4 0c             	add    $0xc,%esp
-     465:	6a 54                	push   $0x54
+     382:	83 c4 0c             	add    $0xc,%esp
+     385:	6a 54                	push   $0x54
   cmd = malloc(sizeof(*cmd));
-     467:	89 c3                	mov    %eax,%ebx
+     387:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     469:	6a 00                	push   $0x0
-     46b:	50                   	push   %eax
-     46c:	e8 5f 08 00 00       	call   cd0 <memset>
+     389:	6a 00                	push   $0x0
+     38b:	50                   	push   %eax
+     38c:	e8 5f 08 00 00       	call   bf0 <memset>
   cmd->type = EXEC;
-     471:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+     391:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   return (struct cmd*)cmd;
 }
-     477:	89 d8                	mov    %ebx,%eax
-     479:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     47c:	c9                   	leave  
-     47d:	c3                   	ret    
-     47e:	66 90                	xchg   %ax,%ax
+     397:	89 d8                	mov    %ebx,%eax
+     399:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     39c:	c9                   	leave  
+     39d:	c3                   	ret    
+     39e:	66 90                	xchg   %ax,%ax
 
-00000480 <redircmd>:
+000003a0 <redircmd>:
 
 struct cmd*
 redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
 {
-     480:	f3 0f 1e fb          	endbr32 
-     484:	55                   	push   %ebp
-     485:	89 e5                	mov    %esp,%ebp
-     487:	53                   	push   %ebx
-     488:	83 ec 10             	sub    $0x10,%esp
+     3a0:	f3 0f 1e fb          	endbr32 
+     3a4:	55                   	push   %ebp
+     3a5:	89 e5                	mov    %esp,%ebp
+     3a7:	53                   	push   %ebx
+     3a8:	83 ec 10             	sub    $0x10,%esp
   struct redircmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     48b:	6a 18                	push   $0x18
-     48d:	e8 9e 0d 00 00       	call   1230 <malloc>
+     3ab:	6a 18                	push   $0x18
+     3ad:	e8 9e 0d 00 00       	call   1150 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     492:	83 c4 0c             	add    $0xc,%esp
-     495:	6a 18                	push   $0x18
+     3b2:	83 c4 0c             	add    $0xc,%esp
+     3b5:	6a 18                	push   $0x18
   cmd = malloc(sizeof(*cmd));
-     497:	89 c3                	mov    %eax,%ebx
+     3b7:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     499:	6a 00                	push   $0x0
-     49b:	50                   	push   %eax
-     49c:	e8 2f 08 00 00       	call   cd0 <memset>
+     3b9:	6a 00                	push   $0x0
+     3bb:	50                   	push   %eax
+     3bc:	e8 2f 08 00 00       	call   bf0 <memset>
   cmd->type = REDIR;
   cmd->cmd = subcmd;
-     4a1:	8b 45 08             	mov    0x8(%ebp),%eax
+     3c1:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = REDIR;
-     4a4:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+     3c4:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
   cmd->cmd = subcmd;
-     4aa:	89 43 04             	mov    %eax,0x4(%ebx)
+     3ca:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->file = file;
-     4ad:	8b 45 0c             	mov    0xc(%ebp),%eax
-     4b0:	89 43 08             	mov    %eax,0x8(%ebx)
+     3cd:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3d0:	89 43 08             	mov    %eax,0x8(%ebx)
   cmd->efile = efile;
-     4b3:	8b 45 10             	mov    0x10(%ebp),%eax
-     4b6:	89 43 0c             	mov    %eax,0xc(%ebx)
+     3d3:	8b 45 10             	mov    0x10(%ebp),%eax
+     3d6:	89 43 0c             	mov    %eax,0xc(%ebx)
   cmd->mode = mode;
-     4b9:	8b 45 14             	mov    0x14(%ebp),%eax
-     4bc:	89 43 10             	mov    %eax,0x10(%ebx)
+     3d9:	8b 45 14             	mov    0x14(%ebp),%eax
+     3dc:	89 43 10             	mov    %eax,0x10(%ebx)
   cmd->fd = fd;
-     4bf:	8b 45 18             	mov    0x18(%ebp),%eax
-     4c2:	89 43 14             	mov    %eax,0x14(%ebx)
+     3df:	8b 45 18             	mov    0x18(%ebp),%eax
+     3e2:	89 43 14             	mov    %eax,0x14(%ebx)
   return (struct cmd*)cmd;
 }
-     4c5:	89 d8                	mov    %ebx,%eax
-     4c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     4ca:	c9                   	leave  
-     4cb:	c3                   	ret    
-     4cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     3e5:	89 d8                	mov    %ebx,%eax
+     3e7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3ea:	c9                   	leave  
+     3eb:	c3                   	ret    
+     3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-000004d0 <pipecmd>:
+000003f0 <pipecmd>:
 
 struct cmd*
 pipecmd(struct cmd *left, struct cmd *right)
 {
-     4d0:	f3 0f 1e fb          	endbr32 
-     4d4:	55                   	push   %ebp
-     4d5:	89 e5                	mov    %esp,%ebp
-     4d7:	53                   	push   %ebx
-     4d8:	83 ec 10             	sub    $0x10,%esp
+     3f0:	f3 0f 1e fb          	endbr32 
+     3f4:	55                   	push   %ebp
+     3f5:	89 e5                	mov    %esp,%ebp
+     3f7:	53                   	push   %ebx
+     3f8:	83 ec 10             	sub    $0x10,%esp
   struct pipecmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     4db:	6a 0c                	push   $0xc
-     4dd:	e8 4e 0d 00 00       	call   1230 <malloc>
+     3fb:	6a 0c                	push   $0xc
+     3fd:	e8 4e 0d 00 00       	call   1150 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     4e2:	83 c4 0c             	add    $0xc,%esp
-     4e5:	6a 0c                	push   $0xc
+     402:	83 c4 0c             	add    $0xc,%esp
+     405:	6a 0c                	push   $0xc
   cmd = malloc(sizeof(*cmd));
-     4e7:	89 c3                	mov    %eax,%ebx
+     407:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     4e9:	6a 00                	push   $0x0
-     4eb:	50                   	push   %eax
-     4ec:	e8 df 07 00 00       	call   cd0 <memset>
+     409:	6a 00                	push   $0x0
+     40b:	50                   	push   %eax
+     40c:	e8 df 07 00 00       	call   bf0 <memset>
   cmd->type = PIPE;
   cmd->left = left;
-     4f1:	8b 45 08             	mov    0x8(%ebp),%eax
+     411:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = PIPE;
-     4f4:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+     414:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
   cmd->left = left;
-     4fa:	89 43 04             	mov    %eax,0x4(%ebx)
+     41a:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->right = right;
-     4fd:	8b 45 0c             	mov    0xc(%ebp),%eax
-     500:	89 43 08             	mov    %eax,0x8(%ebx)
+     41d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     420:	89 43 08             	mov    %eax,0x8(%ebx)
   return (struct cmd*)cmd;
 }
-     503:	89 d8                	mov    %ebx,%eax
-     505:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     508:	c9                   	leave  
-     509:	c3                   	ret    
-     50a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     423:	89 d8                	mov    %ebx,%eax
+     425:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     428:	c9                   	leave  
+     429:	c3                   	ret    
+     42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000510 <listcmd>:
+00000430 <listcmd>:
 
 struct cmd*
 listcmd(struct cmd *left, struct cmd *right)
 {
-     510:	f3 0f 1e fb          	endbr32 
-     514:	55                   	push   %ebp
-     515:	89 e5                	mov    %esp,%ebp
-     517:	53                   	push   %ebx
-     518:	83 ec 10             	sub    $0x10,%esp
+     430:	f3 0f 1e fb          	endbr32 
+     434:	55                   	push   %ebp
+     435:	89 e5                	mov    %esp,%ebp
+     437:	53                   	push   %ebx
+     438:	83 ec 10             	sub    $0x10,%esp
   struct listcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     51b:	6a 0c                	push   $0xc
-     51d:	e8 0e 0d 00 00       	call   1230 <malloc>
+     43b:	6a 0c                	push   $0xc
+     43d:	e8 0e 0d 00 00       	call   1150 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     522:	83 c4 0c             	add    $0xc,%esp
-     525:	6a 0c                	push   $0xc
+     442:	83 c4 0c             	add    $0xc,%esp
+     445:	6a 0c                	push   $0xc
   cmd = malloc(sizeof(*cmd));
-     527:	89 c3                	mov    %eax,%ebx
+     447:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     529:	6a 00                	push   $0x0
-     52b:	50                   	push   %eax
-     52c:	e8 9f 07 00 00       	call   cd0 <memset>
+     449:	6a 00                	push   $0x0
+     44b:	50                   	push   %eax
+     44c:	e8 9f 07 00 00       	call   bf0 <memset>
   cmd->type = LIST;
   cmd->left = left;
-     531:	8b 45 08             	mov    0x8(%ebp),%eax
+     451:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = LIST;
-     534:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+     454:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
   cmd->left = left;
-     53a:	89 43 04             	mov    %eax,0x4(%ebx)
+     45a:	89 43 04             	mov    %eax,0x4(%ebx)
   cmd->right = right;
-     53d:	8b 45 0c             	mov    0xc(%ebp),%eax
-     540:	89 43 08             	mov    %eax,0x8(%ebx)
+     45d:	8b 45 0c             	mov    0xc(%ebp),%eax
+     460:	89 43 08             	mov    %eax,0x8(%ebx)
   return (struct cmd*)cmd;
 }
-     543:	89 d8                	mov    %ebx,%eax
-     545:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     548:	c9                   	leave  
-     549:	c3                   	ret    
-     54a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     463:	89 d8                	mov    %ebx,%eax
+     465:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     468:	c9                   	leave  
+     469:	c3                   	ret    
+     46a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000550 <backcmd>:
+00000470 <backcmd>:
 
 struct cmd*
 backcmd(struct cmd *subcmd)
 {
-     550:	f3 0f 1e fb          	endbr32 
-     554:	55                   	push   %ebp
-     555:	89 e5                	mov    %esp,%ebp
-     557:	53                   	push   %ebx
-     558:	83 ec 10             	sub    $0x10,%esp
+     470:	f3 0f 1e fb          	endbr32 
+     474:	55                   	push   %ebp
+     475:	89 e5                	mov    %esp,%ebp
+     477:	53                   	push   %ebx
+     478:	83 ec 10             	sub    $0x10,%esp
   struct backcmd *cmd;
 
   cmd = malloc(sizeof(*cmd));
-     55b:	6a 08                	push   $0x8
-     55d:	e8 ce 0c 00 00       	call   1230 <malloc>
+     47b:	6a 08                	push   $0x8
+     47d:	e8 ce 0c 00 00       	call   1150 <malloc>
   memset(cmd, 0, sizeof(*cmd));
-     562:	83 c4 0c             	add    $0xc,%esp
-     565:	6a 08                	push   $0x8
+     482:	83 c4 0c             	add    $0xc,%esp
+     485:	6a 08                	push   $0x8
   cmd = malloc(sizeof(*cmd));
-     567:	89 c3                	mov    %eax,%ebx
+     487:	89 c3                	mov    %eax,%ebx
   memset(cmd, 0, sizeof(*cmd));
-     569:	6a 00                	push   $0x0
-     56b:	50                   	push   %eax
-     56c:	e8 5f 07 00 00       	call   cd0 <memset>
+     489:	6a 00                	push   $0x0
+     48b:	50                   	push   %eax
+     48c:	e8 5f 07 00 00       	call   bf0 <memset>
   cmd->type = BACK;
   cmd->cmd = subcmd;
-     571:	8b 45 08             	mov    0x8(%ebp),%eax
+     491:	8b 45 08             	mov    0x8(%ebp),%eax
   cmd->type = BACK;
-     574:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+     494:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
   cmd->cmd = subcmd;
-     57a:	89 43 04             	mov    %eax,0x4(%ebx)
+     49a:	89 43 04             	mov    %eax,0x4(%ebx)
   return (struct cmd*)cmd;
 }
-     57d:	89 d8                	mov    %ebx,%eax
-     57f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     582:	c9                   	leave  
-     583:	c3                   	ret    
-     584:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     58b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     58f:	90                   	nop
+     49d:	89 d8                	mov    %ebx,%eax
+     49f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     4a2:	c9                   	leave  
+     4a3:	c3                   	ret    
+     4a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     4ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     4af:	90                   	nop
 
-00000590 <gettoken>:
+000004b0 <gettoken>:
 char whitespace[] = " \t\r\n\v";
 char symbols[] = "<|>&;()";
 
 int
 gettoken(char **ps, char *es, char **q, char **eq)
 {
-     590:	f3 0f 1e fb          	endbr32 
-     594:	55                   	push   %ebp
-     595:	89 e5                	mov    %esp,%ebp
-     597:	57                   	push   %edi
-     598:	56                   	push   %esi
-     599:	53                   	push   %ebx
-     59a:	83 ec 0c             	sub    $0xc,%esp
+     4b0:	f3 0f 1e fb          	endbr32 
+     4b4:	55                   	push   %ebp
+     4b5:	89 e5                	mov    %esp,%ebp
+     4b7:	57                   	push   %edi
+     4b8:	56                   	push   %esi
+     4b9:	53                   	push   %ebx
+     4ba:	83 ec 0c             	sub    $0xc,%esp
   char *s;
   int ret;
 
   s = *ps;
-     59d:	8b 45 08             	mov    0x8(%ebp),%eax
+     4bd:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-     5a0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-     5a3:	8b 75 10             	mov    0x10(%ebp),%esi
+     4c0:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     4c3:	8b 75 10             	mov    0x10(%ebp),%esi
   s = *ps;
-     5a6:	8b 38                	mov    (%eax),%edi
+     4c6:	8b 38                	mov    (%eax),%edi
   while(s < es && strchr(whitespace, *s))
-     5a8:	39 df                	cmp    %ebx,%edi
-     5aa:	72 0b                	jb     5b7 <gettoken+0x27>
-     5ac:	eb 21                	jmp    5cf <gettoken+0x3f>
-     5ae:	66 90                	xchg   %ax,%ax
+     4c8:	39 df                	cmp    %ebx,%edi
+     4ca:	72 0b                	jb     4d7 <gettoken+0x27>
+     4cc:	eb 21                	jmp    4ef <gettoken+0x3f>
+     4ce:	66 90                	xchg   %ax,%ax
     s++;
-     5b0:	83 c7 01             	add    $0x1,%edi
+     4d0:	83 c7 01             	add    $0x1,%edi
   while(s < es && strchr(whitespace, *s))
-     5b3:	39 fb                	cmp    %edi,%ebx
-     5b5:	74 18                	je     5cf <gettoken+0x3f>
-     5b7:	0f be 07             	movsbl (%edi),%eax
-     5ba:	83 ec 08             	sub    $0x8,%esp
-     5bd:	50                   	push   %eax
-     5be:	68 24 1a 00 00       	push   $0x1a24
-     5c3:	e8 28 07 00 00       	call   cf0 <strchr>
-     5c8:	83 c4 10             	add    $0x10,%esp
-     5cb:	85 c0                	test   %eax,%eax
-     5cd:	75 e1                	jne    5b0 <gettoken+0x20>
+     4d3:	39 fb                	cmp    %edi,%ebx
+     4d5:	74 18                	je     4ef <gettoken+0x3f>
+     4d7:	0f be 07             	movsbl (%edi),%eax
+     4da:	83 ec 08             	sub    $0x8,%esp
+     4dd:	50                   	push   %eax
+     4de:	68 20 19 00 00       	push   $0x1920
+     4e3:	e8 28 07 00 00       	call   c10 <strchr>
+     4e8:	83 c4 10             	add    $0x10,%esp
+     4eb:	85 c0                	test   %eax,%eax
+     4ed:	75 e1                	jne    4d0 <gettoken+0x20>
   if(q)
-     5cf:	85 f6                	test   %esi,%esi
-     5d1:	74 02                	je     5d5 <gettoken+0x45>
+     4ef:	85 f6                	test   %esi,%esi
+     4f1:	74 02                	je     4f5 <gettoken+0x45>
     *q = s;
-     5d3:	89 3e                	mov    %edi,(%esi)
+     4f3:	89 3e                	mov    %edi,(%esi)
   ret = *s;
-     5d5:	0f b6 07             	movzbl (%edi),%eax
+     4f5:	0f b6 07             	movzbl (%edi),%eax
   switch(*s){
-     5d8:	3c 3c                	cmp    $0x3c,%al
-     5da:	0f 8f d0 00 00 00    	jg     6b0 <gettoken+0x120>
-     5e0:	3c 3a                	cmp    $0x3a,%al
-     5e2:	0f 8f b4 00 00 00    	jg     69c <gettoken+0x10c>
-     5e8:	84 c0                	test   %al,%al
-     5ea:	75 44                	jne    630 <gettoken+0xa0>
-     5ec:	31 f6                	xor    %esi,%esi
+     4f8:	3c 3c                	cmp    $0x3c,%al
+     4fa:	0f 8f d0 00 00 00    	jg     5d0 <gettoken+0x120>
+     500:	3c 3a                	cmp    $0x3a,%al
+     502:	0f 8f b4 00 00 00    	jg     5bc <gettoken+0x10c>
+     508:	84 c0                	test   %al,%al
+     50a:	75 44                	jne    550 <gettoken+0xa0>
+     50c:	31 f6                	xor    %esi,%esi
     ret = 'a';
     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
       s++;
     break;
   }
   if(eq)
-     5ee:	8b 55 14             	mov    0x14(%ebp),%edx
-     5f1:	85 d2                	test   %edx,%edx
-     5f3:	74 05                	je     5fa <gettoken+0x6a>
+     50e:	8b 55 14             	mov    0x14(%ebp),%edx
+     511:	85 d2                	test   %edx,%edx
+     513:	74 05                	je     51a <gettoken+0x6a>
     *eq = s;
-     5f5:	8b 45 14             	mov    0x14(%ebp),%eax
-     5f8:	89 38                	mov    %edi,(%eax)
+     515:	8b 45 14             	mov    0x14(%ebp),%eax
+     518:	89 38                	mov    %edi,(%eax)
 
   while(s < es && strchr(whitespace, *s))
-     5fa:	39 df                	cmp    %ebx,%edi
-     5fc:	72 09                	jb     607 <gettoken+0x77>
-     5fe:	eb 1f                	jmp    61f <gettoken+0x8f>
+     51a:	39 df                	cmp    %ebx,%edi
+     51c:	72 09                	jb     527 <gettoken+0x77>
+     51e:	eb 1f                	jmp    53f <gettoken+0x8f>
     s++;
-     600:	83 c7 01             	add    $0x1,%edi
+     520:	83 c7 01             	add    $0x1,%edi
   while(s < es && strchr(whitespace, *s))
-     603:	39 fb                	cmp    %edi,%ebx
-     605:	74 18                	je     61f <gettoken+0x8f>
-     607:	0f be 07             	movsbl (%edi),%eax
-     60a:	83 ec 08             	sub    $0x8,%esp
-     60d:	50                   	push   %eax
-     60e:	68 24 1a 00 00       	push   $0x1a24
-     613:	e8 d8 06 00 00       	call   cf0 <strchr>
-     618:	83 c4 10             	add    $0x10,%esp
-     61b:	85 c0                	test   %eax,%eax
-     61d:	75 e1                	jne    600 <gettoken+0x70>
+     523:	39 fb                	cmp    %edi,%ebx
+     525:	74 18                	je     53f <gettoken+0x8f>
+     527:	0f be 07             	movsbl (%edi),%eax
+     52a:	83 ec 08             	sub    $0x8,%esp
+     52d:	50                   	push   %eax
+     52e:	68 20 19 00 00       	push   $0x1920
+     533:	e8 d8 06 00 00       	call   c10 <strchr>
+     538:	83 c4 10             	add    $0x10,%esp
+     53b:	85 c0                	test   %eax,%eax
+     53d:	75 e1                	jne    520 <gettoken+0x70>
   *ps = s;
-     61f:	8b 45 08             	mov    0x8(%ebp),%eax
-     622:	89 38                	mov    %edi,(%eax)
+     53f:	8b 45 08             	mov    0x8(%ebp),%eax
+     542:	89 38                	mov    %edi,(%eax)
   return ret;
 }
-     624:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     627:	89 f0                	mov    %esi,%eax
-     629:	5b                   	pop    %ebx
-     62a:	5e                   	pop    %esi
-     62b:	5f                   	pop    %edi
-     62c:	5d                   	pop    %ebp
-     62d:	c3                   	ret    
-     62e:	66 90                	xchg   %ax,%ax
+     544:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     547:	89 f0                	mov    %esi,%eax
+     549:	5b                   	pop    %ebx
+     54a:	5e                   	pop    %esi
+     54b:	5f                   	pop    %edi
+     54c:	5d                   	pop    %ebp
+     54d:	c3                   	ret    
+     54e:	66 90                	xchg   %ax,%ax
   switch(*s){
-     630:	79 5e                	jns    690 <gettoken+0x100>
+     550:	79 5e                	jns    5b0 <gettoken+0x100>
     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     632:	39 fb                	cmp    %edi,%ebx
-     634:	77 34                	ja     66a <gettoken+0xda>
+     552:	39 fb                	cmp    %edi,%ebx
+     554:	77 34                	ja     58a <gettoken+0xda>
   if(eq)
-     636:	8b 45 14             	mov    0x14(%ebp),%eax
-     639:	be 61 00 00 00       	mov    $0x61,%esi
-     63e:	85 c0                	test   %eax,%eax
-     640:	75 b3                	jne    5f5 <gettoken+0x65>
-     642:	eb db                	jmp    61f <gettoken+0x8f>
-     644:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     556:	8b 45 14             	mov    0x14(%ebp),%eax
+     559:	be 61 00 00 00       	mov    $0x61,%esi
+     55e:	85 c0                	test   %eax,%eax
+     560:	75 b3                	jne    515 <gettoken+0x65>
+     562:	eb db                	jmp    53f <gettoken+0x8f>
+     564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     648:	0f be 07             	movsbl (%edi),%eax
-     64b:	83 ec 08             	sub    $0x8,%esp
-     64e:	50                   	push   %eax
-     64f:	68 1c 1a 00 00       	push   $0x1a1c
-     654:	e8 97 06 00 00       	call   cf0 <strchr>
-     659:	83 c4 10             	add    $0x10,%esp
-     65c:	85 c0                	test   %eax,%eax
-     65e:	75 22                	jne    682 <gettoken+0xf2>
+     568:	0f be 07             	movsbl (%edi),%eax
+     56b:	83 ec 08             	sub    $0x8,%esp
+     56e:	50                   	push   %eax
+     56f:	68 18 19 00 00       	push   $0x1918
+     574:	e8 97 06 00 00       	call   c10 <strchr>
+     579:	83 c4 10             	add    $0x10,%esp
+     57c:	85 c0                	test   %eax,%eax
+     57e:	75 22                	jne    5a2 <gettoken+0xf2>
       s++;
-     660:	83 c7 01             	add    $0x1,%edi
+     580:	83 c7 01             	add    $0x1,%edi
     while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     663:	39 fb                	cmp    %edi,%ebx
-     665:	74 cf                	je     636 <gettoken+0xa6>
-     667:	0f b6 07             	movzbl (%edi),%eax
-     66a:	83 ec 08             	sub    $0x8,%esp
-     66d:	0f be f0             	movsbl %al,%esi
-     670:	56                   	push   %esi
-     671:	68 24 1a 00 00       	push   $0x1a24
-     676:	e8 75 06 00 00       	call   cf0 <strchr>
-     67b:	83 c4 10             	add    $0x10,%esp
-     67e:	85 c0                	test   %eax,%eax
-     680:	74 c6                	je     648 <gettoken+0xb8>
+     583:	39 fb                	cmp    %edi,%ebx
+     585:	74 cf                	je     556 <gettoken+0xa6>
+     587:	0f b6 07             	movzbl (%edi),%eax
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	0f be f0             	movsbl %al,%esi
+     590:	56                   	push   %esi
+     591:	68 20 19 00 00       	push   $0x1920
+     596:	e8 75 06 00 00       	call   c10 <strchr>
+     59b:	83 c4 10             	add    $0x10,%esp
+     59e:	85 c0                	test   %eax,%eax
+     5a0:	74 c6                	je     568 <gettoken+0xb8>
     ret = 'a';
-     682:	be 61 00 00 00       	mov    $0x61,%esi
-     687:	e9 62 ff ff ff       	jmp    5ee <gettoken+0x5e>
-     68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     5a2:	be 61 00 00 00       	mov    $0x61,%esi
+     5a7:	e9 62 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   switch(*s){
-     690:	3c 26                	cmp    $0x26,%al
-     692:	74 08                	je     69c <gettoken+0x10c>
-     694:	8d 48 d8             	lea    -0x28(%eax),%ecx
-     697:	80 f9 01             	cmp    $0x1,%cl
-     69a:	77 96                	ja     632 <gettoken+0xa2>
+     5b0:	3c 26                	cmp    $0x26,%al
+     5b2:	74 08                	je     5bc <gettoken+0x10c>
+     5b4:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     5b7:	80 f9 01             	cmp    $0x1,%cl
+     5ba:	77 96                	ja     552 <gettoken+0xa2>
   ret = *s;
-     69c:	0f be f0             	movsbl %al,%esi
+     5bc:	0f be f0             	movsbl %al,%esi
     s++;
-     69f:	83 c7 01             	add    $0x1,%edi
+     5bf:	83 c7 01             	add    $0x1,%edi
     break;
-     6a2:	e9 47 ff ff ff       	jmp    5ee <gettoken+0x5e>
-     6a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     6ae:	66 90                	xchg   %ax,%ax
+     5c2:	e9 47 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5ce:	66 90                	xchg   %ax,%ax
   switch(*s){
-     6b0:	3c 3e                	cmp    $0x3e,%al
-     6b2:	75 1c                	jne    6d0 <gettoken+0x140>
+     5d0:	3c 3e                	cmp    $0x3e,%al
+     5d2:	75 1c                	jne    5f0 <gettoken+0x140>
     if(*s == '>'){
-     6b4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+     5d4:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
     s++;
-     6b8:	8d 47 01             	lea    0x1(%edi),%eax
+     5d8:	8d 47 01             	lea    0x1(%edi),%eax
     if(*s == '>'){
-     6bb:	74 1c                	je     6d9 <gettoken+0x149>
+     5db:	74 1c                	je     5f9 <gettoken+0x149>
     s++;
-     6bd:	89 c7                	mov    %eax,%edi
-     6bf:	be 3e 00 00 00       	mov    $0x3e,%esi
-     6c4:	e9 25 ff ff ff       	jmp    5ee <gettoken+0x5e>
-     6c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5dd:	89 c7                	mov    %eax,%edi
+     5df:	be 3e 00 00 00       	mov    $0x3e,%esi
+     5e4:	e9 25 ff ff ff       	jmp    50e <gettoken+0x5e>
+     5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   switch(*s){
-     6d0:	3c 7c                	cmp    $0x7c,%al
-     6d2:	74 c8                	je     69c <gettoken+0x10c>
-     6d4:	e9 59 ff ff ff       	jmp    632 <gettoken+0xa2>
+     5f0:	3c 7c                	cmp    $0x7c,%al
+     5f2:	74 c8                	je     5bc <gettoken+0x10c>
+     5f4:	e9 59 ff ff ff       	jmp    552 <gettoken+0xa2>
       s++;
-     6d9:	83 c7 02             	add    $0x2,%edi
+     5f9:	83 c7 02             	add    $0x2,%edi
       ret = '+';
-     6dc:	be 2b 00 00 00       	mov    $0x2b,%esi
-     6e1:	e9 08 ff ff ff       	jmp    5ee <gettoken+0x5e>
-     6e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     6ed:	8d 76 00             	lea    0x0(%esi),%esi
+     5fc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     601:	e9 08 ff ff ff       	jmp    50e <gettoken+0x5e>
+     606:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     60d:	8d 76 00             	lea    0x0(%esi),%esi
 
-000006f0 <peek>:
+00000610 <peek>:
 
 int
 peek(char **ps, char *es, char *toks)
 {
-     6f0:	f3 0f 1e fb          	endbr32 
-     6f4:	55                   	push   %ebp
-     6f5:	89 e5                	mov    %esp,%ebp
-     6f7:	57                   	push   %edi
-     6f8:	56                   	push   %esi
-     6f9:	53                   	push   %ebx
-     6fa:	83 ec 0c             	sub    $0xc,%esp
-     6fd:	8b 7d 08             	mov    0x8(%ebp),%edi
-     700:	8b 75 0c             	mov    0xc(%ebp),%esi
+     610:	f3 0f 1e fb          	endbr32 
+     614:	55                   	push   %ebp
+     615:	89 e5                	mov    %esp,%ebp
+     617:	57                   	push   %edi
+     618:	56                   	push   %esi
+     619:	53                   	push   %ebx
+     61a:	83 ec 0c             	sub    $0xc,%esp
+     61d:	8b 7d 08             	mov    0x8(%ebp),%edi
+     620:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *s;
 
   s = *ps;
-     703:	8b 1f                	mov    (%edi),%ebx
+     623:	8b 1f                	mov    (%edi),%ebx
   while(s < es && strchr(whitespace, *s))
-     705:	39 f3                	cmp    %esi,%ebx
-     707:	72 0e                	jb     717 <peek+0x27>
-     709:	eb 24                	jmp    72f <peek+0x3f>
-     70b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     70f:	90                   	nop
+     625:	39 f3                	cmp    %esi,%ebx
+     627:	72 0e                	jb     637 <peek+0x27>
+     629:	eb 24                	jmp    64f <peek+0x3f>
+     62b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     62f:	90                   	nop
     s++;
-     710:	83 c3 01             	add    $0x1,%ebx
+     630:	83 c3 01             	add    $0x1,%ebx
   while(s < es && strchr(whitespace, *s))
-     713:	39 de                	cmp    %ebx,%esi
-     715:	74 18                	je     72f <peek+0x3f>
-     717:	0f be 03             	movsbl (%ebx),%eax
-     71a:	83 ec 08             	sub    $0x8,%esp
-     71d:	50                   	push   %eax
-     71e:	68 24 1a 00 00       	push   $0x1a24
-     723:	e8 c8 05 00 00       	call   cf0 <strchr>
-     728:	83 c4 10             	add    $0x10,%esp
-     72b:	85 c0                	test   %eax,%eax
-     72d:	75 e1                	jne    710 <peek+0x20>
+     633:	39 de                	cmp    %ebx,%esi
+     635:	74 18                	je     64f <peek+0x3f>
+     637:	0f be 03             	movsbl (%ebx),%eax
+     63a:	83 ec 08             	sub    $0x8,%esp
+     63d:	50                   	push   %eax
+     63e:	68 20 19 00 00       	push   $0x1920
+     643:	e8 c8 05 00 00       	call   c10 <strchr>
+     648:	83 c4 10             	add    $0x10,%esp
+     64b:	85 c0                	test   %eax,%eax
+     64d:	75 e1                	jne    630 <peek+0x20>
   *ps = s;
-     72f:	89 1f                	mov    %ebx,(%edi)
+     64f:	89 1f                	mov    %ebx,(%edi)
   return *s && strchr(toks, *s);
-     731:	0f be 03             	movsbl (%ebx),%eax
-     734:	31 d2                	xor    %edx,%edx
-     736:	84 c0                	test   %al,%al
-     738:	75 0e                	jne    748 <peek+0x58>
-}
-     73a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     73d:	89 d0                	mov    %edx,%eax
-     73f:	5b                   	pop    %ebx
-     740:	5e                   	pop    %esi
-     741:	5f                   	pop    %edi
-     742:	5d                   	pop    %ebp
-     743:	c3                   	ret    
-     744:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     651:	0f be 03             	movsbl (%ebx),%eax
+     654:	31 d2                	xor    %edx,%edx
+     656:	84 c0                	test   %al,%al
+     658:	75 0e                	jne    668 <peek+0x58>
+}
+     65a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     65d:	89 d0                	mov    %edx,%eax
+     65f:	5b                   	pop    %ebx
+     660:	5e                   	pop    %esi
+     661:	5f                   	pop    %edi
+     662:	5d                   	pop    %ebp
+     663:	c3                   	ret    
+     664:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return *s && strchr(toks, *s);
-     748:	83 ec 08             	sub    $0x8,%esp
-     74b:	50                   	push   %eax
-     74c:	ff 75 10             	pushl  0x10(%ebp)
-     74f:	e8 9c 05 00 00       	call   cf0 <strchr>
-     754:	83 c4 10             	add    $0x10,%esp
-     757:	31 d2                	xor    %edx,%edx
-     759:	85 c0                	test   %eax,%eax
-     75b:	0f 95 c2             	setne  %dl
-}
-     75e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     761:	5b                   	pop    %ebx
-     762:	89 d0                	mov    %edx,%eax
-     764:	5e                   	pop    %esi
-     765:	5f                   	pop    %edi
-     766:	5d                   	pop    %ebp
-     767:	c3                   	ret    
-     768:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     76f:	90                   	nop
+     668:	83 ec 08             	sub    $0x8,%esp
+     66b:	50                   	push   %eax
+     66c:	ff 75 10             	pushl  0x10(%ebp)
+     66f:	e8 9c 05 00 00       	call   c10 <strchr>
+     674:	83 c4 10             	add    $0x10,%esp
+     677:	31 d2                	xor    %edx,%edx
+     679:	85 c0                	test   %eax,%eax
+     67b:	0f 95 c2             	setne  %dl
+}
+     67e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     681:	5b                   	pop    %ebx
+     682:	89 d0                	mov    %edx,%eax
+     684:	5e                   	pop    %esi
+     685:	5f                   	pop    %edi
+     686:	5d                   	pop    %ebp
+     687:	c3                   	ret    
+     688:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     68f:	90                   	nop
 
-00000770 <parseredirs>:
+00000690 <parseredirs>:
   return cmd;
 }
 
 struct cmd*
 parseredirs(struct cmd *cmd, char **ps, char *es)
 {
-     770:	f3 0f 1e fb          	endbr32 
-     774:	55                   	push   %ebp
-     775:	89 e5                	mov    %esp,%ebp
-     777:	57                   	push   %edi
-     778:	56                   	push   %esi
-     779:	53                   	push   %ebx
-     77a:	83 ec 1c             	sub    $0x1c,%esp
-     77d:	8b 75 0c             	mov    0xc(%ebp),%esi
-     780:	8b 5d 10             	mov    0x10(%ebp),%ebx
+     690:	f3 0f 1e fb          	endbr32 
+     694:	55                   	push   %ebp
+     695:	89 e5                	mov    %esp,%ebp
+     697:	57                   	push   %edi
+     698:	56                   	push   %esi
+     699:	53                   	push   %ebx
+     69a:	83 ec 1c             	sub    $0x1c,%esp
+     69d:	8b 75 0c             	mov    0xc(%ebp),%esi
+     6a0:	8b 5d 10             	mov    0x10(%ebp),%ebx
   int tok;
   char *q, *eq;
 
   while(peek(ps, es, "<>")){
-     783:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     787:	90                   	nop
-     788:	83 ec 04             	sub    $0x4,%esp
-     78b:	68 8e 13 00 00       	push   $0x138e
-     790:	53                   	push   %ebx
-     791:	56                   	push   %esi
-     792:	e8 59 ff ff ff       	call   6f0 <peek>
-     797:	83 c4 10             	add    $0x10,%esp
-     79a:	85 c0                	test   %eax,%eax
-     79c:	74 6a                	je     808 <parseredirs+0x98>
+     6a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     6a7:	90                   	nop
+     6a8:	83 ec 04             	sub    $0x4,%esp
+     6ab:	68 a9 12 00 00       	push   $0x12a9
+     6b0:	53                   	push   %ebx
+     6b1:	56                   	push   %esi
+     6b2:	e8 59 ff ff ff       	call   610 <peek>
+     6b7:	83 c4 10             	add    $0x10,%esp
+     6ba:	85 c0                	test   %eax,%eax
+     6bc:	74 6a                	je     728 <parseredirs+0x98>
     tok = gettoken(ps, es, 0, 0);
-     79e:	6a 00                	push   $0x0
-     7a0:	6a 00                	push   $0x0
-     7a2:	53                   	push   %ebx
-     7a3:	56                   	push   %esi
-     7a4:	e8 e7 fd ff ff       	call   590 <gettoken>
-     7a9:	89 c7                	mov    %eax,%edi
+     6be:	6a 00                	push   $0x0
+     6c0:	6a 00                	push   $0x0
+     6c2:	53                   	push   %ebx
+     6c3:	56                   	push   %esi
+     6c4:	e8 e7 fd ff ff       	call   4b0 <gettoken>
+     6c9:	89 c7                	mov    %eax,%edi
     if(gettoken(ps, es, &q, &eq) != 'a')
-     7ab:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     7ae:	50                   	push   %eax
-     7af:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     7b2:	50                   	push   %eax
-     7b3:	53                   	push   %ebx
-     7b4:	56                   	push   %esi
-     7b5:	e8 d6 fd ff ff       	call   590 <gettoken>
-     7ba:	83 c4 20             	add    $0x20,%esp
-     7bd:	83 f8 61             	cmp    $0x61,%eax
-     7c0:	75 51                	jne    813 <parseredirs+0xa3>
+     6cb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     6ce:	50                   	push   %eax
+     6cf:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     6d2:	50                   	push   %eax
+     6d3:	53                   	push   %ebx
+     6d4:	56                   	push   %esi
+     6d5:	e8 d6 fd ff ff       	call   4b0 <gettoken>
+     6da:	83 c4 20             	add    $0x20,%esp
+     6dd:	83 f8 61             	cmp    $0x61,%eax
+     6e0:	75 51                	jne    733 <parseredirs+0xa3>
       panic("missing file for redirection");
     switch(tok){
-     7c2:	83 ff 3c             	cmp    $0x3c,%edi
-     7c5:	74 31                	je     7f8 <parseredirs+0x88>
-     7c7:	83 ff 3e             	cmp    $0x3e,%edi
-     7ca:	74 05                	je     7d1 <parseredirs+0x61>
-     7cc:	83 ff 2b             	cmp    $0x2b,%edi
-     7cf:	75 b7                	jne    788 <parseredirs+0x18>
+     6e2:	83 ff 3c             	cmp    $0x3c,%edi
+     6e5:	74 31                	je     718 <parseredirs+0x88>
+     6e7:	83 ff 3e             	cmp    $0x3e,%edi
+     6ea:	74 05                	je     6f1 <parseredirs+0x61>
+     6ec:	83 ff 2b             	cmp    $0x2b,%edi
+     6ef:	75 b7                	jne    6a8 <parseredirs+0x18>
       break;
     case '>':
       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
       break;
     case '+':  // >>
       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     7d1:	83 ec 0c             	sub    $0xc,%esp
-     7d4:	6a 01                	push   $0x1
-     7d6:	68 01 02 00 00       	push   $0x201
-     7db:	ff 75 e4             	pushl  -0x1c(%ebp)
-     7de:	ff 75 e0             	pushl  -0x20(%ebp)
-     7e1:	ff 75 08             	pushl  0x8(%ebp)
-     7e4:	e8 97 fc ff ff       	call   480 <redircmd>
+     6f1:	83 ec 0c             	sub    $0xc,%esp
+     6f4:	6a 01                	push   $0x1
+     6f6:	68 01 02 00 00       	push   $0x201
+     6fb:	ff 75 e4             	pushl  -0x1c(%ebp)
+     6fe:	ff 75 e0             	pushl  -0x20(%ebp)
+     701:	ff 75 08             	pushl  0x8(%ebp)
+     704:	e8 97 fc ff ff       	call   3a0 <redircmd>
       break;
-     7e9:	83 c4 20             	add    $0x20,%esp
+     709:	83 c4 20             	add    $0x20,%esp
       cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     7ec:	89 45 08             	mov    %eax,0x8(%ebp)
+     70c:	89 45 08             	mov    %eax,0x8(%ebp)
       break;
-     7ef:	eb 97                	jmp    788 <parseredirs+0x18>
-     7f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     70f:	eb 97                	jmp    6a8 <parseredirs+0x18>
+     711:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     7f8:	83 ec 0c             	sub    $0xc,%esp
-     7fb:	6a 00                	push   $0x0
-     7fd:	6a 00                	push   $0x0
-     7ff:	eb da                	jmp    7db <parseredirs+0x6b>
-     801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     718:	83 ec 0c             	sub    $0xc,%esp
+     71b:	6a 00                	push   $0x0
+     71d:	6a 00                	push   $0x0
+     71f:	eb da                	jmp    6fb <parseredirs+0x6b>
+     721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     }
   }
   return cmd;
 }
-     808:	8b 45 08             	mov    0x8(%ebp),%eax
-     80b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     80e:	5b                   	pop    %ebx
-     80f:	5e                   	pop    %esi
-     810:	5f                   	pop    %edi
-     811:	5d                   	pop    %ebp
-     812:	c3                   	ret    
+     728:	8b 45 08             	mov    0x8(%ebp),%eax
+     72b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     72e:	5b                   	pop    %ebx
+     72f:	5e                   	pop    %esi
+     730:	5f                   	pop    %edi
+     731:	5d                   	pop    %ebp
+     732:	c3                   	ret    
       panic("missing file for redirection");
-     813:	83 ec 0c             	sub    $0xc,%esp
-     816:	68 71 13 00 00       	push   $0x1371
-     81b:	e8 20 fa ff ff       	call   240 <panic>
+     733:	83 ec 0c             	sub    $0xc,%esp
+     736:	68 8c 12 00 00       	push   $0x128c
+     73b:	e8 20 fa ff ff       	call   160 <panic>
 
-00000820 <parseexec>:
+00000740 <parseexec>:
   return cmd;
 }
 
 struct cmd*
 parseexec(char **ps, char *es)
 {
-     820:	f3 0f 1e fb          	endbr32 
-     824:	55                   	push   %ebp
-     825:	89 e5                	mov    %esp,%ebp
-     827:	57                   	push   %edi
-     828:	56                   	push   %esi
-     829:	53                   	push   %ebx
-     82a:	83 ec 30             	sub    $0x30,%esp
-     82d:	8b 75 08             	mov    0x8(%ebp),%esi
-     830:	8b 7d 0c             	mov    0xc(%ebp),%edi
+     740:	f3 0f 1e fb          	endbr32 
+     744:	55                   	push   %ebp
+     745:	89 e5                	mov    %esp,%ebp
+     747:	57                   	push   %edi
+     748:	56                   	push   %esi
+     749:	53                   	push   %ebx
+     74a:	83 ec 30             	sub    $0x30,%esp
+     74d:	8b 75 08             	mov    0x8(%ebp),%esi
+     750:	8b 7d 0c             	mov    0xc(%ebp),%edi
   char *q, *eq;
   int tok, argc;
   struct execcmd *cmd;
   struct cmd *ret;
 
   if(peek(ps, es, "("))
-     833:	68 91 13 00 00       	push   $0x1391
-     838:	57                   	push   %edi
-     839:	56                   	push   %esi
-     83a:	e8 b1 fe ff ff       	call   6f0 <peek>
-     83f:	83 c4 10             	add    $0x10,%esp
-     842:	85 c0                	test   %eax,%eax
-     844:	0f 85 96 00 00 00    	jne    8e0 <parseexec+0xc0>
-     84a:	89 c3                	mov    %eax,%ebx
+     753:	68 ac 12 00 00       	push   $0x12ac
+     758:	57                   	push   %edi
+     759:	56                   	push   %esi
+     75a:	e8 b1 fe ff ff       	call   610 <peek>
+     75f:	83 c4 10             	add    $0x10,%esp
+     762:	85 c0                	test   %eax,%eax
+     764:	0f 85 96 00 00 00    	jne    800 <parseexec+0xc0>
+     76a:	89 c3                	mov    %eax,%ebx
     return parseblock(ps, es);
 
   ret = execcmd();
-     84c:	e8 ff fb ff ff       	call   450 <execcmd>
+     76c:	e8 ff fb ff ff       	call   370 <execcmd>
   cmd = (struct execcmd*)ret;
 
   argc = 0;
   ret = parseredirs(ret, ps, es);
-     851:	83 ec 04             	sub    $0x4,%esp
-     854:	57                   	push   %edi
-     855:	56                   	push   %esi
-     856:	50                   	push   %eax
+     771:	83 ec 04             	sub    $0x4,%esp
+     774:	57                   	push   %edi
+     775:	56                   	push   %esi
+     776:	50                   	push   %eax
   ret = execcmd();
-     857:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     777:	89 45 d0             	mov    %eax,-0x30(%ebp)
   ret = parseredirs(ret, ps, es);
-     85a:	e8 11 ff ff ff       	call   770 <parseredirs>
+     77a:	e8 11 ff ff ff       	call   690 <parseredirs>
   while(!peek(ps, es, "|)&;")){
-     85f:	83 c4 10             	add    $0x10,%esp
+     77f:	83 c4 10             	add    $0x10,%esp
   ret = parseredirs(ret, ps, es);
-     862:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     782:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
-     865:	eb 1c                	jmp    883 <parseexec+0x63>
-     867:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     86e:	66 90                	xchg   %ax,%ax
+     785:	eb 1c                	jmp    7a3 <parseexec+0x63>
+     787:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     78e:	66 90                	xchg   %ax,%ax
     cmd->argv[argc] = q;
     cmd->eargv[argc] = eq;
     argc++;
     if(argc >= MAXARGS)
       panic("too many args");
     ret = parseredirs(ret, ps, es);
-     870:	83 ec 04             	sub    $0x4,%esp
-     873:	57                   	push   %edi
-     874:	56                   	push   %esi
-     875:	ff 75 d4             	pushl  -0x2c(%ebp)
-     878:	e8 f3 fe ff ff       	call   770 <parseredirs>
-     87d:	83 c4 10             	add    $0x10,%esp
-     880:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     790:	83 ec 04             	sub    $0x4,%esp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	ff 75 d4             	pushl  -0x2c(%ebp)
+     798:	e8 f3 fe ff ff       	call   690 <parseredirs>
+     79d:	83 c4 10             	add    $0x10,%esp
+     7a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   while(!peek(ps, es, "|)&;")){
-     883:	83 ec 04             	sub    $0x4,%esp
-     886:	68 a8 13 00 00       	push   $0x13a8
-     88b:	57                   	push   %edi
-     88c:	56                   	push   %esi
-     88d:	e8 5e fe ff ff       	call   6f0 <peek>
-     892:	83 c4 10             	add    $0x10,%esp
-     895:	85 c0                	test   %eax,%eax
-     897:	75 67                	jne    900 <parseexec+0xe0>
+     7a3:	83 ec 04             	sub    $0x4,%esp
+     7a6:	68 c3 12 00 00       	push   $0x12c3
+     7ab:	57                   	push   %edi
+     7ac:	56                   	push   %esi
+     7ad:	e8 5e fe ff ff       	call   610 <peek>
+     7b2:	83 c4 10             	add    $0x10,%esp
+     7b5:	85 c0                	test   %eax,%eax
+     7b7:	75 67                	jne    820 <parseexec+0xe0>
     if((tok=gettoken(ps, es, &q, &eq)) == 0)
-     899:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     89c:	50                   	push   %eax
-     89d:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     8a0:	50                   	push   %eax
-     8a1:	57                   	push   %edi
-     8a2:	56                   	push   %esi
-     8a3:	e8 e8 fc ff ff       	call   590 <gettoken>
-     8a8:	83 c4 10             	add    $0x10,%esp
-     8ab:	85 c0                	test   %eax,%eax
-     8ad:	74 51                	je     900 <parseexec+0xe0>
+     7b9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     7bc:	50                   	push   %eax
+     7bd:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     7c0:	50                   	push   %eax
+     7c1:	57                   	push   %edi
+     7c2:	56                   	push   %esi
+     7c3:	e8 e8 fc ff ff       	call   4b0 <gettoken>
+     7c8:	83 c4 10             	add    $0x10,%esp
+     7cb:	85 c0                	test   %eax,%eax
+     7cd:	74 51                	je     820 <parseexec+0xe0>
     if(tok != 'a')
-     8af:	83 f8 61             	cmp    $0x61,%eax
-     8b2:	75 6b                	jne    91f <parseexec+0xff>
+     7cf:	83 f8 61             	cmp    $0x61,%eax
+     7d2:	75 6b                	jne    83f <parseexec+0xff>
     cmd->argv[argc] = q;
-     8b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     8b7:	8b 55 d0             	mov    -0x30(%ebp),%edx
-     8ba:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+     7d4:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     7d7:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     7da:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
     cmd->eargv[argc] = eq;
-     8be:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     8c1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+     7de:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     7e1:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
     argc++;
-     8c5:	83 c3 01             	add    $0x1,%ebx
+     7e5:	83 c3 01             	add    $0x1,%ebx
     if(argc >= MAXARGS)
-     8c8:	83 fb 0a             	cmp    $0xa,%ebx
-     8cb:	75 a3                	jne    870 <parseexec+0x50>
+     7e8:	83 fb 0a             	cmp    $0xa,%ebx
+     7eb:	75 a3                	jne    790 <parseexec+0x50>
       panic("too many args");
-     8cd:	83 ec 0c             	sub    $0xc,%esp
-     8d0:	68 9a 13 00 00       	push   $0x139a
-     8d5:	e8 66 f9 ff ff       	call   240 <panic>
-     8da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     7ed:	83 ec 0c             	sub    $0xc,%esp
+     7f0:	68 b5 12 00 00       	push   $0x12b5
+     7f5:	e8 66 f9 ff ff       	call   160 <panic>
+     7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return parseblock(ps, es);
-     8e0:	83 ec 08             	sub    $0x8,%esp
-     8e3:	57                   	push   %edi
-     8e4:	56                   	push   %esi
-     8e5:	e8 66 01 00 00       	call   a50 <parseblock>
-     8ea:	83 c4 10             	add    $0x10,%esp
-     8ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+     800:	83 ec 08             	sub    $0x8,%esp
+     803:	57                   	push   %edi
+     804:	56                   	push   %esi
+     805:	e8 66 01 00 00       	call   970 <parseblock>
+     80a:	83 c4 10             	add    $0x10,%esp
+     80d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   }
   cmd->argv[argc] = 0;
   cmd->eargv[argc] = 0;
   return ret;
 }
-     8f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     8f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     8f6:	5b                   	pop    %ebx
-     8f7:	5e                   	pop    %esi
-     8f8:	5f                   	pop    %edi
-     8f9:	5d                   	pop    %ebp
-     8fa:	c3                   	ret    
-     8fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     8ff:	90                   	nop
+     810:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     813:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     816:	5b                   	pop    %ebx
+     817:	5e                   	pop    %esi
+     818:	5f                   	pop    %edi
+     819:	5d                   	pop    %ebp
+     81a:	c3                   	ret    
+     81b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     81f:	90                   	nop
   cmd->argv[argc] = 0;
-     900:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     903:	8d 04 98             	lea    (%eax,%ebx,4),%eax
-     906:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
+     820:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     823:	8d 04 98             	lea    (%eax,%ebx,4),%eax
+     826:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   cmd->eargv[argc] = 0;
-     90d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
+     82d:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
 }
-     914:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     917:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     91a:	5b                   	pop    %ebx
-     91b:	5e                   	pop    %esi
-     91c:	5f                   	pop    %edi
-     91d:	5d                   	pop    %ebp
-     91e:	c3                   	ret    
+     834:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     837:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     83a:	5b                   	pop    %ebx
+     83b:	5e                   	pop    %esi
+     83c:	5f                   	pop    %edi
+     83d:	5d                   	pop    %ebp
+     83e:	c3                   	ret    
       panic("syntax");
-     91f:	83 ec 0c             	sub    $0xc,%esp
-     922:	68 93 13 00 00       	push   $0x1393
-     927:	e8 14 f9 ff ff       	call   240 <panic>
-     92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000930 <parsepipe>:
-{
-     930:	f3 0f 1e fb          	endbr32 
-     934:	55                   	push   %ebp
-     935:	89 e5                	mov    %esp,%ebp
-     937:	57                   	push   %edi
-     938:	56                   	push   %esi
-     939:	53                   	push   %ebx
-     93a:	83 ec 14             	sub    $0x14,%esp
-     93d:	8b 75 08             	mov    0x8(%ebp),%esi
-     940:	8b 7d 0c             	mov    0xc(%ebp),%edi
+     83f:	83 ec 0c             	sub    $0xc,%esp
+     842:	68 ae 12 00 00       	push   $0x12ae
+     847:	e8 14 f9 ff ff       	call   160 <panic>
+     84c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000850 <parsepipe>:
+{
+     850:	f3 0f 1e fb          	endbr32 
+     854:	55                   	push   %ebp
+     855:	89 e5                	mov    %esp,%ebp
+     857:	57                   	push   %edi
+     858:	56                   	push   %esi
+     859:	53                   	push   %ebx
+     85a:	83 ec 14             	sub    $0x14,%esp
+     85d:	8b 75 08             	mov    0x8(%ebp),%esi
+     860:	8b 7d 0c             	mov    0xc(%ebp),%edi
   cmd = parseexec(ps, es);
-     943:	57                   	push   %edi
-     944:	56                   	push   %esi
-     945:	e8 d6 fe ff ff       	call   820 <parseexec>
+     863:	57                   	push   %edi
+     864:	56                   	push   %esi
+     865:	e8 d6 fe ff ff       	call   740 <parseexec>
   if(peek(ps, es, "|")){
-     94a:	83 c4 0c             	add    $0xc,%esp
-     94d:	68 ad 13 00 00       	push   $0x13ad
+     86a:	83 c4 0c             	add    $0xc,%esp
+     86d:	68 c8 12 00 00       	push   $0x12c8
   cmd = parseexec(ps, es);
-     952:	89 c3                	mov    %eax,%ebx
+     872:	89 c3                	mov    %eax,%ebx
   if(peek(ps, es, "|")){
-     954:	57                   	push   %edi
-     955:	56                   	push   %esi
-     956:	e8 95 fd ff ff       	call   6f0 <peek>
-     95b:	83 c4 10             	add    $0x10,%esp
-     95e:	85 c0                	test   %eax,%eax
-     960:	75 0e                	jne    970 <parsepipe+0x40>
-}
-     962:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     965:	89 d8                	mov    %ebx,%eax
-     967:	5b                   	pop    %ebx
-     968:	5e                   	pop    %esi
-     969:	5f                   	pop    %edi
-     96a:	5d                   	pop    %ebp
-     96b:	c3                   	ret    
-     96c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     874:	57                   	push   %edi
+     875:	56                   	push   %esi
+     876:	e8 95 fd ff ff       	call   610 <peek>
+     87b:	83 c4 10             	add    $0x10,%esp
+     87e:	85 c0                	test   %eax,%eax
+     880:	75 0e                	jne    890 <parsepipe+0x40>
+}
+     882:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     885:	89 d8                	mov    %ebx,%eax
+     887:	5b                   	pop    %ebx
+     888:	5e                   	pop    %esi
+     889:	5f                   	pop    %edi
+     88a:	5d                   	pop    %ebp
+     88b:	c3                   	ret    
+     88c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     gettoken(ps, es, 0, 0);
-     970:	6a 00                	push   $0x0
-     972:	6a 00                	push   $0x0
-     974:	57                   	push   %edi
-     975:	56                   	push   %esi
-     976:	e8 15 fc ff ff       	call   590 <gettoken>
+     890:	6a 00                	push   $0x0
+     892:	6a 00                	push   $0x0
+     894:	57                   	push   %edi
+     895:	56                   	push   %esi
+     896:	e8 15 fc ff ff       	call   4b0 <gettoken>
     cmd = pipecmd(cmd, parsepipe(ps, es));
-     97b:	58                   	pop    %eax
-     97c:	5a                   	pop    %edx
-     97d:	57                   	push   %edi
-     97e:	56                   	push   %esi
-     97f:	e8 ac ff ff ff       	call   930 <parsepipe>
-     984:	89 5d 08             	mov    %ebx,0x8(%ebp)
-     987:	83 c4 10             	add    $0x10,%esp
-     98a:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-     98d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     990:	5b                   	pop    %ebx
-     991:	5e                   	pop    %esi
-     992:	5f                   	pop    %edi
-     993:	5d                   	pop    %ebp
+     89b:	58                   	pop    %eax
+     89c:	5a                   	pop    %edx
+     89d:	57                   	push   %edi
+     89e:	56                   	push   %esi
+     89f:	e8 ac ff ff ff       	call   850 <parsepipe>
+     8a4:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     8a7:	83 c4 10             	add    $0x10,%esp
+     8aa:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     8ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8b0:	5b                   	pop    %ebx
+     8b1:	5e                   	pop    %esi
+     8b2:	5f                   	pop    %edi
+     8b3:	5d                   	pop    %ebp
     cmd = pipecmd(cmd, parsepipe(ps, es));
-     994:	e9 37 fb ff ff       	jmp    4d0 <pipecmd>
-     999:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8b4:	e9 37 fb ff ff       	jmp    3f0 <pipecmd>
+     8b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-000009a0 <parseline>:
+000008c0 <parseline>:
 {
-     9a0:	f3 0f 1e fb          	endbr32 
-     9a4:	55                   	push   %ebp
-     9a5:	89 e5                	mov    %esp,%ebp
-     9a7:	57                   	push   %edi
-     9a8:	56                   	push   %esi
-     9a9:	53                   	push   %ebx
-     9aa:	83 ec 14             	sub    $0x14,%esp
-     9ad:	8b 75 08             	mov    0x8(%ebp),%esi
-     9b0:	8b 7d 0c             	mov    0xc(%ebp),%edi
+     8c0:	f3 0f 1e fb          	endbr32 
+     8c4:	55                   	push   %ebp
+     8c5:	89 e5                	mov    %esp,%ebp
+     8c7:	57                   	push   %edi
+     8c8:	56                   	push   %esi
+     8c9:	53                   	push   %ebx
+     8ca:	83 ec 14             	sub    $0x14,%esp
+     8cd:	8b 75 08             	mov    0x8(%ebp),%esi
+     8d0:	8b 7d 0c             	mov    0xc(%ebp),%edi
   cmd = parsepipe(ps, es);
-     9b3:	57                   	push   %edi
-     9b4:	56                   	push   %esi
-     9b5:	e8 76 ff ff ff       	call   930 <parsepipe>
+     8d3:	57                   	push   %edi
+     8d4:	56                   	push   %esi
+     8d5:	e8 76 ff ff ff       	call   850 <parsepipe>
   while(peek(ps, es, "&")){
-     9ba:	83 c4 10             	add    $0x10,%esp
+     8da:	83 c4 10             	add    $0x10,%esp
   cmd = parsepipe(ps, es);
-     9bd:	89 c3                	mov    %eax,%ebx
+     8dd:	89 c3                	mov    %eax,%ebx
   while(peek(ps, es, "&")){
-     9bf:	eb 1f                	jmp    9e0 <parseline+0x40>
-     9c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8df:	eb 1f                	jmp    900 <parseline+0x40>
+     8e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     gettoken(ps, es, 0, 0);
-     9c8:	6a 00                	push   $0x0
-     9ca:	6a 00                	push   $0x0
-     9cc:	57                   	push   %edi
-     9cd:	56                   	push   %esi
-     9ce:	e8 bd fb ff ff       	call   590 <gettoken>
+     8e8:	6a 00                	push   $0x0
+     8ea:	6a 00                	push   $0x0
+     8ec:	57                   	push   %edi
+     8ed:	56                   	push   %esi
+     8ee:	e8 bd fb ff ff       	call   4b0 <gettoken>
     cmd = backcmd(cmd);
-     9d3:	89 1c 24             	mov    %ebx,(%esp)
-     9d6:	e8 75 fb ff ff       	call   550 <backcmd>
-     9db:	83 c4 10             	add    $0x10,%esp
-     9de:	89 c3                	mov    %eax,%ebx
+     8f3:	89 1c 24             	mov    %ebx,(%esp)
+     8f6:	e8 75 fb ff ff       	call   470 <backcmd>
+     8fb:	83 c4 10             	add    $0x10,%esp
+     8fe:	89 c3                	mov    %eax,%ebx
   while(peek(ps, es, "&")){
-     9e0:	83 ec 04             	sub    $0x4,%esp
-     9e3:	68 af 13 00 00       	push   $0x13af
-     9e8:	57                   	push   %edi
-     9e9:	56                   	push   %esi
-     9ea:	e8 01 fd ff ff       	call   6f0 <peek>
-     9ef:	83 c4 10             	add    $0x10,%esp
-     9f2:	85 c0                	test   %eax,%eax
-     9f4:	75 d2                	jne    9c8 <parseline+0x28>
+     900:	83 ec 04             	sub    $0x4,%esp
+     903:	68 ca 12 00 00       	push   $0x12ca
+     908:	57                   	push   %edi
+     909:	56                   	push   %esi
+     90a:	e8 01 fd ff ff       	call   610 <peek>
+     90f:	83 c4 10             	add    $0x10,%esp
+     912:	85 c0                	test   %eax,%eax
+     914:	75 d2                	jne    8e8 <parseline+0x28>
   if(peek(ps, es, ";")){
-     9f6:	83 ec 04             	sub    $0x4,%esp
-     9f9:	68 ab 13 00 00       	push   $0x13ab
-     9fe:	57                   	push   %edi
-     9ff:	56                   	push   %esi
-     a00:	e8 eb fc ff ff       	call   6f0 <peek>
-     a05:	83 c4 10             	add    $0x10,%esp
-     a08:	85 c0                	test   %eax,%eax
-     a0a:	75 14                	jne    a20 <parseline+0x80>
-}
-     a0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     a0f:	89 d8                	mov    %ebx,%eax
-     a11:	5b                   	pop    %ebx
-     a12:	5e                   	pop    %esi
-     a13:	5f                   	pop    %edi
-     a14:	5d                   	pop    %ebp
-     a15:	c3                   	ret    
-     a16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     a1d:	8d 76 00             	lea    0x0(%esi),%esi
+     916:	83 ec 04             	sub    $0x4,%esp
+     919:	68 c6 12 00 00       	push   $0x12c6
+     91e:	57                   	push   %edi
+     91f:	56                   	push   %esi
+     920:	e8 eb fc ff ff       	call   610 <peek>
+     925:	83 c4 10             	add    $0x10,%esp
+     928:	85 c0                	test   %eax,%eax
+     92a:	75 14                	jne    940 <parseline+0x80>
+}
+     92c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     92f:	89 d8                	mov    %ebx,%eax
+     931:	5b                   	pop    %ebx
+     932:	5e                   	pop    %esi
+     933:	5f                   	pop    %edi
+     934:	5d                   	pop    %ebp
+     935:	c3                   	ret    
+     936:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     93d:	8d 76 00             	lea    0x0(%esi),%esi
     gettoken(ps, es, 0, 0);
-     a20:	6a 00                	push   $0x0
-     a22:	6a 00                	push   $0x0
-     a24:	57                   	push   %edi
-     a25:	56                   	push   %esi
-     a26:	e8 65 fb ff ff       	call   590 <gettoken>
+     940:	6a 00                	push   $0x0
+     942:	6a 00                	push   $0x0
+     944:	57                   	push   %edi
+     945:	56                   	push   %esi
+     946:	e8 65 fb ff ff       	call   4b0 <gettoken>
     cmd = listcmd(cmd, parseline(ps, es));
-     a2b:	58                   	pop    %eax
-     a2c:	5a                   	pop    %edx
-     a2d:	57                   	push   %edi
-     a2e:	56                   	push   %esi
-     a2f:	e8 6c ff ff ff       	call   9a0 <parseline>
-     a34:	89 5d 08             	mov    %ebx,0x8(%ebp)
-     a37:	83 c4 10             	add    $0x10,%esp
-     a3a:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-     a3d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     a40:	5b                   	pop    %ebx
-     a41:	5e                   	pop    %esi
-     a42:	5f                   	pop    %edi
-     a43:	5d                   	pop    %ebp
+     94b:	58                   	pop    %eax
+     94c:	5a                   	pop    %edx
+     94d:	57                   	push   %edi
+     94e:	56                   	push   %esi
+     94f:	e8 6c ff ff ff       	call   8c0 <parseline>
+     954:	89 5d 08             	mov    %ebx,0x8(%ebp)
+     957:	83 c4 10             	add    $0x10,%esp
+     95a:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+     95d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     960:	5b                   	pop    %ebx
+     961:	5e                   	pop    %esi
+     962:	5f                   	pop    %edi
+     963:	5d                   	pop    %ebp
     cmd = listcmd(cmd, parseline(ps, es));
-     a44:	e9 c7 fa ff ff       	jmp    510 <listcmd>
-     a49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     964:	e9 c7 fa ff ff       	jmp    430 <listcmd>
+     969:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-00000a50 <parseblock>:
+00000970 <parseblock>:
 {
-     a50:	f3 0f 1e fb          	endbr32 
-     a54:	55                   	push   %ebp
-     a55:	89 e5                	mov    %esp,%ebp
-     a57:	57                   	push   %edi
-     a58:	56                   	push   %esi
-     a59:	53                   	push   %ebx
-     a5a:	83 ec 10             	sub    $0x10,%esp
-     a5d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     a60:	8b 75 0c             	mov    0xc(%ebp),%esi
+     970:	f3 0f 1e fb          	endbr32 
+     974:	55                   	push   %ebp
+     975:	89 e5                	mov    %esp,%ebp
+     977:	57                   	push   %edi
+     978:	56                   	push   %esi
+     979:	53                   	push   %ebx
+     97a:	83 ec 10             	sub    $0x10,%esp
+     97d:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     980:	8b 75 0c             	mov    0xc(%ebp),%esi
   if(!peek(ps, es, "("))
-     a63:	68 91 13 00 00       	push   $0x1391
-     a68:	56                   	push   %esi
-     a69:	53                   	push   %ebx
-     a6a:	e8 81 fc ff ff       	call   6f0 <peek>
-     a6f:	83 c4 10             	add    $0x10,%esp
-     a72:	85 c0                	test   %eax,%eax
-     a74:	74 4a                	je     ac0 <parseblock+0x70>
+     983:	68 ac 12 00 00       	push   $0x12ac
+     988:	56                   	push   %esi
+     989:	53                   	push   %ebx
+     98a:	e8 81 fc ff ff       	call   610 <peek>
+     98f:	83 c4 10             	add    $0x10,%esp
+     992:	85 c0                	test   %eax,%eax
+     994:	74 4a                	je     9e0 <parseblock+0x70>
   gettoken(ps, es, 0, 0);
-     a76:	6a 00                	push   $0x0
-     a78:	6a 00                	push   $0x0
-     a7a:	56                   	push   %esi
-     a7b:	53                   	push   %ebx
-     a7c:	e8 0f fb ff ff       	call   590 <gettoken>
+     996:	6a 00                	push   $0x0
+     998:	6a 00                	push   $0x0
+     99a:	56                   	push   %esi
+     99b:	53                   	push   %ebx
+     99c:	e8 0f fb ff ff       	call   4b0 <gettoken>
   cmd = parseline(ps, es);
-     a81:	58                   	pop    %eax
-     a82:	5a                   	pop    %edx
-     a83:	56                   	push   %esi
-     a84:	53                   	push   %ebx
-     a85:	e8 16 ff ff ff       	call   9a0 <parseline>
+     9a1:	58                   	pop    %eax
+     9a2:	5a                   	pop    %edx
+     9a3:	56                   	push   %esi
+     9a4:	53                   	push   %ebx
+     9a5:	e8 16 ff ff ff       	call   8c0 <parseline>
   if(!peek(ps, es, ")"))
-     a8a:	83 c4 0c             	add    $0xc,%esp
-     a8d:	68 cd 13 00 00       	push   $0x13cd
+     9aa:	83 c4 0c             	add    $0xc,%esp
+     9ad:	68 e8 12 00 00       	push   $0x12e8
   cmd = parseline(ps, es);
-     a92:	89 c7                	mov    %eax,%edi
+     9b2:	89 c7                	mov    %eax,%edi
   if(!peek(ps, es, ")"))
-     a94:	56                   	push   %esi
-     a95:	53                   	push   %ebx
-     a96:	e8 55 fc ff ff       	call   6f0 <peek>
-     a9b:	83 c4 10             	add    $0x10,%esp
-     a9e:	85 c0                	test   %eax,%eax
-     aa0:	74 2b                	je     acd <parseblock+0x7d>
+     9b4:	56                   	push   %esi
+     9b5:	53                   	push   %ebx
+     9b6:	e8 55 fc ff ff       	call   610 <peek>
+     9bb:	83 c4 10             	add    $0x10,%esp
+     9be:	85 c0                	test   %eax,%eax
+     9c0:	74 2b                	je     9ed <parseblock+0x7d>
   gettoken(ps, es, 0, 0);
-     aa2:	6a 00                	push   $0x0
-     aa4:	6a 00                	push   $0x0
-     aa6:	56                   	push   %esi
-     aa7:	53                   	push   %ebx
-     aa8:	e8 e3 fa ff ff       	call   590 <gettoken>
+     9c2:	6a 00                	push   $0x0
+     9c4:	6a 00                	push   $0x0
+     9c6:	56                   	push   %esi
+     9c7:	53                   	push   %ebx
+     9c8:	e8 e3 fa ff ff       	call   4b0 <gettoken>
   cmd = parseredirs(cmd, ps, es);
-     aad:	83 c4 0c             	add    $0xc,%esp
-     ab0:	56                   	push   %esi
-     ab1:	53                   	push   %ebx
-     ab2:	57                   	push   %edi
-     ab3:	e8 b8 fc ff ff       	call   770 <parseredirs>
-}
-     ab8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     abb:	5b                   	pop    %ebx
-     abc:	5e                   	pop    %esi
-     abd:	5f                   	pop    %edi
-     abe:	5d                   	pop    %ebp
-     abf:	c3                   	ret    
+     9cd:	83 c4 0c             	add    $0xc,%esp
+     9d0:	56                   	push   %esi
+     9d1:	53                   	push   %ebx
+     9d2:	57                   	push   %edi
+     9d3:	e8 b8 fc ff ff       	call   690 <parseredirs>
+}
+     9d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9db:	5b                   	pop    %ebx
+     9dc:	5e                   	pop    %esi
+     9dd:	5f                   	pop    %edi
+     9de:	5d                   	pop    %ebp
+     9df:	c3                   	ret    
     panic("parseblock");
-     ac0:	83 ec 0c             	sub    $0xc,%esp
-     ac3:	68 b1 13 00 00       	push   $0x13b1
-     ac8:	e8 73 f7 ff ff       	call   240 <panic>
+     9e0:	83 ec 0c             	sub    $0xc,%esp
+     9e3:	68 cc 12 00 00       	push   $0x12cc
+     9e8:	e8 73 f7 ff ff       	call   160 <panic>
     panic("syntax - missing )");
-     acd:	83 ec 0c             	sub    $0xc,%esp
-     ad0:	68 bc 13 00 00       	push   $0x13bc
-     ad5:	e8 66 f7 ff ff       	call   240 <panic>
-     ada:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     9ed:	83 ec 0c             	sub    $0xc,%esp
+     9f0:	68 d7 12 00 00       	push   $0x12d7
+     9f5:	e8 66 f7 ff ff       	call   160 <panic>
+     9fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000ae0 <nulterminate>:
+00000a00 <nulterminate>:
 
 // NUL-terminate all the counted strings.
 struct cmd*
 nulterminate(struct cmd *cmd)
 {
-     ae0:	f3 0f 1e fb          	endbr32 
-     ae4:	55                   	push   %ebp
-     ae5:	89 e5                	mov    %esp,%ebp
-     ae7:	53                   	push   %ebx
-     ae8:	83 ec 04             	sub    $0x4,%esp
-     aeb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a00:	f3 0f 1e fb          	endbr32 
+     a04:	55                   	push   %ebp
+     a05:	89 e5                	mov    %esp,%ebp
+     a07:	53                   	push   %ebx
+     a08:	83 ec 04             	sub    $0x4,%esp
+     a0b:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct execcmd *ecmd;
   struct listcmd *lcmd;
   struct pipecmd *pcmd;
   struct redircmd *rcmd;
 
   if(cmd == 0)
-     aee:	85 db                	test   %ebx,%ebx
-     af0:	0f 84 9a 00 00 00    	je     b90 <nulterminate+0xb0>
+     a0e:	85 db                	test   %ebx,%ebx
+     a10:	0f 84 9a 00 00 00    	je     ab0 <nulterminate+0xb0>
     return 0;
 
   switch(cmd->type){
-     af6:	83 3b 05             	cmpl   $0x5,(%ebx)
-     af9:	77 6d                	ja     b68 <nulterminate+0x88>
-     afb:	8b 03                	mov    (%ebx),%eax
-     afd:	3e ff 24 85 0c 14 00 	notrack jmp *0x140c(,%eax,4)
-     b04:	00 
-     b05:	8d 76 00             	lea    0x0(%esi),%esi
+     a16:	83 3b 05             	cmpl   $0x5,(%ebx)
+     a19:	77 6d                	ja     a88 <nulterminate+0x88>
+     a1b:	8b 03                	mov    (%ebx),%eax
+     a1d:	3e ff 24 85 28 13 00 	notrack jmp *0x1328(,%eax,4)
+     a24:	00 
+     a25:	8d 76 00             	lea    0x0(%esi),%esi
     nulterminate(pcmd->right);
     break;
 
   case LIST:
     lcmd = (struct listcmd*)cmd;
     nulterminate(lcmd->left);
-     b08:	83 ec 0c             	sub    $0xc,%esp
-     b0b:	ff 73 04             	pushl  0x4(%ebx)
-     b0e:	e8 cd ff ff ff       	call   ae0 <nulterminate>
+     a28:	83 ec 0c             	sub    $0xc,%esp
+     a2b:	ff 73 04             	pushl  0x4(%ebx)
+     a2e:	e8 cd ff ff ff       	call   a00 <nulterminate>
     nulterminate(lcmd->right);
-     b13:	58                   	pop    %eax
-     b14:	ff 73 08             	pushl  0x8(%ebx)
-     b17:	e8 c4 ff ff ff       	call   ae0 <nulterminate>
+     a33:	58                   	pop    %eax
+     a34:	ff 73 08             	pushl  0x8(%ebx)
+     a37:	e8 c4 ff ff ff       	call   a00 <nulterminate>
     break;
-     b1c:	83 c4 10             	add    $0x10,%esp
-     b1f:	89 d8                	mov    %ebx,%eax
+     a3c:	83 c4 10             	add    $0x10,%esp
+     a3f:	89 d8                	mov    %ebx,%eax
     bcmd = (struct backcmd*)cmd;
     nulterminate(bcmd->cmd);
     break;
   }
   return cmd;
 }
-     b21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b24:	c9                   	leave  
-     b25:	c3                   	ret    
-     b26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     b2d:	8d 76 00             	lea    0x0(%esi),%esi
+     a41:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a44:	c9                   	leave  
+     a45:	c3                   	ret    
+     a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a4d:	8d 76 00             	lea    0x0(%esi),%esi
     nulterminate(bcmd->cmd);
-     b30:	83 ec 0c             	sub    $0xc,%esp
-     b33:	ff 73 04             	pushl  0x4(%ebx)
-     b36:	e8 a5 ff ff ff       	call   ae0 <nulterminate>
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 73 04             	pushl  0x4(%ebx)
+     a56:	e8 a5 ff ff ff       	call   a00 <nulterminate>
     break;
-     b3b:	89 d8                	mov    %ebx,%eax
-     b3d:	83 c4 10             	add    $0x10,%esp
+     a5b:	89 d8                	mov    %ebx,%eax
+     a5d:	83 c4 10             	add    $0x10,%esp
 }
-     b40:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b43:	c9                   	leave  
-     b44:	c3                   	ret    
-     b45:	8d 76 00             	lea    0x0(%esi),%esi
+     a60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a63:	c9                   	leave  
+     a64:	c3                   	ret    
+     a65:	8d 76 00             	lea    0x0(%esi),%esi
     for(i=0; ecmd->argv[i]; i++)
-     b48:	8b 4b 04             	mov    0x4(%ebx),%ecx
-     b4b:	8d 43 08             	lea    0x8(%ebx),%eax
-     b4e:	85 c9                	test   %ecx,%ecx
-     b50:	74 16                	je     b68 <nulterminate+0x88>
-     b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     a68:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     a6b:	8d 43 08             	lea    0x8(%ebx),%eax
+     a6e:	85 c9                	test   %ecx,%ecx
+     a70:	74 16                	je     a88 <nulterminate+0x88>
+     a72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       *ecmd->eargv[i] = 0;
-     b58:	8b 50 24             	mov    0x24(%eax),%edx
-     b5b:	83 c0 04             	add    $0x4,%eax
-     b5e:	c6 02 00             	movb   $0x0,(%edx)
+     a78:	8b 50 24             	mov    0x24(%eax),%edx
+     a7b:	83 c0 04             	add    $0x4,%eax
+     a7e:	c6 02 00             	movb   $0x0,(%edx)
     for(i=0; ecmd->argv[i]; i++)
-     b61:	8b 50 fc             	mov    -0x4(%eax),%edx
-     b64:	85 d2                	test   %edx,%edx
-     b66:	75 f0                	jne    b58 <nulterminate+0x78>
+     a81:	8b 50 fc             	mov    -0x4(%eax),%edx
+     a84:	85 d2                	test   %edx,%edx
+     a86:	75 f0                	jne    a78 <nulterminate+0x78>
   switch(cmd->type){
-     b68:	89 d8                	mov    %ebx,%eax
+     a88:	89 d8                	mov    %ebx,%eax
 }
-     b6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b6d:	c9                   	leave  
-     b6e:	c3                   	ret    
-     b6f:	90                   	nop
+     a8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     a8d:	c9                   	leave  
+     a8e:	c3                   	ret    
+     a8f:	90                   	nop
     nulterminate(rcmd->cmd);
-     b70:	83 ec 0c             	sub    $0xc,%esp
-     b73:	ff 73 04             	pushl  0x4(%ebx)
-     b76:	e8 65 ff ff ff       	call   ae0 <nulterminate>
+     a90:	83 ec 0c             	sub    $0xc,%esp
+     a93:	ff 73 04             	pushl  0x4(%ebx)
+     a96:	e8 65 ff ff ff       	call   a00 <nulterminate>
     *rcmd->efile = 0;
-     b7b:	8b 43 0c             	mov    0xc(%ebx),%eax
+     a9b:	8b 43 0c             	mov    0xc(%ebx),%eax
     break;
-     b7e:	83 c4 10             	add    $0x10,%esp
+     a9e:	83 c4 10             	add    $0x10,%esp
     *rcmd->efile = 0;
-     b81:	c6 00 00             	movb   $0x0,(%eax)
+     aa1:	c6 00 00             	movb   $0x0,(%eax)
     break;
-     b84:	89 d8                	mov    %ebx,%eax
+     aa4:	89 d8                	mov    %ebx,%eax
 }
-     b86:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b89:	c9                   	leave  
-     b8a:	c3                   	ret    
-     b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     b8f:	90                   	nop
+     aa6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     aa9:	c9                   	leave  
+     aaa:	c3                   	ret    
+     aab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     aaf:	90                   	nop
     return 0;
-     b90:	31 c0                	xor    %eax,%eax
-     b92:	eb 8d                	jmp    b21 <nulterminate+0x41>
-     b94:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     b9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     b9f:	90                   	nop
-
-00000ba0 <parsecmd>:
-{
-     ba0:	f3 0f 1e fb          	endbr32 
-     ba4:	55                   	push   %ebp
-     ba5:	89 e5                	mov    %esp,%ebp
-     ba7:	56                   	push   %esi
-     ba8:	53                   	push   %ebx
+     ab0:	31 c0                	xor    %eax,%eax
+     ab2:	eb 8d                	jmp    a41 <nulterminate+0x41>
+     ab4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     abb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     abf:	90                   	nop
+
+00000ac0 <parsecmd>:
+{
+     ac0:	f3 0f 1e fb          	endbr32 
+     ac4:	55                   	push   %ebp
+     ac5:	89 e5                	mov    %esp,%ebp
+     ac7:	56                   	push   %esi
+     ac8:	53                   	push   %ebx
   es = s + strlen(s);
-     ba9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     bac:	83 ec 0c             	sub    $0xc,%esp
-     baf:	53                   	push   %ebx
-     bb0:	e8 db 00 00 00       	call   c90 <strlen>
+     ac9:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     acc:	83 ec 0c             	sub    $0xc,%esp
+     acf:	53                   	push   %ebx
+     ad0:	e8 db 00 00 00       	call   bb0 <strlen>
   cmd = parseline(&s, es);
-     bb5:	59                   	pop    %ecx
-     bb6:	5e                   	pop    %esi
+     ad5:	59                   	pop    %ecx
+     ad6:	5e                   	pop    %esi
   es = s + strlen(s);
-     bb7:	01 c3                	add    %eax,%ebx
+     ad7:	01 c3                	add    %eax,%ebx
   cmd = parseline(&s, es);
-     bb9:	8d 45 08             	lea    0x8(%ebp),%eax
-     bbc:	53                   	push   %ebx
-     bbd:	50                   	push   %eax
-     bbe:	e8 dd fd ff ff       	call   9a0 <parseline>
+     ad9:	8d 45 08             	lea    0x8(%ebp),%eax
+     adc:	53                   	push   %ebx
+     add:	50                   	push   %eax
+     ade:	e8 dd fd ff ff       	call   8c0 <parseline>
   peek(&s, es, "");
-     bc3:	83 c4 0c             	add    $0xc,%esp
+     ae3:	83 c4 0c             	add    $0xc,%esp
   cmd = parseline(&s, es);
-     bc6:	89 c6                	mov    %eax,%esi
+     ae6:	89 c6                	mov    %eax,%esi
   peek(&s, es, "");
-     bc8:	8d 45 08             	lea    0x8(%ebp),%eax
-     bcb:	68 3f 13 00 00       	push   $0x133f
-     bd0:	53                   	push   %ebx
-     bd1:	50                   	push   %eax
-     bd2:	e8 19 fb ff ff       	call   6f0 <peek>
+     ae8:	8d 45 08             	lea    0x8(%ebp),%eax
+     aeb:	68 71 12 00 00       	push   $0x1271
+     af0:	53                   	push   %ebx
+     af1:	50                   	push   %eax
+     af2:	e8 19 fb ff ff       	call   610 <peek>
   if(s != es){
-     bd7:	8b 45 08             	mov    0x8(%ebp),%eax
-     bda:	83 c4 10             	add    $0x10,%esp
-     bdd:	39 d8                	cmp    %ebx,%eax
-     bdf:	75 12                	jne    bf3 <parsecmd+0x53>
+     af7:	8b 45 08             	mov    0x8(%ebp),%eax
+     afa:	83 c4 10             	add    $0x10,%esp
+     afd:	39 d8                	cmp    %ebx,%eax
+     aff:	75 12                	jne    b13 <parsecmd+0x53>
   nulterminate(cmd);
-     be1:	83 ec 0c             	sub    $0xc,%esp
-     be4:	56                   	push   %esi
-     be5:	e8 f6 fe ff ff       	call   ae0 <nulterminate>
-}
-     bea:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     bed:	89 f0                	mov    %esi,%eax
-     bef:	5b                   	pop    %ebx
-     bf0:	5e                   	pop    %esi
-     bf1:	5d                   	pop    %ebp
-     bf2:	c3                   	ret    
+     b01:	83 ec 0c             	sub    $0xc,%esp
+     b04:	56                   	push   %esi
+     b05:	e8 f6 fe ff ff       	call   a00 <nulterminate>
+}
+     b0a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     b0d:	89 f0                	mov    %esi,%eax
+     b0f:	5b                   	pop    %ebx
+     b10:	5e                   	pop    %esi
+     b11:	5d                   	pop    %ebp
+     b12:	c3                   	ret    
     printf(2, "leftovers: %s\n", s);
-     bf3:	52                   	push   %edx
-     bf4:	50                   	push   %eax
-     bf5:	68 cf 13 00 00       	push   $0x13cf
-     bfa:	6a 02                	push   $0x2
-     bfc:	e8 cf 03 00 00       	call   fd0 <printf>
+     b13:	52                   	push   %edx
+     b14:	50                   	push   %eax
+     b15:	68 ea 12 00 00       	push   $0x12ea
+     b1a:	6a 02                	push   $0x2
+     b1c:	e8 cf 03 00 00       	call   ef0 <printf>
     panic("syntax");
-     c01:	c7 04 24 93 13 00 00 	movl   $0x1393,(%esp)
-     c08:	e8 33 f6 ff ff       	call   240 <panic>
-     c0d:	66 90                	xchg   %ax,%ax
-     c0f:	90                   	nop
+     b21:	c7 04 24 ae 12 00 00 	movl   $0x12ae,(%esp)
+     b28:	e8 33 f6 ff ff       	call   160 <panic>
+     b2d:	66 90                	xchg   %ax,%ax
+     b2f:	90                   	nop
 
-00000c10 <strcpy>:
+00000b30 <strcpy>:
 #include "user.h"
 #include "x86.h"
 
 char*
 strcpy(char *s, const char *t)
 {
-     c10:	f3 0f 1e fb          	endbr32 
-     c14:	55                   	push   %ebp
+     b30:	f3 0f 1e fb          	endbr32 
+     b34:	55                   	push   %ebp
   char *os;
 
   os = s;
   while((*s++ = *t++) != 0)
-     c15:	31 c0                	xor    %eax,%eax
+     b35:	31 c0                	xor    %eax,%eax
 {
-     c17:	89 e5                	mov    %esp,%ebp
-     c19:	53                   	push   %ebx
-     c1a:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     c1d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     b37:	89 e5                	mov    %esp,%ebp
+     b39:	53                   	push   %ebx
+     b3a:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b3d:	8b 5d 0c             	mov    0xc(%ebp),%ebx
   while((*s++ = *t++) != 0)
-     c20:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-     c24:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-     c27:	83 c0 01             	add    $0x1,%eax
-     c2a:	84 d2                	test   %dl,%dl
-     c2c:	75 f2                	jne    c20 <strcpy+0x10>
+     b40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     b44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     b47:	83 c0 01             	add    $0x1,%eax
+     b4a:	84 d2                	test   %dl,%dl
+     b4c:	75 f2                	jne    b40 <strcpy+0x10>
     ;
   return os;
 }
-     c2e:	89 c8                	mov    %ecx,%eax
-     c30:	5b                   	pop    %ebx
-     c31:	5d                   	pop    %ebp
-     c32:	c3                   	ret    
-     c33:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     c3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b4e:	89 c8                	mov    %ecx,%eax
+     b50:	5b                   	pop    %ebx
+     b51:	5d                   	pop    %ebp
+     b52:	c3                   	ret    
+     b53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000c40 <strcmp>:
+00000b60 <strcmp>:
 
 int
 strcmp(const char *p, const char *q)
 {
-     c40:	f3 0f 1e fb          	endbr32 
-     c44:	55                   	push   %ebp
-     c45:	89 e5                	mov    %esp,%ebp
-     c47:	53                   	push   %ebx
-     c48:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     c4b:	8b 55 0c             	mov    0xc(%ebp),%edx
+     b60:	f3 0f 1e fb          	endbr32 
+     b64:	55                   	push   %ebp
+     b65:	89 e5                	mov    %esp,%ebp
+     b67:	53                   	push   %ebx
+     b68:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     b6b:	8b 55 0c             	mov    0xc(%ebp),%edx
   while(*p && *p == *q)
-     c4e:	0f b6 01             	movzbl (%ecx),%eax
-     c51:	0f b6 1a             	movzbl (%edx),%ebx
-     c54:	84 c0                	test   %al,%al
-     c56:	75 19                	jne    c71 <strcmp+0x31>
-     c58:	eb 26                	jmp    c80 <strcmp+0x40>
-     c5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     c60:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
+     b6e:	0f b6 01             	movzbl (%ecx),%eax
+     b71:	0f b6 1a             	movzbl (%edx),%ebx
+     b74:	84 c0                	test   %al,%al
+     b76:	75 19                	jne    b91 <strcmp+0x31>
+     b78:	eb 26                	jmp    ba0 <strcmp+0x40>
+     b7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     b80:	0f b6 41 01          	movzbl 0x1(%ecx),%eax
     p++, q++;
-     c64:	83 c1 01             	add    $0x1,%ecx
-     c67:	83 c2 01             	add    $0x1,%edx
+     b84:	83 c1 01             	add    $0x1,%ecx
+     b87:	83 c2 01             	add    $0x1,%edx
   while(*p && *p == *q)
-     c6a:	0f b6 1a             	movzbl (%edx),%ebx
-     c6d:	84 c0                	test   %al,%al
-     c6f:	74 0f                	je     c80 <strcmp+0x40>
-     c71:	38 d8                	cmp    %bl,%al
-     c73:	74 eb                	je     c60 <strcmp+0x20>
+     b8a:	0f b6 1a             	movzbl (%edx),%ebx
+     b8d:	84 c0                	test   %al,%al
+     b8f:	74 0f                	je     ba0 <strcmp+0x40>
+     b91:	38 d8                	cmp    %bl,%al
+     b93:	74 eb                	je     b80 <strcmp+0x20>
   return (uchar)*p - (uchar)*q;
-     c75:	29 d8                	sub    %ebx,%eax
+     b95:	29 d8                	sub    %ebx,%eax
 }
-     c77:	5b                   	pop    %ebx
-     c78:	5d                   	pop    %ebp
-     c79:	c3                   	ret    
-     c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-     c80:	31 c0                	xor    %eax,%eax
+     b97:	5b                   	pop    %ebx
+     b98:	5d                   	pop    %ebp
+     b99:	c3                   	ret    
+     b9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     ba0:	31 c0                	xor    %eax,%eax
   return (uchar)*p - (uchar)*q;
-     c82:	29 d8                	sub    %ebx,%eax
+     ba2:	29 d8                	sub    %ebx,%eax
 }
-     c84:	5b                   	pop    %ebx
-     c85:	5d                   	pop    %ebp
-     c86:	c3                   	ret    
-     c87:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     c8e:	66 90                	xchg   %ax,%ax
+     ba4:	5b                   	pop    %ebx
+     ba5:	5d                   	pop    %ebp
+     ba6:	c3                   	ret    
+     ba7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bae:	66 90                	xchg   %ax,%ax
 
-00000c90 <strlen>:
+00000bb0 <strlen>:
 
 uint
 strlen(const char *s)
 {
-     c90:	f3 0f 1e fb          	endbr32 
-     c94:	55                   	push   %ebp
-     c95:	89 e5                	mov    %esp,%ebp
-     c97:	8b 55 08             	mov    0x8(%ebp),%edx
+     bb0:	f3 0f 1e fb          	endbr32 
+     bb4:	55                   	push   %ebp
+     bb5:	89 e5                	mov    %esp,%ebp
+     bb7:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   for(n = 0; s[n]; n++)
-     c9a:	80 3a 00             	cmpb   $0x0,(%edx)
-     c9d:	74 21                	je     cc0 <strlen+0x30>
-     c9f:	31 c0                	xor    %eax,%eax
-     ca1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     ca8:	83 c0 01             	add    $0x1,%eax
-     cab:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-     caf:	89 c1                	mov    %eax,%ecx
-     cb1:	75 f5                	jne    ca8 <strlen+0x18>
+     bba:	80 3a 00             	cmpb   $0x0,(%edx)
+     bbd:	74 21                	je     be0 <strlen+0x30>
+     bbf:	31 c0                	xor    %eax,%eax
+     bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bc8:	83 c0 01             	add    $0x1,%eax
+     bcb:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     bcf:	89 c1                	mov    %eax,%ecx
+     bd1:	75 f5                	jne    bc8 <strlen+0x18>
     ;
   return n;
 }
-     cb3:	89 c8                	mov    %ecx,%eax
-     cb5:	5d                   	pop    %ebp
-     cb6:	c3                   	ret    
-     cb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     cbe:	66 90                	xchg   %ax,%ax
+     bd3:	89 c8                	mov    %ecx,%eax
+     bd5:	5d                   	pop    %ebp
+     bd6:	c3                   	ret    
+     bd7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bde:	66 90                	xchg   %ax,%ax
   for(n = 0; s[n]; n++)
-     cc0:	31 c9                	xor    %ecx,%ecx
+     be0:	31 c9                	xor    %ecx,%ecx
 }
-     cc2:	5d                   	pop    %ebp
-     cc3:	89 c8                	mov    %ecx,%eax
-     cc5:	c3                   	ret    
-     cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     ccd:	8d 76 00             	lea    0x0(%esi),%esi
+     be2:	5d                   	pop    %ebp
+     be3:	89 c8                	mov    %ecx,%eax
+     be5:	c3                   	ret    
+     be6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bed:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000cd0 <memset>:
+00000bf0 <memset>:
 
 void*
 memset(void *dst, int c, uint n)
 {
-     cd0:	f3 0f 1e fb          	endbr32 
-     cd4:	55                   	push   %ebp
-     cd5:	89 e5                	mov    %esp,%ebp
-     cd7:	57                   	push   %edi
-     cd8:	8b 55 08             	mov    0x8(%ebp),%edx
+     bf0:	f3 0f 1e fb          	endbr32 
+     bf4:	55                   	push   %ebp
+     bf5:	89 e5                	mov    %esp,%ebp
+     bf7:	57                   	push   %edi
+     bf8:	8b 55 08             	mov    0x8(%ebp),%edx
 }
 
 static inline void
 stosb(void *addr, int data, int cnt)
 {
   asm volatile("cld; rep stosb" :
-     cdb:	8b 4d 10             	mov    0x10(%ebp),%ecx
-     cde:	8b 45 0c             	mov    0xc(%ebp),%eax
-     ce1:	89 d7                	mov    %edx,%edi
-     ce3:	fc                   	cld    
-     ce4:	f3 aa                	rep stos %al,%es:(%edi)
+     bfb:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     bfe:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c01:	89 d7                	mov    %edx,%edi
+     c03:	fc                   	cld    
+     c04:	f3 aa                	rep stos %al,%es:(%edi)
   stosb(dst, c, n);
   return dst;
 }
-     ce6:	89 d0                	mov    %edx,%eax
-     ce8:	5f                   	pop    %edi
-     ce9:	5d                   	pop    %ebp
-     cea:	c3                   	ret    
-     ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     cef:	90                   	nop
+     c06:	89 d0                	mov    %edx,%eax
+     c08:	5f                   	pop    %edi
+     c09:	5d                   	pop    %ebp
+     c0a:	c3                   	ret    
+     c0b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c0f:	90                   	nop
 
-00000cf0 <strchr>:
+00000c10 <strchr>:
 
 char*
 strchr(const char *s, char c)
 {
-     cf0:	f3 0f 1e fb          	endbr32 
-     cf4:	55                   	push   %ebp
-     cf5:	89 e5                	mov    %esp,%ebp
-     cf7:	8b 45 08             	mov    0x8(%ebp),%eax
-     cfa:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+     c10:	f3 0f 1e fb          	endbr32 
+     c14:	55                   	push   %ebp
+     c15:	89 e5                	mov    %esp,%ebp
+     c17:	8b 45 08             	mov    0x8(%ebp),%eax
+     c1a:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
   for(; *s; s++)
-     cfe:	0f b6 10             	movzbl (%eax),%edx
-     d01:	84 d2                	test   %dl,%dl
-     d03:	75 16                	jne    d1b <strchr+0x2b>
-     d05:	eb 21                	jmp    d28 <strchr+0x38>
-     d07:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     d0e:	66 90                	xchg   %ax,%ax
-     d10:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-     d14:	83 c0 01             	add    $0x1,%eax
-     d17:	84 d2                	test   %dl,%dl
-     d19:	74 0d                	je     d28 <strchr+0x38>
+     c1e:	0f b6 10             	movzbl (%eax),%edx
+     c21:	84 d2                	test   %dl,%dl
+     c23:	75 16                	jne    c3b <strchr+0x2b>
+     c25:	eb 21                	jmp    c48 <strchr+0x38>
+     c27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c2e:	66 90                	xchg   %ax,%ax
+     c30:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     c34:	83 c0 01             	add    $0x1,%eax
+     c37:	84 d2                	test   %dl,%dl
+     c39:	74 0d                	je     c48 <strchr+0x38>
     if(*s == c)
-     d1b:	38 d1                	cmp    %dl,%cl
-     d1d:	75 f1                	jne    d10 <strchr+0x20>
+     c3b:	38 d1                	cmp    %dl,%cl
+     c3d:	75 f1                	jne    c30 <strchr+0x20>
       return (char*)s;
   return 0;
 }
-     d1f:	5d                   	pop    %ebp
-     d20:	c3                   	ret    
-     d21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c3f:	5d                   	pop    %ebp
+     c40:	c3                   	ret    
+     c41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   return 0;
-     d28:	31 c0                	xor    %eax,%eax
+     c48:	31 c0                	xor    %eax,%eax
 }
-     d2a:	5d                   	pop    %ebp
-     d2b:	c3                   	ret    
-     d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c4a:	5d                   	pop    %ebp
+     c4b:	c3                   	ret    
+     c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00000d30 <gets>:
+00000c50 <gets>:
 
 char*
 gets(char *buf, int max)
 {
-     d30:	f3 0f 1e fb          	endbr32 
-     d34:	55                   	push   %ebp
-     d35:	89 e5                	mov    %esp,%ebp
-     d37:	57                   	push   %edi
-     d38:	56                   	push   %esi
+     c50:	f3 0f 1e fb          	endbr32 
+     c54:	55                   	push   %ebp
+     c55:	89 e5                	mov    %esp,%ebp
+     c57:	57                   	push   %edi
+     c58:	56                   	push   %esi
   int i, cc;
   char c;
 
   for(i=0; i+1 < max; ){
-     d39:	31 f6                	xor    %esi,%esi
+     c59:	31 f6                	xor    %esi,%esi
 {
-     d3b:	53                   	push   %ebx
-     d3c:	89 f3                	mov    %esi,%ebx
-     d3e:	83 ec 1c             	sub    $0x1c,%esp
-     d41:	8b 7d 08             	mov    0x8(%ebp),%edi
+     c5b:	53                   	push   %ebx
+     c5c:	89 f3                	mov    %esi,%ebx
+     c5e:	83 ec 1c             	sub    $0x1c,%esp
+     c61:	8b 7d 08             	mov    0x8(%ebp),%edi
   for(i=0; i+1 < max; ){
-     d44:	eb 33                	jmp    d79 <gets+0x49>
-     d46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     d4d:	8d 76 00             	lea    0x0(%esi),%esi
+     c64:	eb 33                	jmp    c99 <gets+0x49>
+     c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
     cc = read(0, &c, 1);
-     d50:	83 ec 04             	sub    $0x4,%esp
-     d53:	8d 45 e7             	lea    -0x19(%ebp),%eax
-     d56:	6a 01                	push   $0x1
-     d58:	50                   	push   %eax
-     d59:	6a 00                	push   $0x0
-     d5b:	e8 2b 01 00 00       	call   e8b <read>
+     c70:	83 ec 04             	sub    $0x4,%esp
+     c73:	8d 45 e7             	lea    -0x19(%ebp),%eax
+     c76:	6a 01                	push   $0x1
+     c78:	50                   	push   %eax
+     c79:	6a 00                	push   $0x0
+     c7b:	e8 2b 01 00 00       	call   dab <read>
     if(cc < 1)
-     d60:	83 c4 10             	add    $0x10,%esp
-     d63:	85 c0                	test   %eax,%eax
-     d65:	7e 1c                	jle    d83 <gets+0x53>
+     c80:	83 c4 10             	add    $0x10,%esp
+     c83:	85 c0                	test   %eax,%eax
+     c85:	7e 1c                	jle    ca3 <gets+0x53>
       break;
     buf[i++] = c;
-     d67:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-     d6b:	83 c7 01             	add    $0x1,%edi
-     d6e:	88 47 ff             	mov    %al,-0x1(%edi)
+     c87:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     c8b:	83 c7 01             	add    $0x1,%edi
+     c8e:	88 47 ff             	mov    %al,-0x1(%edi)
     if(c == '\n' || c == '\r')
-     d71:	3c 0a                	cmp    $0xa,%al
-     d73:	74 23                	je     d98 <gets+0x68>
-     d75:	3c 0d                	cmp    $0xd,%al
-     d77:	74 1f                	je     d98 <gets+0x68>
+     c91:	3c 0a                	cmp    $0xa,%al
+     c93:	74 23                	je     cb8 <gets+0x68>
+     c95:	3c 0d                	cmp    $0xd,%al
+     c97:	74 1f                	je     cb8 <gets+0x68>
   for(i=0; i+1 < max; ){
-     d79:	83 c3 01             	add    $0x1,%ebx
-     d7c:	89 fe                	mov    %edi,%esi
-     d7e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-     d81:	7c cd                	jl     d50 <gets+0x20>
-     d83:	89 f3                	mov    %esi,%ebx
+     c99:	83 c3 01             	add    $0x1,%ebx
+     c9c:	89 fe                	mov    %edi,%esi
+     c9e:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     ca1:	7c cd                	jl     c70 <gets+0x20>
+     ca3:	89 f3                	mov    %esi,%ebx
       break;
   }
   buf[i] = '\0';
   return buf;
 }
-     d85:	8b 45 08             	mov    0x8(%ebp),%eax
+     ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   buf[i] = '\0';
-     d88:	c6 03 00             	movb   $0x0,(%ebx)
+     ca8:	c6 03 00             	movb   $0x0,(%ebx)
 }
-     d8b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     d8e:	5b                   	pop    %ebx
-     d8f:	5e                   	pop    %esi
-     d90:	5f                   	pop    %edi
-     d91:	5d                   	pop    %ebp
-     d92:	c3                   	ret    
-     d93:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     d97:	90                   	nop
-     d98:	8b 75 08             	mov    0x8(%ebp),%esi
-     d9b:	8b 45 08             	mov    0x8(%ebp),%eax
-     d9e:	01 de                	add    %ebx,%esi
-     da0:	89 f3                	mov    %esi,%ebx
+     cab:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cae:	5b                   	pop    %ebx
+     caf:	5e                   	pop    %esi
+     cb0:	5f                   	pop    %edi
+     cb1:	5d                   	pop    %ebp
+     cb2:	c3                   	ret    
+     cb3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cb7:	90                   	nop
+     cb8:	8b 75 08             	mov    0x8(%ebp),%esi
+     cbb:	8b 45 08             	mov    0x8(%ebp),%eax
+     cbe:	01 de                	add    %ebx,%esi
+     cc0:	89 f3                	mov    %esi,%ebx
   buf[i] = '\0';
-     da2:	c6 03 00             	movb   $0x0,(%ebx)
+     cc2:	c6 03 00             	movb   $0x0,(%ebx)
 }
-     da5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     da8:	5b                   	pop    %ebx
-     da9:	5e                   	pop    %esi
-     daa:	5f                   	pop    %edi
-     dab:	5d                   	pop    %ebp
-     dac:	c3                   	ret    
-     dad:	8d 76 00             	lea    0x0(%esi),%esi
+     cc5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cc8:	5b                   	pop    %ebx
+     cc9:	5e                   	pop    %esi
+     cca:	5f                   	pop    %edi
+     ccb:	5d                   	pop    %ebp
+     ccc:	c3                   	ret    
+     ccd:	8d 76 00             	lea    0x0(%esi),%esi
 
-00000db0 <stat>:
+00000cd0 <stat>:
 
 int
 stat(const char *n, struct stat *st)
 {
-     db0:	f3 0f 1e fb          	endbr32 
-     db4:	55                   	push   %ebp
-     db5:	89 e5                	mov    %esp,%ebp
-     db7:	56                   	push   %esi
-     db8:	53                   	push   %ebx
+     cd0:	f3 0f 1e fb          	endbr32 
+     cd4:	55                   	push   %ebp
+     cd5:	89 e5                	mov    %esp,%ebp
+     cd7:	56                   	push   %esi
+     cd8:	53                   	push   %ebx
   int fd;
   int r;
 
   fd = open(n, O_RDONLY);
-     db9:	83 ec 08             	sub    $0x8,%esp
-     dbc:	6a 00                	push   $0x0
-     dbe:	ff 75 08             	pushl  0x8(%ebp)
-     dc1:	e8 ed 00 00 00       	call   eb3 <open>
+     cd9:	83 ec 08             	sub    $0x8,%esp
+     cdc:	6a 00                	push   $0x0
+     cde:	ff 75 08             	pushl  0x8(%ebp)
+     ce1:	e8 ed 00 00 00       	call   dd3 <open>
   if(fd < 0)
-     dc6:	83 c4 10             	add    $0x10,%esp
-     dc9:	85 c0                	test   %eax,%eax
-     dcb:	78 2b                	js     df8 <stat+0x48>
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	85 c0                	test   %eax,%eax
+     ceb:	78 2b                	js     d18 <stat+0x48>
     return -1;
   r = fstat(fd, st);
-     dcd:	83 ec 08             	sub    $0x8,%esp
-     dd0:	ff 75 0c             	pushl  0xc(%ebp)
-     dd3:	89 c3                	mov    %eax,%ebx
-     dd5:	50                   	push   %eax
-     dd6:	e8 f0 00 00 00       	call   ecb <fstat>
+     ced:	83 ec 08             	sub    $0x8,%esp
+     cf0:	ff 75 0c             	pushl  0xc(%ebp)
+     cf3:	89 c3                	mov    %eax,%ebx
+     cf5:	50                   	push   %eax
+     cf6:	e8 f0 00 00 00       	call   deb <fstat>
   close(fd);
-     ddb:	89 1c 24             	mov    %ebx,(%esp)
+     cfb:	89 1c 24             	mov    %ebx,(%esp)
   r = fstat(fd, st);
-     dde:	89 c6                	mov    %eax,%esi
+     cfe:	89 c6                	mov    %eax,%esi
   close(fd);
-     de0:	e8 b6 00 00 00       	call   e9b <close>
+     d00:	e8 b6 00 00 00       	call   dbb <close>
   return r;
-     de5:	83 c4 10             	add    $0x10,%esp
+     d05:	83 c4 10             	add    $0x10,%esp
 }
-     de8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     deb:	89 f0                	mov    %esi,%eax
-     ded:	5b                   	pop    %ebx
-     dee:	5e                   	pop    %esi
-     def:	5d                   	pop    %ebp
-     df0:	c3                   	ret    
-     df1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d08:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d0b:	89 f0                	mov    %esi,%eax
+     d0d:	5b                   	pop    %ebx
+     d0e:	5e                   	pop    %esi
+     d0f:	5d                   	pop    %ebp
+     d10:	c3                   	ret    
+     d11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-     df8:	be ff ff ff ff       	mov    $0xffffffff,%esi
-     dfd:	eb e9                	jmp    de8 <stat+0x38>
-     dff:	90                   	nop
+     d18:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     d1d:	eb e9                	jmp    d08 <stat+0x38>
+     d1f:	90                   	nop
 
-00000e00 <atoi>:
+00000d20 <atoi>:
 
 int
 atoi(const char *s)
 {
-     e00:	f3 0f 1e fb          	endbr32 
-     e04:	55                   	push   %ebp
-     e05:	89 e5                	mov    %esp,%ebp
-     e07:	53                   	push   %ebx
-     e08:	8b 55 08             	mov    0x8(%ebp),%edx
+     d20:	f3 0f 1e fb          	endbr32 
+     d24:	55                   	push   %ebp
+     d25:	89 e5                	mov    %esp,%ebp
+     d27:	53                   	push   %ebx
+     d28:	8b 55 08             	mov    0x8(%ebp),%edx
   int n;
 
   n = 0;
   while('0' <= *s && *s <= '9')
-     e0b:	0f be 02             	movsbl (%edx),%eax
-     e0e:	8d 48 d0             	lea    -0x30(%eax),%ecx
-     e11:	80 f9 09             	cmp    $0x9,%cl
+     d2b:	0f be 02             	movsbl (%edx),%eax
+     d2e:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     d31:	80 f9 09             	cmp    $0x9,%cl
   n = 0;
-     e14:	b9 00 00 00 00       	mov    $0x0,%ecx
+     d34:	b9 00 00 00 00       	mov    $0x0,%ecx
   while('0' <= *s && *s <= '9')
-     e19:	77 1a                	ja     e35 <atoi+0x35>
-     e1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     e1f:	90                   	nop
+     d39:	77 1a                	ja     d55 <atoi+0x35>
+     d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     d3f:	90                   	nop
     n = n*10 + *s++ - '0';
-     e20:	83 c2 01             	add    $0x1,%edx
-     e23:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-     e26:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+     d40:	83 c2 01             	add    $0x1,%edx
+     d43:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     d46:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
   while('0' <= *s && *s <= '9')
-     e2a:	0f be 02             	movsbl (%edx),%eax
-     e2d:	8d 58 d0             	lea    -0x30(%eax),%ebx
-     e30:	80 fb 09             	cmp    $0x9,%bl
-     e33:	76 eb                	jbe    e20 <atoi+0x20>
+     d4a:	0f be 02             	movsbl (%edx),%eax
+     d4d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     d50:	80 fb 09             	cmp    $0x9,%bl
+     d53:	76 eb                	jbe    d40 <atoi+0x20>
   return n;
 }
-     e35:	89 c8                	mov    %ecx,%eax
-     e37:	5b                   	pop    %ebx
-     e38:	5d                   	pop    %ebp
-     e39:	c3                   	ret    
-     e3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     d55:	89 c8                	mov    %ecx,%eax
+     d57:	5b                   	pop    %ebx
+     d58:	5d                   	pop    %ebp
+     d59:	c3                   	ret    
+     d5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-00000e40 <memmove>:
+00000d60 <memmove>:
 
 void*
 memmove(void *vdst, const void *vsrc, int n)
 {
-     e40:	f3 0f 1e fb          	endbr32 
-     e44:	55                   	push   %ebp
-     e45:	89 e5                	mov    %esp,%ebp
-     e47:	57                   	push   %edi
-     e48:	8b 45 10             	mov    0x10(%ebp),%eax
-     e4b:	8b 55 08             	mov    0x8(%ebp),%edx
-     e4e:	56                   	push   %esi
-     e4f:	8b 75 0c             	mov    0xc(%ebp),%esi
+     d60:	f3 0f 1e fb          	endbr32 
+     d64:	55                   	push   %ebp
+     d65:	89 e5                	mov    %esp,%ebp
+     d67:	57                   	push   %edi
+     d68:	8b 45 10             	mov    0x10(%ebp),%eax
+     d6b:	8b 55 08             	mov    0x8(%ebp),%edx
+     d6e:	56                   	push   %esi
+     d6f:	8b 75 0c             	mov    0xc(%ebp),%esi
   char *dst;
   const char *src;
 
   dst = vdst;
   src = vsrc;
   while(n-- > 0)
-     e52:	85 c0                	test   %eax,%eax
-     e54:	7e 0f                	jle    e65 <memmove+0x25>
-     e56:	01 d0                	add    %edx,%eax
+     d72:	85 c0                	test   %eax,%eax
+     d74:	7e 0f                	jle    d85 <memmove+0x25>
+     d76:	01 d0                	add    %edx,%eax
   dst = vdst;
-     e58:	89 d7                	mov    %edx,%edi
-     e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+     d78:	89 d7                	mov    %edx,%edi
+     d7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     *dst++ = *src++;
-     e60:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+     d80:	a4                   	movsb  %ds:(%esi),%es:(%edi)
   while(n-- > 0)
-     e61:	39 f8                	cmp    %edi,%eax
-     e63:	75 fb                	jne    e60 <memmove+0x20>
+     d81:	39 f8                	cmp    %edi,%eax
+     d83:	75 fb                	jne    d80 <memmove+0x20>
   return vdst;
 }
-     e65:	5e                   	pop    %esi
-     e66:	89 d0                	mov    %edx,%eax
-     e68:	5f                   	pop    %edi
-     e69:	5d                   	pop    %ebp
-     e6a:	c3                   	ret    
+     d85:	5e                   	pop    %esi
+     d86:	89 d0                	mov    %edx,%eax
+     d88:	5f                   	pop    %edi
+     d89:	5d                   	pop    %ebp
+     d8a:	c3                   	ret    
 
-00000e6b <fork>:
+00000d8b <fork>:
   name: \
     movl $SYS_ ## name, %eax; \
     int $T_SYSCALL; \
     ret
 
 SYSCALL(fork)
-     e6b:	b8 01 00 00 00       	mov    $0x1,%eax
-     e70:	cd 40                	int    $0x40
-     e72:	c3                   	ret    
+     d8b:	b8 01 00 00 00       	mov    $0x1,%eax
+     d90:	cd 40                	int    $0x40
+     d92:	c3                   	ret    
 
-00000e73 <exit>:
+00000d93 <exit>:
 SYSCALL(exit)
-     e73:	b8 02 00 00 00       	mov    $0x2,%eax
-     e78:	cd 40                	int    $0x40
-     e7a:	c3                   	ret    
+     d93:	b8 02 00 00 00       	mov    $0x2,%eax
+     d98:	cd 40                	int    $0x40
+     d9a:	c3                   	ret    
 
-00000e7b <wait>:
+00000d9b <wait>:
 SYSCALL(wait)
-     e7b:	b8 03 00 00 00       	mov    $0x3,%eax
-     e80:	cd 40                	int    $0x40
-     e82:	c3                   	ret    
+     d9b:	b8 03 00 00 00       	mov    $0x3,%eax
+     da0:	cd 40                	int    $0x40
+     da2:	c3                   	ret    
 
-00000e83 <pipe>:
+00000da3 <pipe>:
 SYSCALL(pipe)
-     e83:	b8 04 00 00 00       	mov    $0x4,%eax
-     e88:	cd 40                	int    $0x40
-     e8a:	c3                   	ret    
+     da3:	b8 04 00 00 00       	mov    $0x4,%eax
+     da8:	cd 40                	int    $0x40
+     daa:	c3                   	ret    
 
-00000e8b <read>:
+00000dab <read>:
 SYSCALL(read)
-     e8b:	b8 05 00 00 00       	mov    $0x5,%eax
-     e90:	cd 40                	int    $0x40
-     e92:	c3                   	ret    
+     dab:	b8 05 00 00 00       	mov    $0x5,%eax
+     db0:	cd 40                	int    $0x40
+     db2:	c3                   	ret    
 
-00000e93 <write>:
+00000db3 <write>:
 SYSCALL(write)
-     e93:	b8 10 00 00 00       	mov    $0x10,%eax
-     e98:	cd 40                	int    $0x40
-     e9a:	c3                   	ret    
+     db3:	b8 10 00 00 00       	mov    $0x10,%eax
+     db8:	cd 40                	int    $0x40
+     dba:	c3                   	ret    
 
-00000e9b <close>:
+00000dbb <close>:
 SYSCALL(close)
-     e9b:	b8 15 00 00 00       	mov    $0x15,%eax
-     ea0:	cd 40                	int    $0x40
-     ea2:	c3                   	ret    
+     dbb:	b8 15 00 00 00       	mov    $0x15,%eax
+     dc0:	cd 40                	int    $0x40
+     dc2:	c3                   	ret    
 
-00000ea3 <kill>:
+00000dc3 <kill>:
 SYSCALL(kill)
-     ea3:	b8 06 00 00 00       	mov    $0x6,%eax
-     ea8:	cd 40                	int    $0x40
-     eaa:	c3                   	ret    
+     dc3:	b8 06 00 00 00       	mov    $0x6,%eax
+     dc8:	cd 40                	int    $0x40
+     dca:	c3                   	ret    
 
-00000eab <exec>:
+00000dcb <exec>:
 SYSCALL(exec)
-     eab:	b8 07 00 00 00       	mov    $0x7,%eax
-     eb0:	cd 40                	int    $0x40
-     eb2:	c3                   	ret    
+     dcb:	b8 07 00 00 00       	mov    $0x7,%eax
+     dd0:	cd 40                	int    $0x40
+     dd2:	c3                   	ret    
 
-00000eb3 <open>:
+00000dd3 <open>:
 SYSCALL(open)
-     eb3:	b8 0f 00 00 00       	mov    $0xf,%eax
-     eb8:	cd 40                	int    $0x40
-     eba:	c3                   	ret    
+     dd3:	b8 0f 00 00 00       	mov    $0xf,%eax
+     dd8:	cd 40                	int    $0x40
+     dda:	c3                   	ret    
 
-00000ebb <mknod>:
+00000ddb <mknod>:
 SYSCALL(mknod)
-     ebb:	b8 11 00 00 00       	mov    $0x11,%eax
-     ec0:	cd 40                	int    $0x40
-     ec2:	c3                   	ret    
+     ddb:	b8 11 00 00 00       	mov    $0x11,%eax
+     de0:	cd 40                	int    $0x40
+     de2:	c3                   	ret    
 
-00000ec3 <unlink>:
+00000de3 <unlink>:
 SYSCALL(unlink)
-     ec3:	b8 12 00 00 00       	mov    $0x12,%eax
-     ec8:	cd 40                	int    $0x40
-     eca:	c3                   	ret    
+     de3:	b8 12 00 00 00       	mov    $0x12,%eax
+     de8:	cd 40                	int    $0x40
+     dea:	c3                   	ret    
 
-00000ecb <fstat>:
+00000deb <fstat>:
 SYSCALL(fstat)
-     ecb:	b8 08 00 00 00       	mov    $0x8,%eax
-     ed0:	cd 40                	int    $0x40
-     ed2:	c3                   	ret    
+     deb:	b8 08 00 00 00       	mov    $0x8,%eax
+     df0:	cd 40                	int    $0x40
+     df2:	c3                   	ret    
 
-00000ed3 <link>:
+00000df3 <link>:
 SYSCALL(link)
-     ed3:	b8 13 00 00 00       	mov    $0x13,%eax
-     ed8:	cd 40                	int    $0x40
-     eda:	c3                   	ret    
+     df3:	b8 13 00 00 00       	mov    $0x13,%eax
+     df8:	cd 40                	int    $0x40
+     dfa:	c3                   	ret    
 
-00000edb <mkdir>:
+00000dfb <mkdir>:
 SYSCALL(mkdir)
-     edb:	b8 14 00 00 00       	mov    $0x14,%eax
-     ee0:	cd 40                	int    $0x40
-     ee2:	c3                   	ret    
+     dfb:	b8 14 00 00 00       	mov    $0x14,%eax
+     e00:	cd 40                	int    $0x40
+     e02:	c3                   	ret    
 
-00000ee3 <chdir>:
+00000e03 <chdir>:
 SYSCALL(chdir)
-     ee3:	b8 09 00 00 00       	mov    $0x9,%eax
-     ee8:	cd 40                	int    $0x40
-     eea:	c3                   	ret    
+     e03:	b8 09 00 00 00       	mov    $0x9,%eax
+     e08:	cd 40                	int    $0x40
+     e0a:	c3                   	ret    
 
-00000eeb <dup>:
+00000e0b <dup>:
 SYSCALL(dup)
-     eeb:	b8 0a 00 00 00       	mov    $0xa,%eax
-     ef0:	cd 40                	int    $0x40
-     ef2:	c3                   	ret    
+     e0b:	b8 0a 00 00 00       	mov    $0xa,%eax
+     e10:	cd 40                	int    $0x40
+     e12:	c3                   	ret    
 
-00000ef3 <getpid>:
+00000e13 <getpid>:
 SYSCALL(getpid)
-     ef3:	b8 0b 00 00 00       	mov    $0xb,%eax
-     ef8:	cd 40                	int    $0x40
-     efa:	c3                   	ret    
+     e13:	b8 0b 00 00 00       	mov    $0xb,%eax
+     e18:	cd 40                	int    $0x40
+     e1a:	c3                   	ret    
 
-00000efb <sbrk>:
+00000e1b <sbrk>:
 SYSCALL(sbrk)
-     efb:	b8 0c 00 00 00       	mov    $0xc,%eax
-     f00:	cd 40                	int    $0x40
-     f02:	c3                   	ret    
+     e1b:	b8 0c 00 00 00       	mov    $0xc,%eax
+     e20:	cd 40                	int    $0x40
+     e22:	c3                   	ret    
 
-00000f03 <sleep>:
+00000e23 <sleep>:
 SYSCALL(sleep)
-     f03:	b8 0d 00 00 00       	mov    $0xd,%eax
-     f08:	cd 40                	int    $0x40
-     f0a:	c3                   	ret    
+     e23:	b8 0d 00 00 00       	mov    $0xd,%eax
+     e28:	cd 40                	int    $0x40
+     e2a:	c3                   	ret    
 
-00000f0b <uptime>:
+00000e2b <uptime>:
 SYSCALL(uptime)
-     f0b:	b8 0e 00 00 00       	mov    $0xe,%eax
-     f10:	cd 40                	int    $0x40
-     f12:	c3                   	ret    
-
-00000f13 <history>:
-//marco
-SYSCALL(history)
-     f13:	b8 16 00 00 00       	mov    $0x16,%eax
-     f18:	cd 40                	int    $0x40
-     f1a:	c3                   	ret    
-     f1b:	66 90                	xchg   %ax,%ax
-     f1d:	66 90                	xchg   %ax,%ax
-     f1f:	90                   	nop
+     e2b:	b8 0e 00 00 00       	mov    $0xe,%eax
+     e30:	cd 40                	int    $0x40
+     e32:	c3                   	ret    
+     e33:	66 90                	xchg   %ax,%ax
+     e35:	66 90                	xchg   %ax,%ax
+     e37:	66 90                	xchg   %ax,%ax
+     e39:	66 90                	xchg   %ax,%ax
+     e3b:	66 90                	xchg   %ax,%ax
+     e3d:	66 90                	xchg   %ax,%ax
+     e3f:	90                   	nop
 
-00000f20 <printint>:
+00000e40 <printint>:
   write(fd, &c, 1);
 }
 
 static void
 printint(int fd, int xx, int base, int sgn)
 {
-     f20:	55                   	push   %ebp
-     f21:	89 e5                	mov    %esp,%ebp
-     f23:	57                   	push   %edi
-     f24:	56                   	push   %esi
-     f25:	53                   	push   %ebx
-     f26:	83 ec 3c             	sub    $0x3c,%esp
-     f29:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+     e40:	55                   	push   %ebp
+     e41:	89 e5                	mov    %esp,%ebp
+     e43:	57                   	push   %edi
+     e44:	56                   	push   %esi
+     e45:	53                   	push   %ebx
+     e46:	83 ec 3c             	sub    $0x3c,%esp
+     e49:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
   uint x;
 
   neg = 0;
   if(sgn && xx < 0){
     neg = 1;
     x = -xx;
-     f2c:	89 d1                	mov    %edx,%ecx
+     e4c:	89 d1                	mov    %edx,%ecx
 {
-     f2e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+     e4e:	89 45 b8             	mov    %eax,-0x48(%ebp)
   if(sgn && xx < 0){
-     f31:	85 d2                	test   %edx,%edx
-     f33:	0f 89 7f 00 00 00    	jns    fb8 <printint+0x98>
-     f39:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     f3d:	74 79                	je     fb8 <printint+0x98>
+     e51:	85 d2                	test   %edx,%edx
+     e53:	0f 89 7f 00 00 00    	jns    ed8 <printint+0x98>
+     e59:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     e5d:	74 79                	je     ed8 <printint+0x98>
     neg = 1;
-     f3f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+     e5f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
     x = -xx;
-     f46:	f7 d9                	neg    %ecx
+     e66:	f7 d9                	neg    %ecx
   } else {
     x = xx;
   }
 
   i = 0;
-     f48:	31 db                	xor    %ebx,%ebx
-     f4a:	8d 75 d7             	lea    -0x29(%ebp),%esi
-     f4d:	8d 76 00             	lea    0x0(%esi),%esi
+     e68:	31 db                	xor    %ebx,%ebx
+     e6a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     e6d:	8d 76 00             	lea    0x0(%esi),%esi
   do{
     buf[i++] = digits[x % base];
-     f50:	89 c8                	mov    %ecx,%eax
-     f52:	31 d2                	xor    %edx,%edx
-     f54:	89 cf                	mov    %ecx,%edi
-     f56:	f7 75 c4             	divl   -0x3c(%ebp)
-     f59:	0f b6 92 2c 14 00 00 	movzbl 0x142c(%edx),%edx
-     f60:	89 45 c0             	mov    %eax,-0x40(%ebp)
-     f63:	89 d8                	mov    %ebx,%eax
-     f65:	8d 5b 01             	lea    0x1(%ebx),%ebx
+     e70:	89 c8                	mov    %ecx,%eax
+     e72:	31 d2                	xor    %edx,%edx
+     e74:	89 cf                	mov    %ecx,%edi
+     e76:	f7 75 c4             	divl   -0x3c(%ebp)
+     e79:	0f b6 92 48 13 00 00 	movzbl 0x1348(%edx),%edx
+     e80:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     e83:	89 d8                	mov    %ebx,%eax
+     e85:	8d 5b 01             	lea    0x1(%ebx),%ebx
   }while((x /= base) != 0);
-     f68:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+     e88:	8b 4d c0             	mov    -0x40(%ebp),%ecx
     buf[i++] = digits[x % base];
-     f6b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+     e8b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
   }while((x /= base) != 0);
-     f6e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
-     f71:	76 dd                	jbe    f50 <printint+0x30>
+     e8e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     e91:	76 dd                	jbe    e70 <printint+0x30>
   if(neg)
-     f73:	8b 4d bc             	mov    -0x44(%ebp),%ecx
-     f76:	85 c9                	test   %ecx,%ecx
-     f78:	74 0c                	je     f86 <printint+0x66>
+     e93:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     e96:	85 c9                	test   %ecx,%ecx
+     e98:	74 0c                	je     ea6 <printint+0x66>
     buf[i++] = '-';
-     f7a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+     e9a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
     buf[i++] = digits[x % base];
-     f7f:	89 d8                	mov    %ebx,%eax
+     e9f:	89 d8                	mov    %ebx,%eax
     buf[i++] = '-';
-     f81:	ba 2d 00 00 00       	mov    $0x2d,%edx
+     ea1:	ba 2d 00 00 00       	mov    $0x2d,%edx
 
   while(--i >= 0)
-     f86:	8b 7d b8             	mov    -0x48(%ebp),%edi
-     f89:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
-     f8d:	eb 07                	jmp    f96 <printint+0x76>
-     f8f:	90                   	nop
-     f90:	0f b6 13             	movzbl (%ebx),%edx
-     f93:	83 eb 01             	sub    $0x1,%ebx
+     ea6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     ea9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     ead:	eb 07                	jmp    eb6 <printint+0x76>
+     eaf:	90                   	nop
+     eb0:	0f b6 13             	movzbl (%ebx),%edx
+     eb3:	83 eb 01             	sub    $0x1,%ebx
   write(fd, &c, 1);
-     f96:	83 ec 04             	sub    $0x4,%esp
-     f99:	88 55 d7             	mov    %dl,-0x29(%ebp)
-     f9c:	6a 01                	push   $0x1
-     f9e:	56                   	push   %esi
-     f9f:	57                   	push   %edi
-     fa0:	e8 ee fe ff ff       	call   e93 <write>
+     eb6:	83 ec 04             	sub    $0x4,%esp
+     eb9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     ebc:	6a 01                	push   $0x1
+     ebe:	56                   	push   %esi
+     ebf:	57                   	push   %edi
+     ec0:	e8 ee fe ff ff       	call   db3 <write>
   while(--i >= 0)
-     fa5:	83 c4 10             	add    $0x10,%esp
-     fa8:	39 de                	cmp    %ebx,%esi
-     faa:	75 e4                	jne    f90 <printint+0x70>
+     ec5:	83 c4 10             	add    $0x10,%esp
+     ec8:	39 de                	cmp    %ebx,%esi
+     eca:	75 e4                	jne    eb0 <printint+0x70>
     putc(fd, buf[i]);
 }
-     fac:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     faf:	5b                   	pop    %ebx
-     fb0:	5e                   	pop    %esi
-     fb1:	5f                   	pop    %edi
-     fb2:	5d                   	pop    %ebp
-     fb3:	c3                   	ret    
-     fb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ecc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ecf:	5b                   	pop    %ebx
+     ed0:	5e                   	pop    %esi
+     ed1:	5f                   	pop    %edi
+     ed2:	5d                   	pop    %ebp
+     ed3:	c3                   	ret    
+     ed4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   neg = 0;
-     fb8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
-     fbf:	eb 87                	jmp    f48 <printint+0x28>
-     fc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fc8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     fcf:	90                   	nop
+     ed8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     edf:	eb 87                	jmp    e68 <printint+0x28>
+     ee1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ee8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     eef:	90                   	nop
 
-00000fd0 <printf>:
+00000ef0 <printf>:
 
 // Print to the given fd. Only understands %d, %x, %p, %s.
 void
 printf(int fd, const char *fmt, ...)
 {
-     fd0:	f3 0f 1e fb          	endbr32 
-     fd4:	55                   	push   %ebp
-     fd5:	89 e5                	mov    %esp,%ebp
-     fd7:	57                   	push   %edi
-     fd8:	56                   	push   %esi
-     fd9:	53                   	push   %ebx
-     fda:	83 ec 2c             	sub    $0x2c,%esp
+     ef0:	f3 0f 1e fb          	endbr32 
+     ef4:	55                   	push   %ebp
+     ef5:	89 e5                	mov    %esp,%ebp
+     ef7:	57                   	push   %edi
+     ef8:	56                   	push   %esi
+     ef9:	53                   	push   %ebx
+     efa:	83 ec 2c             	sub    $0x2c,%esp
   int c, i, state;
   uint *ap;
 
   state = 0;
   ap = (uint*)(void*)&fmt + 1;
   for(i = 0; fmt[i]; i++){
-     fdd:	8b 75 0c             	mov    0xc(%ebp),%esi
-     fe0:	0f b6 1e             	movzbl (%esi),%ebx
-     fe3:	84 db                	test   %bl,%bl
-     fe5:	0f 84 b4 00 00 00    	je     109f <printf+0xcf>
+     efd:	8b 75 0c             	mov    0xc(%ebp),%esi
+     f00:	0f b6 1e             	movzbl (%esi),%ebx
+     f03:	84 db                	test   %bl,%bl
+     f05:	0f 84 b4 00 00 00    	je     fbf <printf+0xcf>
   ap = (uint*)(void*)&fmt + 1;
-     feb:	8d 45 10             	lea    0x10(%ebp),%eax
-     fee:	83 c6 01             	add    $0x1,%esi
+     f0b:	8d 45 10             	lea    0x10(%ebp),%eax
+     f0e:	83 c6 01             	add    $0x1,%esi
   write(fd, &c, 1);
-     ff1:	8d 7d e7             	lea    -0x19(%ebp),%edi
+     f11:	8d 7d e7             	lea    -0x19(%ebp),%edi
   state = 0;
-     ff4:	31 d2                	xor    %edx,%edx
+     f14:	31 d2                	xor    %edx,%edx
   ap = (uint*)(void*)&fmt + 1;
-     ff6:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     ff9:	eb 33                	jmp    102e <printf+0x5e>
-     ffb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-     fff:	90                   	nop
-    1000:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f16:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     f19:	eb 33                	jmp    f4e <printf+0x5e>
+     f1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     f1f:	90                   	nop
+     f20:	89 55 d4             	mov    %edx,-0x2c(%ebp)
     c = fmt[i] & 0xff;
     if(state == 0){
       if(c == '%'){
         state = '%';
-    1003:	ba 25 00 00 00       	mov    $0x25,%edx
+     f23:	ba 25 00 00 00       	mov    $0x25,%edx
       if(c == '%'){
-    1008:	83 f8 25             	cmp    $0x25,%eax
-    100b:	74 17                	je     1024 <printf+0x54>
+     f28:	83 f8 25             	cmp    $0x25,%eax
+     f2b:	74 17                	je     f44 <printf+0x54>
   write(fd, &c, 1);
-    100d:	83 ec 04             	sub    $0x4,%esp
-    1010:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    1013:	6a 01                	push   $0x1
-    1015:	57                   	push   %edi
-    1016:	ff 75 08             	pushl  0x8(%ebp)
-    1019:	e8 75 fe ff ff       	call   e93 <write>
-    101e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f2d:	83 ec 04             	sub    $0x4,%esp
+     f30:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f33:	6a 01                	push   $0x1
+     f35:	57                   	push   %edi
+     f36:	ff 75 08             	pushl  0x8(%ebp)
+     f39:	e8 75 fe ff ff       	call   db3 <write>
+     f3e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
       } else {
         putc(fd, c);
-    1021:	83 c4 10             	add    $0x10,%esp
+     f41:	83 c4 10             	add    $0x10,%esp
   for(i = 0; fmt[i]; i++){
-    1024:	0f b6 1e             	movzbl (%esi),%ebx
-    1027:	83 c6 01             	add    $0x1,%esi
-    102a:	84 db                	test   %bl,%bl
-    102c:	74 71                	je     109f <printf+0xcf>
+     f44:	0f b6 1e             	movzbl (%esi),%ebx
+     f47:	83 c6 01             	add    $0x1,%esi
+     f4a:	84 db                	test   %bl,%bl
+     f4c:	74 71                	je     fbf <printf+0xcf>
     c = fmt[i] & 0xff;
-    102e:	0f be cb             	movsbl %bl,%ecx
-    1031:	0f b6 c3             	movzbl %bl,%eax
+     f4e:	0f be cb             	movsbl %bl,%ecx
+     f51:	0f b6 c3             	movzbl %bl,%eax
     if(state == 0){
-    1034:	85 d2                	test   %edx,%edx
-    1036:	74 c8                	je     1000 <printf+0x30>
+     f54:	85 d2                	test   %edx,%edx
+     f56:	74 c8                	je     f20 <printf+0x30>
       }
     } else if(state == '%'){
-    1038:	83 fa 25             	cmp    $0x25,%edx
-    103b:	75 e7                	jne    1024 <printf+0x54>
+     f58:	83 fa 25             	cmp    $0x25,%edx
+     f5b:	75 e7                	jne    f44 <printf+0x54>
       if(c == 'd'){
-    103d:	83 f8 64             	cmp    $0x64,%eax
-    1040:	0f 84 9a 00 00 00    	je     10e0 <printf+0x110>
+     f5d:	83 f8 64             	cmp    $0x64,%eax
+     f60:	0f 84 9a 00 00 00    	je     1000 <printf+0x110>
         printint(fd, *ap, 10, 1);
         ap++;
       } else if(c == 'x' || c == 'p'){
-    1046:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
-    104c:	83 f9 70             	cmp    $0x70,%ecx
-    104f:	74 5f                	je     10b0 <printf+0xe0>
+     f66:	81 e1 f7 00 00 00    	and    $0xf7,%ecx
+     f6c:	83 f9 70             	cmp    $0x70,%ecx
+     f6f:	74 5f                	je     fd0 <printf+0xe0>
         printint(fd, *ap, 16, 0);
         ap++;
       } else if(c == 's'){
-    1051:	83 f8 73             	cmp    $0x73,%eax
-    1054:	0f 84 d6 00 00 00    	je     1130 <printf+0x160>
+     f71:	83 f8 73             	cmp    $0x73,%eax
+     f74:	0f 84 d6 00 00 00    	je     1050 <printf+0x160>
           s = "(null)";
         while(*s != 0){
           putc(fd, *s);
           s++;
         }
       } else if(c == 'c'){
-    105a:	83 f8 63             	cmp    $0x63,%eax
-    105d:	0f 84 8d 00 00 00    	je     10f0 <printf+0x120>
+     f7a:	83 f8 63             	cmp    $0x63,%eax
+     f7d:	0f 84 8d 00 00 00    	je     1010 <printf+0x120>
         putc(fd, *ap);
         ap++;
       } else if(c == '%'){
-    1063:	83 f8 25             	cmp    $0x25,%eax
-    1066:	0f 84 b4 00 00 00    	je     1120 <printf+0x150>
+     f83:	83 f8 25             	cmp    $0x25,%eax
+     f86:	0f 84 b4 00 00 00    	je     1040 <printf+0x150>
   write(fd, &c, 1);
-    106c:	83 ec 04             	sub    $0x4,%esp
-    106f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    1073:	6a 01                	push   $0x1
-    1075:	57                   	push   %edi
-    1076:	ff 75 08             	pushl  0x8(%ebp)
-    1079:	e8 15 fe ff ff       	call   e93 <write>
+     f8c:	83 ec 04             	sub    $0x4,%esp
+     f8f:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+     f93:	6a 01                	push   $0x1
+     f95:	57                   	push   %edi
+     f96:	ff 75 08             	pushl  0x8(%ebp)
+     f99:	e8 15 fe ff ff       	call   db3 <write>
         putc(fd, c);
       } else {
         // Unknown % sequence.  Print it to draw attention.
         putc(fd, '%');
         putc(fd, c);
-    107e:	88 5d e7             	mov    %bl,-0x19(%ebp)
+     f9e:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    1081:	83 c4 0c             	add    $0xc,%esp
-    1084:	6a 01                	push   $0x1
-    1086:	83 c6 01             	add    $0x1,%esi
-    1089:	57                   	push   %edi
-    108a:	ff 75 08             	pushl  0x8(%ebp)
-    108d:	e8 01 fe ff ff       	call   e93 <write>
+     fa1:	83 c4 0c             	add    $0xc,%esp
+     fa4:	6a 01                	push   $0x1
+     fa6:	83 c6 01             	add    $0x1,%esi
+     fa9:	57                   	push   %edi
+     faa:	ff 75 08             	pushl  0x8(%ebp)
+     fad:	e8 01 fe ff ff       	call   db3 <write>
   for(i = 0; fmt[i]; i++){
-    1092:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
+     fb2:	0f b6 5e ff          	movzbl -0x1(%esi),%ebx
         putc(fd, c);
-    1096:	83 c4 10             	add    $0x10,%esp
+     fb6:	83 c4 10             	add    $0x10,%esp
       }
       state = 0;
-    1099:	31 d2                	xor    %edx,%edx
+     fb9:	31 d2                	xor    %edx,%edx
   for(i = 0; fmt[i]; i++){
-    109b:	84 db                	test   %bl,%bl
-    109d:	75 8f                	jne    102e <printf+0x5e>
+     fbb:	84 db                	test   %bl,%bl
+     fbd:	75 8f                	jne    f4e <printf+0x5e>
     }
   }
 }
-    109f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    10a2:	5b                   	pop    %ebx
-    10a3:	5e                   	pop    %esi
-    10a4:	5f                   	pop    %edi
-    10a5:	5d                   	pop    %ebp
-    10a6:	c3                   	ret    
-    10a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    10ae:	66 90                	xchg   %ax,%ax
+     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fc2:	5b                   	pop    %ebx
+     fc3:	5e                   	pop    %esi
+     fc4:	5f                   	pop    %edi
+     fc5:	5d                   	pop    %ebp
+     fc6:	c3                   	ret    
+     fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fce:	66 90                	xchg   %ax,%ax
         printint(fd, *ap, 16, 0);
-    10b0:	83 ec 0c             	sub    $0xc,%esp
-    10b3:	b9 10 00 00 00       	mov    $0x10,%ecx
-    10b8:	6a 00                	push   $0x0
-    10ba:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    10bd:	8b 45 08             	mov    0x8(%ebp),%eax
-    10c0:	8b 13                	mov    (%ebx),%edx
-    10c2:	e8 59 fe ff ff       	call   f20 <printint>
+     fd0:	83 ec 0c             	sub    $0xc,%esp
+     fd3:	b9 10 00 00 00       	mov    $0x10,%ecx
+     fd8:	6a 00                	push   $0x0
+     fda:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+     fdd:	8b 45 08             	mov    0x8(%ebp),%eax
+     fe0:	8b 13                	mov    (%ebx),%edx
+     fe2:	e8 59 fe ff ff       	call   e40 <printint>
         ap++;
-    10c7:	89 d8                	mov    %ebx,%eax
-    10c9:	83 c4 10             	add    $0x10,%esp
+     fe7:	89 d8                	mov    %ebx,%eax
+     fe9:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    10cc:	31 d2                	xor    %edx,%edx
+     fec:	31 d2                	xor    %edx,%edx
         ap++;
-    10ce:	83 c0 04             	add    $0x4,%eax
-    10d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    10d4:	e9 4b ff ff ff       	jmp    1024 <printf+0x54>
-    10d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fee:	83 c0 04             	add    $0x4,%eax
+     ff1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     ff4:	e9 4b ff ff ff       	jmp    f44 <printf+0x54>
+     ff9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
         printint(fd, *ap, 10, 1);
-    10e0:	83 ec 0c             	sub    $0xc,%esp
-    10e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    10e8:	6a 01                	push   $0x1
-    10ea:	eb ce                	jmp    10ba <printf+0xea>
-    10ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1000:	83 ec 0c             	sub    $0xc,%esp
+    1003:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    1008:	6a 01                	push   $0x1
+    100a:	eb ce                	jmp    fda <printf+0xea>
+    100c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
         putc(fd, *ap);
-    10f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
+    1010:	8b 5d d0             	mov    -0x30(%ebp),%ebx
   write(fd, &c, 1);
-    10f3:	83 ec 04             	sub    $0x4,%esp
+    1013:	83 ec 04             	sub    $0x4,%esp
         putc(fd, *ap);
-    10f6:	8b 03                	mov    (%ebx),%eax
+    1016:	8b 03                	mov    (%ebx),%eax
   write(fd, &c, 1);
-    10f8:	6a 01                	push   $0x1
+    1018:	6a 01                	push   $0x1
         ap++;
-    10fa:	83 c3 04             	add    $0x4,%ebx
+    101a:	83 c3 04             	add    $0x4,%ebx
   write(fd, &c, 1);
-    10fd:	57                   	push   %edi
-    10fe:	ff 75 08             	pushl  0x8(%ebp)
+    101d:	57                   	push   %edi
+    101e:	ff 75 08             	pushl  0x8(%ebp)
         putc(fd, *ap);
-    1101:	88 45 e7             	mov    %al,-0x19(%ebp)
+    1021:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1104:	e8 8a fd ff ff       	call   e93 <write>
+    1024:	e8 8a fd ff ff       	call   db3 <write>
         ap++;
-    1109:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    110c:	83 c4 10             	add    $0x10,%esp
+    1029:	89 5d d0             	mov    %ebx,-0x30(%ebp)
+    102c:	83 c4 10             	add    $0x10,%esp
       state = 0;
-    110f:	31 d2                	xor    %edx,%edx
-    1111:	e9 0e ff ff ff       	jmp    1024 <printf+0x54>
-    1116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    111d:	8d 76 00             	lea    0x0(%esi),%esi
+    102f:	31 d2                	xor    %edx,%edx
+    1031:	e9 0e ff ff ff       	jmp    f44 <printf+0x54>
+    1036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    103d:	8d 76 00             	lea    0x0(%esi),%esi
         putc(fd, c);
-    1120:	88 5d e7             	mov    %bl,-0x19(%ebp)
+    1040:	88 5d e7             	mov    %bl,-0x19(%ebp)
   write(fd, &c, 1);
-    1123:	83 ec 04             	sub    $0x4,%esp
-    1126:	e9 59 ff ff ff       	jmp    1084 <printf+0xb4>
-    112b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    112f:	90                   	nop
+    1043:	83 ec 04             	sub    $0x4,%esp
+    1046:	e9 59 ff ff ff       	jmp    fa4 <printf+0xb4>
+    104b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    104f:	90                   	nop
         s = (char*)*ap;
-    1130:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    1133:	8b 18                	mov    (%eax),%ebx
+    1050:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    1053:	8b 18                	mov    (%eax),%ebx
         ap++;
-    1135:	83 c0 04             	add    $0x4,%eax
-    1138:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    1055:	83 c0 04             	add    $0x4,%eax
+    1058:	89 45 d0             	mov    %eax,-0x30(%ebp)
         if(s == 0)
-    113b:	85 db                	test   %ebx,%ebx
-    113d:	74 17                	je     1156 <printf+0x186>
+    105b:	85 db                	test   %ebx,%ebx
+    105d:	74 17                	je     1076 <printf+0x186>
         while(*s != 0){
-    113f:	0f b6 03             	movzbl (%ebx),%eax
+    105f:	0f b6 03             	movzbl (%ebx),%eax
       state = 0;
-    1142:	31 d2                	xor    %edx,%edx
+    1062:	31 d2                	xor    %edx,%edx
         while(*s != 0){
-    1144:	84 c0                	test   %al,%al
-    1146:	0f 84 d8 fe ff ff    	je     1024 <printf+0x54>
-    114c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    114f:	89 de                	mov    %ebx,%esi
-    1151:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1154:	eb 1a                	jmp    1170 <printf+0x1a0>
+    1064:	84 c0                	test   %al,%al
+    1066:	0f 84 d8 fe ff ff    	je     f44 <printf+0x54>
+    106c:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    106f:	89 de                	mov    %ebx,%esi
+    1071:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1074:	eb 1a                	jmp    1090 <printf+0x1a0>
           s = "(null)";
-    1156:	bb 24 14 00 00       	mov    $0x1424,%ebx
+    1076:	bb 40 13 00 00       	mov    $0x1340,%ebx
         while(*s != 0){
-    115b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    115e:	b8 28 00 00 00       	mov    $0x28,%eax
-    1163:	89 de                	mov    %ebx,%esi
-    1165:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    1168:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    116f:	90                   	nop
+    107b:	89 75 d4             	mov    %esi,-0x2c(%ebp)
+    107e:	b8 28 00 00 00       	mov    $0x28,%eax
+    1083:	89 de                	mov    %ebx,%esi
+    1085:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    1088:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    108f:	90                   	nop
   write(fd, &c, 1);
-    1170:	83 ec 04             	sub    $0x4,%esp
+    1090:	83 ec 04             	sub    $0x4,%esp
           s++;
-    1173:	83 c6 01             	add    $0x1,%esi
-    1176:	88 45 e7             	mov    %al,-0x19(%ebp)
+    1093:	83 c6 01             	add    $0x1,%esi
+    1096:	88 45 e7             	mov    %al,-0x19(%ebp)
   write(fd, &c, 1);
-    1179:	6a 01                	push   $0x1
-    117b:	57                   	push   %edi
-    117c:	53                   	push   %ebx
-    117d:	e8 11 fd ff ff       	call   e93 <write>
+    1099:	6a 01                	push   $0x1
+    109b:	57                   	push   %edi
+    109c:	53                   	push   %ebx
+    109d:	e8 11 fd ff ff       	call   db3 <write>
         while(*s != 0){
-    1182:	0f b6 06             	movzbl (%esi),%eax
-    1185:	83 c4 10             	add    $0x10,%esp
-    1188:	84 c0                	test   %al,%al
-    118a:	75 e4                	jne    1170 <printf+0x1a0>
-    118c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
+    10a2:	0f b6 06             	movzbl (%esi),%eax
+    10a5:	83 c4 10             	add    $0x10,%esp
+    10a8:	84 c0                	test   %al,%al
+    10aa:	75 e4                	jne    1090 <printf+0x1a0>
+    10ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
       state = 0;
-    118f:	31 d2                	xor    %edx,%edx
-    1191:	e9 8e fe ff ff       	jmp    1024 <printf+0x54>
-    1196:	66 90                	xchg   %ax,%ax
-    1198:	66 90                	xchg   %ax,%ax
-    119a:	66 90                	xchg   %ax,%ax
-    119c:	66 90                	xchg   %ax,%ax
-    119e:	66 90                	xchg   %ax,%ax
+    10af:	31 d2                	xor    %edx,%edx
+    10b1:	e9 8e fe ff ff       	jmp    f44 <printf+0x54>
+    10b6:	66 90                	xchg   %ax,%ax
+    10b8:	66 90                	xchg   %ax,%ax
+    10ba:	66 90                	xchg   %ax,%ax
+    10bc:	66 90                	xchg   %ax,%ax
+    10be:	66 90                	xchg   %ax,%ax
 
-000011a0 <free>:
+000010c0 <free>:
 static Header base;
 static Header *freep;
 
 void
 free(void *ap)
 {
-    11a0:	f3 0f 1e fb          	endbr32 
-    11a4:	55                   	push   %ebp
+    10c0:	f3 0f 1e fb          	endbr32 
+    10c4:	55                   	push   %ebp
   Header *bp, *p;
 
   bp = (Header*)ap - 1;
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    11a5:	a1 a4 1a 00 00       	mov    0x1aa4,%eax
+    10c5:	a1 a4 19 00 00       	mov    0x19a4,%eax
 {
-    11aa:	89 e5                	mov    %esp,%ebp
-    11ac:	57                   	push   %edi
-    11ad:	56                   	push   %esi
-    11ae:	53                   	push   %ebx
-    11af:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    11b2:	8b 10                	mov    (%eax),%edx
+    10ca:	89 e5                	mov    %esp,%ebp
+    10cc:	57                   	push   %edi
+    10cd:	56                   	push   %esi
+    10ce:	53                   	push   %ebx
+    10cf:	8b 5d 08             	mov    0x8(%ebp),%ebx
+    10d2:	8b 10                	mov    (%eax),%edx
   bp = (Header*)ap - 1;
-    11b4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+    10d4:	8d 4b f8             	lea    -0x8(%ebx),%ecx
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    11b7:	39 c8                	cmp    %ecx,%eax
-    11b9:	73 15                	jae    11d0 <free+0x30>
-    11bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    11bf:	90                   	nop
-    11c0:	39 d1                	cmp    %edx,%ecx
-    11c2:	72 14                	jb     11d8 <free+0x38>
+    10d7:	39 c8                	cmp    %ecx,%eax
+    10d9:	73 15                	jae    10f0 <free+0x30>
+    10db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    10df:	90                   	nop
+    10e0:	39 d1                	cmp    %edx,%ecx
+    10e2:	72 14                	jb     10f8 <free+0x38>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    11c4:	39 d0                	cmp    %edx,%eax
-    11c6:	73 10                	jae    11d8 <free+0x38>
+    10e4:	39 d0                	cmp    %edx,%eax
+    10e6:	73 10                	jae    10f8 <free+0x38>
 {
-    11c8:	89 d0                	mov    %edx,%eax
+    10e8:	89 d0                	mov    %edx,%eax
   for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    11ca:	8b 10                	mov    (%eax),%edx
-    11cc:	39 c8                	cmp    %ecx,%eax
-    11ce:	72 f0                	jb     11c0 <free+0x20>
+    10ea:	8b 10                	mov    (%eax),%edx
+    10ec:	39 c8                	cmp    %ecx,%eax
+    10ee:	72 f0                	jb     10e0 <free+0x20>
     if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    11d0:	39 d0                	cmp    %edx,%eax
-    11d2:	72 f4                	jb     11c8 <free+0x28>
-    11d4:	39 d1                	cmp    %edx,%ecx
-    11d6:	73 f0                	jae    11c8 <free+0x28>
+    10f0:	39 d0                	cmp    %edx,%eax
+    10f2:	72 f4                	jb     10e8 <free+0x28>
+    10f4:	39 d1                	cmp    %edx,%ecx
+    10f6:	73 f0                	jae    10e8 <free+0x28>
       break;
   if(bp + bp->s.size == p->s.ptr){
-    11d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    11db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    11de:	39 fa                	cmp    %edi,%edx
-    11e0:	74 1e                	je     1200 <free+0x60>
+    10f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    10fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    10fe:	39 fa                	cmp    %edi,%edx
+    1100:	74 1e                	je     1120 <free+0x60>
     bp->s.size += p->s.ptr->s.size;
     bp->s.ptr = p->s.ptr->s.ptr;
   } else
     bp->s.ptr = p->s.ptr;
-    11e2:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1102:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    11e5:	8b 50 04             	mov    0x4(%eax),%edx
-    11e8:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    11eb:	39 f1                	cmp    %esi,%ecx
-    11ed:	74 28                	je     1217 <free+0x77>
+    1105:	8b 50 04             	mov    0x4(%eax),%edx
+    1108:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    110b:	39 f1                	cmp    %esi,%ecx
+    110d:	74 28                	je     1137 <free+0x77>
     p->s.size += bp->s.size;
     p->s.ptr = bp->s.ptr;
   } else
     p->s.ptr = bp;
-    11ef:	89 08                	mov    %ecx,(%eax)
+    110f:	89 08                	mov    %ecx,(%eax)
   freep = p;
 }
-    11f1:	5b                   	pop    %ebx
+    1111:	5b                   	pop    %ebx
   freep = p;
-    11f2:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+    1112:	a3 a4 19 00 00       	mov    %eax,0x19a4
 }
-    11f7:	5e                   	pop    %esi
-    11f8:	5f                   	pop    %edi
-    11f9:	5d                   	pop    %ebp
-    11fa:	c3                   	ret    
-    11fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    11ff:	90                   	nop
+    1117:	5e                   	pop    %esi
+    1118:	5f                   	pop    %edi
+    1119:	5d                   	pop    %ebp
+    111a:	c3                   	ret    
+    111b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    111f:	90                   	nop
     bp->s.size += p->s.ptr->s.size;
-    1200:	03 72 04             	add    0x4(%edx),%esi
-    1203:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    1120:	03 72 04             	add    0x4(%edx),%esi
+    1123:	89 73 fc             	mov    %esi,-0x4(%ebx)
     bp->s.ptr = p->s.ptr->s.ptr;
-    1206:	8b 10                	mov    (%eax),%edx
-    1208:	8b 12                	mov    (%edx),%edx
-    120a:	89 53 f8             	mov    %edx,-0x8(%ebx)
+    1126:	8b 10                	mov    (%eax),%edx
+    1128:	8b 12                	mov    (%edx),%edx
+    112a:	89 53 f8             	mov    %edx,-0x8(%ebx)
   if(p + p->s.size == bp){
-    120d:	8b 50 04             	mov    0x4(%eax),%edx
-    1210:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1213:	39 f1                	cmp    %esi,%ecx
-    1215:	75 d8                	jne    11ef <free+0x4f>
+    112d:	8b 50 04             	mov    0x4(%eax),%edx
+    1130:	8d 34 d0             	lea    (%eax,%edx,8),%esi
+    1133:	39 f1                	cmp    %esi,%ecx
+    1135:	75 d8                	jne    110f <free+0x4f>
     p->s.size += bp->s.size;
-    1217:	03 53 fc             	add    -0x4(%ebx),%edx
+    1137:	03 53 fc             	add    -0x4(%ebx),%edx
   freep = p;
-    121a:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+    113a:	a3 a4 19 00 00       	mov    %eax,0x19a4
     p->s.size += bp->s.size;
-    121f:	89 50 04             	mov    %edx,0x4(%eax)
+    113f:	89 50 04             	mov    %edx,0x4(%eax)
     p->s.ptr = bp->s.ptr;
-    1222:	8b 53 f8             	mov    -0x8(%ebx),%edx
-    1225:	89 10                	mov    %edx,(%eax)
+    1142:	8b 53 f8             	mov    -0x8(%ebx),%edx
+    1145:	89 10                	mov    %edx,(%eax)
 }
-    1227:	5b                   	pop    %ebx
-    1228:	5e                   	pop    %esi
-    1229:	5f                   	pop    %edi
-    122a:	5d                   	pop    %ebp
-    122b:	c3                   	ret    
-    122c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1147:	5b                   	pop    %ebx
+    1148:	5e                   	pop    %esi
+    1149:	5f                   	pop    %edi
+    114a:	5d                   	pop    %ebp
+    114b:	c3                   	ret    
+    114c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-00001230 <malloc>:
+00001150 <malloc>:
   return freep;
 }
 
 void*
 malloc(uint nbytes)
 {
-    1230:	f3 0f 1e fb          	endbr32 
-    1234:	55                   	push   %ebp
-    1235:	89 e5                	mov    %esp,%ebp
-    1237:	57                   	push   %edi
-    1238:	56                   	push   %esi
-    1239:	53                   	push   %ebx
-    123a:	83 ec 1c             	sub    $0x1c,%esp
+    1150:	f3 0f 1e fb          	endbr32 
+    1154:	55                   	push   %ebp
+    1155:	89 e5                	mov    %esp,%ebp
+    1157:	57                   	push   %edi
+    1158:	56                   	push   %esi
+    1159:	53                   	push   %ebx
+    115a:	83 ec 1c             	sub    $0x1c,%esp
   Header *p, *prevp;
   uint nunits;
 
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    123d:	8b 45 08             	mov    0x8(%ebp),%eax
+    115d:	8b 45 08             	mov    0x8(%ebp),%eax
   if((prevp = freep) == 0){
-    1240:	8b 3d a4 1a 00 00    	mov    0x1aa4,%edi
+    1160:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
   nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1246:	8d 70 07             	lea    0x7(%eax),%esi
-    1249:	c1 ee 03             	shr    $0x3,%esi
-    124c:	83 c6 01             	add    $0x1,%esi
+    1166:	8d 70 07             	lea    0x7(%eax),%esi
+    1169:	c1 ee 03             	shr    $0x3,%esi
+    116c:	83 c6 01             	add    $0x1,%esi
   if((prevp = freep) == 0){
-    124f:	85 ff                	test   %edi,%edi
-    1251:	0f 84 a9 00 00 00    	je     1300 <malloc+0xd0>
+    116f:	85 ff                	test   %edi,%edi
+    1171:	0f 84 a9 00 00 00    	je     1220 <malloc+0xd0>
     base.s.ptr = freep = prevp = &base;
     base.s.size = 0;
   }
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1257:	8b 07                	mov    (%edi),%eax
+    1177:	8b 07                	mov    (%edi),%eax
     if(p->s.size >= nunits){
-    1259:	8b 48 04             	mov    0x4(%eax),%ecx
-    125c:	39 f1                	cmp    %esi,%ecx
-    125e:	73 6d                	jae    12cd <malloc+0x9d>
-    1260:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
-    1266:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    126b:	0f 43 de             	cmovae %esi,%ebx
+    1179:	8b 48 04             	mov    0x4(%eax),%ecx
+    117c:	39 f1                	cmp    %esi,%ecx
+    117e:	73 6d                	jae    11ed <malloc+0x9d>
+    1180:	81 fe 00 10 00 00    	cmp    $0x1000,%esi
+    1186:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    118b:	0f 43 de             	cmovae %esi,%ebx
   p = sbrk(nu * sizeof(Header));
-    126e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
-    1275:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-    1278:	eb 17                	jmp    1291 <malloc+0x61>
-    127a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    118e:	8d 0c dd 00 00 00 00 	lea    0x0(,%ebx,8),%ecx
+    1195:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
+    1198:	eb 17                	jmp    11b1 <malloc+0x61>
+    119a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1280:	8b 10                	mov    (%eax),%edx
+    11a0:	8b 10                	mov    (%eax),%edx
     if(p->s.size >= nunits){
-    1282:	8b 4a 04             	mov    0x4(%edx),%ecx
-    1285:	39 f1                	cmp    %esi,%ecx
-    1287:	73 4f                	jae    12d8 <malloc+0xa8>
-    1289:	8b 3d a4 1a 00 00    	mov    0x1aa4,%edi
-    128f:	89 d0                	mov    %edx,%eax
+    11a2:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11a5:	39 f1                	cmp    %esi,%ecx
+    11a7:	73 4f                	jae    11f8 <malloc+0xa8>
+    11a9:	8b 3d a4 19 00 00    	mov    0x19a4,%edi
+    11af:	89 d0                	mov    %edx,%eax
         p->s.size = nunits;
       }
       freep = prevp;
       return (void*)(p + 1);
     }
     if(p == freep)
-    1291:	39 c7                	cmp    %eax,%edi
-    1293:	75 eb                	jne    1280 <malloc+0x50>
+    11b1:	39 c7                	cmp    %eax,%edi
+    11b3:	75 eb                	jne    11a0 <malloc+0x50>
   p = sbrk(nu * sizeof(Header));
-    1295:	83 ec 0c             	sub    $0xc,%esp
-    1298:	ff 75 e4             	pushl  -0x1c(%ebp)
-    129b:	e8 5b fc ff ff       	call   efb <sbrk>
+    11b5:	83 ec 0c             	sub    $0xc,%esp
+    11b8:	ff 75 e4             	pushl  -0x1c(%ebp)
+    11bb:	e8 5b fc ff ff       	call   e1b <sbrk>
   if(p == (char*)-1)
-    12a0:	83 c4 10             	add    $0x10,%esp
-    12a3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    12a6:	74 1b                	je     12c3 <malloc+0x93>
+    11c0:	83 c4 10             	add    $0x10,%esp
+    11c3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    11c6:	74 1b                	je     11e3 <malloc+0x93>
   hp->s.size = nu;
-    12a8:	89 58 04             	mov    %ebx,0x4(%eax)
+    11c8:	89 58 04             	mov    %ebx,0x4(%eax)
   free((void*)(hp + 1));
-    12ab:	83 ec 0c             	sub    $0xc,%esp
-    12ae:	83 c0 08             	add    $0x8,%eax
-    12b1:	50                   	push   %eax
-    12b2:	e8 e9 fe ff ff       	call   11a0 <free>
+    11cb:	83 ec 0c             	sub    $0xc,%esp
+    11ce:	83 c0 08             	add    $0x8,%eax
+    11d1:	50                   	push   %eax
+    11d2:	e8 e9 fe ff ff       	call   10c0 <free>
   return freep;
-    12b7:	a1 a4 1a 00 00       	mov    0x1aa4,%eax
+    11d7:	a1 a4 19 00 00       	mov    0x19a4,%eax
       if((p = morecore(nunits)) == 0)
-    12bc:	83 c4 10             	add    $0x10,%esp
-    12bf:	85 c0                	test   %eax,%eax
-    12c1:	75 bd                	jne    1280 <malloc+0x50>
+    11dc:	83 c4 10             	add    $0x10,%esp
+    11df:	85 c0                	test   %eax,%eax
+    11e1:	75 bd                	jne    11a0 <malloc+0x50>
         return 0;
   }
 }
-    12c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    11e3:	8d 65 f4             	lea    -0xc(%ebp),%esp
         return 0;
-    12c6:	31 c0                	xor    %eax,%eax
+    11e6:	31 c0                	xor    %eax,%eax
 }
-    12c8:	5b                   	pop    %ebx
-    12c9:	5e                   	pop    %esi
-    12ca:	5f                   	pop    %edi
-    12cb:	5d                   	pop    %ebp
-    12cc:	c3                   	ret    
+    11e8:	5b                   	pop    %ebx
+    11e9:	5e                   	pop    %esi
+    11ea:	5f                   	pop    %edi
+    11eb:	5d                   	pop    %ebp
+    11ec:	c3                   	ret    
     if(p->s.size >= nunits){
-    12cd:	89 c2                	mov    %eax,%edx
-    12cf:	89 f8                	mov    %edi,%eax
-    12d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    11ed:	89 c2                	mov    %eax,%edx
+    11ef:	89 f8                	mov    %edi,%eax
+    11f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->s.size == nunits)
-    12d8:	39 ce                	cmp    %ecx,%esi
-    12da:	74 54                	je     1330 <malloc+0x100>
+    11f8:	39 ce                	cmp    %ecx,%esi
+    11fa:	74 54                	je     1250 <malloc+0x100>
         p->s.size -= nunits;
-    12dc:	29 f1                	sub    %esi,%ecx
-    12de:	89 4a 04             	mov    %ecx,0x4(%edx)
+    11fc:	29 f1                	sub    %esi,%ecx
+    11fe:	89 4a 04             	mov    %ecx,0x4(%edx)
         p += p->s.size;
-    12e1:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
+    1201:	8d 14 ca             	lea    (%edx,%ecx,8),%edx
         p->s.size = nunits;
-    12e4:	89 72 04             	mov    %esi,0x4(%edx)
+    1204:	89 72 04             	mov    %esi,0x4(%edx)
       freep = prevp;
-    12e7:	a3 a4 1a 00 00       	mov    %eax,0x1aa4
+    1207:	a3 a4 19 00 00       	mov    %eax,0x19a4
 }
-    12ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    120c:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return (void*)(p + 1);
-    12ef:	8d 42 08             	lea    0x8(%edx),%eax
+    120f:	8d 42 08             	lea    0x8(%edx),%eax
 }
-    12f2:	5b                   	pop    %ebx
-    12f3:	5e                   	pop    %esi
-    12f4:	5f                   	pop    %edi
-    12f5:	5d                   	pop    %ebp
-    12f6:	c3                   	ret    
-    12f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    12fe:	66 90                	xchg   %ax,%ax
+    1212:	5b                   	pop    %ebx
+    1213:	5e                   	pop    %esi
+    1214:	5f                   	pop    %edi
+    1215:	5d                   	pop    %ebp
+    1216:	c3                   	ret    
+    1217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    121e:	66 90                	xchg   %ax,%ax
     base.s.ptr = freep = prevp = &base;
-    1300:	c7 05 a4 1a 00 00 a8 	movl   $0x1aa8,0x1aa4
-    1307:	1a 00 00 
+    1220:	c7 05 a4 19 00 00 a8 	movl   $0x19a8,0x19a4
+    1227:	19 00 00 
     base.s.size = 0;
-    130a:	bf a8 1a 00 00       	mov    $0x1aa8,%edi
+    122a:	bf a8 19 00 00       	mov    $0x19a8,%edi
     base.s.ptr = freep = prevp = &base;
-    130f:	c7 05 a8 1a 00 00 a8 	movl   $0x1aa8,0x1aa8
-    1316:	1a 00 00 
+    122f:	c7 05 a8 19 00 00 a8 	movl   $0x19a8,0x19a8
+    1236:	19 00 00 
   for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1319:	89 f8                	mov    %edi,%eax
+    1239:	89 f8                	mov    %edi,%eax
     base.s.size = 0;
-    131b:	c7 05 ac 1a 00 00 00 	movl   $0x0,0x1aac
-    1322:	00 00 00 
+    123b:	c7 05 ac 19 00 00 00 	movl   $0x0,0x19ac
+    1242:	00 00 00 
     if(p->s.size >= nunits){
-    1325:	e9 36 ff ff ff       	jmp    1260 <malloc+0x30>
-    132a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    1245:	e9 36 ff ff ff       	jmp    1180 <malloc+0x30>
+    124a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
         prevp->s.ptr = p->s.ptr;
-    1330:	8b 0a                	mov    (%edx),%ecx
-    1332:	89 08                	mov    %ecx,(%eax)
-    1334:	eb b1                	jmp    12e7 <malloc+0xb7>
+    1250:	8b 0a                	mov    (%edx),%ecx
+    1252:	89 08                	mov    %ecx,(%eax)
+    1254:	eb b1                	jmp    1207 <malloc+0xb7>
diff -ruN g44/sh.c xv6-public/sh.c
--- g44/sh.c	2021-09-15 22:48:33.000000000 +0530
+++ xv6-public/sh.c	2021-08-20 21:48:44.751471296 +0530
@@ -141,27 +141,6 @@
   return 0;
 }
 
-int size=128;
-
-int historyA(void)
-{  
- 
-  
-  for(int i=15;i>=0;i--){
-   char*  buffer=(char*)malloc(size);
-   
- 
-   int val=history(buffer,i) ;
-   
-   if(val==0)
-   {  
-   printf(1,"%s \n",buffer);
-   }
-   
-   }
-   exit();
-  return 0;
-}
 int
 main(void)
 {
@@ -185,15 +164,6 @@
         printf(2, "cannot cd %s\n", buf+3);
       continue;
     }
-    if(buf[0] == 'h' && buf[1] == 'i' && buf[2] == 's' && buf[3] == 't'
-        && buf[4] == 'o' && buf[5] == 'r' && buf[6] == 'y') 
-    {
-      if(buf[7]=='\n' || buf[7]==' ')
-      {
-        historyA();
-        continue;
-      }
-    }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
     wait();
Binary files g44/sh.o and xv6-public/sh.o differ
diff -ruN g44/sh.sym xv6-public/sh.sym
--- g44/sh.sym	2021-09-15 23:29:32.099061091 +0530
+++ xv6-public/sh.sym	2021-08-30 22:38:24.808764382 +0530
@@ -1,8 +1,8 @@
 00000000 .text
-00001338 .rodata
-00001440 .eh_frame
-00001a1c .data
-00001a40 .bss
+00001258 .rodata
+0000135c .eh_frame
+00001918 .data
+00001940 .bss
 00000000 .comment
 00000000 .debug_aranges
 00000000 .debug_info
@@ -12,71 +12,68 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 sh.c
-00001a40 buf.1136
+00001940 buf.1123
 00000000 ulib.c
 00000000 printf.c
-00000f20 printint
-0000142c digits.1088
+00000e40 printint
+00001348 digits.1085
 00000000 umalloc.c
-00001aa4 freep
-00001aa8 base
-00000c10 strcpy
-00000fd0 printf
-00000e40 memmove
-00000ebb mknod
-00000450 execcmd
-00000d30 gets
-00000ef3 getpid
-00000930 parsepipe
-00000ba0 parsecmd
-00000550 backcmd
-000006f0 peek
-00000770 parseredirs
-00000590 gettoken
-00001230 malloc
-00000f03 sleep
-00001a24 whitespace
-00000420 fork1
-00000ae0 nulterminate
-00000e83 pipe
-00000190 getcmd
-00000e93 write
-00000f13 history
-00000ecb fstat
-00000ea3 kill
-00000ee3 chdir
-000009a0 parseline
-00000260 runcmd
-00000a50 parseblock
-00000eab exec
-00000e7b wait
-00001a1c symbols
-00000e8b read
-00000820 parseexec
-00000ec3 unlink
-00000240 panic
-00000e6b fork
-00000efb sbrk
-00000f0b uptime
-00001a30 __bss_start
-00000cd0 memset
+000019a4 freep
+000019a8 base
+00000b30 strcpy
+00000ef0 printf
+00000d60 memmove
+00000ddb mknod
+00000370 execcmd
+00000c50 gets
+00000e13 getpid
+00000850 parsepipe
+00000ac0 parsecmd
+00000470 backcmd
+00000610 peek
+00000690 parseredirs
+000004b0 gettoken
+00001150 malloc
+00000e23 sleep
+00001920 whitespace
+00000340 fork1
+00000a00 nulterminate
+00000da3 pipe
+00000110 getcmd
+00000db3 write
+00000deb fstat
+00000dc3 kill
+00000e03 chdir
+000008c0 parseline
+00000180 runcmd
+00000970 parseblock
+00000dcb exec
+00000d9b wait
+00001918 symbols
+00000dab read
+00000740 parseexec
+00000de3 unlink
+00000160 panic
+00000d8b fork
+00000e1b sbrk
+00000e2b uptime
+00001926 __bss_start
+00000bf0 memset
 00000000 main
-00001a2c size
-00000c40 strcmp
-00000eeb dup
-000004d0 pipecmd
-000001e0 historyA
-00000480 redircmd
-00000db0 stat
-00001a30 _edata
-00001ab0 _end
-00000ed3 link
-00000e73 exit
-00000e00 atoi
-00000c90 strlen
-00000eb3 open
-00000cf0 strchr
-00000edb mkdir
-00000e9b close
-00000510 listcmd
-000011a0 free
+00000b60 strcmp
+00000e0b dup
+000003f0 pipecmd
+000003a0 redircmd
+00000cd0 stat
+00001926 _edata
+000019b0 _end
+00000df3 link
+00000d93 exit
+00000d20 atoi
+00000bb0 strlen
+00000dd3 open
+00000c10 strchr
+00000dfb mkdir
+00000dbb close
+00000430 listcmd
+000010c0 free
Binary files g44/sleeplock.o and xv6-public/sleeplock.o differ
Binary files g44/spinlock.o and xv6-public/spinlock.o differ
Binary files g44/_stressfs and xv6-public/_stressfs differ
diff -ruN g44/stressfs.asm xv6-public/stressfs.asm
--- g44/stressfs.asm	2021-09-15 23:29:32.179061217 +0530
+++ xv6-public/stressfs.asm	2021-08-30 22:38:24.868764516 +0530
@@ -684,13 +684,10 @@
  43b:	b8 0e 00 00 00       	mov    $0xe,%eax
  440:	cd 40                	int    $0x40
  442:	c3                   	ret    
-
-00000443 <history>:
-//marco
-SYSCALL(history)
- 443:	b8 16 00 00 00       	mov    $0x16,%eax
- 448:	cd 40                	int    $0x40
- 44a:	c3                   	ret    
+ 443:	66 90                	xchg   %ax,%ax
+ 445:	66 90                	xchg   %ax,%ax
+ 447:	66 90                	xchg   %ax,%ax
+ 449:	66 90                	xchg   %ax,%ax
  44b:	66 90                	xchg   %ax,%ax
  44d:	66 90                	xchg   %ax,%ax
  44f:	90                   	nop
Binary files g44/stressfs.o and xv6-public/stressfs.o differ
diff -ruN g44/stressfs.sym xv6-public/stressfs.sym
--- g44/stressfs.sym	2021-09-15 23:29:32.183061223 +0530
+++ xv6-public/stressfs.sym	2021-08-30 22:38:24.872764525 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000450 printint
-00000894 digits.1088
+00000894 digits.1085
 00000000 umalloc.c
 00000b4c freep
 00000b50 base
@@ -28,7 +28,6 @@
 00000433 sleep
 000003b3 pipe
 000003c3 write
-00000443 history
 000003fb fstat
 000003d3 kill
 00000413 chdir
Binary files g44/string.o and xv6-public/string.o differ
Binary files g44/swtch.o and xv6-public/swtch.o differ
diff -ruN g44/syscall.c xv6-public/syscall.c
--- g44/syscall.c	2021-09-15 22:52:25.000000000 +0530
+++ xv6-public/syscall.c	2021-08-20 21:48:44.751471296 +0530
@@ -103,9 +103,6 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
-//adding system call prototye
-extern int sys_history(void);
-
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -129,7 +126,6 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
-[SYS_history]    sys_history,
 };
 
 void
diff -ruN g44/syscall.h xv6-public/syscall.h
--- g44/syscall.h	2021-09-15 22:52:30.000000000 +0530
+++ xv6-public/syscall.h	2021-08-20 21:48:44.751471296 +0530
@@ -20,5 +20,3 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-//our system call number
-#define SYS_history  22
Binary files g44/syscall.o and xv6-public/syscall.o differ
diff -ruN g44/sysfile.c xv6-public/sysfile.c
--- g44/sysfile.c	2021-08-20 22:33:47.000000000 +0530
+++ xv6-public/sysfile.c	2021-08-20 21:48:44.751471296 +0530
@@ -442,4 +442,3 @@
   fd[1] = fd1;
   return 0;
 }
-
Binary files g44/sysfile.o and xv6-public/sysfile.o differ
diff -ruN g44/sysproc.c xv6-public/sysproc.c
--- g44/sysproc.c	2021-09-15 23:01:27.000000000 +0530
+++ xv6-public/sysproc.c	2021-08-20 21:48:44.751471296 +0530
@@ -6,9 +6,6 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
-#include "console.h"
-
-#define EOF '\0'
 
 int
 sys_fork(void)
@@ -92,15 +89,3 @@
   release(&tickslock);
   return xticks;
 }
-
-///sys call added
-int sys_history(void)
-{
-  int history_id;
-  char* buffer;
-  if( argint(1,&history_id) == -1 )
-    return -1;
-  if((argptr(0,(char**)&buffer,history_id) == -1 ))
-    return -1;
-  return history(buffer,history_id);
-}
diff -ruN g44/sysproc.d xv6-public/sysproc.d
--- g44/sysproc.d	2021-09-15 23:29:25.723050935 +0530
+++ xv6-public/sysproc.d	2021-08-30 22:38:15.672747638 +0530
@@ -1,2 +1,2 @@
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h console.h
+ date.h param.h memlayout.h mmu.h proc.h
Binary files g44/sysproc.o and xv6-public/sysproc.o differ
Binary files g44/trapasm.o and xv6-public/trapasm.o differ
Binary files g44/trap.o and xv6-public/trap.o differ
Binary files g44/uart.o and xv6-public/uart.o differ
Binary files g44/ulib.o and xv6-public/ulib.o differ
Binary files g44/umalloc.o and xv6-public/umalloc.o differ
diff -ruN g44/user.h xv6-public/user.h
--- g44/user.h	2021-09-15 22:49:24.000000000 +0530
+++ xv6-public/user.h	2021-08-20 21:48:44.751471296 +0530
@@ -23,8 +23,6 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-//prtotype which user programs uses
-int history(char*,int);
 
 // ulib.c
 int stat(const char*, struct stat*);
Binary files g44/_usertests and xv6-public/_usertests differ
diff -ruN g44/usertests.asm xv6-public/usertests.asm
--- g44/usertests.asm	2021-09-15 23:29:32.667061989 +0530
+++ xv6-public/usertests.asm	2021-08-30 22:38:25.432765811 +0530
@@ -6080,13 +6080,10 @@
     3a1b:	b8 0e 00 00 00       	mov    $0xe,%eax
     3a20:	cd 40                	int    $0x40
     3a22:	c3                   	ret    
-
-00003a23 <history>:
-//marco
-SYSCALL(history)
-    3a23:	b8 16 00 00 00       	mov    $0x16,%eax
-    3a28:	cd 40                	int    $0x40
-    3a2a:	c3                   	ret    
+    3a23:	66 90                	xchg   %ax,%ax
+    3a25:	66 90                	xchg   %ax,%ax
+    3a27:	66 90                	xchg   %ax,%ax
+    3a29:	66 90                	xchg   %ax,%ax
     3a2b:	66 90                	xchg   %ax,%ax
     3a2d:	66 90                	xchg   %ax,%ax
     3a2f:	90                   	nop
Binary files g44/usertests.o and xv6-public/usertests.o differ
diff -ruN g44/usertests.sym xv6-public/usertests.sym
--- g44/usertests.sym	2021-09-15 23:29:32.671061996 +0530
+++ xv6-public/usertests.sym	2021-08-30 22:38:25.432765811 +0530
@@ -12,11 +12,11 @@
 00000000 .debug_loc
 00000000 .debug_ranges
 00000000 usertests.c
-00005f00 args.1452
+00005f00 args.1449
 00000000 ulib.c
 00000000 printf.c
 00003a30 printint
-000055e8 digits.1088
+000055e8 digits.1085
 00000000 umalloc.c
 00005f80 freep
 00005f84 base
@@ -46,7 +46,6 @@
 00005fa0 uninit
 00002a00 dirfile
 000039a3 write
-00003a23 history
 000032c0 bsstest
 00005ee4 echoargv
 000039db fstat
Binary files g44/usys.o and xv6-public/usys.o differ
diff -ruN g44/usys.S xv6-public/usys.S
--- g44/usys.S	2021-09-15 22:47:47.000000000 +0530
+++ xv6-public/usys.S	2021-08-20 21:48:44.751471296 +0530
@@ -29,5 +29,3 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
-//marco
-SYSCALL(history)
Binary files g44/vectors.o and xv6-public/vectors.o differ
Binary files g44/vm.o and xv6-public/vm.o differ
diff -ruN g44/.vscode/settings.json xv6-public/.vscode/settings.json
--- g44/.vscode/settings.json	2021-09-15 14:52:30.000000000 +0530
+++ xv6-public/.vscode/settings.json	1970-01-01 05:30:00.000000000 +0530
@@ -1,23 +0,0 @@
-{
-  "files.associations": {
-    "cstdio": "cpp",
-    "*.tcc": "cpp",
-    "functional": "cpp",
-    "string_view": "cpp",
-    "bitset": "c",
-    "algorithm": "c",
-    "memory": "c",
-    "random": "c",
-    "fstream": "c",
-    "iosfwd": "c",
-    "iostream": "c",
-    "istream": "c",
-    "ostream": "c",
-    "numeric": "c",
-    "ratio": "c",
-    "sstream": "c",
-    "streambuf": "c",
-    "cstring": "c",
-    "*.txx": "c"
-  }
-}
\ No newline at end of file
Binary files g44/_wc and xv6-public/_wc differ
diff -ruN g44/wc.asm xv6-public/wc.asm
--- g44/wc.asm	2021-09-15 23:29:32.715062065 +0530
+++ xv6-public/wc.asm	2021-08-30 22:38:25.512765997 +0530
@@ -727,13 +727,10 @@
  48b:	b8 0e 00 00 00       	mov    $0xe,%eax
  490:	cd 40                	int    $0x40
  492:	c3                   	ret    
-
-00000493 <history>:
-//marco
-SYSCALL(history)
- 493:	b8 16 00 00 00       	mov    $0x16,%eax
- 498:	cd 40                	int    $0x40
- 49a:	c3                   	ret    
+ 493:	66 90                	xchg   %ax,%ax
+ 495:	66 90                	xchg   %ax,%ax
+ 497:	66 90                	xchg   %ax,%ax
+ 499:	66 90                	xchg   %ax,%ax
  49b:	66 90                	xchg   %ax,%ax
  49d:	66 90                	xchg   %ax,%ax
  49f:	90                   	nop
Binary files g44/wc.o and xv6-public/wc.o differ
diff -ruN g44/wc.sym xv6-public/wc.sym
--- g44/wc.sym	2021-09-15 23:29:32.715062065 +0530
+++ xv6-public/wc.sym	2021-08-30 22:38:25.520766014 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 000004a0 printint
-000008f8 digits.1088
+000008f8 digits.1085
 00000000 umalloc.c
 00000be0 freep
 00000be4 base
@@ -28,7 +28,6 @@
 00000483 sleep
 00000403 pipe
 00000413 write
-00000493 history
 0000044b fstat
 00000423 kill
 00000463 chdir
Binary files g44/xv6.img and xv6-public/xv6.img differ
Binary files g44/_zombie and xv6-public/_zombie differ
diff -ruN g44/zombie.asm xv6-public/zombie.asm
--- g44/zombie.asm	2021-09-15 23:29:32.771062154 +0530
+++ xv6-public/zombie.asm	2021-08-30 22:38:25.564766116 +0530
@@ -557,13 +557,10 @@
  32b:	b8 0e 00 00 00       	mov    $0xe,%eax
  330:	cd 40                	int    $0x40
  332:	c3                   	ret    
-
-00000333 <history>:
-//marco
-SYSCALL(history)
- 333:	b8 16 00 00 00       	mov    $0x16,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret    
+ 333:	66 90                	xchg   %ax,%ax
+ 335:	66 90                	xchg   %ax,%ax
+ 337:	66 90                	xchg   %ax,%ax
+ 339:	66 90                	xchg   %ax,%ax
  33b:	66 90                	xchg   %ax,%ax
  33d:	66 90                	xchg   %ax,%ax
  33f:	90                   	nop
Binary files g44/zombie.o and xv6-public/zombie.o differ
diff -ruN g44/zombie.sym xv6-public/zombie.sym
--- g44/zombie.sym	2021-09-15 23:29:32.775062160 +0530
+++ xv6-public/zombie.sym	2021-08-30 22:38:25.572766134 +0530
@@ -14,7 +14,7 @@
 00000000 ulib.c
 00000000 printf.c
 00000340 printint
-00000760 digits.1088
+00000760 digits.1085
 00000000 umalloc.c
 00000a08 freep
 00000a0c base
@@ -28,7 +28,6 @@
 00000323 sleep
 000002a3 pipe
 000002b3 write
-00000333 history
 000002eb fstat
 000002c3 kill
 00000303 chdir
